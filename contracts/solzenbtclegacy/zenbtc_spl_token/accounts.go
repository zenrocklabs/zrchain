// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zenbtc_spl_token

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type GlobalConfigAccount struct {
	// The authority which can update the config
	GlobalAuthority   ag_solanago.PublicKey
	MintAuthorities   []ag_solanago.PublicKey
	FeeAuthorities    []ag_solanago.PublicKey
	MintAddress       ag_solanago.PublicKey
	FeeWallet         ag_solanago.PublicKey
	BurnFeeBps        uint64
	MintCounter       ag_binary.Uint128
	RedemptionCounter ag_binary.Uint128
	Bump              uint8
}

var GlobalConfigAccountDiscriminator = [8]byte{149, 8, 156, 202, 160, 252, 176, 217}

func (obj GlobalConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GlobalConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `GlobalAuthority` param:
	err = encoder.Encode(obj.GlobalAuthority)
	if err != nil {
		return err
	}
	// Serialize `MintAuthorities` param:
	err = encoder.Encode(obj.MintAuthorities)
	if err != nil {
		return err
	}
	// Serialize `FeeAuthorities` param:
	err = encoder.Encode(obj.FeeAuthorities)
	if err != nil {
		return err
	}
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `FeeWallet` param:
	err = encoder.Encode(obj.FeeWallet)
	if err != nil {
		return err
	}
	// Serialize `BurnFeeBps` param:
	err = encoder.Encode(obj.BurnFeeBps)
	if err != nil {
		return err
	}
	// Serialize `MintCounter` param:
	err = encoder.Encode(obj.MintCounter)
	if err != nil {
		return err
	}
	// Serialize `RedemptionCounter` param:
	err = encoder.Encode(obj.RedemptionCounter)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GlobalConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[149 8 156 202 160 252 176 217]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `GlobalAuthority`:
	err = decoder.Decode(&obj.GlobalAuthority)
	if err != nil {
		return err
	}
	// Deserialize `MintAuthorities`:
	err = decoder.Decode(&obj.MintAuthorities)
	if err != nil {
		return err
	}
	// Deserialize `FeeAuthorities`:
	err = decoder.Decode(&obj.FeeAuthorities)
	if err != nil {
		return err
	}
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `FeeWallet`:
	err = decoder.Decode(&obj.FeeWallet)
	if err != nil {
		return err
	}
	// Deserialize `BurnFeeBps`:
	err = decoder.Decode(&obj.BurnFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `MintCounter`:
	err = decoder.Decode(&obj.MintCounter)
	if err != nil {
		return err
	}
	// Deserialize `RedemptionCounter`:
	err = decoder.Decode(&obj.RedemptionCounter)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}
