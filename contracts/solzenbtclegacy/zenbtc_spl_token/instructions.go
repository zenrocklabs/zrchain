// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zenbtc_spl_token

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "ZenbtcSplToken"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AddMintAuthority = ag_binary.TypeID([8]byte{41, 254, 251, 123, 155, 68, 213, 8})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_RemoveMintAuthority = ag_binary.TypeID([8]byte{33, 207, 52, 111, 106, 97, 9, 63})

	Instruction_Unwrap = ag_binary.TypeID([8]byte{126, 175, 198, 14, 212, 69, 50, 44})

	Instruction_UpdateBurnFeeBps = ag_binary.TypeID([8]byte{146, 113, 176, 103, 24, 243, 184, 43})

	Instruction_UpdateFeeWallet = ag_binary.TypeID([8]byte{236, 164, 201, 6, 176, 37, 80, 17})

	Instruction_UpdateGlobalAuthority = ag_binary.TypeID([8]byte{227, 181, 74, 196, 208, 21, 97, 213})

	Instruction_Wrap = ag_binary.TypeID([8]byte{178, 40, 10, 189, 228, 129, 186, 140})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AddMintAuthority:
		return "AddMintAuthority"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_RemoveMintAuthority:
		return "RemoveMintAuthority"
	case Instruction_Unwrap:
		return "Unwrap"
	case Instruction_UpdateBurnFeeBps:
		return "UpdateBurnFeeBps"
	case Instruction_UpdateFeeWallet:
		return "UpdateFeeWallet"
	case Instruction_UpdateGlobalAuthority:
		return "UpdateGlobalAuthority"
	case Instruction_Wrap:
		return "Wrap"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "add_mint_authority", Type: (*AddMintAuthority)(nil),
		},
		{
			Name: "initialize", Type: (*Initialize)(nil),
		},
		{
			Name: "remove_mint_authority", Type: (*RemoveMintAuthority)(nil),
		},
		{
			Name: "unwrap", Type: (*Unwrap)(nil),
		},
		{
			Name: "update_burn_fee_bps", Type: (*UpdateBurnFeeBps)(nil),
		},
		{
			Name: "update_fee_wallet", Type: (*UpdateFeeWallet)(nil),
		},
		{
			Name: "update_global_authority", Type: (*UpdateGlobalAuthority)(nil),
		},
		{
			Name: "wrap", Type: (*Wrap)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}

func DecodeInstructions(message *ag_solanago.Message) (instructions []*Instruction, err error) {
	for _, ins := range message.Instructions {
		var programID ag_solanago.PublicKey
		if programID, err = message.Program(ins.ProgramIDIndex); err != nil {
			return
		}
		if !programID.Equals(ProgramID) {
			continue
		}
		var accounts []*ag_solanago.AccountMeta
		if accounts, err = ins.ResolveInstructionAccounts(message); err != nil {
			return
		}
		var insDecoded *Instruction
		if insDecoded, err = decodeInstruction(accounts, ins.Data); err != nil {
			return
		}
		instructions = append(instructions, insDecoded)
	}
	return
}
