// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zenbtc_spl_token

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Wrap is the `wrap` instruction.
type Wrap struct {
	Args *WrapArgs

	// [0] = [WRITE, SIGNER] signer
	//
	// [1] = [WRITE] global_config
	//
	// [2] = [WRITE] spl_multisig
	//
	// [3] = [WRITE] mint
	//
	// [4] = [WRITE] fee_wallet
	//
	// [5] = [WRITE] fee_wallet_ata
	//
	// [6] = [] receiver
	//
	// [7] = [WRITE] receiver_ata
	//
	// [8] = [] system_program
	//
	// [9] = [] token_program
	//
	// [10] = [] associated_token_program
	//
	// [11] = [] event_store_program
	// ··········· EventStore program for CPI calls
	//
	// [12] = [] event_store_global_config
	// ··········· EventStore global config PDA
	//
	// [13] = [] calling_program
	// ··········· This program (zenbtc) as the calling program for EventStore CPI
	//
	// [14] = [] zenbtc_wrap_shard
	// ··········· Zenbtc wrap shard account (determined by event ID)
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWrapInstructionBuilder creates a new `Wrap` instruction builder.
func NewWrapInstructionBuilder() *Wrap {
	nd := &Wrap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[8] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[9] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[10] = ag_solanago.Meta(Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"])
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *Wrap) SetArgs(args WrapArgs) *Wrap {
	inst.Args = &args
	return inst
}

// SetSignerAccount sets the "signer" account.
func (inst *Wrap) SetSignerAccount(signer ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *Wrap) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *Wrap) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig).WRITE()
	return inst
}

func (inst *Wrap) findFindGlobalConfigAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: global_config
	seeds = append(seeds, []byte{byte(0x67), byte(0x6c), byte(0x6f), byte(0x62), byte(0x61), byte(0x6c), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindGlobalConfigAddressWithBumpSeed calculates GlobalConfig account address with given seeds and a known bump seed.
func (inst *Wrap) FindGlobalConfigAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindGlobalConfigAddress(bumpSeed)
	return
}

func (inst *Wrap) MustFindGlobalConfigAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindGlobalConfigAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindGlobalConfigAddress finds GlobalConfig account address with given seeds.
func (inst *Wrap) FindGlobalConfigAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindGlobalConfigAddress(0)
	return
}

func (inst *Wrap) MustFindGlobalConfigAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindGlobalConfigAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *Wrap) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSplMultisigAccount sets the "spl_multisig" account.
func (inst *Wrap) SetSplMultisigAccount(splMultisig ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(splMultisig).WRITE()
	return inst
}

// GetSplMultisigAccount gets the "spl_multisig" account.
func (inst *Wrap) GetSplMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *Wrap) SetMintAccount(mint ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *Wrap) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFeeWalletAccount sets the "fee_wallet" account.
func (inst *Wrap) SetFeeWalletAccount(feeWallet ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeWallet).WRITE()
	return inst
}

// GetFeeWalletAccount gets the "fee_wallet" account.
func (inst *Wrap) GetFeeWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeWalletAtaAccount sets the "fee_wallet_ata" account.
func (inst *Wrap) SetFeeWalletAtaAccount(feeWalletAta ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeWalletAta).WRITE()
	return inst
}

func (inst *Wrap) findFindFeeWalletAtaAddress(feeWallet ag_solanago.PublicKey, mint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: feeWallet
	seeds = append(seeds, feeWallet.Bytes())
	// const (raw): [6 221 246 225 215 101 161 147 217 203 225 70 206 235 121 172 28 180 133 237 95 91 55 145 58 140 245 133 126 255 0 169]
	seeds = append(seeds, []byte{byte(0x6), byte(0xdd), byte(0xf6), byte(0xe1), byte(0xd7), byte(0x65), byte(0xa1), byte(0x93), byte(0xd9), byte(0xcb), byte(0xe1), byte(0x46), byte(0xce), byte(0xeb), byte(0x79), byte(0xac), byte(0x1c), byte(0xb4), byte(0x85), byte(0xed), byte(0x5f), byte(0x5b), byte(0x37), byte(0x91), byte(0x3a), byte(0x8c), byte(0xf5), byte(0x85), byte(0x7e), byte(0xff), byte(0x0), byte(0xa9)})
	// path: mint
	seeds = append(seeds, mint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindFeeWalletAtaAddressWithBumpSeed calculates FeeWalletAta account address with given seeds and a known bump seed.
func (inst *Wrap) FindFeeWalletAtaAddressWithBumpSeed(feeWallet ag_solanago.PublicKey, mint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFeeWalletAtaAddress(feeWallet, mint, bumpSeed)
	return
}

func (inst *Wrap) MustFindFeeWalletAtaAddressWithBumpSeed(feeWallet ag_solanago.PublicKey, mint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFeeWalletAtaAddress(feeWallet, mint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFeeWalletAtaAddress finds FeeWalletAta account address with given seeds.
func (inst *Wrap) FindFeeWalletAtaAddress(feeWallet ag_solanago.PublicKey, mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFeeWalletAtaAddress(feeWallet, mint, 0)
	return
}

func (inst *Wrap) MustFindFeeWalletAtaAddress(feeWallet ag_solanago.PublicKey, mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFeeWalletAtaAddress(feeWallet, mint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFeeWalletAtaAccount gets the "fee_wallet_ata" account.
func (inst *Wrap) GetFeeWalletAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *Wrap) SetReceiverAccount(receiver ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(receiver)
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *Wrap) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetReceiverAtaAccount sets the "receiver_ata" account.
func (inst *Wrap) SetReceiverAtaAccount(receiverAta ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(receiverAta).WRITE()
	return inst
}

func (inst *Wrap) findFindReceiverAtaAddress(receiver ag_solanago.PublicKey, mint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: receiver
	seeds = append(seeds, receiver.Bytes())
	// const (raw): [6 221 246 225 215 101 161 147 217 203 225 70 206 235 121 172 28 180 133 237 95 91 55 145 58 140 245 133 126 255 0 169]
	seeds = append(seeds, []byte{byte(0x6), byte(0xdd), byte(0xf6), byte(0xe1), byte(0xd7), byte(0x65), byte(0xa1), byte(0x93), byte(0xd9), byte(0xcb), byte(0xe1), byte(0x46), byte(0xce), byte(0xeb), byte(0x79), byte(0xac), byte(0x1c), byte(0xb4), byte(0x85), byte(0xed), byte(0x5f), byte(0x5b), byte(0x37), byte(0x91), byte(0x3a), byte(0x8c), byte(0xf5), byte(0x85), byte(0x7e), byte(0xff), byte(0x0), byte(0xa9)})
	// path: mint
	seeds = append(seeds, mint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindReceiverAtaAddressWithBumpSeed calculates ReceiverAta account address with given seeds and a known bump seed.
func (inst *Wrap) FindReceiverAtaAddressWithBumpSeed(receiver ag_solanago.PublicKey, mint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindReceiverAtaAddress(receiver, mint, bumpSeed)
	return
}

func (inst *Wrap) MustFindReceiverAtaAddressWithBumpSeed(receiver ag_solanago.PublicKey, mint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiverAtaAddress(receiver, mint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindReceiverAtaAddress finds ReceiverAta account address with given seeds.
func (inst *Wrap) FindReceiverAtaAddress(receiver ag_solanago.PublicKey, mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindReceiverAtaAddress(receiver, mint, 0)
	return
}

func (inst *Wrap) MustFindReceiverAtaAddress(receiver ag_solanago.PublicKey, mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiverAtaAddress(receiver, mint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetReceiverAtaAccount gets the "receiver_ata" account.
func (inst *Wrap) GetReceiverAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Wrap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Wrap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *Wrap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *Wrap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *Wrap) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *Wrap) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetEventStoreProgramAccount sets the "event_store_program" account.
// EventStore program for CPI calls
func (inst *Wrap) SetEventStoreProgramAccount(eventStoreProgram ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(eventStoreProgram)
	return inst
}

// GetEventStoreProgramAccount gets the "event_store_program" account.
// EventStore program for CPI calls
func (inst *Wrap) GetEventStoreProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventStoreGlobalConfigAccount sets the "event_store_global_config" account.
// EventStore global config PDA
func (inst *Wrap) SetEventStoreGlobalConfigAccount(eventStoreGlobalConfig ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventStoreGlobalConfig)
	return inst
}

// GetEventStoreGlobalConfigAccount gets the "event_store_global_config" account.
// EventStore global config PDA
func (inst *Wrap) GetEventStoreGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetCallingProgramAccount sets the "calling_program" account.
// This program (zenbtc) as the calling program for EventStore CPI
func (inst *Wrap) SetCallingProgramAccount(callingProgram ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(callingProgram)
	return inst
}

// GetCallingProgramAccount gets the "calling_program" account.
// This program (zenbtc) as the calling program for EventStore CPI
func (inst *Wrap) GetCallingProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetZenbtcWrapShardAccount sets the "zenbtc_wrap_shard" account.
// Zenbtc wrap shard account (determined by event ID)
func (inst *Wrap) SetZenbtcWrapShardAccount(zenbtcWrapShard ag_solanago.PublicKey) *Wrap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(zenbtcWrapShard)
	return inst
}

// GetZenbtcWrapShardAccount gets the "zenbtc_wrap_shard" account.
// Zenbtc wrap shard account (determined by event ID)
func (inst *Wrap) GetZenbtcWrapShardAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst Wrap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Wrap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Wrap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Wrap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SplMultisig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeWallet is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeWalletAta is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ReceiverAta is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.EventStoreProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventStoreGlobalConfig is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CallingProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.ZenbtcWrapShard is not set")
		}
	}
	return nil
}

func (inst *Wrap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Wrap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   signer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             spl_multisig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               fee_wallet", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           fee_wallet_ata", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 receiver", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             receiver_ata", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" associated_token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      event_store_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("event_store_global_config", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          calling_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        zenbtc_wrap_shard", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Wrap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Wrap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewWrapInstruction declares a new Wrap instruction with the provided parameters and accounts.
func NewWrapInstruction(
	// Parameters:
	args WrapArgs,
	// Accounts:
	signer ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	splMultisig ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	feeWallet ag_solanago.PublicKey,
	feeWalletAta ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	receiverAta ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	eventStoreProgram ag_solanago.PublicKey,
	eventStoreGlobalConfig ag_solanago.PublicKey,
	callingProgram ag_solanago.PublicKey,
	zenbtcWrapShard ag_solanago.PublicKey) *Wrap {
	return NewWrapInstructionBuilder().
		SetArgs(args).
		SetSignerAccount(signer).
		SetGlobalConfigAccount(globalConfig).
		SetSplMultisigAccount(splMultisig).
		SetMintAccount(mint).
		SetFeeWalletAccount(feeWallet).
		SetFeeWalletAtaAccount(feeWalletAta).
		SetReceiverAccount(receiver).
		SetReceiverAtaAccount(receiverAta).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetEventStoreProgramAccount(eventStoreProgram).
		SetEventStoreGlobalConfigAccount(eventStoreGlobalConfig).
		SetCallingProgramAccount(callingProgram).
		SetZenbtcWrapShardAccount(zenbtcWrapShard)
}
