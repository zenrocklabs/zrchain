// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zenbtc_spl_token

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrNotAGlobalAuthority = &customErrorDef{
		code: 6000,
		msg:  "Not a global authority",
		name: "NotAGlobalAuthority",
	}
	ErrNotAMintAuthority = &customErrorDef{
		code: 6001,
		msg:  "Not a mint authority",
		name: "NotAMintAuthority",
	}
	ErrNotAFeeAuthority = &customErrorDef{
		code: 6002,
		msg:  "Not a fee authority",
		name: "NotAFeeAuthority",
	}
	ErrMintAuthorityAlreadyExists = &customErrorDef{
		code: 6003,
		msg:  "Mint authority already exists",
		name: "MintAuthorityAlreadyExists",
	}
	ErrFeeAuthorityAlreadyExists = &customErrorDef{
		code: 6004,
		msg:  "Fee authority already exists",
		name: "FeeAuthorityAlreadyExists",
	}
	ErrFeeAuthorityDoesNotExists = &customErrorDef{
		code: 6005,
		msg:  "Fee authority doesn't exists",
		name: "FeeAuthorityDoesNotExists",
	}
	ErrMintAuthorityDoesNotExists = &customErrorDef{
		code: 6006,
		msg:  "Mint authority doesn't exists",
		name: "MintAuthorityDoesNotExists",
	}
	ErrBurnFeeBpsTooHigh = &customErrorDef{
		code: 6007,
		msg:  "Burn fee bps too high",
		name: "BurnFeeBpsTooHigh",
	}
	Errors = map[int]CustomError{
		6000: ErrNotAGlobalAuthority,
		6001: ErrNotAMintAuthority,
		6002: ErrNotAFeeAuthority,
		6003: ErrMintAuthorityAlreadyExists,
		6004: ErrFeeAuthorityAlreadyExists,
		6005: ErrFeeAuthorityDoesNotExists,
		6006: ErrMintAuthorityDoesNotExists,
		6007: ErrBurnFeeBpsTooHigh,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
