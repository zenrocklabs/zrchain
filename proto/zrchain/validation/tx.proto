syntax = "proto3";

package zrchain.validation;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "zrchain/dct/params.proto";
import "zrchain/validation/hybrid_validation.proto";
import "zrchain/validation/staking.proto";

option go_package = "github.com/Zenrock-Foundation/zrchain/v6/x/validation/types";

// Msg defines the staking Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateValidator defines a method for creating a new validator.
  rpc CreateValidator(MsgCreateValidator) returns (MsgCreateValidatorResponse);

  // EditValidator defines a method for editing an existing validator.
  rpc EditValidator(MsgEditValidator) returns (MsgEditValidatorResponse);

  // Delegate defines a method for performing a delegation of coins
  // from a delegator to a validator.
  rpc Delegate(MsgDelegate) returns (MsgDelegateResponse);

  // BeginRedelegate defines a method for performing a redelegation
  // of coins from a delegator and source validator to a destination validator.
  rpc BeginRedelegate(MsgBeginRedelegate) returns (MsgBeginRedelegateResponse);

  // Undelegate defines a method for performing an undelegation from a
  // delegate and a validator.
  rpc Undelegate(MsgUndelegate) returns (MsgUndelegateResponse);

  // CancelUnbondingDelegation defines a method for performing canceling the
  // unbonding delegation and delegate back to previous validator.

  // Since: cosmos-sdk 0.46
  rpc CancelUnbondingDelegation(MsgCancelUnbondingDelegation)
      returns (MsgCancelUnbondingDelegationResponse);

  // UpdateParams defines an operation for updating the x/staking module
  // parameters.
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // UpdateHVParams defines an operation for updating the x/validation module
  // parameters with Hybrid Validation parameters.
  rpc UpdateHVParams(MsgUpdateHVParams) returns (MsgUpdateHVParamsResponse);

  // TriggerEventBackfill defines an operation for triggering a backfill event for a specific transaction and event type.
  rpc TriggerEventBackfill(MsgTriggerEventBackfill) returns (MsgTriggerEventBackfillResponse);

  // RequestHeaderBackfill requests a specific Bitcoin header by height.
  // The header will be fetched by sidecars and populated via normal ABCI flow.
  rpc RequestHeaderBackfill(MsgRequestHeaderBackfill) returns (MsgRequestHeaderBackfillResponse);

  // ManuallyInputBitcoinHeader injects a Bitcoin header directly into consensus state.
  rpc ManuallyInputBitcoinHeader(MsgManuallyInputBitcoinHeader)
      returns (MsgManuallyInputBitcoinHeaderResponse);

  // ManuallyInputZcashHeader injects a Zcash header directly into consensus state.
  rpc ManuallyInputZcashHeader(MsgManuallyInputZcashHeader)
      returns (MsgManuallyInputZcashHeaderResponse);

  // AddToBedrockValSet adds a validator to the bedrock validator set.
  rpc AddToBedrockValSet(MsgAddToBedrockValSet)
      returns (MsgAddToBedrockValSetResponse);

  // RemoveFromBedrockValSet removes a validator from the bedrock validator set.
  rpc RemoveFromBedrockValSet(MsgRemoveFromBedrockValSet)
      returns (MsgRemoveFromBedrockValSetResponse);

  // AdvanceSolanaNonce constructs and dispatches a maintenance transaction that
  // advances a configured Solana durable nonce account using a supplied recent
  // blockhash.
  rpc AdvanceSolanaNonce(MsgAdvanceSolanaNonce)
      returns (MsgAdvanceSolanaNonceResponse);

  // SetSolanaCounters allows an authorized account to set the mint and redemption
  // counters for a specific Solana asset and global config PDA.
  rpc SetSolanaCounters(MsgSetSolanaCounters)
      returns (MsgSetSolanaCountersResponse);
}

// MsgCreateValidator defines a SDK message for creating a new validator.
message MsgCreateValidator {
  option (cosmos.msg.v1.signer) = "validator_address";
  option (amino.name) = "zrchain/MsgCreateValidator";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  Description description = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  CommissionRates commission = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  string min_self_delegation = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Deprecated: Use of Delegator Address in MsgCreateValidator is deprecated.
  // The validator address bytes and delegator address bytes refer to the same
  // account while creating validator (defer only in bech32 notation).
  string delegator_address = 4
      [ (cosmos_proto.scalar) = "cosmos.AddressString", deprecated = true ];
  string validator_address = 5
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  google.protobuf.Any pubkey = 6
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
  cosmos.base.v1beta1.Coin value = 7
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
message MsgCreateValidatorResponse {}

// MsgEditValidator defines a SDK message for editing an existing validator.
message MsgEditValidator {
  option (cosmos.msg.v1.signer) = "validator_address";
  option (amino.name) = "zrchain/MsgEditValidator";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  Description description = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];

  // We pass a reference to the new commission rate and min self delegation as
  // it's not mandatory to update. If not updated, the deserialized rate will be
  // zero with no way to distinguish if an update was intended.
  // REF: #2373
  string commission_rate = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
  string min_self_delegation = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int"
  ];
}

// MsgEditValidatorResponse defines the Msg/EditValidator response type.
message MsgEditValidatorResponse {}

// MsgDelegate defines a SDK message for performing a delegation of coins
// from a delegator to a validator.
message MsgDelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name) = "zrchain/MsgDelegate";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  cosmos.base.v1beta1.Coin amount = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgDelegateResponse defines the Msg/Delegate response type.
message MsgDelegateResponse {}

// MsgBeginRedelegate defines a SDK message for performing a redelegation
// of coins from a delegator and source validator to a destination validator.
message MsgBeginRedelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name) = "zrchain/MsgBeginRedelegate";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_src_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  string validator_dst_address = 3
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  cosmos.base.v1beta1.Coin amount = 4
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
message MsgBeginRedelegateResponse {
  google.protobuf.Timestamp completion_time = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];
}

// MsgUndelegate defines a SDK message for performing an undelegation from a
// delegate and a validator.
message MsgUndelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name) = "zrchain/MsgUndelegate";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  cosmos.base.v1beta1.Coin amount = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUndelegateResponse defines the Msg/Undelegate response type.
message MsgUndelegateResponse {
  google.protobuf.Timestamp completion_time = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];

  // amount returns the amount of undelegated coins

  // Since: cosmos-sdk 0.50
  cosmos.base.v1beta1.Coin amount = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgCancelUnbondingDelegation defines the SDK message for performing a cancel
// unbonding delegation for delegator
//
// Since: cosmos-sdk 0.46
message MsgCancelUnbondingDelegation {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name) = "zrchain/MsgCancelUnbondingDelegation";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];

  // amount is always less than or equal to unbonding delegation entry balance
  cosmos.base.v1beta1.Coin amount = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // creation_height is the height which the unbonding took place.
  int64 creation_height = 4;
}

// MsgCancelUnbondingDelegationResponse
//
// Since: cosmos-sdk 0.46
message MsgCancelUnbondingDelegationResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/validation parameters to update.

  // NOTE: All parameters must be supplied.
  Params Params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // use MsgUpdateHVParams instead
  HVParams HVParams = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    deprecated = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgUpdateHVParams is the Msg/UpdateHVParams request type.
// This message is used to update the HVParams parameters of the validation
// module.
message MsgUpdateHVParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgUpdateHVParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // HVParams defines the HV parameters to update.
  // NOTE: All parameters must be supplied.
  HVParams HVParams = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateHVParamsResponse defines the response structure for executing a
// MsgUpdateHVParams message.
message MsgUpdateHVParamsResponse {}

// MsgTriggerEventBackfill is the Msg/TriggerEventBackfill request type.
// This message is used to trigger a backfill event for a specific transaction
// and event type.
message MsgTriggerEventBackfill {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgTriggerEventBackfill";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // tx_hash is the transaction hash for which the backfill event is triggered.
  string tx_hash = 2;

  // caip2_chain_id is the CAIP-2 chain ID of the chain where the event
  // occurred.
  string caip2_chain_id = 3;

  // event_type specifies the type of event to backfill.
  EventType event_type = 4;
}

// MsgTriggerEventBackfillResponse defines the response structure for executing
// a MsgTriggerEventBackfill message.
message MsgTriggerEventBackfillResponse {}

// MsgRequestHeaderBackfill requests backfill of a specific Bitcoin header height.
message MsgRequestHeaderBackfill {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgRequestHeaderBackfill";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // height is the Bitcoin block height to request.
  int64 height = 2;
}

// MsgRequestHeaderBackfillResponse defines the response for header backfill request.
message MsgRequestHeaderBackfillResponse {}

// MsgManuallyInputBitcoinHeader allows an authorized account to provide all
// fields of a Bitcoin block header manually.
message MsgManuallyInputBitcoinHeader {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgManuallyInputBitcoinHeader";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // header contains the Bitcoin block header data to store.
  BitcoinHeader header = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// BitcoinHeader mirrors the fields required for a Bitcoin block header.
message BitcoinHeader {
  int64 version = 1;
  string prev_block = 2;
  string merkle_root = 3;
  int64 time_stamp = 4;
  int64 bits = 5;
  int64 nonce = 6;
  string block_hash = 7;
  int64 block_height = 8;
}

// MsgManuallyInputBitcoinHeaderResponse defines the response structure for
// a manually provided Bitcoin header.
message MsgManuallyInputBitcoinHeaderResponse {}

// MsgManuallyInputZcashHeader allows an authorized account to provide all
// fields of a Zcash block header manually.
message MsgManuallyInputZcashHeader {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgManuallyInputZcashHeader";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // header contains the Zcash block header data to store.
  ZcashHeader header = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// ZcashHeader mirrors the fields required for a Zcash block header.
message ZcashHeader {
  int64 version = 1;
  string prev_block = 2;
  string merkle_root = 3;
  int64 time_stamp = 4;
  int64 bits = 5;
  int64 nonce = 6;
  string block_hash = 7;
  int64 block_height = 8;
}

// MsgManuallyInputZcashHeaderResponse defines the response structure for
// a manually provided Zcash header.
message MsgManuallyInputZcashHeaderResponse {}

// EventType enumerates the possible event types for backfill requests.
enum EventType {
  // EVENT_TYPE_UNSPECIFIED indicates an unspecified event type.
  EVENT_TYPE_UNSPECIFIED = 0;
  // EVENT_TYPE_ZENBTC_MINT indicates a ZENBTC mint event.
  EVENT_TYPE_ZENBTC_MINT = 1;
  // EVENT_TYPE_ZENBTC_BURN indicates a ZENBTC burn event.
  EVENT_TYPE_ZENBTC_BURN = 2;
  // can add more types for zenbtc later if needed
  // EVENT_TYPE_ZENTP_MINT indicates a ZENTP mint event.
  EVENT_TYPE_ZENTP_MINT = 3;
  // EVENT_TYPE_ZENTP_BURN indicates a ZENTP burn event.
  EVENT_TYPE_ZENTP_BURN = 4;
}

// BackfillRequests contains a list of MsgTriggerEventBackfill requests.
message BackfillRequests {
  // requests is the list of backfill requests.
  repeated MsgTriggerEventBackfill requests = 1;
}

// MsgAddToBedrockValSet adds a validator to the bedrock validator set.
message MsgAddToBedrockValSet {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgAddToBedrockValSet";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // validator_address is the address of the validator to add to the bedrock set.
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
}

// MsgAddToBedrockValSetResponse defines the response structure for
// MsgAddToBedrockValSet.
message MsgAddToBedrockValSetResponse {}

// MsgRemoveFromBedrockValSet removes a validator from the bedrock validator set.
message MsgRemoveFromBedrockValSet {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgRemoveFromBedrockValSet";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // validator_address is the address of the validator to remove from the bedrock set.
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
}

// MsgRemoveFromBedrockValSetResponse defines the response structure for
// MsgRemoveFromBedrockValSet.
message MsgRemoveFromBedrockValSetResponse {}

// MsgAdvanceSolanaNonce submits a request to advance a Solana durable nonce
// account using a provided recent blockhash.
message MsgAdvanceSolanaNonce {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // If true, the zenBTC Solana nonce account will be advanced. If false, a DCT
  // asset must be provided.
  bool zenbtc = 2;
  zrchain.dct.Asset asset = 3;
  string recent_blockhash = 4;
  string caip2_chain_id = 5;
}

message MsgAdvanceSolanaNonceResponse {}

// MsgSetSolanaCounters allows an authorized account to manually set the mint
// and redemption counters for a specific Solana asset.
message MsgSetSolanaCounters {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/validation/MsgSetSolanaCounters";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // asset is the DCT asset for which to set the counters (e.g., ASSET_ZENBTC).
  zrchain.dct.Asset asset = 2;

  // mint_counter is the new mint counter value to set.
  uint64 mint_counter = 3;

  // redemption_counter is the new redemption counter value to set.
  uint64 redemption_counter = 4;
}

// MsgSetSolanaCountersResponse defines the response structure for
// MsgSetSolanaCounters.
message MsgSetSolanaCountersResponse {}
