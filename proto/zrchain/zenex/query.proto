syntax = "proto3";

package zrchain.zenex;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "zrchain/zenex/params.proto";
import "zrchain/zenex/swap.proto";

option go_package = "github.com/Zenrock-Foundation/zrchain/v6/x/zenex/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/zrchain/v6/zenex/params";
  
  }
  
  // Queries a list of Swaps items.
  rpc Swaps (QuerySwapsRequest) returns (QuerySwapsResponse) {
    option (google.api.http).get = "/zrchain/v6/zenex/swaps";
  
  }
  
  // Queries a list of RockPool items.
  rpc RockPool (QueryRockPoolRequest) returns (QueryRockPoolResponse) {
    option (google.api.http).get = "/zrchain/v6/zenex/rock_pool";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QuerySwapsRequest is request type for the Query/Swaps RPC method.
message QuerySwapsRequest {
  string                                creator    = 1; // Optional
  uint64                                swap_id    = 2; // Optional
  SwapStatus                            status     = 3; // Optional
  string                                pair       = 4; // Optional
  string                                workspace  = 5; // Optional
  cosmos.base.query.v1beta1.PageRequest pagination = 6;
}

// QuerySwapsResponse is response type for the Query/Swaps RPC method.
message QuerySwapsResponse {
  repeated Swap                                   swaps      = 1;
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryRockPoolRequest is request type for the Query/RockPool RPC method.
message QueryRockPoolRequest {}

// QueryRockPoolResponse is response type for the Query/RockPool RPC method.
message QueryRockPoolResponse {
  uint64 rock_balance = 1;
}

