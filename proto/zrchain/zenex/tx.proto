syntax = "proto3";

package zrchain.zenex;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "zrchain/zenex/params.proto";
import "zrchain/treasury/wallet.proto";
import "zrchain/zenex/swap.proto";

option go_package = "github.com/Zenrock-Foundation/zrchain/v6/x/zenex/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  
  // Swap defines a (cross-chain) swap operation.
  rpc SwapRequest (MsgSwapRequest) returns (MsgSwapRequestResponse);
  
  // ZenexTransfer defines the message for transferring funds 
  // to or from the change address.
  rpc ZenexTransferRequest    (MsgZenexTransferRequest   ) returns (MsgZenexTransferRequestResponse   );

  // AcknowledgePoolTransfer defines the message for acknowledging a pool transfer.
  rpc AcknowledgePoolTransfer (MsgAcknowledgePoolTransfer) returns (MsgAcknowledgePoolTransferResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                       "authority";
  option           (amino.name) = "zrchain/x/zenex/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgSwapRequest defines a (cross-chain) swap operation.
message MsgSwapRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  TradePair pair        = 2;
  string workspace   = 3;
  uint64 amount_in   = 4;
  uint64 rock_key_id = 5;
  uint64 btc_key_id  = 6;
}

// MsgSwapResponse defines the response structure for executing a
// MsgSwap message.
message MsgSwapRequestResponse {
  uint64 swap_id = 1;
}

// MsgZenexTransfer defines the message for transferring funds
// to or from the change address.
message MsgZenexTransferRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string                      creator     = 1;
  uint64                      swap_id     = 2;
  repeated InputHashes        data_for_signing = 3;
  zrchain.treasury.WalletType wallet_type = 4;
  bytes                       cache_id = 5;
  bytes                       unsigned_plus_tx = 6;
  string                      reject_reason = 7; // optional
}

// MsgZenexTransferResponse defines the response structure for executing a
// MsgZenexTransfer message.
message MsgZenexTransferRequestResponse {
  uint64 sign_req_id = 1;
}

// MsgAcknowledgePoolTransfer defines the message for acknowledging a pool transfer.
message MsgAcknowledgePoolTransfer {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  uint64 swap_id       = 2;
  string source_tx_hash = 3;
  zrchain.zenex.SwapStatus status = 4;
  string reject_reason = 5; // optional
}

// MsgAcknowledgePoolTransferResponse defines the response structure for executing a
// MsgAcknowledgePoolTransfer message.
message MsgAcknowledgePoolTransferResponse {}

