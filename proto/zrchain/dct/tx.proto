syntax = "proto3";

package zrchain.dct;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "zrchain/dct/params.proto";

option go_package = "github.com/Zenrock-Foundation/zrchain/v6/x/dct/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc VerifyDepositBlockInclusion(MsgVerifyDepositBlockInclusion) returns (MsgVerifyDepositBlockInclusionResponse);
  rpc SubmitUnsignedRedemptionTx(MsgSubmitUnsignedRedemptionTx) returns (MsgSubmitUnsignedRedemptionTxResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "zrchain/x/dct/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgVerifyDepositBlockInclusion {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string chain_name = 2;
  int64 block_height = 3;
  string raw_tx = 4;
  int32 index = 5;
  repeated string proof = 6;
  string deposit_addr = 7;
  uint64 amount = 8;
  uint64 vout = 9;
  Asset asset = 10;
}

message MsgVerifyDepositBlockInclusionResponse {}

message MsgSubmitUnsignedRedemptionTx {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  repeated InputHashes inputs = 2;
  bytes txbytes = 3;
  bytes cacheId = 4;
  string chain_name = 5;
  repeated uint64 redemption_indexes = 6;
  Asset asset = 7;
}

message InputHashes {
  string hash = 1;
  uint64 keyid = 2;
}

message MsgSubmitUnsignedRedemptionTxResponse {}
