syntax = "proto3";
package zrchain.treasury;

import "zrchain/treasury/wallet.proto";

option go_package = "github.com/Zenrock-Foundation/zrchain/v5/x/treasury/types";

// KeyRequestStatus indicates the status of a key request.
// A request starts as "pending", waiting to be picked up. Then it can move to
// either "approved" or "rejected", depending on the decision of the MPC nodes.
enum KeyRequestStatus {
  // The request is missing the status field.
  KEY_REQUEST_STATUS_UNSPECIFIED = 0;

  // The request is waiting to be fulfilled. This is the initial state of a
  // request.
  KEY_REQUEST_STATUS_PENDING = 1;

  // The request is partially fulfilled - at least one more response from
  // a different MPC party is needed to confirm it.
  KEY_REQUEST_STATUS_PARTIAL = 2;

  // The request was fulfilled. This is a final state for a request.
  KEY_REQUEST_STATUS_FULFILLED = 3;

  // The request was rejected. This is a final state for a request.
  KEY_REQUEST_STATUS_REJECTED = 4;
}

// format of a key request
message KeyRequest {
  uint64 id = 1;
  string creator = 2;
  string workspace_addr = 3;
  string keyring_addr = 4;
  KeyType key_type = 5;
  KeyRequestStatus status = 6;
  repeated bytes keyring_party_signatures = 7;
  string reject_reason = 8;
  uint64 index = 9;
  uint64 sign_policy_id = 10;
  ZenBTCMetadata zenbtc_metadata = 11; // Optional
  uint64 mpc_btl = 12;
  uint64 fee = 13;
}

// format of a key request response
message KeyReqResponse {
  uint64 id = 1;
  string creator = 2;
  string workspace_addr = 3;
  string keyring_addr = 4;
  string key_type = 5;
  string status = 6;
  repeated bytes keyring_party_signatures = 7;
  string reject_reason = 8;
  uint64 index = 9;
  uint64 sign_policy_id = 10;
  ZenBTCMetadata zenbtc_metadata = 11; // Optional
  uint64 mpc_btl = 12;
  uint64 fee = 13;
}

// KeyType indicates what crypto key algo will be used by this key (e.g. ECDSA
// with secp256k1 curve). Its public key will be one of the specified type.
enum KeyType {
  // The key type is missing.
  KEY_TYPE_UNSPECIFIED = 0;

  // The key is an ECDSA secp256k1 key.
  KEY_TYPE_ECDSA_SECP256K1 = 1;

  // The key is an EdDSA Ed25519 key.
  KEY_TYPE_EDDSA_ED25519 = 2;

  // Standard Bitcoin Keys
  KEY_TYPE_BITCOIN_SECP256K1 = 3;
}

// format of a key
message Key {
  uint64 id = 1;
  string workspace_addr = 2;
  string keyring_addr = 3;
  KeyType type = 4;
  bytes public_key = 5;
  uint64 index = 9;
  uint64 sign_policy_id = 10;
  ZenBTCMetadata zenbtc_metadata = 11; // Optional
}

// format of a key response
message KeyResponse {
  uint64 id = 1;
  string workspace_addr = 2;
  string keyring_addr = 3;
  string type = 4;
  bytes public_key = 5;
  uint64 index = 9;
  uint64 sign_policy_id = 10;
  ZenBTCMetadata zenbtc_metadata = 11; // Optional
}

// ZenBTCMetadata is the metadata for a key on the zenBTC keyring.
message ZenBTCMetadata {
  string recipient_addr = 1;
  WalletType chain_type = 2;
  uint64 chain_id = 3;
  string return_address = 4 [deprecated = true];
}
