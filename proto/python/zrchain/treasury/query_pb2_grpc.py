# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from zrchain.treasury import query_pb2 as zrchain_dot_treasury_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/zrchain.treasury.Query/Params',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.KeyRequests = channel.unary_unary(
                '/zrchain.treasury.Query/KeyRequests',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestsRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestsResponse.FromString,
                )
        self.KeyRequestByID = channel.unary_unary(
                '/zrchain.treasury.Query/KeyRequestByID',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestByIDRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestByIDResponse.FromString,
                )
        self.Keys = channel.unary_unary(
                '/zrchain.treasury.Query/Keys',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeysRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeysResponse.FromString,
                )
        self.KeyByID = channel.unary_unary(
                '/zrchain.treasury.Query/KeyByID',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByIDRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByIDResponse.FromString,
                )
        self.SignatureRequests = channel.unary_unary(
                '/zrchain.treasury.Query/SignatureRequests',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestsRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestsResponse.FromString,
                )
        self.SignatureRequestByID = channel.unary_unary(
                '/zrchain.treasury.Query/SignatureRequestByID',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestByIDRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestByIDResponse.FromString,
                )
        self.SignTransactionRequests = channel.unary_unary(
                '/zrchain.treasury.Query/SignTransactionRequests',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestsRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestsResponse.FromString,
                )
        self.SignTransactionRequestByID = channel.unary_unary(
                '/zrchain.treasury.Query/SignTransactionRequestByID',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestByIDRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestByIDResponse.FromString,
                )
        self.ZrSignKeys = channel.unary_unary(
                '/zrchain.treasury.Query/ZrSignKeys',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryZrSignKeysRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryZrSignKeysResponse.FromString,
                )
        self.KeyByAddress = channel.unary_unary(
                '/zrchain.treasury.Query/KeyByAddress',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByAddressRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByAddressResponse.FromString,
                )
        self.ZenbtcWallets = channel.unary_unary(
                '/zrchain.treasury.Query/ZenbtcWallets',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryZenbtcWalletsRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryZenbtcWalletsResponse.FromString,
                )
        self.DctWallets = channel.unary_unary(
                '/zrchain.treasury.Query/DctWallets',
                request_serializer=zrchain_dot_treasury_dot_query__pb2.QueryDctWalletsRequest.SerializeToString,
                response_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryDctWalletsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeyRequests(self, request, context):
        """Queries a list of KeyRequests items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeyRequestByID(self, request, context):
        """Queries a list of KeyRequestByID items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Keys(self, request, context):
        """Queries a list of Keys items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeyByID(self, request, context):
        """Queries a list of KeyByID items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignatureRequests(self, request, context):
        """Queries a list of SignatureRequests items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignatureRequestByID(self, request, context):
        """Queries a list of SignatureRequestByID items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignTransactionRequests(self, request, context):
        """Queries a list of SignTransactionRequests items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignTransactionRequestByID(self, request, context):
        """Queries a list of SignTransactionRequestByID items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZrSignKeys(self, request, context):
        """Queries a list of ZrSignKeys items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeyByAddress(self, request, context):
        """Queries a list of KeyByAddress items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZenbtcWallets(self, request, context):
        """Queries a list of ZenbtcWallets items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DctWallets(self, request, context):
        """Queries a list of DctWallets items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'KeyRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.KeyRequests,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestsRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestsResponse.SerializeToString,
            ),
            'KeyRequestByID': grpc.unary_unary_rpc_method_handler(
                    servicer.KeyRequestByID,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestByIDRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestByIDResponse.SerializeToString,
            ),
            'Keys': grpc.unary_unary_rpc_method_handler(
                    servicer.Keys,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeysRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeysResponse.SerializeToString,
            ),
            'KeyByID': grpc.unary_unary_rpc_method_handler(
                    servicer.KeyByID,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByIDRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByIDResponse.SerializeToString,
            ),
            'SignatureRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.SignatureRequests,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestsRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestsResponse.SerializeToString,
            ),
            'SignatureRequestByID': grpc.unary_unary_rpc_method_handler(
                    servicer.SignatureRequestByID,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestByIDRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestByIDResponse.SerializeToString,
            ),
            'SignTransactionRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.SignTransactionRequests,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestsRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestsResponse.SerializeToString,
            ),
            'SignTransactionRequestByID': grpc.unary_unary_rpc_method_handler(
                    servicer.SignTransactionRequestByID,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestByIDRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestByIDResponse.SerializeToString,
            ),
            'ZrSignKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ZrSignKeys,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryZrSignKeysRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryZrSignKeysResponse.SerializeToString,
            ),
            'KeyByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.KeyByAddress,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByAddressRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryKeyByAddressResponse.SerializeToString,
            ),
            'ZenbtcWallets': grpc.unary_unary_rpc_method_handler(
                    servicer.ZenbtcWallets,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryZenbtcWalletsRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryZenbtcWalletsResponse.SerializeToString,
            ),
            'DctWallets': grpc.unary_unary_rpc_method_handler(
                    servicer.DctWallets,
                    request_deserializer=zrchain_dot_treasury_dot_query__pb2.QueryDctWalletsRequest.FromString,
                    response_serializer=zrchain_dot_treasury_dot_query__pb2.QueryDctWalletsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zrchain.treasury.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/Params',
            zrchain_dot_treasury_dot_query__pb2.QueryParamsRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeyRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/KeyRequests',
            zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestsRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeyRequestByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/KeyRequestByID',
            zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestByIDRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryKeyRequestByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Keys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/Keys',
            zrchain_dot_treasury_dot_query__pb2.QueryKeysRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeyByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/KeyByID',
            zrchain_dot_treasury_dot_query__pb2.QueryKeyByIDRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryKeyByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignatureRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/SignatureRequests',
            zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestsRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignatureRequestByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/SignatureRequestByID',
            zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestByIDRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QuerySignatureRequestByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignTransactionRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/SignTransactionRequests',
            zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestsRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignTransactionRequestByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/SignTransactionRequestByID',
            zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestByIDRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QuerySignTransactionRequestByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZrSignKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/ZrSignKeys',
            zrchain_dot_treasury_dot_query__pb2.QueryZrSignKeysRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryZrSignKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeyByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/KeyByAddress',
            zrchain_dot_treasury_dot_query__pb2.QueryKeyByAddressRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryKeyByAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZenbtcWallets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/ZenbtcWallets',
            zrchain_dot_treasury_dot_query__pb2.QueryZenbtcWalletsRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryZenbtcWalletsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DctWallets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.treasury.Query/DctWallets',
            zrchain_dot_treasury_dot_query__pb2.QueryDctWalletsRequest.SerializeToString,
            zrchain_dot_treasury_dot_query__pb2.QueryDctWalletsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
