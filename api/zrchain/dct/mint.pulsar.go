// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dct

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_NonceData            protoreflect.MessageDescriptor
	fd_NonceData_nonce      protoreflect.FieldDescriptor
	fd_NonceData_counter    protoreflect.FieldDescriptor
	fd_NonceData_skip       protoreflect.FieldDescriptor
	fd_NonceData_prev_nonce protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_dct_mint_proto_init()
	md_NonceData = File_zrchain_dct_mint_proto.Messages().ByName("NonceData")
	fd_NonceData_nonce = md_NonceData.Fields().ByName("nonce")
	fd_NonceData_counter = md_NonceData.Fields().ByName("counter")
	fd_NonceData_skip = md_NonceData.Fields().ByName("skip")
	fd_NonceData_prev_nonce = md_NonceData.Fields().ByName("prev_nonce")
}

var _ protoreflect.Message = (*fastReflection_NonceData)(nil)

type fastReflection_NonceData NonceData

func (x *NonceData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NonceData)(x)
}

func (x *NonceData) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_dct_mint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NonceData_messageType fastReflection_NonceData_messageType
var _ protoreflect.MessageType = fastReflection_NonceData_messageType{}

type fastReflection_NonceData_messageType struct{}

func (x fastReflection_NonceData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NonceData)(nil)
}
func (x fastReflection_NonceData_messageType) New() protoreflect.Message {
	return new(fastReflection_NonceData)
}
func (x fastReflection_NonceData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NonceData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NonceData) Descriptor() protoreflect.MessageDescriptor {
	return md_NonceData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NonceData) Type() protoreflect.MessageType {
	return _fastReflection_NonceData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NonceData) New() protoreflect.Message {
	return new(fastReflection_NonceData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NonceData) Interface() protoreflect.ProtoMessage {
	return (*NonceData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NonceData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_NonceData_nonce, value) {
			return
		}
	}
	if x.Counter != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Counter)
		if !f(fd_NonceData_counter, value) {
			return
		}
	}
	if x.Skip != false {
		value := protoreflect.ValueOfBool(x.Skip)
		if !f(fd_NonceData_skip, value) {
			return
		}
	}
	if x.PrevNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PrevNonce)
		if !f(fd_NonceData_prev_nonce, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NonceData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.dct.NonceData.nonce":
		return x.Nonce != uint64(0)
	case "zrchain.dct.NonceData.counter":
		return x.Counter != uint64(0)
	case "zrchain.dct.NonceData.skip":
		return x.Skip != false
	case "zrchain.dct.NonceData.prev_nonce":
		return x.PrevNonce != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.NonceData"))
		}
		panic(fmt.Errorf("message zrchain.dct.NonceData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NonceData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.dct.NonceData.nonce":
		x.Nonce = uint64(0)
	case "zrchain.dct.NonceData.counter":
		x.Counter = uint64(0)
	case "zrchain.dct.NonceData.skip":
		x.Skip = false
	case "zrchain.dct.NonceData.prev_nonce":
		x.PrevNonce = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.NonceData"))
		}
		panic(fmt.Errorf("message zrchain.dct.NonceData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NonceData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.dct.NonceData.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.NonceData.counter":
		value := x.Counter
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.NonceData.skip":
		value := x.Skip
		return protoreflect.ValueOfBool(value)
	case "zrchain.dct.NonceData.prev_nonce":
		value := x.PrevNonce
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.NonceData"))
		}
		panic(fmt.Errorf("message zrchain.dct.NonceData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NonceData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.dct.NonceData.nonce":
		x.Nonce = value.Uint()
	case "zrchain.dct.NonceData.counter":
		x.Counter = value.Uint()
	case "zrchain.dct.NonceData.skip":
		x.Skip = value.Bool()
	case "zrchain.dct.NonceData.prev_nonce":
		x.PrevNonce = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.NonceData"))
		}
		panic(fmt.Errorf("message zrchain.dct.NonceData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NonceData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.NonceData.nonce":
		panic(fmt.Errorf("field nonce of message zrchain.dct.NonceData is not mutable"))
	case "zrchain.dct.NonceData.counter":
		panic(fmt.Errorf("field counter of message zrchain.dct.NonceData is not mutable"))
	case "zrchain.dct.NonceData.skip":
		panic(fmt.Errorf("field skip of message zrchain.dct.NonceData is not mutable"))
	case "zrchain.dct.NonceData.prev_nonce":
		panic(fmt.Errorf("field prev_nonce of message zrchain.dct.NonceData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.NonceData"))
		}
		panic(fmt.Errorf("message zrchain.dct.NonceData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NonceData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.NonceData.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.NonceData.counter":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.NonceData.skip":
		return protoreflect.ValueOfBool(false)
	case "zrchain.dct.NonceData.prev_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.NonceData"))
		}
		panic(fmt.Errorf("message zrchain.dct.NonceData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NonceData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.dct.NonceData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NonceData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NonceData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NonceData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NonceData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NonceData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		if x.Counter != 0 {
			n += 1 + runtime.Sov(uint64(x.Counter))
		}
		if x.Skip {
			n += 2
		}
		if x.PrevNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.PrevNonce))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NonceData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PrevNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PrevNonce))
			i--
			dAtA[i] = 0x20
		}
		if x.Skip {
			i--
			if x.Skip {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Counter != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Counter))
			i--
			dAtA[i] = 0x10
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NonceData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NonceData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NonceData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
				}
				x.Counter = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Counter |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Skip = bool(v != 0)
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrevNonce", wireType)
				}
				x.PrevNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PrevNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RequestedBitcoinHeaders_1_list)(nil)

type _RequestedBitcoinHeaders_1_list struct {
	list *[]int64
}

func (x *_RequestedBitcoinHeaders_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RequestedBitcoinHeaders_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt64((*x.list)[i])
}

func (x *_RequestedBitcoinHeaders_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RequestedBitcoinHeaders_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RequestedBitcoinHeaders_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RequestedBitcoinHeaders at list field Heights as it is not of Message kind"))
}

func (x *_RequestedBitcoinHeaders_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RequestedBitcoinHeaders_1_list) NewElement() protoreflect.Value {
	v := int64(0)
	return protoreflect.ValueOfInt64(v)
}

func (x *_RequestedBitcoinHeaders_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RequestedBitcoinHeaders         protoreflect.MessageDescriptor
	fd_RequestedBitcoinHeaders_heights protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_dct_mint_proto_init()
	md_RequestedBitcoinHeaders = File_zrchain_dct_mint_proto.Messages().ByName("RequestedBitcoinHeaders")
	fd_RequestedBitcoinHeaders_heights = md_RequestedBitcoinHeaders.Fields().ByName("heights")
}

var _ protoreflect.Message = (*fastReflection_RequestedBitcoinHeaders)(nil)

type fastReflection_RequestedBitcoinHeaders RequestedBitcoinHeaders

func (x *RequestedBitcoinHeaders) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestedBitcoinHeaders)(x)
}

func (x *RequestedBitcoinHeaders) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_dct_mint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestedBitcoinHeaders_messageType fastReflection_RequestedBitcoinHeaders_messageType
var _ protoreflect.MessageType = fastReflection_RequestedBitcoinHeaders_messageType{}

type fastReflection_RequestedBitcoinHeaders_messageType struct{}

func (x fastReflection_RequestedBitcoinHeaders_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestedBitcoinHeaders)(nil)
}
func (x fastReflection_RequestedBitcoinHeaders_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestedBitcoinHeaders)
}
func (x fastReflection_RequestedBitcoinHeaders_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestedBitcoinHeaders
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestedBitcoinHeaders) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestedBitcoinHeaders
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestedBitcoinHeaders) Type() protoreflect.MessageType {
	return _fastReflection_RequestedBitcoinHeaders_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestedBitcoinHeaders) New() protoreflect.Message {
	return new(fastReflection_RequestedBitcoinHeaders)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestedBitcoinHeaders) Interface() protoreflect.ProtoMessage {
	return (*RequestedBitcoinHeaders)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestedBitcoinHeaders) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Heights) != 0 {
		value := protoreflect.ValueOfList(&_RequestedBitcoinHeaders_1_list{list: &x.Heights})
		if !f(fd_RequestedBitcoinHeaders_heights, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestedBitcoinHeaders) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.dct.RequestedBitcoinHeaders.heights":
		return len(x.Heights) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedBitcoinHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedBitcoinHeaders does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedBitcoinHeaders) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.dct.RequestedBitcoinHeaders.heights":
		x.Heights = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedBitcoinHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedBitcoinHeaders does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestedBitcoinHeaders) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.dct.RequestedBitcoinHeaders.heights":
		if len(x.Heights) == 0 {
			return protoreflect.ValueOfList(&_RequestedBitcoinHeaders_1_list{})
		}
		listValue := &_RequestedBitcoinHeaders_1_list{list: &x.Heights}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedBitcoinHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedBitcoinHeaders does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedBitcoinHeaders) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.dct.RequestedBitcoinHeaders.heights":
		lv := value.List()
		clv := lv.(*_RequestedBitcoinHeaders_1_list)
		x.Heights = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedBitcoinHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedBitcoinHeaders does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedBitcoinHeaders) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.RequestedBitcoinHeaders.heights":
		if x.Heights == nil {
			x.Heights = []int64{}
		}
		value := &_RequestedBitcoinHeaders_1_list{list: &x.Heights}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedBitcoinHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedBitcoinHeaders does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestedBitcoinHeaders) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.RequestedBitcoinHeaders.heights":
		list := []int64{}
		return protoreflect.ValueOfList(&_RequestedBitcoinHeaders_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedBitcoinHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedBitcoinHeaders does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestedBitcoinHeaders) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.dct.RequestedBitcoinHeaders", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestedBitcoinHeaders) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedBitcoinHeaders) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestedBitcoinHeaders) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestedBitcoinHeaders) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestedBitcoinHeaders)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Heights) > 0 {
			l = 0
			for _, e := range x.Heights {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestedBitcoinHeaders)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Heights) > 0 {
			var pksize2 int
			for _, num := range x.Heights {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.Heights {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestedBitcoinHeaders)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestedBitcoinHeaders: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestedBitcoinHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Heights = append(x.Heights, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Heights) == 0 {
						x.Heights = make([]int64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Heights = append(x.Heights, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RequestedZcashHeaders_1_list)(nil)

type _RequestedZcashHeaders_1_list struct {
	list *[]int64
}

func (x *_RequestedZcashHeaders_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RequestedZcashHeaders_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt64((*x.list)[i])
}

func (x *_RequestedZcashHeaders_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RequestedZcashHeaders_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RequestedZcashHeaders_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RequestedZcashHeaders at list field Heights as it is not of Message kind"))
}

func (x *_RequestedZcashHeaders_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RequestedZcashHeaders_1_list) NewElement() protoreflect.Value {
	v := int64(0)
	return protoreflect.ValueOfInt64(v)
}

func (x *_RequestedZcashHeaders_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RequestedZcashHeaders         protoreflect.MessageDescriptor
	fd_RequestedZcashHeaders_heights protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_dct_mint_proto_init()
	md_RequestedZcashHeaders = File_zrchain_dct_mint_proto.Messages().ByName("RequestedZcashHeaders")
	fd_RequestedZcashHeaders_heights = md_RequestedZcashHeaders.Fields().ByName("heights")
}

var _ protoreflect.Message = (*fastReflection_RequestedZcashHeaders)(nil)

type fastReflection_RequestedZcashHeaders RequestedZcashHeaders

func (x *RequestedZcashHeaders) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestedZcashHeaders)(x)
}

func (x *RequestedZcashHeaders) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_dct_mint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestedZcashHeaders_messageType fastReflection_RequestedZcashHeaders_messageType
var _ protoreflect.MessageType = fastReflection_RequestedZcashHeaders_messageType{}

type fastReflection_RequestedZcashHeaders_messageType struct{}

func (x fastReflection_RequestedZcashHeaders_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestedZcashHeaders)(nil)
}
func (x fastReflection_RequestedZcashHeaders_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestedZcashHeaders)
}
func (x fastReflection_RequestedZcashHeaders_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestedZcashHeaders
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestedZcashHeaders) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestedZcashHeaders
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestedZcashHeaders) Type() protoreflect.MessageType {
	return _fastReflection_RequestedZcashHeaders_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestedZcashHeaders) New() protoreflect.Message {
	return new(fastReflection_RequestedZcashHeaders)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestedZcashHeaders) Interface() protoreflect.ProtoMessage {
	return (*RequestedZcashHeaders)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestedZcashHeaders) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Heights) != 0 {
		value := protoreflect.ValueOfList(&_RequestedZcashHeaders_1_list{list: &x.Heights})
		if !f(fd_RequestedZcashHeaders_heights, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestedZcashHeaders) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.dct.RequestedZcashHeaders.heights":
		return len(x.Heights) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedZcashHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedZcashHeaders does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedZcashHeaders) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.dct.RequestedZcashHeaders.heights":
		x.Heights = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedZcashHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedZcashHeaders does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestedZcashHeaders) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.dct.RequestedZcashHeaders.heights":
		if len(x.Heights) == 0 {
			return protoreflect.ValueOfList(&_RequestedZcashHeaders_1_list{})
		}
		listValue := &_RequestedZcashHeaders_1_list{list: &x.Heights}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedZcashHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedZcashHeaders does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedZcashHeaders) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.dct.RequestedZcashHeaders.heights":
		lv := value.List()
		clv := lv.(*_RequestedZcashHeaders_1_list)
		x.Heights = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedZcashHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedZcashHeaders does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedZcashHeaders) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.RequestedZcashHeaders.heights":
		if x.Heights == nil {
			x.Heights = []int64{}
		}
		value := &_RequestedZcashHeaders_1_list{list: &x.Heights}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedZcashHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedZcashHeaders does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestedZcashHeaders) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.RequestedZcashHeaders.heights":
		list := []int64{}
		return protoreflect.ValueOfList(&_RequestedZcashHeaders_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.RequestedZcashHeaders"))
		}
		panic(fmt.Errorf("message zrchain.dct.RequestedZcashHeaders does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestedZcashHeaders) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.dct.RequestedZcashHeaders", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestedZcashHeaders) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestedZcashHeaders) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestedZcashHeaders) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestedZcashHeaders) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestedZcashHeaders)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Heights) > 0 {
			l = 0
			for _, e := range x.Heights {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestedZcashHeaders)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Heights) > 0 {
			var pksize2 int
			for _, num := range x.Heights {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.Heights {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestedZcashHeaders)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestedZcashHeaders: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestedZcashHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Heights = append(x.Heights, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Heights) == 0 {
						x.Heights = make([]int64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Heights = append(x.Heights, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LockTransaction                protoreflect.MessageDescriptor
	fd_LockTransaction_raw_tx         protoreflect.FieldDescriptor
	fd_LockTransaction_vout           protoreflect.FieldDescriptor
	fd_LockTransaction_sender         protoreflect.FieldDescriptor
	fd_LockTransaction_mint_recipient protoreflect.FieldDescriptor
	fd_LockTransaction_amount         protoreflect.FieldDescriptor
	fd_LockTransaction_block_height   protoreflect.FieldDescriptor
	fd_LockTransaction_asset          protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_dct_mint_proto_init()
	md_LockTransaction = File_zrchain_dct_mint_proto.Messages().ByName("LockTransaction")
	fd_LockTransaction_raw_tx = md_LockTransaction.Fields().ByName("raw_tx")
	fd_LockTransaction_vout = md_LockTransaction.Fields().ByName("vout")
	fd_LockTransaction_sender = md_LockTransaction.Fields().ByName("sender")
	fd_LockTransaction_mint_recipient = md_LockTransaction.Fields().ByName("mint_recipient")
	fd_LockTransaction_amount = md_LockTransaction.Fields().ByName("amount")
	fd_LockTransaction_block_height = md_LockTransaction.Fields().ByName("block_height")
	fd_LockTransaction_asset = md_LockTransaction.Fields().ByName("asset")
}

var _ protoreflect.Message = (*fastReflection_LockTransaction)(nil)

type fastReflection_LockTransaction LockTransaction

func (x *LockTransaction) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LockTransaction)(x)
}

func (x *LockTransaction) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_dct_mint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LockTransaction_messageType fastReflection_LockTransaction_messageType
var _ protoreflect.MessageType = fastReflection_LockTransaction_messageType{}

type fastReflection_LockTransaction_messageType struct{}

func (x fastReflection_LockTransaction_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LockTransaction)(nil)
}
func (x fastReflection_LockTransaction_messageType) New() protoreflect.Message {
	return new(fastReflection_LockTransaction)
}
func (x fastReflection_LockTransaction_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LockTransaction
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LockTransaction) Descriptor() protoreflect.MessageDescriptor {
	return md_LockTransaction
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LockTransaction) Type() protoreflect.MessageType {
	return _fastReflection_LockTransaction_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LockTransaction) New() protoreflect.Message {
	return new(fastReflection_LockTransaction)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LockTransaction) Interface() protoreflect.ProtoMessage {
	return (*LockTransaction)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LockTransaction) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RawTx != "" {
		value := protoreflect.ValueOfString(x.RawTx)
		if !f(fd_LockTransaction_raw_tx, value) {
			return
		}
	}
	if x.Vout != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Vout)
		if !f(fd_LockTransaction_vout, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_LockTransaction_sender, value) {
			return
		}
	}
	if x.MintRecipient != "" {
		value := protoreflect.ValueOfString(x.MintRecipient)
		if !f(fd_LockTransaction_mint_recipient, value) {
			return
		}
	}
	if x.Amount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Amount)
		if !f(fd_LockTransaction_amount, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_LockTransaction_block_height, value) {
			return
		}
	}
	if x.Asset != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Asset))
		if !f(fd_LockTransaction_asset, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LockTransaction) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.dct.LockTransaction.raw_tx":
		return x.RawTx != ""
	case "zrchain.dct.LockTransaction.vout":
		return x.Vout != uint64(0)
	case "zrchain.dct.LockTransaction.sender":
		return x.Sender != ""
	case "zrchain.dct.LockTransaction.mint_recipient":
		return x.MintRecipient != ""
	case "zrchain.dct.LockTransaction.amount":
		return x.Amount != uint64(0)
	case "zrchain.dct.LockTransaction.block_height":
		return x.BlockHeight != int64(0)
	case "zrchain.dct.LockTransaction.asset":
		return x.Asset != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.LockTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.LockTransaction does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockTransaction) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.dct.LockTransaction.raw_tx":
		x.RawTx = ""
	case "zrchain.dct.LockTransaction.vout":
		x.Vout = uint64(0)
	case "zrchain.dct.LockTransaction.sender":
		x.Sender = ""
	case "zrchain.dct.LockTransaction.mint_recipient":
		x.MintRecipient = ""
	case "zrchain.dct.LockTransaction.amount":
		x.Amount = uint64(0)
	case "zrchain.dct.LockTransaction.block_height":
		x.BlockHeight = int64(0)
	case "zrchain.dct.LockTransaction.asset":
		x.Asset = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.LockTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.LockTransaction does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LockTransaction) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.dct.LockTransaction.raw_tx":
		value := x.RawTx
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.LockTransaction.vout":
		value := x.Vout
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.LockTransaction.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.LockTransaction.mint_recipient":
		value := x.MintRecipient
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.LockTransaction.amount":
		value := x.Amount
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.LockTransaction.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "zrchain.dct.LockTransaction.asset":
		value := x.Asset
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.LockTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.LockTransaction does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockTransaction) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.dct.LockTransaction.raw_tx":
		x.RawTx = value.Interface().(string)
	case "zrchain.dct.LockTransaction.vout":
		x.Vout = value.Uint()
	case "zrchain.dct.LockTransaction.sender":
		x.Sender = value.Interface().(string)
	case "zrchain.dct.LockTransaction.mint_recipient":
		x.MintRecipient = value.Interface().(string)
	case "zrchain.dct.LockTransaction.amount":
		x.Amount = value.Uint()
	case "zrchain.dct.LockTransaction.block_height":
		x.BlockHeight = value.Int()
	case "zrchain.dct.LockTransaction.asset":
		x.Asset = (Asset)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.LockTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.LockTransaction does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockTransaction) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.LockTransaction.raw_tx":
		panic(fmt.Errorf("field raw_tx of message zrchain.dct.LockTransaction is not mutable"))
	case "zrchain.dct.LockTransaction.vout":
		panic(fmt.Errorf("field vout of message zrchain.dct.LockTransaction is not mutable"))
	case "zrchain.dct.LockTransaction.sender":
		panic(fmt.Errorf("field sender of message zrchain.dct.LockTransaction is not mutable"))
	case "zrchain.dct.LockTransaction.mint_recipient":
		panic(fmt.Errorf("field mint_recipient of message zrchain.dct.LockTransaction is not mutable"))
	case "zrchain.dct.LockTransaction.amount":
		panic(fmt.Errorf("field amount of message zrchain.dct.LockTransaction is not mutable"))
	case "zrchain.dct.LockTransaction.block_height":
		panic(fmt.Errorf("field block_height of message zrchain.dct.LockTransaction is not mutable"))
	case "zrchain.dct.LockTransaction.asset":
		panic(fmt.Errorf("field asset of message zrchain.dct.LockTransaction is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.LockTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.LockTransaction does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LockTransaction) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.LockTransaction.raw_tx":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.LockTransaction.vout":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.LockTransaction.sender":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.LockTransaction.mint_recipient":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.LockTransaction.amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.LockTransaction.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.dct.LockTransaction.asset":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.LockTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.LockTransaction does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LockTransaction) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.dct.LockTransaction", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LockTransaction) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockTransaction) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LockTransaction) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LockTransaction) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LockTransaction)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RawTx)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Vout != 0 {
			n += 1 + runtime.Sov(uint64(x.Vout))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MintRecipient)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.Asset != 0 {
			n += 1 + runtime.Sov(uint64(x.Asset))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LockTransaction)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Asset != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Asset))
			i--
			dAtA[i] = 0x38
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x30
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x28
		}
		if len(x.MintRecipient) > 0 {
			i -= len(x.MintRecipient)
			copy(dAtA[i:], x.MintRecipient)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintRecipient)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Vout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Vout))
			i--
			dAtA[i] = 0x10
		}
		if len(x.RawTx) > 0 {
			i -= len(x.RawTx)
			copy(dAtA[i:], x.RawTx)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RawTx)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LockTransaction)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LockTransaction: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LockTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RawTx", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RawTx = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
				}
				x.Vout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Vout |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintRecipient = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
				}
				x.Asset = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Asset |= Asset(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PendingMintTransaction                      protoreflect.MessageDescriptor
	fd_PendingMintTransaction_chain_type           protoreflect.FieldDescriptor
	fd_PendingMintTransaction_recipient_address    protoreflect.FieldDescriptor
	fd_PendingMintTransaction_amount               protoreflect.FieldDescriptor
	fd_PendingMintTransaction_creator              protoreflect.FieldDescriptor
	fd_PendingMintTransaction_caip2_chain_id       protoreflect.FieldDescriptor
	fd_PendingMintTransaction_id                   protoreflect.FieldDescriptor
	fd_PendingMintTransaction_status               protoreflect.FieldDescriptor
	fd_PendingMintTransaction_zrchain_tx_id        protoreflect.FieldDescriptor
	fd_PendingMintTransaction_block_height         protoreflect.FieldDescriptor
	fd_PendingMintTransaction_awaiting_event_since protoreflect.FieldDescriptor
	fd_PendingMintTransaction_tx_hash              protoreflect.FieldDescriptor
	fd_PendingMintTransaction_asset                protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_dct_mint_proto_init()
	md_PendingMintTransaction = File_zrchain_dct_mint_proto.Messages().ByName("PendingMintTransaction")
	fd_PendingMintTransaction_chain_type = md_PendingMintTransaction.Fields().ByName("chain_type")
	fd_PendingMintTransaction_recipient_address = md_PendingMintTransaction.Fields().ByName("recipient_address")
	fd_PendingMintTransaction_amount = md_PendingMintTransaction.Fields().ByName("amount")
	fd_PendingMintTransaction_creator = md_PendingMintTransaction.Fields().ByName("creator")
	fd_PendingMintTransaction_caip2_chain_id = md_PendingMintTransaction.Fields().ByName("caip2_chain_id")
	fd_PendingMintTransaction_id = md_PendingMintTransaction.Fields().ByName("id")
	fd_PendingMintTransaction_status = md_PendingMintTransaction.Fields().ByName("status")
	fd_PendingMintTransaction_zrchain_tx_id = md_PendingMintTransaction.Fields().ByName("zrchain_tx_id")
	fd_PendingMintTransaction_block_height = md_PendingMintTransaction.Fields().ByName("block_height")
	fd_PendingMintTransaction_awaiting_event_since = md_PendingMintTransaction.Fields().ByName("awaiting_event_since")
	fd_PendingMintTransaction_tx_hash = md_PendingMintTransaction.Fields().ByName("tx_hash")
	fd_PendingMintTransaction_asset = md_PendingMintTransaction.Fields().ByName("asset")
}

var _ protoreflect.Message = (*fastReflection_PendingMintTransaction)(nil)

type fastReflection_PendingMintTransaction PendingMintTransaction

func (x *PendingMintTransaction) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PendingMintTransaction)(x)
}

func (x *PendingMintTransaction) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_dct_mint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PendingMintTransaction_messageType fastReflection_PendingMintTransaction_messageType
var _ protoreflect.MessageType = fastReflection_PendingMintTransaction_messageType{}

type fastReflection_PendingMintTransaction_messageType struct{}

func (x fastReflection_PendingMintTransaction_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PendingMintTransaction)(nil)
}
func (x fastReflection_PendingMintTransaction_messageType) New() protoreflect.Message {
	return new(fastReflection_PendingMintTransaction)
}
func (x fastReflection_PendingMintTransaction_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PendingMintTransaction
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PendingMintTransaction) Descriptor() protoreflect.MessageDescriptor {
	return md_PendingMintTransaction
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PendingMintTransaction) Type() protoreflect.MessageType {
	return _fastReflection_PendingMintTransaction_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PendingMintTransaction) New() protoreflect.Message {
	return new(fastReflection_PendingMintTransaction)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PendingMintTransaction) Interface() protoreflect.ProtoMessage {
	return (*PendingMintTransaction)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PendingMintTransaction) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ChainType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.ChainType))
		if !f(fd_PendingMintTransaction_chain_type, value) {
			return
		}
	}
	if x.RecipientAddress != "" {
		value := protoreflect.ValueOfString(x.RecipientAddress)
		if !f(fd_PendingMintTransaction_recipient_address, value) {
			return
		}
	}
	if x.Amount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Amount)
		if !f(fd_PendingMintTransaction_amount, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_PendingMintTransaction_creator, value) {
			return
		}
	}
	if x.Caip2ChainId != "" {
		value := protoreflect.ValueOfString(x.Caip2ChainId)
		if !f(fd_PendingMintTransaction_caip2_chain_id, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_PendingMintTransaction_id, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_PendingMintTransaction_status, value) {
			return
		}
	}
	if x.ZrchainTxId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ZrchainTxId)
		if !f(fd_PendingMintTransaction_zrchain_tx_id, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_PendingMintTransaction_block_height, value) {
			return
		}
	}
	if x.AwaitingEventSince != int64(0) {
		value := protoreflect.ValueOfInt64(x.AwaitingEventSince)
		if !f(fd_PendingMintTransaction_awaiting_event_since, value) {
			return
		}
	}
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_PendingMintTransaction_tx_hash, value) {
			return
		}
	}
	if x.Asset != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Asset))
		if !f(fd_PendingMintTransaction_asset, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PendingMintTransaction) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.dct.PendingMintTransaction.chain_type":
		return x.ChainType != 0
	case "zrchain.dct.PendingMintTransaction.recipient_address":
		return x.RecipientAddress != ""
	case "zrchain.dct.PendingMintTransaction.amount":
		return x.Amount != uint64(0)
	case "zrchain.dct.PendingMintTransaction.creator":
		return x.Creator != ""
	case "zrchain.dct.PendingMintTransaction.caip2_chain_id":
		return x.Caip2ChainId != ""
	case "zrchain.dct.PendingMintTransaction.id":
		return x.Id != uint64(0)
	case "zrchain.dct.PendingMintTransaction.status":
		return x.Status != 0
	case "zrchain.dct.PendingMintTransaction.zrchain_tx_id":
		return x.ZrchainTxId != uint64(0)
	case "zrchain.dct.PendingMintTransaction.block_height":
		return x.BlockHeight != int64(0)
	case "zrchain.dct.PendingMintTransaction.awaiting_event_since":
		return x.AwaitingEventSince != int64(0)
	case "zrchain.dct.PendingMintTransaction.tx_hash":
		return x.TxHash != ""
	case "zrchain.dct.PendingMintTransaction.asset":
		return x.Asset != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.PendingMintTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.PendingMintTransaction does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingMintTransaction) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.dct.PendingMintTransaction.chain_type":
		x.ChainType = 0
	case "zrchain.dct.PendingMintTransaction.recipient_address":
		x.RecipientAddress = ""
	case "zrchain.dct.PendingMintTransaction.amount":
		x.Amount = uint64(0)
	case "zrchain.dct.PendingMintTransaction.creator":
		x.Creator = ""
	case "zrchain.dct.PendingMintTransaction.caip2_chain_id":
		x.Caip2ChainId = ""
	case "zrchain.dct.PendingMintTransaction.id":
		x.Id = uint64(0)
	case "zrchain.dct.PendingMintTransaction.status":
		x.Status = 0
	case "zrchain.dct.PendingMintTransaction.zrchain_tx_id":
		x.ZrchainTxId = uint64(0)
	case "zrchain.dct.PendingMintTransaction.block_height":
		x.BlockHeight = int64(0)
	case "zrchain.dct.PendingMintTransaction.awaiting_event_since":
		x.AwaitingEventSince = int64(0)
	case "zrchain.dct.PendingMintTransaction.tx_hash":
		x.TxHash = ""
	case "zrchain.dct.PendingMintTransaction.asset":
		x.Asset = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.PendingMintTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.PendingMintTransaction does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PendingMintTransaction) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.dct.PendingMintTransaction.chain_type":
		value := x.ChainType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.dct.PendingMintTransaction.recipient_address":
		value := x.RecipientAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.PendingMintTransaction.amount":
		value := x.Amount
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.PendingMintTransaction.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.PendingMintTransaction.caip2_chain_id":
		value := x.Caip2ChainId
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.PendingMintTransaction.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.PendingMintTransaction.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.dct.PendingMintTransaction.zrchain_tx_id":
		value := x.ZrchainTxId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.dct.PendingMintTransaction.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "zrchain.dct.PendingMintTransaction.awaiting_event_since":
		value := x.AwaitingEventSince
		return protoreflect.ValueOfInt64(value)
	case "zrchain.dct.PendingMintTransaction.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "zrchain.dct.PendingMintTransaction.asset":
		value := x.Asset
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.PendingMintTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.PendingMintTransaction does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingMintTransaction) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.dct.PendingMintTransaction.chain_type":
		x.ChainType = (WalletType)(value.Enum())
	case "zrchain.dct.PendingMintTransaction.recipient_address":
		x.RecipientAddress = value.Interface().(string)
	case "zrchain.dct.PendingMintTransaction.amount":
		x.Amount = value.Uint()
	case "zrchain.dct.PendingMintTransaction.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.dct.PendingMintTransaction.caip2_chain_id":
		x.Caip2ChainId = value.Interface().(string)
	case "zrchain.dct.PendingMintTransaction.id":
		x.Id = value.Uint()
	case "zrchain.dct.PendingMintTransaction.status":
		x.Status = (MintTransactionStatus)(value.Enum())
	case "zrchain.dct.PendingMintTransaction.zrchain_tx_id":
		x.ZrchainTxId = value.Uint()
	case "zrchain.dct.PendingMintTransaction.block_height":
		x.BlockHeight = value.Int()
	case "zrchain.dct.PendingMintTransaction.awaiting_event_since":
		x.AwaitingEventSince = value.Int()
	case "zrchain.dct.PendingMintTransaction.tx_hash":
		x.TxHash = value.Interface().(string)
	case "zrchain.dct.PendingMintTransaction.asset":
		x.Asset = (Asset)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.PendingMintTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.PendingMintTransaction does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingMintTransaction) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.PendingMintTransaction.chain_type":
		panic(fmt.Errorf("field chain_type of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.recipient_address":
		panic(fmt.Errorf("field recipient_address of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.amount":
		panic(fmt.Errorf("field amount of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.creator":
		panic(fmt.Errorf("field creator of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.caip2_chain_id":
		panic(fmt.Errorf("field caip2_chain_id of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.id":
		panic(fmt.Errorf("field id of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.status":
		panic(fmt.Errorf("field status of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.zrchain_tx_id":
		panic(fmt.Errorf("field zrchain_tx_id of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.block_height":
		panic(fmt.Errorf("field block_height of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.awaiting_event_since":
		panic(fmt.Errorf("field awaiting_event_since of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.tx_hash":
		panic(fmt.Errorf("field tx_hash of message zrchain.dct.PendingMintTransaction is not mutable"))
	case "zrchain.dct.PendingMintTransaction.asset":
		panic(fmt.Errorf("field asset of message zrchain.dct.PendingMintTransaction is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.PendingMintTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.PendingMintTransaction does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PendingMintTransaction) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.dct.PendingMintTransaction.chain_type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.dct.PendingMintTransaction.recipient_address":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.PendingMintTransaction.amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.PendingMintTransaction.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.PendingMintTransaction.caip2_chain_id":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.PendingMintTransaction.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.PendingMintTransaction.status":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.dct.PendingMintTransaction.zrchain_tx_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.dct.PendingMintTransaction.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.dct.PendingMintTransaction.awaiting_event_since":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.dct.PendingMintTransaction.tx_hash":
		return protoreflect.ValueOfString("")
	case "zrchain.dct.PendingMintTransaction.asset":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.dct.PendingMintTransaction"))
		}
		panic(fmt.Errorf("message zrchain.dct.PendingMintTransaction does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PendingMintTransaction) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.dct.PendingMintTransaction", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PendingMintTransaction) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingMintTransaction) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PendingMintTransaction) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PendingMintTransaction) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PendingMintTransaction)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ChainType != 0 {
			n += 1 + runtime.Sov(uint64(x.ChainType))
		}
		l = len(x.RecipientAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Caip2ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.ZrchainTxId != 0 {
			n += 1 + runtime.Sov(uint64(x.ZrchainTxId))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.AwaitingEventSince != 0 {
			n += 1 + runtime.Sov(uint64(x.AwaitingEventSince))
		}
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Asset != 0 {
			n += 1 + runtime.Sov(uint64(x.Asset))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PendingMintTransaction)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Asset != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Asset))
			i--
			dAtA[i] = 0x60
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0x5a
		}
		if x.AwaitingEventSince != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AwaitingEventSince))
			i--
			dAtA[i] = 0x50
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x48
		}
		if x.ZrchainTxId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ZrchainTxId))
			i--
			dAtA[i] = 0x40
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x38
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Caip2ChainId) > 0 {
			i -= len(x.Caip2ChainId)
			copy(dAtA[i:], x.Caip2ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Caip2ChainId)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x22
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x18
		}
		if len(x.RecipientAddress) > 0 {
			i -= len(x.RecipientAddress)
			copy(dAtA[i:], x.RecipientAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecipientAddress)))
			i--
			dAtA[i] = 0x12
		}
		if x.ChainType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ChainType))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PendingMintTransaction)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PendingMintTransaction: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PendingMintTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
				}
				x.ChainType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ChainType |= WalletType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecipientAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Caip2ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Caip2ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= MintTransactionStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZrchainTxId", wireType)
				}
				x.ZrchainTxId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ZrchainTxId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AwaitingEventSince", wireType)
				}
				x.AwaitingEventSince = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AwaitingEventSince |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
				}
				x.Asset = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Asset |= Asset(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/dct/mint.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MintTransactionStatus int32

const (
	MintTransactionStatus_MINT_TRANSACTION_STATUS_UNSPECIFIED MintTransactionStatus = 0
	MintTransactionStatus_MINT_TRANSACTION_STATUS_DEPOSITED   MintTransactionStatus = 1
	MintTransactionStatus_MINT_TRANSACTION_STATUS_MINTED      MintTransactionStatus = 2
)

// Enum value maps for MintTransactionStatus.
var (
	MintTransactionStatus_name = map[int32]string{
		0: "MINT_TRANSACTION_STATUS_UNSPECIFIED",
		1: "MINT_TRANSACTION_STATUS_DEPOSITED",
		2: "MINT_TRANSACTION_STATUS_MINTED",
	}
	MintTransactionStatus_value = map[string]int32{
		"MINT_TRANSACTION_STATUS_UNSPECIFIED": 0,
		"MINT_TRANSACTION_STATUS_DEPOSITED":   1,
		"MINT_TRANSACTION_STATUS_MINTED":      2,
	}
)

func (x MintTransactionStatus) Enum() *MintTransactionStatus {
	p := new(MintTransactionStatus)
	*p = x
	return p
}

func (x MintTransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MintTransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_dct_mint_proto_enumTypes[0].Descriptor()
}

func (MintTransactionStatus) Type() protoreflect.EnumType {
	return &file_zrchain_dct_mint_proto_enumTypes[0]
}

func (x MintTransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MintTransactionStatus.Descriptor instead.
func (MintTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{0}
}

// WalletType specifies the Layer 1 blockchain that this wallet will be used
// for.
type WalletType int32

const (
	// The wallet type is missing (all wallets will be derived)
	WalletType_WALLET_TYPE_UNSPECIFIED WalletType = 0
	// The wallet type for native cosmos accounts
	WalletType_WALLET_TYPE_NATIVE WalletType = 1
	// The wallet type for mainnet ETH and its ERC-20 tokens
	WalletType_WALLET_TYPE_EVM WalletType = 2
	// The Wallet type for Testnet BTC
	WalletType_WALLET_TYPE_BTC_TESTNET WalletType = 3
	// The Wallet type for Mainnet BTC
	WalletType_WALLET_TYPE_BTC_MAINNET WalletType = 4
	// The Wallet type for RegNet - Local Test Network
	WalletType_WALLET_TYPE_BTC_REGNET WalletType = 5
	// Wallet type for Solana
	WalletType_WALLET_TYPE_SOLANA WalletType = 6
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "WALLET_TYPE_UNSPECIFIED",
		1: "WALLET_TYPE_NATIVE",
		2: "WALLET_TYPE_EVM",
		3: "WALLET_TYPE_BTC_TESTNET",
		4: "WALLET_TYPE_BTC_MAINNET",
		5: "WALLET_TYPE_BTC_REGNET",
		6: "WALLET_TYPE_SOLANA",
	}
	WalletType_value = map[string]int32{
		"WALLET_TYPE_UNSPECIFIED": 0,
		"WALLET_TYPE_NATIVE":      1,
		"WALLET_TYPE_EVM":         2,
		"WALLET_TYPE_BTC_TESTNET": 3,
		"WALLET_TYPE_BTC_MAINNET": 4,
		"WALLET_TYPE_BTC_REGNET":  5,
		"WALLET_TYPE_SOLANA":      6,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_dct_mint_proto_enumTypes[1].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_zrchain_dct_mint_proto_enumTypes[1]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{1}
}

type NonceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce     uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Counter   uint64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Skip      bool   `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	PrevNonce uint64 `protobuf:"varint,4,opt,name=prev_nonce,json=prevNonce,proto3" json:"prev_nonce,omitempty"`
}

func (x *NonceData) Reset() {
	*x = NonceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_dct_mint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceData) ProtoMessage() {}

// Deprecated: Use NonceData.ProtoReflect.Descriptor instead.
func (*NonceData) Descriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{0}
}

func (x *NonceData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *NonceData) GetCounter() uint64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *NonceData) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *NonceData) GetPrevNonce() uint64 {
	if x != nil {
		return x.PrevNonce
	}
	return 0
}

type RequestedBitcoinHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heights []int64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (x *RequestedBitcoinHeaders) Reset() {
	*x = RequestedBitcoinHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_dct_mint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedBitcoinHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedBitcoinHeaders) ProtoMessage() {}

// Deprecated: Use RequestedBitcoinHeaders.ProtoReflect.Descriptor instead.
func (*RequestedBitcoinHeaders) Descriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{1}
}

func (x *RequestedBitcoinHeaders) GetHeights() []int64 {
	if x != nil {
		return x.Heights
	}
	return nil
}

type RequestedZcashHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heights []int64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (x *RequestedZcashHeaders) Reset() {
	*x = RequestedZcashHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_dct_mint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedZcashHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedZcashHeaders) ProtoMessage() {}

// Deprecated: Use RequestedZcashHeaders.ProtoReflect.Descriptor instead.
func (*RequestedZcashHeaders) Descriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{2}
}

func (x *RequestedZcashHeaders) GetHeights() []int64 {
	if x != nil {
		return x.Heights
	}
	return nil
}

type LockTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawTx         string `protobuf:"bytes,1,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	Vout          uint64 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Sender        string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	MintRecipient string `protobuf:"bytes,4,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	Amount        uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockHeight   int64  `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Asset         Asset  `protobuf:"varint,7,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (x *LockTransaction) Reset() {
	*x = LockTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_dct_mint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockTransaction) ProtoMessage() {}

// Deprecated: Use LockTransaction.ProtoReflect.Descriptor instead.
func (*LockTransaction) Descriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{3}
}

func (x *LockTransaction) GetRawTx() string {
	if x != nil {
		return x.RawTx
	}
	return ""
}

func (x *LockTransaction) GetVout() uint64 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *LockTransaction) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *LockTransaction) GetMintRecipient() string {
	if x != nil {
		return x.MintRecipient
	}
	return ""
}

func (x *LockTransaction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LockTransaction) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *LockTransaction) GetAsset() Asset {
	if x != nil {
		return x.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

// PendingMintTransaction is the metadata for a pending zenBTC mint transaction.
type PendingMintTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType          WalletType            `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3,enum=zrchain.dct.WalletType" json:"chain_type,omitempty"`
	RecipientAddress   string                `protobuf:"bytes,2,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount             uint64                `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Creator            string                `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Caip2ChainId       string                `protobuf:"bytes,5,opt,name=caip2_chain_id,json=caip2ChainId,proto3" json:"caip2_chain_id,omitempty"`
	Id                 uint64                `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Status             MintTransactionStatus `protobuf:"varint,7,opt,name=status,proto3,enum=zrchain.dct.MintTransactionStatus" json:"status,omitempty"`
	ZrchainTxId        uint64                `protobuf:"varint,8,opt,name=zrchain_tx_id,json=zrchainTxId,proto3" json:"zrchain_tx_id,omitempty"`
	BlockHeight        int64                 `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	AwaitingEventSince int64                 `protobuf:"varint,10,opt,name=awaiting_event_since,json=awaitingEventSince,proto3" json:"awaiting_event_since,omitempty"`
	TxHash             string                `protobuf:"bytes,11,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Asset              Asset                 `protobuf:"varint,12,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (x *PendingMintTransaction) Reset() {
	*x = PendingMintTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_dct_mint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingMintTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingMintTransaction) ProtoMessage() {}

// Deprecated: Use PendingMintTransaction.ProtoReflect.Descriptor instead.
func (*PendingMintTransaction) Descriptor() ([]byte, []int) {
	return file_zrchain_dct_mint_proto_rawDescGZIP(), []int{4}
}

func (x *PendingMintTransaction) GetChainType() WalletType {
	if x != nil {
		return x.ChainType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (x *PendingMintTransaction) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *PendingMintTransaction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PendingMintTransaction) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *PendingMintTransaction) GetCaip2ChainId() string {
	if x != nil {
		return x.Caip2ChainId
	}
	return ""
}

func (x *PendingMintTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PendingMintTransaction) GetStatus() MintTransactionStatus {
	if x != nil {
		return x.Status
	}
	return MintTransactionStatus_MINT_TRANSACTION_STATUS_UNSPECIFIED
}

func (x *PendingMintTransaction) GetZrchainTxId() uint64 {
	if x != nil {
		return x.ZrchainTxId
	}
	return 0
}

func (x *PendingMintTransaction) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *PendingMintTransaction) GetAwaitingEventSince() int64 {
	if x != nil {
		return x.AwaitingEventSince
	}
	return 0
}

func (x *PendingMintTransaction) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *PendingMintTransaction) GetAsset() Asset {
	if x != nil {
		return x.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

var File_zrchain_dct_mint_proto protoreflect.FileDescriptor

var file_zrchain_dct_mint_proto_rawDesc = []byte{
	0x0a, 0x16, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x64, 0x63, 0x74, 0x2f, 0x6d, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x63, 0x74, 0x1a, 0x18, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x64,
	0x63, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6e, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x33, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5a, 0x63, 0x61, 0x73, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x61, 0x77, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x63, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x16, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x63, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x61, 0x69, 0x70, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x69, 0x70, 0x32, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x63, 0x74,
	0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x63, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2a, 0x8b, 0x01, 0x0a, 0x15, 0x4d,
	0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x49, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xc4, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x4d, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x54, 0x43, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x54,
	0x43, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x54, 0x43, 0x5f, 0x52,
	0x45, 0x47, 0x4e, 0x45, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x10, 0x06, 0x42,
	0xa3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x63, 0x74, 0x42, 0x09, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x65, 0x6e,
	0x72, 0x6f, 0x63, 0x6b, 0x2d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x64, 0x63, 0x74, 0xa2, 0x02, 0x03, 0x5a, 0x44, 0x58,
	0xaa, 0x02, 0x0b, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x63, 0x74, 0xca, 0x02,
	0x0b, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x63, 0x74, 0xe2, 0x02, 0x17, 0x5a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x63, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x3a, 0x3a, 0x44, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_dct_mint_proto_rawDescOnce sync.Once
	file_zrchain_dct_mint_proto_rawDescData = file_zrchain_dct_mint_proto_rawDesc
)

func file_zrchain_dct_mint_proto_rawDescGZIP() []byte {
	file_zrchain_dct_mint_proto_rawDescOnce.Do(func() {
		file_zrchain_dct_mint_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_dct_mint_proto_rawDescData)
	})
	return file_zrchain_dct_mint_proto_rawDescData
}

var file_zrchain_dct_mint_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zrchain_dct_mint_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_zrchain_dct_mint_proto_goTypes = []interface{}{
	(MintTransactionStatus)(0),      // 0: zrchain.dct.MintTransactionStatus
	(WalletType)(0),                 // 1: zrchain.dct.WalletType
	(*NonceData)(nil),               // 2: zrchain.dct.NonceData
	(*RequestedBitcoinHeaders)(nil), // 3: zrchain.dct.RequestedBitcoinHeaders
	(*RequestedZcashHeaders)(nil),   // 4: zrchain.dct.RequestedZcashHeaders
	(*LockTransaction)(nil),         // 5: zrchain.dct.LockTransaction
	(*PendingMintTransaction)(nil),  // 6: zrchain.dct.PendingMintTransaction
	(Asset)(0),                      // 7: zrchain.dct.Asset
}
var file_zrchain_dct_mint_proto_depIdxs = []int32{
	7, // 0: zrchain.dct.LockTransaction.asset:type_name -> zrchain.dct.Asset
	1, // 1: zrchain.dct.PendingMintTransaction.chain_type:type_name -> zrchain.dct.WalletType
	0, // 2: zrchain.dct.PendingMintTransaction.status:type_name -> zrchain.dct.MintTransactionStatus
	7, // 3: zrchain.dct.PendingMintTransaction.asset:type_name -> zrchain.dct.Asset
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_zrchain_dct_mint_proto_init() }
func file_zrchain_dct_mint_proto_init() {
	if File_zrchain_dct_mint_proto != nil {
		return
	}
	file_zrchain_dct_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zrchain_dct_mint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_dct_mint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedBitcoinHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_dct_mint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedZcashHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_dct_mint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_dct_mint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingMintTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_dct_mint_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_dct_mint_proto_goTypes,
		DependencyIndexes: file_zrchain_dct_mint_proto_depIdxs,
		EnumInfos:         file_zrchain_dct_mint_proto_enumTypes,
		MessageInfos:      file_zrchain_dct_mint_proto_msgTypes,
	}.Build()
	File_zrchain_dct_mint_proto = out.File
	file_zrchain_dct_mint_proto_rawDesc = nil
	file_zrchain_dct_mint_proto_goTypes = nil
	file_zrchain_dct_mint_proto_depIdxs = nil
}
