// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines the operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// NewWorkspace defines an operation for creating a new workspace
	NewWorkspace(ctx context.Context, in *MsgNewWorkspace, opts ...grpc.CallOption) (*MsgNewWorkspaceResponse, error)
	// AddWorkspaceOwner defines an operation for adding a workspace owner
	AddWorkspaceOwner(ctx context.Context, in *MsgAddWorkspaceOwner, opts ...grpc.CallOption) (*MsgAddWorkspaceOwnerResponse, error)
	// AppendChildWorkspace defines an operation for appending a child workspace
	AppendChildWorkspace(ctx context.Context, in *MsgAppendChildWorkspace, opts ...grpc.CallOption) (*MsgAppendChildWorkspaceResponse, error)
	// NewChildWorkspace defines an operation for creating a new child workspace
	NewChildWorkspace(ctx context.Context, in *MsgNewChildWorkspace, opts ...grpc.CallOption) (*MsgNewChildWorkspaceResponse, error)
	// RemoveWorkspaceOwner defines an operation for removing a workspace owner
	RemoveWorkspaceOwner(ctx context.Context, in *MsgRemoveWorkspaceOwner, opts ...grpc.CallOption) (*MsgRemoveWorkspaceOwnerResponse, error)
	// // NewKeyring defines an operation for creating a keyring
	NewKeyring(ctx context.Context, in *MsgNewKeyring, opts ...grpc.CallOption) (*MsgNewKeyringResponse, error)
	// AddKeyringParty defines an operation for adding a party to a keyring
	AddKeyringParty(ctx context.Context, in *MsgAddKeyringParty, opts ...grpc.CallOption) (*MsgAddKeyringPartyResponse, error)
	// UpdateKeyring defines an operation to update the keyring attributes
	UpdateKeyring(ctx context.Context, in *MsgUpdateKeyring, opts ...grpc.CallOption) (*MsgUpdateKeyringResponse, error)
	// RemoveKeyringParty defines an operation to remove a party from a keyring
	RemoveKeyringParty(ctx context.Context, in *MsgRemoveKeyringParty, opts ...grpc.CallOption) (*MsgRemoveKeyringPartyResponse, error)
	// AddKeyringAdmin defines an operation to add an admin to a keyring
	AddKeyringAdmin(ctx context.Context, in *MsgAddKeyringAdmin, opts ...grpc.CallOption) (*MsgAddKeyringAdminResponse, error)
	// RemoveKeyringAdmin defines an operation to remove an admin from a keyring
	RemoveKeyringAdmin(ctx context.Context, in *MsgRemoveKeyringAdmin, opts ...grpc.CallOption) (*MsgRemoveKeyringAdminResponse, error)
	// Update a workspace, e.g. changing the policies in use.
	UpdateWorkspace(ctx context.Context, in *MsgUpdateWorkspace, opts ...grpc.CallOption) (*MsgUpdateWorkspaceResponse, error)
	// Deactivate a keyring
	DeactivateKeyring(ctx context.Context, in *MsgDeactivateKeyring, opts ...grpc.CallOption) (*MsgDeactivateKeyringResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewWorkspace(ctx context.Context, in *MsgNewWorkspace, opts ...grpc.CallOption) (*MsgNewWorkspaceResponse, error) {
	out := new(MsgNewWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/NewWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddWorkspaceOwner(ctx context.Context, in *MsgAddWorkspaceOwner, opts ...grpc.CallOption) (*MsgAddWorkspaceOwnerResponse, error) {
	out := new(MsgAddWorkspaceOwnerResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/AddWorkspaceOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AppendChildWorkspace(ctx context.Context, in *MsgAppendChildWorkspace, opts ...grpc.CallOption) (*MsgAppendChildWorkspaceResponse, error) {
	out := new(MsgAppendChildWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/AppendChildWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewChildWorkspace(ctx context.Context, in *MsgNewChildWorkspace, opts ...grpc.CallOption) (*MsgNewChildWorkspaceResponse, error) {
	out := new(MsgNewChildWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/NewChildWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveWorkspaceOwner(ctx context.Context, in *MsgRemoveWorkspaceOwner, opts ...grpc.CallOption) (*MsgRemoveWorkspaceOwnerResponse, error) {
	out := new(MsgRemoveWorkspaceOwnerResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/RemoveWorkspaceOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewKeyring(ctx context.Context, in *MsgNewKeyring, opts ...grpc.CallOption) (*MsgNewKeyringResponse, error) {
	out := new(MsgNewKeyringResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/NewKeyring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddKeyringParty(ctx context.Context, in *MsgAddKeyringParty, opts ...grpc.CallOption) (*MsgAddKeyringPartyResponse, error) {
	out := new(MsgAddKeyringPartyResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/AddKeyringParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKeyring(ctx context.Context, in *MsgUpdateKeyring, opts ...grpc.CallOption) (*MsgUpdateKeyringResponse, error) {
	out := new(MsgUpdateKeyringResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/UpdateKeyring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveKeyringParty(ctx context.Context, in *MsgRemoveKeyringParty, opts ...grpc.CallOption) (*MsgRemoveKeyringPartyResponse, error) {
	out := new(MsgRemoveKeyringPartyResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/RemoveKeyringParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddKeyringAdmin(ctx context.Context, in *MsgAddKeyringAdmin, opts ...grpc.CallOption) (*MsgAddKeyringAdminResponse, error) {
	out := new(MsgAddKeyringAdminResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/AddKeyringAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveKeyringAdmin(ctx context.Context, in *MsgRemoveKeyringAdmin, opts ...grpc.CallOption) (*MsgRemoveKeyringAdminResponse, error) {
	out := new(MsgRemoveKeyringAdminResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/RemoveKeyringAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateWorkspace(ctx context.Context, in *MsgUpdateWorkspace, opts ...grpc.CallOption) (*MsgUpdateWorkspaceResponse, error) {
	out := new(MsgUpdateWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/UpdateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateKeyring(ctx context.Context, in *MsgDeactivateKeyring, opts ...grpc.CallOption) (*MsgDeactivateKeyringResponse, error) {
	out := new(MsgDeactivateKeyringResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Msg/DeactivateKeyring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines the operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// NewWorkspace defines an operation for creating a new workspace
	NewWorkspace(context.Context, *MsgNewWorkspace) (*MsgNewWorkspaceResponse, error)
	// AddWorkspaceOwner defines an operation for adding a workspace owner
	AddWorkspaceOwner(context.Context, *MsgAddWorkspaceOwner) (*MsgAddWorkspaceOwnerResponse, error)
	// AppendChildWorkspace defines an operation for appending a child workspace
	AppendChildWorkspace(context.Context, *MsgAppendChildWorkspace) (*MsgAppendChildWorkspaceResponse, error)
	// NewChildWorkspace defines an operation for creating a new child workspace
	NewChildWorkspace(context.Context, *MsgNewChildWorkspace) (*MsgNewChildWorkspaceResponse, error)
	// RemoveWorkspaceOwner defines an operation for removing a workspace owner
	RemoveWorkspaceOwner(context.Context, *MsgRemoveWorkspaceOwner) (*MsgRemoveWorkspaceOwnerResponse, error)
	// // NewKeyring defines an operation for creating a keyring
	NewKeyring(context.Context, *MsgNewKeyring) (*MsgNewKeyringResponse, error)
	// AddKeyringParty defines an operation for adding a party to a keyring
	AddKeyringParty(context.Context, *MsgAddKeyringParty) (*MsgAddKeyringPartyResponse, error)
	// UpdateKeyring defines an operation to update the keyring attributes
	UpdateKeyring(context.Context, *MsgUpdateKeyring) (*MsgUpdateKeyringResponse, error)
	// RemoveKeyringParty defines an operation to remove a party from a keyring
	RemoveKeyringParty(context.Context, *MsgRemoveKeyringParty) (*MsgRemoveKeyringPartyResponse, error)
	// AddKeyringAdmin defines an operation to add an admin to a keyring
	AddKeyringAdmin(context.Context, *MsgAddKeyringAdmin) (*MsgAddKeyringAdminResponse, error)
	// RemoveKeyringAdmin defines an operation to remove an admin from a keyring
	RemoveKeyringAdmin(context.Context, *MsgRemoveKeyringAdmin) (*MsgRemoveKeyringAdminResponse, error)
	// Update a workspace, e.g. changing the policies in use.
	UpdateWorkspace(context.Context, *MsgUpdateWorkspace) (*MsgUpdateWorkspaceResponse, error)
	// Deactivate a keyring
	DeactivateKeyring(context.Context, *MsgDeactivateKeyring) (*MsgDeactivateKeyringResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) NewWorkspace(context.Context, *MsgNewWorkspace) (*MsgNewWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWorkspace not implemented")
}
func (UnimplementedMsgServer) AddWorkspaceOwner(context.Context, *MsgAddWorkspaceOwner) (*MsgAddWorkspaceOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkspaceOwner not implemented")
}
func (UnimplementedMsgServer) AppendChildWorkspace(context.Context, *MsgAppendChildWorkspace) (*MsgAppendChildWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendChildWorkspace not implemented")
}
func (UnimplementedMsgServer) NewChildWorkspace(context.Context, *MsgNewChildWorkspace) (*MsgNewChildWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChildWorkspace not implemented")
}
func (UnimplementedMsgServer) RemoveWorkspaceOwner(context.Context, *MsgRemoveWorkspaceOwner) (*MsgRemoveWorkspaceOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkspaceOwner not implemented")
}
func (UnimplementedMsgServer) NewKeyring(context.Context, *MsgNewKeyring) (*MsgNewKeyringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewKeyring not implemented")
}
func (UnimplementedMsgServer) AddKeyringParty(context.Context, *MsgAddKeyringParty) (*MsgAddKeyringPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyringParty not implemented")
}
func (UnimplementedMsgServer) UpdateKeyring(context.Context, *MsgUpdateKeyring) (*MsgUpdateKeyringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyring not implemented")
}
func (UnimplementedMsgServer) RemoveKeyringParty(context.Context, *MsgRemoveKeyringParty) (*MsgRemoveKeyringPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKeyringParty not implemented")
}
func (UnimplementedMsgServer) AddKeyringAdmin(context.Context, *MsgAddKeyringAdmin) (*MsgAddKeyringAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyringAdmin not implemented")
}
func (UnimplementedMsgServer) RemoveKeyringAdmin(context.Context, *MsgRemoveKeyringAdmin) (*MsgRemoveKeyringAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKeyringAdmin not implemented")
}
func (UnimplementedMsgServer) UpdateWorkspace(context.Context, *MsgUpdateWorkspace) (*MsgUpdateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedMsgServer) DeactivateKeyring(context.Context, *MsgDeactivateKeyring) (*MsgDeactivateKeyringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateKeyring not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewWorkspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/NewWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewWorkspace(ctx, req.(*MsgNewWorkspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddWorkspaceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddWorkspaceOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddWorkspaceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/AddWorkspaceOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddWorkspaceOwner(ctx, req.(*MsgAddWorkspaceOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AppendChildWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAppendChildWorkspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AppendChildWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/AppendChildWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AppendChildWorkspace(ctx, req.(*MsgAppendChildWorkspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewChildWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewChildWorkspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewChildWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/NewChildWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewChildWorkspace(ctx, req.(*MsgNewChildWorkspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveWorkspaceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveWorkspaceOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveWorkspaceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/RemoveWorkspaceOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveWorkspaceOwner(ctx, req.(*MsgRemoveWorkspaceOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewKeyring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewKeyring)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewKeyring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/NewKeyring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewKeyring(ctx, req.(*MsgNewKeyring))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddKeyringParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddKeyringParty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddKeyringParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/AddKeyringParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddKeyringParty(ctx, req.(*MsgAddKeyringParty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKeyring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKeyring)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKeyring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/UpdateKeyring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKeyring(ctx, req.(*MsgUpdateKeyring))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveKeyringParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveKeyringParty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveKeyringParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/RemoveKeyringParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveKeyringParty(ctx, req.(*MsgRemoveKeyringParty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddKeyringAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddKeyringAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddKeyringAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/AddKeyringAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddKeyringAdmin(ctx, req.(*MsgAddKeyringAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveKeyringAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveKeyringAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveKeyringAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/RemoveKeyringAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveKeyringAdmin(ctx, req.(*MsgRemoveKeyringAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateWorkspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/UpdateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateWorkspace(ctx, req.(*MsgUpdateWorkspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateKeyring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateKeyring)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateKeyring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Msg/DeactivateKeyring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateKeyring(ctx, req.(*MsgDeactivateKeyring))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.identity.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "NewWorkspace",
			Handler:    _Msg_NewWorkspace_Handler,
		},
		{
			MethodName: "AddWorkspaceOwner",
			Handler:    _Msg_AddWorkspaceOwner_Handler,
		},
		{
			MethodName: "AppendChildWorkspace",
			Handler:    _Msg_AppendChildWorkspace_Handler,
		},
		{
			MethodName: "NewChildWorkspace",
			Handler:    _Msg_NewChildWorkspace_Handler,
		},
		{
			MethodName: "RemoveWorkspaceOwner",
			Handler:    _Msg_RemoveWorkspaceOwner_Handler,
		},
		{
			MethodName: "NewKeyring",
			Handler:    _Msg_NewKeyring_Handler,
		},
		{
			MethodName: "AddKeyringParty",
			Handler:    _Msg_AddKeyringParty_Handler,
		},
		{
			MethodName: "UpdateKeyring",
			Handler:    _Msg_UpdateKeyring_Handler,
		},
		{
			MethodName: "RemoveKeyringParty",
			Handler:    _Msg_RemoveKeyringParty_Handler,
		},
		{
			MethodName: "AddKeyringAdmin",
			Handler:    _Msg_AddKeyringAdmin_Handler,
		},
		{
			MethodName: "RemoveKeyringAdmin",
			Handler:    _Msg_RemoveKeyringAdmin_Handler,
		},
		{
			MethodName: "UpdateWorkspace",
			Handler:    _Msg_UpdateWorkspace_Handler,
		},
		{
			MethodName: "DeactivateKeyring",
			Handler:    _Msg_DeactivateKeyring_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/identity/tx.proto",
}
