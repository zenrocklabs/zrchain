// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package treasury

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_PartySignature           protoreflect.MessageDescriptor
	fd_PartySignature_creator   protoreflect.FieldDescriptor
	fd_PartySignature_signature protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_key_proto_init()
	md_PartySignature = File_zrchain_treasury_key_proto.Messages().ByName("PartySignature")
	fd_PartySignature_creator = md_PartySignature.Fields().ByName("creator")
	fd_PartySignature_signature = md_PartySignature.Fields().ByName("signature")
}

var _ protoreflect.Message = (*fastReflection_PartySignature)(nil)

type fastReflection_PartySignature PartySignature

func (x *PartySignature) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PartySignature)(x)
}

func (x *PartySignature) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PartySignature_messageType fastReflection_PartySignature_messageType
var _ protoreflect.MessageType = fastReflection_PartySignature_messageType{}

type fastReflection_PartySignature_messageType struct{}

func (x fastReflection_PartySignature_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PartySignature)(nil)
}
func (x fastReflection_PartySignature_messageType) New() protoreflect.Message {
	return new(fastReflection_PartySignature)
}
func (x fastReflection_PartySignature_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PartySignature
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PartySignature) Descriptor() protoreflect.MessageDescriptor {
	return md_PartySignature
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PartySignature) Type() protoreflect.MessageType {
	return _fastReflection_PartySignature_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PartySignature) New() protoreflect.Message {
	return new(fastReflection_PartySignature)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PartySignature) Interface() protoreflect.ProtoMessage {
	return (*PartySignature)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PartySignature) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_PartySignature_creator, value) {
			return
		}
	}
	if len(x.Signature) != 0 {
		value := protoreflect.ValueOfBytes(x.Signature)
		if !f(fd_PartySignature_signature, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PartySignature) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.PartySignature.creator":
		return x.Creator != ""
	case "zrchain.treasury.PartySignature.signature":
		return len(x.Signature) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.PartySignature"))
		}
		panic(fmt.Errorf("message zrchain.treasury.PartySignature does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PartySignature) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.PartySignature.creator":
		x.Creator = ""
	case "zrchain.treasury.PartySignature.signature":
		x.Signature = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.PartySignature"))
		}
		panic(fmt.Errorf("message zrchain.treasury.PartySignature does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PartySignature) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.PartySignature.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.PartySignature.signature":
		value := x.Signature
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.PartySignature"))
		}
		panic(fmt.Errorf("message zrchain.treasury.PartySignature does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PartySignature) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.PartySignature.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.PartySignature.signature":
		x.Signature = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.PartySignature"))
		}
		panic(fmt.Errorf("message zrchain.treasury.PartySignature does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PartySignature) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.PartySignature.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.PartySignature is not mutable"))
	case "zrchain.treasury.PartySignature.signature":
		panic(fmt.Errorf("field signature of message zrchain.treasury.PartySignature is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.PartySignature"))
		}
		panic(fmt.Errorf("message zrchain.treasury.PartySignature does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PartySignature) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.PartySignature.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.PartySignature.signature":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.PartySignature"))
		}
		panic(fmt.Errorf("message zrchain.treasury.PartySignature does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PartySignature) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.PartySignature", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PartySignature) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PartySignature) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PartySignature) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PartySignature) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PartySignature)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PartySignature)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PartySignature)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PartySignature: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PartySignature: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = append(x.Signature[:0], dAtA[iNdEx:postIndex]...)
				if x.Signature == nil {
					x.Signature = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_KeyRequest_7_list)(nil)

type _KeyRequest_7_list struct {
	list *[][]byte
}

func (x *_KeyRequest_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_KeyRequest_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_KeyRequest_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_KeyRequest_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_KeyRequest_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message KeyRequest at list field KeyringPartySignatures as it is not of Message kind"))
}

func (x *_KeyRequest_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_KeyRequest_7_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_KeyRequest_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_KeyRequest_15_list)(nil)

type _KeyRequest_15_list struct {
	list *[]*PartySignature
}

func (x *_KeyRequest_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_KeyRequest_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_KeyRequest_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PartySignature)
	(*x.list)[i] = concreteValue
}

func (x *_KeyRequest_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PartySignature)
	*x.list = append(*x.list, concreteValue)
}

func (x *_KeyRequest_15_list) AppendMutable() protoreflect.Value {
	v := new(PartySignature)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_KeyRequest_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_KeyRequest_15_list) NewElement() protoreflect.Value {
	v := new(PartySignature)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_KeyRequest_15_list) IsValid() bool {
	return x.list != nil
}

var (
	md_KeyRequest                          protoreflect.MessageDescriptor
	fd_KeyRequest_id                       protoreflect.FieldDescriptor
	fd_KeyRequest_creator                  protoreflect.FieldDescriptor
	fd_KeyRequest_workspace_addr           protoreflect.FieldDescriptor
	fd_KeyRequest_keyring_addr             protoreflect.FieldDescriptor
	fd_KeyRequest_key_type                 protoreflect.FieldDescriptor
	fd_KeyRequest_status                   protoreflect.FieldDescriptor
	fd_KeyRequest_keyring_party_signatures protoreflect.FieldDescriptor
	fd_KeyRequest_reject_reason            protoreflect.FieldDescriptor
	fd_KeyRequest_index                    protoreflect.FieldDescriptor
	fd_KeyRequest_sign_policy_id           protoreflect.FieldDescriptor
	fd_KeyRequest_zenbtc_metadata          protoreflect.FieldDescriptor
	fd_KeyRequest_mpc_btl                  protoreflect.FieldDescriptor
	fd_KeyRequest_fee                      protoreflect.FieldDescriptor
	fd_KeyRequest_public_key               protoreflect.FieldDescriptor
	fd_KeyRequest_keyring_party_sigs       protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_key_proto_init()
	md_KeyRequest = File_zrchain_treasury_key_proto.Messages().ByName("KeyRequest")
	fd_KeyRequest_id = md_KeyRequest.Fields().ByName("id")
	fd_KeyRequest_creator = md_KeyRequest.Fields().ByName("creator")
	fd_KeyRequest_workspace_addr = md_KeyRequest.Fields().ByName("workspace_addr")
	fd_KeyRequest_keyring_addr = md_KeyRequest.Fields().ByName("keyring_addr")
	fd_KeyRequest_key_type = md_KeyRequest.Fields().ByName("key_type")
	fd_KeyRequest_status = md_KeyRequest.Fields().ByName("status")
	fd_KeyRequest_keyring_party_signatures = md_KeyRequest.Fields().ByName("keyring_party_signatures")
	fd_KeyRequest_reject_reason = md_KeyRequest.Fields().ByName("reject_reason")
	fd_KeyRequest_index = md_KeyRequest.Fields().ByName("index")
	fd_KeyRequest_sign_policy_id = md_KeyRequest.Fields().ByName("sign_policy_id")
	fd_KeyRequest_zenbtc_metadata = md_KeyRequest.Fields().ByName("zenbtc_metadata")
	fd_KeyRequest_mpc_btl = md_KeyRequest.Fields().ByName("mpc_btl")
	fd_KeyRequest_fee = md_KeyRequest.Fields().ByName("fee")
	fd_KeyRequest_public_key = md_KeyRequest.Fields().ByName("public_key")
	fd_KeyRequest_keyring_party_sigs = md_KeyRequest.Fields().ByName("keyring_party_sigs")
}

var _ protoreflect.Message = (*fastReflection_KeyRequest)(nil)

type fastReflection_KeyRequest KeyRequest

func (x *KeyRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_KeyRequest)(x)
}

func (x *KeyRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_KeyRequest_messageType fastReflection_KeyRequest_messageType
var _ protoreflect.MessageType = fastReflection_KeyRequest_messageType{}

type fastReflection_KeyRequest_messageType struct{}

func (x fastReflection_KeyRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_KeyRequest)(nil)
}
func (x fastReflection_KeyRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_KeyRequest)
}
func (x fastReflection_KeyRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_KeyRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_KeyRequest) Type() protoreflect.MessageType {
	return _fastReflection_KeyRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_KeyRequest) New() protoreflect.Message {
	return new(fastReflection_KeyRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_KeyRequest) Interface() protoreflect.ProtoMessage {
	return (*KeyRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_KeyRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_KeyRequest_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_KeyRequest_creator, value) {
			return
		}
	}
	if x.WorkspaceAddr != "" {
		value := protoreflect.ValueOfString(x.WorkspaceAddr)
		if !f(fd_KeyRequest_workspace_addr, value) {
			return
		}
	}
	if x.KeyringAddr != "" {
		value := protoreflect.ValueOfString(x.KeyringAddr)
		if !f(fd_KeyRequest_keyring_addr, value) {
			return
		}
	}
	if x.KeyType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.KeyType))
		if !f(fd_KeyRequest_key_type, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_KeyRequest_status, value) {
			return
		}
	}
	if len(x.KeyringPartySignatures) != 0 {
		value := protoreflect.ValueOfList(&_KeyRequest_7_list{list: &x.KeyringPartySignatures})
		if !f(fd_KeyRequest_keyring_party_signatures, value) {
			return
		}
	}
	if x.RejectReason != "" {
		value := protoreflect.ValueOfString(x.RejectReason)
		if !f(fd_KeyRequest_reject_reason, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_KeyRequest_index, value) {
			return
		}
	}
	if x.SignPolicyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignPolicyId)
		if !f(fd_KeyRequest_sign_policy_id, value) {
			return
		}
	}
	if x.ZenbtcMetadata != nil {
		value := protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
		if !f(fd_KeyRequest_zenbtc_metadata, value) {
			return
		}
	}
	if x.MpcBtl != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MpcBtl)
		if !f(fd_KeyRequest_mpc_btl, value) {
			return
		}
	}
	if x.Fee != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Fee)
		if !f(fd_KeyRequest_fee, value) {
			return
		}
	}
	if len(x.PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicKey)
		if !f(fd_KeyRequest_public_key, value) {
			return
		}
	}
	if len(x.KeyringPartySigs) != 0 {
		value := protoreflect.ValueOfList(&_KeyRequest_15_list{list: &x.KeyringPartySigs})
		if !f(fd_KeyRequest_keyring_party_sigs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_KeyRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.KeyRequest.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.KeyRequest.creator":
		return x.Creator != ""
	case "zrchain.treasury.KeyRequest.workspace_addr":
		return x.WorkspaceAddr != ""
	case "zrchain.treasury.KeyRequest.keyring_addr":
		return x.KeyringAddr != ""
	case "zrchain.treasury.KeyRequest.key_type":
		return x.KeyType != 0
	case "zrchain.treasury.KeyRequest.status":
		return x.Status != 0
	case "zrchain.treasury.KeyRequest.keyring_party_signatures":
		return len(x.KeyringPartySignatures) != 0
	case "zrchain.treasury.KeyRequest.reject_reason":
		return x.RejectReason != ""
	case "zrchain.treasury.KeyRequest.index":
		return x.Index != uint64(0)
	case "zrchain.treasury.KeyRequest.sign_policy_id":
		return x.SignPolicyId != uint64(0)
	case "zrchain.treasury.KeyRequest.zenbtc_metadata":
		return x.ZenbtcMetadata != nil
	case "zrchain.treasury.KeyRequest.mpc_btl":
		return x.MpcBtl != uint64(0)
	case "zrchain.treasury.KeyRequest.fee":
		return x.Fee != uint64(0)
	case "zrchain.treasury.KeyRequest.public_key":
		return len(x.PublicKey) != 0
	case "zrchain.treasury.KeyRequest.keyring_party_sigs":
		return len(x.KeyringPartySigs) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.KeyRequest.id":
		x.Id = uint64(0)
	case "zrchain.treasury.KeyRequest.creator":
		x.Creator = ""
	case "zrchain.treasury.KeyRequest.workspace_addr":
		x.WorkspaceAddr = ""
	case "zrchain.treasury.KeyRequest.keyring_addr":
		x.KeyringAddr = ""
	case "zrchain.treasury.KeyRequest.key_type":
		x.KeyType = 0
	case "zrchain.treasury.KeyRequest.status":
		x.Status = 0
	case "zrchain.treasury.KeyRequest.keyring_party_signatures":
		x.KeyringPartySignatures = nil
	case "zrchain.treasury.KeyRequest.reject_reason":
		x.RejectReason = ""
	case "zrchain.treasury.KeyRequest.index":
		x.Index = uint64(0)
	case "zrchain.treasury.KeyRequest.sign_policy_id":
		x.SignPolicyId = uint64(0)
	case "zrchain.treasury.KeyRequest.zenbtc_metadata":
		x.ZenbtcMetadata = nil
	case "zrchain.treasury.KeyRequest.mpc_btl":
		x.MpcBtl = uint64(0)
	case "zrchain.treasury.KeyRequest.fee":
		x.Fee = uint64(0)
	case "zrchain.treasury.KeyRequest.public_key":
		x.PublicKey = nil
	case "zrchain.treasury.KeyRequest.keyring_party_sigs":
		x.KeyringPartySigs = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_KeyRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.KeyRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyRequest.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyRequest.workspace_addr":
		value := x.WorkspaceAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyRequest.keyring_addr":
		value := x.KeyringAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyRequest.key_type":
		value := x.KeyType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.KeyRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.KeyRequest.keyring_party_signatures":
		if len(x.KeyringPartySignatures) == 0 {
			return protoreflect.ValueOfList(&_KeyRequest_7_list{})
		}
		listValue := &_KeyRequest_7_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.KeyRequest.reject_reason":
		value := x.RejectReason
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyRequest.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyRequest.sign_policy_id":
		value := x.SignPolicyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyRequest.zenbtc_metadata":
		value := x.ZenbtcMetadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.treasury.KeyRequest.mpc_btl":
		value := x.MpcBtl
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyRequest.fee":
		value := x.Fee
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyRequest.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.KeyRequest.keyring_party_sigs":
		if len(x.KeyringPartySigs) == 0 {
			return protoreflect.ValueOfList(&_KeyRequest_15_list{})
		}
		listValue := &_KeyRequest_15_list{list: &x.KeyringPartySigs}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.KeyRequest.id":
		x.Id = value.Uint()
	case "zrchain.treasury.KeyRequest.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.KeyRequest.workspace_addr":
		x.WorkspaceAddr = value.Interface().(string)
	case "zrchain.treasury.KeyRequest.keyring_addr":
		x.KeyringAddr = value.Interface().(string)
	case "zrchain.treasury.KeyRequest.key_type":
		x.KeyType = (KeyType)(value.Enum())
	case "zrchain.treasury.KeyRequest.status":
		x.Status = (KeyRequestStatus)(value.Enum())
	case "zrchain.treasury.KeyRequest.keyring_party_signatures":
		lv := value.List()
		clv := lv.(*_KeyRequest_7_list)
		x.KeyringPartySignatures = *clv.list
	case "zrchain.treasury.KeyRequest.reject_reason":
		x.RejectReason = value.Interface().(string)
	case "zrchain.treasury.KeyRequest.index":
		x.Index = value.Uint()
	case "zrchain.treasury.KeyRequest.sign_policy_id":
		x.SignPolicyId = value.Uint()
	case "zrchain.treasury.KeyRequest.zenbtc_metadata":
		x.ZenbtcMetadata = value.Message().Interface().(*ZenBTCMetadata)
	case "zrchain.treasury.KeyRequest.mpc_btl":
		x.MpcBtl = value.Uint()
	case "zrchain.treasury.KeyRequest.fee":
		x.Fee = value.Uint()
	case "zrchain.treasury.KeyRequest.public_key":
		x.PublicKey = value.Bytes()
	case "zrchain.treasury.KeyRequest.keyring_party_sigs":
		lv := value.List()
		clv := lv.(*_KeyRequest_15_list)
		x.KeyringPartySigs = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.KeyRequest.keyring_party_signatures":
		if x.KeyringPartySignatures == nil {
			x.KeyringPartySignatures = [][]byte{}
		}
		value := &_KeyRequest_7_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.KeyRequest.zenbtc_metadata":
		if x.ZenbtcMetadata == nil {
			x.ZenbtcMetadata = new(ZenBTCMetadata)
		}
		return protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
	case "zrchain.treasury.KeyRequest.keyring_party_sigs":
		if x.KeyringPartySigs == nil {
			x.KeyringPartySigs = []*PartySignature{}
		}
		value := &_KeyRequest_15_list{list: &x.KeyringPartySigs}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.KeyRequest.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.workspace_addr":
		panic(fmt.Errorf("field workspace_addr of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.keyring_addr":
		panic(fmt.Errorf("field keyring_addr of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.key_type":
		panic(fmt.Errorf("field key_type of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.status":
		panic(fmt.Errorf("field status of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.reject_reason":
		panic(fmt.Errorf("field reject_reason of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.index":
		panic(fmt.Errorf("field index of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.sign_policy_id":
		panic(fmt.Errorf("field sign_policy_id of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.mpc_btl":
		panic(fmt.Errorf("field mpc_btl of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.fee":
		panic(fmt.Errorf("field fee of message zrchain.treasury.KeyRequest is not mutable"))
	case "zrchain.treasury.KeyRequest.public_key":
		panic(fmt.Errorf("field public_key of message zrchain.treasury.KeyRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_KeyRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.KeyRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyRequest.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyRequest.workspace_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyRequest.keyring_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyRequest.key_type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.KeyRequest.status":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.KeyRequest.keyring_party_signatures":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_KeyRequest_7_list{list: &list})
	case "zrchain.treasury.KeyRequest.reject_reason":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyRequest.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyRequest.sign_policy_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyRequest.zenbtc_metadata":
		m := new(ZenBTCMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.treasury.KeyRequest.mpc_btl":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyRequest.fee":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyRequest.public_key":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.KeyRequest.keyring_party_sigs":
		list := []*PartySignature{}
		return protoreflect.ValueOfList(&_KeyRequest_15_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_KeyRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.KeyRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_KeyRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_KeyRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_KeyRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*KeyRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.WorkspaceAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KeyringAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyType != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyType))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if len(x.KeyringPartySignatures) > 0 {
			for _, b := range x.KeyringPartySignatures {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.RejectReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		if x.SignPolicyId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignPolicyId))
		}
		if x.ZenbtcMetadata != nil {
			l = options.Size(x.ZenbtcMetadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MpcBtl != 0 {
			n += 1 + runtime.Sov(uint64(x.MpcBtl))
		}
		if x.Fee != 0 {
			n += 1 + runtime.Sov(uint64(x.Fee))
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.KeyringPartySigs) > 0 {
			for _, e := range x.KeyringPartySigs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*KeyRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.KeyringPartySigs) > 0 {
			for iNdEx := len(x.KeyringPartySigs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.KeyringPartySigs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x72
		}
		if x.Fee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Fee))
			i--
			dAtA[i] = 0x68
		}
		if x.MpcBtl != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MpcBtl))
			i--
			dAtA[i] = 0x60
		}
		if x.ZenbtcMetadata != nil {
			encoded, err := options.Marshal(x.ZenbtcMetadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.SignPolicyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignPolicyId))
			i--
			dAtA[i] = 0x50
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x48
		}
		if len(x.RejectReason) > 0 {
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.KeyringPartySignatures) > 0 {
			for iNdEx := len(x.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.KeyringPartySignatures[iNdEx])
				copy(dAtA[i:], x.KeyringPartySignatures[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringPartySignatures[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if x.KeyType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyType))
			i--
			dAtA[i] = 0x28
		}
		if len(x.KeyringAddr) > 0 {
			i -= len(x.KeyringAddr)
			copy(dAtA[i:], x.KeyringAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringAddr)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.WorkspaceAddr) > 0 {
			i -= len(x.WorkspaceAddr)
			copy(dAtA[i:], x.WorkspaceAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WorkspaceAddr)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*KeyRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
				}
				x.KeyType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyType |= KeyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= KeyRequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringPartySignatures = append(x.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
				copy(x.KeyringPartySignatures[len(x.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RejectReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
				}
				x.SignPolicyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignPolicyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ZenbtcMetadata == nil {
					x.ZenbtcMetadata = &ZenBTCMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ZenbtcMetadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
				}
				x.MpcBtl = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MpcBtl |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				x.Fee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Fee |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = append(x.PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicKey == nil {
					x.PublicKey = []byte{}
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySigs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringPartySigs = append(x.KeyringPartySigs, &PartySignature{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.KeyringPartySigs[len(x.KeyringPartySigs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_KeyReqResponse_7_list)(nil)

type _KeyReqResponse_7_list struct {
	list *[]*PartySignature
}

func (x *_KeyReqResponse_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_KeyReqResponse_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_KeyReqResponse_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PartySignature)
	(*x.list)[i] = concreteValue
}

func (x *_KeyReqResponse_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PartySignature)
	*x.list = append(*x.list, concreteValue)
}

func (x *_KeyReqResponse_7_list) AppendMutable() protoreflect.Value {
	v := new(PartySignature)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_KeyReqResponse_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_KeyReqResponse_7_list) NewElement() protoreflect.Value {
	v := new(PartySignature)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_KeyReqResponse_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_KeyReqResponse                          protoreflect.MessageDescriptor
	fd_KeyReqResponse_id                       protoreflect.FieldDescriptor
	fd_KeyReqResponse_creator                  protoreflect.FieldDescriptor
	fd_KeyReqResponse_workspace_addr           protoreflect.FieldDescriptor
	fd_KeyReqResponse_keyring_addr             protoreflect.FieldDescriptor
	fd_KeyReqResponse_key_type                 protoreflect.FieldDescriptor
	fd_KeyReqResponse_status                   protoreflect.FieldDescriptor
	fd_KeyReqResponse_keyring_party_signatures protoreflect.FieldDescriptor
	fd_KeyReqResponse_reject_reason            protoreflect.FieldDescriptor
	fd_KeyReqResponse_index                    protoreflect.FieldDescriptor
	fd_KeyReqResponse_sign_policy_id           protoreflect.FieldDescriptor
	fd_KeyReqResponse_zenbtc_metadata          protoreflect.FieldDescriptor
	fd_KeyReqResponse_mpc_btl                  protoreflect.FieldDescriptor
	fd_KeyReqResponse_fee                      protoreflect.FieldDescriptor
	fd_KeyReqResponse_public_key               protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_key_proto_init()
	md_KeyReqResponse = File_zrchain_treasury_key_proto.Messages().ByName("KeyReqResponse")
	fd_KeyReqResponse_id = md_KeyReqResponse.Fields().ByName("id")
	fd_KeyReqResponse_creator = md_KeyReqResponse.Fields().ByName("creator")
	fd_KeyReqResponse_workspace_addr = md_KeyReqResponse.Fields().ByName("workspace_addr")
	fd_KeyReqResponse_keyring_addr = md_KeyReqResponse.Fields().ByName("keyring_addr")
	fd_KeyReqResponse_key_type = md_KeyReqResponse.Fields().ByName("key_type")
	fd_KeyReqResponse_status = md_KeyReqResponse.Fields().ByName("status")
	fd_KeyReqResponse_keyring_party_signatures = md_KeyReqResponse.Fields().ByName("keyring_party_signatures")
	fd_KeyReqResponse_reject_reason = md_KeyReqResponse.Fields().ByName("reject_reason")
	fd_KeyReqResponse_index = md_KeyReqResponse.Fields().ByName("index")
	fd_KeyReqResponse_sign_policy_id = md_KeyReqResponse.Fields().ByName("sign_policy_id")
	fd_KeyReqResponse_zenbtc_metadata = md_KeyReqResponse.Fields().ByName("zenbtc_metadata")
	fd_KeyReqResponse_mpc_btl = md_KeyReqResponse.Fields().ByName("mpc_btl")
	fd_KeyReqResponse_fee = md_KeyReqResponse.Fields().ByName("fee")
	fd_KeyReqResponse_public_key = md_KeyReqResponse.Fields().ByName("public_key")
}

var _ protoreflect.Message = (*fastReflection_KeyReqResponse)(nil)

type fastReflection_KeyReqResponse KeyReqResponse

func (x *KeyReqResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_KeyReqResponse)(x)
}

func (x *KeyReqResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_KeyReqResponse_messageType fastReflection_KeyReqResponse_messageType
var _ protoreflect.MessageType = fastReflection_KeyReqResponse_messageType{}

type fastReflection_KeyReqResponse_messageType struct{}

func (x fastReflection_KeyReqResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_KeyReqResponse)(nil)
}
func (x fastReflection_KeyReqResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_KeyReqResponse)
}
func (x fastReflection_KeyReqResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyReqResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_KeyReqResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyReqResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_KeyReqResponse) Type() protoreflect.MessageType {
	return _fastReflection_KeyReqResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_KeyReqResponse) New() protoreflect.Message {
	return new(fastReflection_KeyReqResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_KeyReqResponse) Interface() protoreflect.ProtoMessage {
	return (*KeyReqResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_KeyReqResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_KeyReqResponse_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_KeyReqResponse_creator, value) {
			return
		}
	}
	if x.WorkspaceAddr != "" {
		value := protoreflect.ValueOfString(x.WorkspaceAddr)
		if !f(fd_KeyReqResponse_workspace_addr, value) {
			return
		}
	}
	if x.KeyringAddr != "" {
		value := protoreflect.ValueOfString(x.KeyringAddr)
		if !f(fd_KeyReqResponse_keyring_addr, value) {
			return
		}
	}
	if x.KeyType != "" {
		value := protoreflect.ValueOfString(x.KeyType)
		if !f(fd_KeyReqResponse_key_type, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_KeyReqResponse_status, value) {
			return
		}
	}
	if len(x.KeyringPartySignatures) != 0 {
		value := protoreflect.ValueOfList(&_KeyReqResponse_7_list{list: &x.KeyringPartySignatures})
		if !f(fd_KeyReqResponse_keyring_party_signatures, value) {
			return
		}
	}
	if x.RejectReason != "" {
		value := protoreflect.ValueOfString(x.RejectReason)
		if !f(fd_KeyReqResponse_reject_reason, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_KeyReqResponse_index, value) {
			return
		}
	}
	if x.SignPolicyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignPolicyId)
		if !f(fd_KeyReqResponse_sign_policy_id, value) {
			return
		}
	}
	if x.ZenbtcMetadata != nil {
		value := protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
		if !f(fd_KeyReqResponse_zenbtc_metadata, value) {
			return
		}
	}
	if x.MpcBtl != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MpcBtl)
		if !f(fd_KeyReqResponse_mpc_btl, value) {
			return
		}
	}
	if x.Fee != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Fee)
		if !f(fd_KeyReqResponse_fee, value) {
			return
		}
	}
	if len(x.PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicKey)
		if !f(fd_KeyReqResponse_public_key, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_KeyReqResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.KeyReqResponse.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.KeyReqResponse.creator":
		return x.Creator != ""
	case "zrchain.treasury.KeyReqResponse.workspace_addr":
		return x.WorkspaceAddr != ""
	case "zrchain.treasury.KeyReqResponse.keyring_addr":
		return x.KeyringAddr != ""
	case "zrchain.treasury.KeyReqResponse.key_type":
		return x.KeyType != ""
	case "zrchain.treasury.KeyReqResponse.status":
		return x.Status != ""
	case "zrchain.treasury.KeyReqResponse.keyring_party_signatures":
		return len(x.KeyringPartySignatures) != 0
	case "zrchain.treasury.KeyReqResponse.reject_reason":
		return x.RejectReason != ""
	case "zrchain.treasury.KeyReqResponse.index":
		return x.Index != uint64(0)
	case "zrchain.treasury.KeyReqResponse.sign_policy_id":
		return x.SignPolicyId != uint64(0)
	case "zrchain.treasury.KeyReqResponse.zenbtc_metadata":
		return x.ZenbtcMetadata != nil
	case "zrchain.treasury.KeyReqResponse.mpc_btl":
		return x.MpcBtl != uint64(0)
	case "zrchain.treasury.KeyReqResponse.fee":
		return x.Fee != uint64(0)
	case "zrchain.treasury.KeyReqResponse.public_key":
		return len(x.PublicKey) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyReqResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyReqResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.KeyReqResponse.id":
		x.Id = uint64(0)
	case "zrchain.treasury.KeyReqResponse.creator":
		x.Creator = ""
	case "zrchain.treasury.KeyReqResponse.workspace_addr":
		x.WorkspaceAddr = ""
	case "zrchain.treasury.KeyReqResponse.keyring_addr":
		x.KeyringAddr = ""
	case "zrchain.treasury.KeyReqResponse.key_type":
		x.KeyType = ""
	case "zrchain.treasury.KeyReqResponse.status":
		x.Status = ""
	case "zrchain.treasury.KeyReqResponse.keyring_party_signatures":
		x.KeyringPartySignatures = nil
	case "zrchain.treasury.KeyReqResponse.reject_reason":
		x.RejectReason = ""
	case "zrchain.treasury.KeyReqResponse.index":
		x.Index = uint64(0)
	case "zrchain.treasury.KeyReqResponse.sign_policy_id":
		x.SignPolicyId = uint64(0)
	case "zrchain.treasury.KeyReqResponse.zenbtc_metadata":
		x.ZenbtcMetadata = nil
	case "zrchain.treasury.KeyReqResponse.mpc_btl":
		x.MpcBtl = uint64(0)
	case "zrchain.treasury.KeyReqResponse.fee":
		x.Fee = uint64(0)
	case "zrchain.treasury.KeyReqResponse.public_key":
		x.PublicKey = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyReqResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_KeyReqResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.KeyReqResponse.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyReqResponse.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyReqResponse.workspace_addr":
		value := x.WorkspaceAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyReqResponse.keyring_addr":
		value := x.KeyringAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyReqResponse.key_type":
		value := x.KeyType
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyReqResponse.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyReqResponse.keyring_party_signatures":
		if len(x.KeyringPartySignatures) == 0 {
			return protoreflect.ValueOfList(&_KeyReqResponse_7_list{})
		}
		listValue := &_KeyReqResponse_7_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.KeyReqResponse.reject_reason":
		value := x.RejectReason
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyReqResponse.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyReqResponse.sign_policy_id":
		value := x.SignPolicyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyReqResponse.zenbtc_metadata":
		value := x.ZenbtcMetadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.treasury.KeyReqResponse.mpc_btl":
		value := x.MpcBtl
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyReqResponse.fee":
		value := x.Fee
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyReqResponse.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyReqResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyReqResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.KeyReqResponse.id":
		x.Id = value.Uint()
	case "zrchain.treasury.KeyReqResponse.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.KeyReqResponse.workspace_addr":
		x.WorkspaceAddr = value.Interface().(string)
	case "zrchain.treasury.KeyReqResponse.keyring_addr":
		x.KeyringAddr = value.Interface().(string)
	case "zrchain.treasury.KeyReqResponse.key_type":
		x.KeyType = value.Interface().(string)
	case "zrchain.treasury.KeyReqResponse.status":
		x.Status = value.Interface().(string)
	case "zrchain.treasury.KeyReqResponse.keyring_party_signatures":
		lv := value.List()
		clv := lv.(*_KeyReqResponse_7_list)
		x.KeyringPartySignatures = *clv.list
	case "zrchain.treasury.KeyReqResponse.reject_reason":
		x.RejectReason = value.Interface().(string)
	case "zrchain.treasury.KeyReqResponse.index":
		x.Index = value.Uint()
	case "zrchain.treasury.KeyReqResponse.sign_policy_id":
		x.SignPolicyId = value.Uint()
	case "zrchain.treasury.KeyReqResponse.zenbtc_metadata":
		x.ZenbtcMetadata = value.Message().Interface().(*ZenBTCMetadata)
	case "zrchain.treasury.KeyReqResponse.mpc_btl":
		x.MpcBtl = value.Uint()
	case "zrchain.treasury.KeyReqResponse.fee":
		x.Fee = value.Uint()
	case "zrchain.treasury.KeyReqResponse.public_key":
		x.PublicKey = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyReqResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyReqResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.KeyReqResponse.keyring_party_signatures":
		if x.KeyringPartySignatures == nil {
			x.KeyringPartySignatures = []*PartySignature{}
		}
		value := &_KeyReqResponse_7_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.KeyReqResponse.zenbtc_metadata":
		if x.ZenbtcMetadata == nil {
			x.ZenbtcMetadata = new(ZenBTCMetadata)
		}
		return protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
	case "zrchain.treasury.KeyReqResponse.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.workspace_addr":
		panic(fmt.Errorf("field workspace_addr of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.keyring_addr":
		panic(fmt.Errorf("field keyring_addr of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.key_type":
		panic(fmt.Errorf("field key_type of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.status":
		panic(fmt.Errorf("field status of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.reject_reason":
		panic(fmt.Errorf("field reject_reason of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.index":
		panic(fmt.Errorf("field index of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.sign_policy_id":
		panic(fmt.Errorf("field sign_policy_id of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.mpc_btl":
		panic(fmt.Errorf("field mpc_btl of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.fee":
		panic(fmt.Errorf("field fee of message zrchain.treasury.KeyReqResponse is not mutable"))
	case "zrchain.treasury.KeyReqResponse.public_key":
		panic(fmt.Errorf("field public_key of message zrchain.treasury.KeyReqResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyReqResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_KeyReqResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.KeyReqResponse.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyReqResponse.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyReqResponse.workspace_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyReqResponse.keyring_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyReqResponse.key_type":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyReqResponse.status":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyReqResponse.keyring_party_signatures":
		list := []*PartySignature{}
		return protoreflect.ValueOfList(&_KeyReqResponse_7_list{list: &list})
	case "zrchain.treasury.KeyReqResponse.reject_reason":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyReqResponse.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyReqResponse.sign_policy_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyReqResponse.zenbtc_metadata":
		m := new(ZenBTCMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.treasury.KeyReqResponse.mpc_btl":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyReqResponse.fee":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyReqResponse.public_key":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyReqResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_KeyReqResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.KeyReqResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_KeyReqResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyReqResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_KeyReqResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_KeyReqResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*KeyReqResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.WorkspaceAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KeyringAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KeyType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.KeyringPartySignatures) > 0 {
			for _, e := range x.KeyringPartySignatures {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.RejectReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		if x.SignPolicyId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignPolicyId))
		}
		if x.ZenbtcMetadata != nil {
			l = options.Size(x.ZenbtcMetadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MpcBtl != 0 {
			n += 1 + runtime.Sov(uint64(x.MpcBtl))
		}
		if x.Fee != 0 {
			n += 1 + runtime.Sov(uint64(x.Fee))
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*KeyReqResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x72
		}
		if x.Fee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Fee))
			i--
			dAtA[i] = 0x68
		}
		if x.MpcBtl != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MpcBtl))
			i--
			dAtA[i] = 0x60
		}
		if x.ZenbtcMetadata != nil {
			encoded, err := options.Marshal(x.ZenbtcMetadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.SignPolicyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignPolicyId))
			i--
			dAtA[i] = 0x50
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x48
		}
		if len(x.RejectReason) > 0 {
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.KeyringPartySignatures) > 0 {
			for iNdEx := len(x.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.KeyringPartySignatures[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.KeyType) > 0 {
			i -= len(x.KeyType)
			copy(dAtA[i:], x.KeyType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyType)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.KeyringAddr) > 0 {
			i -= len(x.KeyringAddr)
			copy(dAtA[i:], x.KeyringAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringAddr)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.WorkspaceAddr) > 0 {
			i -= len(x.WorkspaceAddr)
			copy(dAtA[i:], x.WorkspaceAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WorkspaceAddr)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*KeyReqResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyReqResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringPartySignatures = append(x.KeyringPartySignatures, &PartySignature{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.KeyringPartySignatures[len(x.KeyringPartySignatures)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RejectReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
				}
				x.SignPolicyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignPolicyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ZenbtcMetadata == nil {
					x.ZenbtcMetadata = &ZenBTCMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ZenbtcMetadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
				}
				x.MpcBtl = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MpcBtl |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				x.Fee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Fee |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = append(x.PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicKey == nil {
					x.PublicKey = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Key                 protoreflect.MessageDescriptor
	fd_Key_id              protoreflect.FieldDescriptor
	fd_Key_workspace_addr  protoreflect.FieldDescriptor
	fd_Key_keyring_addr    protoreflect.FieldDescriptor
	fd_Key_type            protoreflect.FieldDescriptor
	fd_Key_public_key      protoreflect.FieldDescriptor
	fd_Key_index           protoreflect.FieldDescriptor
	fd_Key_sign_policy_id  protoreflect.FieldDescriptor
	fd_Key_zenbtc_metadata protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_key_proto_init()
	md_Key = File_zrchain_treasury_key_proto.Messages().ByName("Key")
	fd_Key_id = md_Key.Fields().ByName("id")
	fd_Key_workspace_addr = md_Key.Fields().ByName("workspace_addr")
	fd_Key_keyring_addr = md_Key.Fields().ByName("keyring_addr")
	fd_Key_type = md_Key.Fields().ByName("type")
	fd_Key_public_key = md_Key.Fields().ByName("public_key")
	fd_Key_index = md_Key.Fields().ByName("index")
	fd_Key_sign_policy_id = md_Key.Fields().ByName("sign_policy_id")
	fd_Key_zenbtc_metadata = md_Key.Fields().ByName("zenbtc_metadata")
}

var _ protoreflect.Message = (*fastReflection_Key)(nil)

type fastReflection_Key Key

func (x *Key) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Key)(x)
}

func (x *Key) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Key_messageType fastReflection_Key_messageType
var _ protoreflect.MessageType = fastReflection_Key_messageType{}

type fastReflection_Key_messageType struct{}

func (x fastReflection_Key_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Key)(nil)
}
func (x fastReflection_Key_messageType) New() protoreflect.Message {
	return new(fastReflection_Key)
}
func (x fastReflection_Key_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Key
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Key) Descriptor() protoreflect.MessageDescriptor {
	return md_Key
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Key) Type() protoreflect.MessageType {
	return _fastReflection_Key_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Key) New() protoreflect.Message {
	return new(fastReflection_Key)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Key) Interface() protoreflect.ProtoMessage {
	return (*Key)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Key) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Key_id, value) {
			return
		}
	}
	if x.WorkspaceAddr != "" {
		value := protoreflect.ValueOfString(x.WorkspaceAddr)
		if !f(fd_Key_workspace_addr, value) {
			return
		}
	}
	if x.KeyringAddr != "" {
		value := protoreflect.ValueOfString(x.KeyringAddr)
		if !f(fd_Key_keyring_addr, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Key_type, value) {
			return
		}
	}
	if len(x.PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicKey)
		if !f(fd_Key_public_key, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_Key_index, value) {
			return
		}
	}
	if x.SignPolicyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignPolicyId)
		if !f(fd_Key_sign_policy_id, value) {
			return
		}
	}
	if x.ZenbtcMetadata != nil {
		value := protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
		if !f(fd_Key_zenbtc_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Key) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.Key.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.Key.workspace_addr":
		return x.WorkspaceAddr != ""
	case "zrchain.treasury.Key.keyring_addr":
		return x.KeyringAddr != ""
	case "zrchain.treasury.Key.type":
		return x.Type_ != 0
	case "zrchain.treasury.Key.public_key":
		return len(x.PublicKey) != 0
	case "zrchain.treasury.Key.index":
		return x.Index != uint64(0)
	case "zrchain.treasury.Key.sign_policy_id":
		return x.SignPolicyId != uint64(0)
	case "zrchain.treasury.Key.zenbtc_metadata":
		return x.ZenbtcMetadata != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.Key"))
		}
		panic(fmt.Errorf("message zrchain.treasury.Key does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.Key.id":
		x.Id = uint64(0)
	case "zrchain.treasury.Key.workspace_addr":
		x.WorkspaceAddr = ""
	case "zrchain.treasury.Key.keyring_addr":
		x.KeyringAddr = ""
	case "zrchain.treasury.Key.type":
		x.Type_ = 0
	case "zrchain.treasury.Key.public_key":
		x.PublicKey = nil
	case "zrchain.treasury.Key.index":
		x.Index = uint64(0)
	case "zrchain.treasury.Key.sign_policy_id":
		x.SignPolicyId = uint64(0)
	case "zrchain.treasury.Key.zenbtc_metadata":
		x.ZenbtcMetadata = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.Key"))
		}
		panic(fmt.Errorf("message zrchain.treasury.Key does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Key) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.Key.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.Key.workspace_addr":
		value := x.WorkspaceAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.Key.keyring_addr":
		value := x.KeyringAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.Key.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.Key.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.Key.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.Key.sign_policy_id":
		value := x.SignPolicyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.Key.zenbtc_metadata":
		value := x.ZenbtcMetadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.Key"))
		}
		panic(fmt.Errorf("message zrchain.treasury.Key does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.Key.id":
		x.Id = value.Uint()
	case "zrchain.treasury.Key.workspace_addr":
		x.WorkspaceAddr = value.Interface().(string)
	case "zrchain.treasury.Key.keyring_addr":
		x.KeyringAddr = value.Interface().(string)
	case "zrchain.treasury.Key.type":
		x.Type_ = (KeyType)(value.Enum())
	case "zrchain.treasury.Key.public_key":
		x.PublicKey = value.Bytes()
	case "zrchain.treasury.Key.index":
		x.Index = value.Uint()
	case "zrchain.treasury.Key.sign_policy_id":
		x.SignPolicyId = value.Uint()
	case "zrchain.treasury.Key.zenbtc_metadata":
		x.ZenbtcMetadata = value.Message().Interface().(*ZenBTCMetadata)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.Key"))
		}
		panic(fmt.Errorf("message zrchain.treasury.Key does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.Key.zenbtc_metadata":
		if x.ZenbtcMetadata == nil {
			x.ZenbtcMetadata = new(ZenBTCMetadata)
		}
		return protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
	case "zrchain.treasury.Key.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.Key is not mutable"))
	case "zrchain.treasury.Key.workspace_addr":
		panic(fmt.Errorf("field workspace_addr of message zrchain.treasury.Key is not mutable"))
	case "zrchain.treasury.Key.keyring_addr":
		panic(fmt.Errorf("field keyring_addr of message zrchain.treasury.Key is not mutable"))
	case "zrchain.treasury.Key.type":
		panic(fmt.Errorf("field type of message zrchain.treasury.Key is not mutable"))
	case "zrchain.treasury.Key.public_key":
		panic(fmt.Errorf("field public_key of message zrchain.treasury.Key is not mutable"))
	case "zrchain.treasury.Key.index":
		panic(fmt.Errorf("field index of message zrchain.treasury.Key is not mutable"))
	case "zrchain.treasury.Key.sign_policy_id":
		panic(fmt.Errorf("field sign_policy_id of message zrchain.treasury.Key is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.Key"))
		}
		panic(fmt.Errorf("message zrchain.treasury.Key does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Key) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.Key.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.Key.workspace_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.Key.keyring_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.Key.type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.Key.public_key":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.Key.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.Key.sign_policy_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.Key.zenbtc_metadata":
		m := new(ZenBTCMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.Key"))
		}
		panic(fmt.Errorf("message zrchain.treasury.Key does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Key) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.Key", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Key) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Key) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Key) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Key) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Key)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.WorkspaceAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KeyringAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		if x.SignPolicyId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignPolicyId))
		}
		if x.ZenbtcMetadata != nil {
			l = options.Size(x.ZenbtcMetadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Key)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ZenbtcMetadata != nil {
			encoded, err := options.Marshal(x.ZenbtcMetadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.SignPolicyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignPolicyId))
			i--
			dAtA[i] = 0x50
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x48
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x20
		}
		if len(x.KeyringAddr) > 0 {
			i -= len(x.KeyringAddr)
			copy(dAtA[i:], x.KeyringAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringAddr)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.WorkspaceAddr) > 0 {
			i -= len(x.WorkspaceAddr)
			copy(dAtA[i:], x.WorkspaceAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WorkspaceAddr)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Key)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Key: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= KeyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = append(x.PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicKey == nil {
					x.PublicKey = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
				}
				x.SignPolicyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignPolicyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ZenbtcMetadata == nil {
					x.ZenbtcMetadata = &ZenBTCMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ZenbtcMetadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_KeyResponse                 protoreflect.MessageDescriptor
	fd_KeyResponse_id              protoreflect.FieldDescriptor
	fd_KeyResponse_workspace_addr  protoreflect.FieldDescriptor
	fd_KeyResponse_keyring_addr    protoreflect.FieldDescriptor
	fd_KeyResponse_type            protoreflect.FieldDescriptor
	fd_KeyResponse_public_key      protoreflect.FieldDescriptor
	fd_KeyResponse_index           protoreflect.FieldDescriptor
	fd_KeyResponse_sign_policy_id  protoreflect.FieldDescriptor
	fd_KeyResponse_zenbtc_metadata protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_key_proto_init()
	md_KeyResponse = File_zrchain_treasury_key_proto.Messages().ByName("KeyResponse")
	fd_KeyResponse_id = md_KeyResponse.Fields().ByName("id")
	fd_KeyResponse_workspace_addr = md_KeyResponse.Fields().ByName("workspace_addr")
	fd_KeyResponse_keyring_addr = md_KeyResponse.Fields().ByName("keyring_addr")
	fd_KeyResponse_type = md_KeyResponse.Fields().ByName("type")
	fd_KeyResponse_public_key = md_KeyResponse.Fields().ByName("public_key")
	fd_KeyResponse_index = md_KeyResponse.Fields().ByName("index")
	fd_KeyResponse_sign_policy_id = md_KeyResponse.Fields().ByName("sign_policy_id")
	fd_KeyResponse_zenbtc_metadata = md_KeyResponse.Fields().ByName("zenbtc_metadata")
}

var _ protoreflect.Message = (*fastReflection_KeyResponse)(nil)

type fastReflection_KeyResponse KeyResponse

func (x *KeyResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_KeyResponse)(x)
}

func (x *KeyResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_key_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_KeyResponse_messageType fastReflection_KeyResponse_messageType
var _ protoreflect.MessageType = fastReflection_KeyResponse_messageType{}

type fastReflection_KeyResponse_messageType struct{}

func (x fastReflection_KeyResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_KeyResponse)(nil)
}
func (x fastReflection_KeyResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_KeyResponse)
}
func (x fastReflection_KeyResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_KeyResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_KeyResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_KeyResponse) Type() protoreflect.MessageType {
	return _fastReflection_KeyResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_KeyResponse) New() protoreflect.Message {
	return new(fastReflection_KeyResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_KeyResponse) Interface() protoreflect.ProtoMessage {
	return (*KeyResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_KeyResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_KeyResponse_id, value) {
			return
		}
	}
	if x.WorkspaceAddr != "" {
		value := protoreflect.ValueOfString(x.WorkspaceAddr)
		if !f(fd_KeyResponse_workspace_addr, value) {
			return
		}
	}
	if x.KeyringAddr != "" {
		value := protoreflect.ValueOfString(x.KeyringAddr)
		if !f(fd_KeyResponse_keyring_addr, value) {
			return
		}
	}
	if x.Type_ != "" {
		value := protoreflect.ValueOfString(x.Type_)
		if !f(fd_KeyResponse_type, value) {
			return
		}
	}
	if len(x.PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PublicKey)
		if !f(fd_KeyResponse_public_key, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_KeyResponse_index, value) {
			return
		}
	}
	if x.SignPolicyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignPolicyId)
		if !f(fd_KeyResponse_sign_policy_id, value) {
			return
		}
	}
	if x.ZenbtcMetadata != nil {
		value := protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
		if !f(fd_KeyResponse_zenbtc_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_KeyResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.KeyResponse.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.KeyResponse.workspace_addr":
		return x.WorkspaceAddr != ""
	case "zrchain.treasury.KeyResponse.keyring_addr":
		return x.KeyringAddr != ""
	case "zrchain.treasury.KeyResponse.type":
		return x.Type_ != ""
	case "zrchain.treasury.KeyResponse.public_key":
		return len(x.PublicKey) != 0
	case "zrchain.treasury.KeyResponse.index":
		return x.Index != uint64(0)
	case "zrchain.treasury.KeyResponse.sign_policy_id":
		return x.SignPolicyId != uint64(0)
	case "zrchain.treasury.KeyResponse.zenbtc_metadata":
		return x.ZenbtcMetadata != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.KeyResponse.id":
		x.Id = uint64(0)
	case "zrchain.treasury.KeyResponse.workspace_addr":
		x.WorkspaceAddr = ""
	case "zrchain.treasury.KeyResponse.keyring_addr":
		x.KeyringAddr = ""
	case "zrchain.treasury.KeyResponse.type":
		x.Type_ = ""
	case "zrchain.treasury.KeyResponse.public_key":
		x.PublicKey = nil
	case "zrchain.treasury.KeyResponse.index":
		x.Index = uint64(0)
	case "zrchain.treasury.KeyResponse.sign_policy_id":
		x.SignPolicyId = uint64(0)
	case "zrchain.treasury.KeyResponse.zenbtc_metadata":
		x.ZenbtcMetadata = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_KeyResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.KeyResponse.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyResponse.workspace_addr":
		value := x.WorkspaceAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyResponse.keyring_addr":
		value := x.KeyringAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyResponse.type":
		value := x.Type_
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.KeyResponse.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.KeyResponse.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyResponse.sign_policy_id":
		value := x.SignPolicyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.KeyResponse.zenbtc_metadata":
		value := x.ZenbtcMetadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.KeyResponse.id":
		x.Id = value.Uint()
	case "zrchain.treasury.KeyResponse.workspace_addr":
		x.WorkspaceAddr = value.Interface().(string)
	case "zrchain.treasury.KeyResponse.keyring_addr":
		x.KeyringAddr = value.Interface().(string)
	case "zrchain.treasury.KeyResponse.type":
		x.Type_ = value.Interface().(string)
	case "zrchain.treasury.KeyResponse.public_key":
		x.PublicKey = value.Bytes()
	case "zrchain.treasury.KeyResponse.index":
		x.Index = value.Uint()
	case "zrchain.treasury.KeyResponse.sign_policy_id":
		x.SignPolicyId = value.Uint()
	case "zrchain.treasury.KeyResponse.zenbtc_metadata":
		x.ZenbtcMetadata = value.Message().Interface().(*ZenBTCMetadata)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.KeyResponse.zenbtc_metadata":
		if x.ZenbtcMetadata == nil {
			x.ZenbtcMetadata = new(ZenBTCMetadata)
		}
		return protoreflect.ValueOfMessage(x.ZenbtcMetadata.ProtoReflect())
	case "zrchain.treasury.KeyResponse.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.KeyResponse is not mutable"))
	case "zrchain.treasury.KeyResponse.workspace_addr":
		panic(fmt.Errorf("field workspace_addr of message zrchain.treasury.KeyResponse is not mutable"))
	case "zrchain.treasury.KeyResponse.keyring_addr":
		panic(fmt.Errorf("field keyring_addr of message zrchain.treasury.KeyResponse is not mutable"))
	case "zrchain.treasury.KeyResponse.type":
		panic(fmt.Errorf("field type of message zrchain.treasury.KeyResponse is not mutable"))
	case "zrchain.treasury.KeyResponse.public_key":
		panic(fmt.Errorf("field public_key of message zrchain.treasury.KeyResponse is not mutable"))
	case "zrchain.treasury.KeyResponse.index":
		panic(fmt.Errorf("field index of message zrchain.treasury.KeyResponse is not mutable"))
	case "zrchain.treasury.KeyResponse.sign_policy_id":
		panic(fmt.Errorf("field sign_policy_id of message zrchain.treasury.KeyResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_KeyResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.KeyResponse.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyResponse.workspace_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyResponse.keyring_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyResponse.type":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.KeyResponse.public_key":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.KeyResponse.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyResponse.sign_policy_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.KeyResponse.zenbtc_metadata":
		m := new(ZenBTCMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.KeyResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.KeyResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_KeyResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.KeyResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_KeyResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeyResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_KeyResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_KeyResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*KeyResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.WorkspaceAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KeyringAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Type_)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		if x.SignPolicyId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignPolicyId))
		}
		if x.ZenbtcMetadata != nil {
			l = options.Size(x.ZenbtcMetadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*KeyResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ZenbtcMetadata != nil {
			encoded, err := options.Marshal(x.ZenbtcMetadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.SignPolicyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignPolicyId))
			i--
			dAtA[i] = 0x50
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x48
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Type_) > 0 {
			i -= len(x.Type_)
			copy(dAtA[i:], x.Type_)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Type_)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.KeyringAddr) > 0 {
			i -= len(x.KeyringAddr)
			copy(dAtA[i:], x.KeyringAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringAddr)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.WorkspaceAddr) > 0 {
			i -= len(x.WorkspaceAddr)
			copy(dAtA[i:], x.WorkspaceAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WorkspaceAddr)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*KeyResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Type_ = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = append(x.PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PublicKey == nil {
					x.PublicKey = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
				}
				x.SignPolicyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignPolicyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ZenbtcMetadata == nil {
					x.ZenbtcMetadata = &ZenBTCMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ZenbtcMetadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ZenBTCMetadata                protoreflect.MessageDescriptor
	fd_ZenBTCMetadata_recipient_addr protoreflect.FieldDescriptor
	fd_ZenBTCMetadata_chain_type     protoreflect.FieldDescriptor
	fd_ZenBTCMetadata_chain_id       protoreflect.FieldDescriptor
	fd_ZenBTCMetadata_return_address protoreflect.FieldDescriptor
	fd_ZenBTCMetadata_caip2_chain_id protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_key_proto_init()
	md_ZenBTCMetadata = File_zrchain_treasury_key_proto.Messages().ByName("ZenBTCMetadata")
	fd_ZenBTCMetadata_recipient_addr = md_ZenBTCMetadata.Fields().ByName("recipient_addr")
	fd_ZenBTCMetadata_chain_type = md_ZenBTCMetadata.Fields().ByName("chain_type")
	fd_ZenBTCMetadata_chain_id = md_ZenBTCMetadata.Fields().ByName("chain_id")
	fd_ZenBTCMetadata_return_address = md_ZenBTCMetadata.Fields().ByName("return_address")
	fd_ZenBTCMetadata_caip2_chain_id = md_ZenBTCMetadata.Fields().ByName("caip2_chain_id")
}

var _ protoreflect.Message = (*fastReflection_ZenBTCMetadata)(nil)

type fastReflection_ZenBTCMetadata ZenBTCMetadata

func (x *ZenBTCMetadata) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ZenBTCMetadata)(x)
}

func (x *ZenBTCMetadata) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_key_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ZenBTCMetadata_messageType fastReflection_ZenBTCMetadata_messageType
var _ protoreflect.MessageType = fastReflection_ZenBTCMetadata_messageType{}

type fastReflection_ZenBTCMetadata_messageType struct{}

func (x fastReflection_ZenBTCMetadata_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ZenBTCMetadata)(nil)
}
func (x fastReflection_ZenBTCMetadata_messageType) New() protoreflect.Message {
	return new(fastReflection_ZenBTCMetadata)
}
func (x fastReflection_ZenBTCMetadata_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ZenBTCMetadata
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ZenBTCMetadata) Descriptor() protoreflect.MessageDescriptor {
	return md_ZenBTCMetadata
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ZenBTCMetadata) Type() protoreflect.MessageType {
	return _fastReflection_ZenBTCMetadata_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ZenBTCMetadata) New() protoreflect.Message {
	return new(fastReflection_ZenBTCMetadata)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ZenBTCMetadata) Interface() protoreflect.ProtoMessage {
	return (*ZenBTCMetadata)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ZenBTCMetadata) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RecipientAddr != "" {
		value := protoreflect.ValueOfString(x.RecipientAddr)
		if !f(fd_ZenBTCMetadata_recipient_addr, value) {
			return
		}
	}
	if x.ChainType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.ChainType))
		if !f(fd_ZenBTCMetadata_chain_type, value) {
			return
		}
	}
	if x.ChainId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ChainId)
		if !f(fd_ZenBTCMetadata_chain_id, value) {
			return
		}
	}
	if x.ReturnAddress != "" {
		value := protoreflect.ValueOfString(x.ReturnAddress)
		if !f(fd_ZenBTCMetadata_return_address, value) {
			return
		}
	}
	if x.Caip2ChainId != "" {
		value := protoreflect.ValueOfString(x.Caip2ChainId)
		if !f(fd_ZenBTCMetadata_caip2_chain_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ZenBTCMetadata) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.ZenBTCMetadata.recipient_addr":
		return x.RecipientAddr != ""
	case "zrchain.treasury.ZenBTCMetadata.chain_type":
		return x.ChainType != 0
	case "zrchain.treasury.ZenBTCMetadata.chain_id":
		return x.ChainId != uint64(0)
	case "zrchain.treasury.ZenBTCMetadata.return_address":
		return x.ReturnAddress != ""
	case "zrchain.treasury.ZenBTCMetadata.caip2_chain_id":
		return x.Caip2ChainId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ZenBTCMetadata"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ZenBTCMetadata does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ZenBTCMetadata) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.ZenBTCMetadata.recipient_addr":
		x.RecipientAddr = ""
	case "zrchain.treasury.ZenBTCMetadata.chain_type":
		x.ChainType = 0
	case "zrchain.treasury.ZenBTCMetadata.chain_id":
		x.ChainId = uint64(0)
	case "zrchain.treasury.ZenBTCMetadata.return_address":
		x.ReturnAddress = ""
	case "zrchain.treasury.ZenBTCMetadata.caip2_chain_id":
		x.Caip2ChainId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ZenBTCMetadata"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ZenBTCMetadata does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ZenBTCMetadata) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.ZenBTCMetadata.recipient_addr":
		value := x.RecipientAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.ZenBTCMetadata.chain_type":
		value := x.ChainType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.ZenBTCMetadata.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.ZenBTCMetadata.return_address":
		value := x.ReturnAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.ZenBTCMetadata.caip2_chain_id":
		value := x.Caip2ChainId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ZenBTCMetadata"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ZenBTCMetadata does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ZenBTCMetadata) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.ZenBTCMetadata.recipient_addr":
		x.RecipientAddr = value.Interface().(string)
	case "zrchain.treasury.ZenBTCMetadata.chain_type":
		x.ChainType = (WalletType)(value.Enum())
	case "zrchain.treasury.ZenBTCMetadata.chain_id":
		x.ChainId = value.Uint()
	case "zrchain.treasury.ZenBTCMetadata.return_address":
		x.ReturnAddress = value.Interface().(string)
	case "zrchain.treasury.ZenBTCMetadata.caip2_chain_id":
		x.Caip2ChainId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ZenBTCMetadata"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ZenBTCMetadata does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ZenBTCMetadata) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.ZenBTCMetadata.recipient_addr":
		panic(fmt.Errorf("field recipient_addr of message zrchain.treasury.ZenBTCMetadata is not mutable"))
	case "zrchain.treasury.ZenBTCMetadata.chain_type":
		panic(fmt.Errorf("field chain_type of message zrchain.treasury.ZenBTCMetadata is not mutable"))
	case "zrchain.treasury.ZenBTCMetadata.chain_id":
		panic(fmt.Errorf("field chain_id of message zrchain.treasury.ZenBTCMetadata is not mutable"))
	case "zrchain.treasury.ZenBTCMetadata.return_address":
		panic(fmt.Errorf("field return_address of message zrchain.treasury.ZenBTCMetadata is not mutable"))
	case "zrchain.treasury.ZenBTCMetadata.caip2_chain_id":
		panic(fmt.Errorf("field caip2_chain_id of message zrchain.treasury.ZenBTCMetadata is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ZenBTCMetadata"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ZenBTCMetadata does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ZenBTCMetadata) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.ZenBTCMetadata.recipient_addr":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.ZenBTCMetadata.chain_type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.ZenBTCMetadata.chain_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.ZenBTCMetadata.return_address":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.ZenBTCMetadata.caip2_chain_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ZenBTCMetadata"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ZenBTCMetadata does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ZenBTCMetadata) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.ZenBTCMetadata", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ZenBTCMetadata) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ZenBTCMetadata) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ZenBTCMetadata) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ZenBTCMetadata) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ZenBTCMetadata)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RecipientAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ChainType != 0 {
			n += 1 + runtime.Sov(uint64(x.ChainType))
		}
		if x.ChainId != 0 {
			n += 1 + runtime.Sov(uint64(x.ChainId))
		}
		l = len(x.ReturnAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Caip2ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ZenBTCMetadata)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Caip2ChainId) > 0 {
			i -= len(x.Caip2ChainId)
			copy(dAtA[i:], x.Caip2ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Caip2ChainId)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.ReturnAddress) > 0 {
			i -= len(x.ReturnAddress)
			copy(dAtA[i:], x.ReturnAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReturnAddress)))
			i--
			dAtA[i] = 0x22
		}
		if x.ChainId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ChainId))
			i--
			dAtA[i] = 0x18
		}
		if x.ChainType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ChainType))
			i--
			dAtA[i] = 0x10
		}
		if len(x.RecipientAddr) > 0 {
			i -= len(x.RecipientAddr)
			copy(dAtA[i:], x.RecipientAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecipientAddr)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ZenBTCMetadata)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ZenBTCMetadata: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ZenBTCMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecipientAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
				}
				x.ChainType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ChainType |= WalletType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				x.ChainId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ChainId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReturnAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReturnAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Caip2ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Caip2ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/treasury/key.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyRequestStatus indicates the status of a key request.
// A request starts as "pending", waiting to be picked up. Then it can move to
// either "approved" or "rejected", depending on the decision of the MPC nodes.
type KeyRequestStatus int32

const (
	// The request is missing the status field.
	KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED KeyRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	KeyRequestStatus_KEY_REQUEST_STATUS_PENDING KeyRequestStatus = 1
	// The request is partially fulfilled - at least one more response from
	// a different MPC party is needed to confirm it.
	KeyRequestStatus_KEY_REQUEST_STATUS_PARTIAL KeyRequestStatus = 2
	// The request was fulfilled. This is a final state for a request.
	KeyRequestStatus_KEY_REQUEST_STATUS_FULFILLED KeyRequestStatus = 3
	// The request was rejected. This is a final state for a request.
	KeyRequestStatus_KEY_REQUEST_STATUS_REJECTED KeyRequestStatus = 4
)

// Enum value maps for KeyRequestStatus.
var (
	KeyRequestStatus_name = map[int32]string{
		0: "KEY_REQUEST_STATUS_UNSPECIFIED",
		1: "KEY_REQUEST_STATUS_PENDING",
		2: "KEY_REQUEST_STATUS_PARTIAL",
		3: "KEY_REQUEST_STATUS_FULFILLED",
		4: "KEY_REQUEST_STATUS_REJECTED",
	}
	KeyRequestStatus_value = map[string]int32{
		"KEY_REQUEST_STATUS_UNSPECIFIED": 0,
		"KEY_REQUEST_STATUS_PENDING":     1,
		"KEY_REQUEST_STATUS_PARTIAL":     2,
		"KEY_REQUEST_STATUS_FULFILLED":   3,
		"KEY_REQUEST_STATUS_REJECTED":    4,
	}
)

func (x KeyRequestStatus) Enum() *KeyRequestStatus {
	p := new(KeyRequestStatus)
	*p = x
	return p
}

func (x KeyRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_treasury_key_proto_enumTypes[0].Descriptor()
}

func (KeyRequestStatus) Type() protoreflect.EnumType {
	return &file_zrchain_treasury_key_proto_enumTypes[0]
}

func (x KeyRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyRequestStatus.Descriptor instead.
func (KeyRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{0}
}

// KeyType indicates what crypto key algo will be used by this key (e.g. ECDSA
// with secp256k1 curve). Its public key will be one of the specified type.
type KeyType int32

const (
	// The key type is missing.
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	// The key is an ECDSA secp256k1 key.
	KeyType_KEY_TYPE_ECDSA_SECP256K1 KeyType = 1
	// The key is an EdDSA Ed25519 key.
	KeyType_KEY_TYPE_EDDSA_ED25519 KeyType = 2
	// Standard Bitcoin Keys
	KeyType_KEY_TYPE_BITCOIN_SECP256K1 KeyType = 3
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "KEY_TYPE_ECDSA_SECP256K1",
		2: "KEY_TYPE_EDDSA_ED25519",
		3: "KEY_TYPE_BITCOIN_SECP256K1",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED":       0,
		"KEY_TYPE_ECDSA_SECP256K1":   1,
		"KEY_TYPE_EDDSA_ED25519":     2,
		"KEY_TYPE_BITCOIN_SECP256K1": 3,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_treasury_key_proto_enumTypes[1].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_zrchain_treasury_key_proto_enumTypes[1]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{1}
}

type PartySignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PartySignature) Reset() {
	*x = PartySignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartySignature) ProtoMessage() {}

// Deprecated: Use PartySignature.ProtoReflect.Descriptor instead.
func (*PartySignature) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{0}
}

func (x *PartySignature) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *PartySignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// format of a key request
type KeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       string           `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceAddr string           `protobuf:"bytes,3,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr   string           `protobuf:"bytes,4,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	KeyType       KeyType          `protobuf:"varint,5,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	Status        KeyRequestStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zrchain.treasury.KeyRequestStatus" json:"status,omitempty"`
	// Deprecated: Do not use.
	KeyringPartySignatures [][]byte          `protobuf:"bytes,7,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string            `protobuf:"bytes,8,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Index                  uint64            `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId           uint64            `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata         *ZenBTCMetadata   `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"` // Optional
	MpcBtl                 uint64            `protobuf:"varint,12,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	Fee                    uint64            `protobuf:"varint,13,opt,name=fee,proto3" json:"fee,omitempty"`
	PublicKey              []byte            `protobuf:"bytes,14,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	KeyringPartySigs       []*PartySignature `protobuf:"bytes,15,rep,name=keyring_party_sigs,json=keyringPartySigs,proto3" json:"keyring_party_sigs,omitempty"`
}

func (x *KeyRequest) Reset() {
	*x = KeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRequest) ProtoMessage() {}

// Deprecated: Use KeyRequest.ProtoReflect.Descriptor instead.
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{1}
}

func (x *KeyRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *KeyRequest) GetWorkspaceAddr() string {
	if x != nil {
		return x.WorkspaceAddr
	}
	return ""
}

func (x *KeyRequest) GetKeyringAddr() string {
	if x != nil {
		return x.KeyringAddr
	}
	return ""
}

func (x *KeyRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *KeyRequest) GetStatus() KeyRequestStatus {
	if x != nil {
		return x.Status
	}
	return KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED
}

// Deprecated: Do not use.
func (x *KeyRequest) GetKeyringPartySignatures() [][]byte {
	if x != nil {
		return x.KeyringPartySignatures
	}
	return nil
}

func (x *KeyRequest) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *KeyRequest) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *KeyRequest) GetSignPolicyId() uint64 {
	if x != nil {
		return x.SignPolicyId
	}
	return 0
}

func (x *KeyRequest) GetZenbtcMetadata() *ZenBTCMetadata {
	if x != nil {
		return x.ZenbtcMetadata
	}
	return nil
}

func (x *KeyRequest) GetMpcBtl() uint64 {
	if x != nil {
		return x.MpcBtl
	}
	return 0
}

func (x *KeyRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *KeyRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *KeyRequest) GetKeyringPartySigs() []*PartySignature {
	if x != nil {
		return x.KeyringPartySigs
	}
	return nil
}

// format of a key request response
type KeyReqResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string            `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceAddr          string            `protobuf:"bytes,3,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr            string            `protobuf:"bytes,4,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	KeyType                string            `protobuf:"bytes,5,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Status                 string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	KeyringPartySignatures []*PartySignature `protobuf:"bytes,7,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string            `protobuf:"bytes,8,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Index                  uint64            `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId           uint64            `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata         *ZenBTCMetadata   `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"` // Optional
	MpcBtl                 uint64            `protobuf:"varint,12,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	Fee                    uint64            `protobuf:"varint,13,opt,name=fee,proto3" json:"fee,omitempty"`
	PublicKey              []byte            `protobuf:"bytes,14,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *KeyReqResponse) Reset() {
	*x = KeyReqResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyReqResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyReqResponse) ProtoMessage() {}

// Deprecated: Use KeyReqResponse.ProtoReflect.Descriptor instead.
func (*KeyReqResponse) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{2}
}

func (x *KeyReqResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyReqResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *KeyReqResponse) GetWorkspaceAddr() string {
	if x != nil {
		return x.WorkspaceAddr
	}
	return ""
}

func (x *KeyReqResponse) GetKeyringAddr() string {
	if x != nil {
		return x.KeyringAddr
	}
	return ""
}

func (x *KeyReqResponse) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *KeyReqResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KeyReqResponse) GetKeyringPartySignatures() []*PartySignature {
	if x != nil {
		return x.KeyringPartySignatures
	}
	return nil
}

func (x *KeyReqResponse) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *KeyReqResponse) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *KeyReqResponse) GetSignPolicyId() uint64 {
	if x != nil {
		return x.SignPolicyId
	}
	return 0
}

func (x *KeyReqResponse) GetZenbtcMetadata() *ZenBTCMetadata {
	if x != nil {
		return x.ZenbtcMetadata
	}
	return nil
}

func (x *KeyReqResponse) GetMpcBtl() uint64 {
	if x != nil {
		return x.MpcBtl
	}
	return 0
}

func (x *KeyReqResponse) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *KeyReqResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// format of a key
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceAddr  string          `protobuf:"bytes,2,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr    string          `protobuf:"bytes,3,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	Type_          KeyType         `protobuf:"varint,4,opt,name=type,proto3,enum=zrchain.treasury.KeyType" json:"type,omitempty"`
	PublicKey      []byte          `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Index          uint64          `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId   uint64          `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata *ZenBTCMetadata `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"` // Optional
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{3}
}

func (x *Key) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Key) GetWorkspaceAddr() string {
	if x != nil {
		return x.WorkspaceAddr
	}
	return ""
}

func (x *Key) GetKeyringAddr() string {
	if x != nil {
		return x.KeyringAddr
	}
	return ""
}

func (x *Key) GetType_() KeyType {
	if x != nil {
		return x.Type_
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *Key) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Key) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Key) GetSignPolicyId() uint64 {
	if x != nil {
		return x.SignPolicyId
	}
	return 0
}

func (x *Key) GetZenbtcMetadata() *ZenBTCMetadata {
	if x != nil {
		return x.ZenbtcMetadata
	}
	return nil
}

// format of a key response
type KeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceAddr  string          `protobuf:"bytes,2,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr    string          `protobuf:"bytes,3,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	Type_          string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	PublicKey      []byte          `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Index          uint64          `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId   uint64          `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata *ZenBTCMetadata `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"` // Optional
}

func (x *KeyResponse) Reset() {
	*x = KeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_key_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResponse) ProtoMessage() {}

// Deprecated: Use KeyResponse.ProtoReflect.Descriptor instead.
func (*KeyResponse) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{4}
}

func (x *KeyResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KeyResponse) GetWorkspaceAddr() string {
	if x != nil {
		return x.WorkspaceAddr
	}
	return ""
}

func (x *KeyResponse) GetKeyringAddr() string {
	if x != nil {
		return x.KeyringAddr
	}
	return ""
}

func (x *KeyResponse) GetType_() string {
	if x != nil {
		return x.Type_
	}
	return ""
}

func (x *KeyResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *KeyResponse) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *KeyResponse) GetSignPolicyId() uint64 {
	if x != nil {
		return x.SignPolicyId
	}
	return 0
}

func (x *KeyResponse) GetZenbtcMetadata() *ZenBTCMetadata {
	if x != nil {
		return x.ZenbtcMetadata
	}
	return nil
}

// ZenBTCMetadata is the metadata for a key on the zenBTC keyring.
type ZenBTCMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientAddr string     `protobuf:"bytes,1,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`                       // Optional
	ChainType     WalletType `protobuf:"varint,2,opt,name=chain_type,json=chainType,proto3,enum=zrchain.treasury.WalletType" json:"chain_type,omitempty"` // Optional
	// Deprecated: Do not use.
	ChainId uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // Optional
	// Deprecated: Do not use.
	ReturnAddress string `protobuf:"bytes,4,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"` // Optional
	Caip2ChainId  string `protobuf:"bytes,5,opt,name=caip2_chain_id,json=caip2ChainId,proto3" json:"caip2_chain_id,omitempty"`
}

func (x *ZenBTCMetadata) Reset() {
	*x = ZenBTCMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_key_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZenBTCMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZenBTCMetadata) ProtoMessage() {}

// Deprecated: Use ZenBTCMetadata.ProtoReflect.Descriptor instead.
func (*ZenBTCMetadata) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_key_proto_rawDescGZIP(), []int{5}
}

func (x *ZenBTCMetadata) GetRecipientAddr() string {
	if x != nil {
		return x.RecipientAddr
	}
	return ""
}

func (x *ZenBTCMetadata) GetChainType() WalletType {
	if x != nil {
		return x.ChainType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

// Deprecated: Do not use.
func (x *ZenBTCMetadata) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

// Deprecated: Do not use.
func (x *ZenBTCMetadata) GetReturnAddress() string {
	if x != nil {
		return x.ReturnAddress
	}
	return ""
}

func (x *ZenBTCMetadata) GetCaip2ChainId() string {
	if x != nil {
		return x.Caip2ChainId
	}
	return ""
}

var File_zrchain_treasury_key_proto protoreflect.FileDescriptor

var file_zrchain_treasury_key_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x1a, 0x1d,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a,
	0x0e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf6, 0x04, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b,
	0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x18,
	0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x16, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x7a,
	0x65, 0x6e, 0x62, 0x74, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x5a, 0x65, 0x6e, 0x42, 0x54, 0x43, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70, 0x63, 0x5f, 0x62, 0x74,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x70, 0x63, 0x42, 0x74, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x4e, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10,
	0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x73,
	0x22, 0x89, 0x04, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x6b, 0x65,
	0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x16,
	0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x7a, 0x65, 0x6e, 0x62, 0x74,
	0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x2e, 0x5a, 0x65, 0x6e, 0x42, 0x54, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70, 0x63, 0x5f, 0x62, 0x74, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x70, 0x63, 0x42, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xb4, 0x02, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6b,
	0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x7a, 0x65, 0x6e, 0x62,
	0x74, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x2e, 0x5a, 0x65, 0x6e, 0x42, 0x54, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65,
	0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0f,
	0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x5a, 0x65, 0x6e, 0x42, 0x54, 0x43, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x5a, 0x65, 0x6e, 0x42,
	0x54, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x69, 0x70,
	0x32, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x69, 0x70, 0x32, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x2a, 0xb9,
	0x01, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55,
	0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x7d, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x44, 0x53, 0x41, 0x5f,
	0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x43, 0x50, 0x32, 0x35, 0x36, 0x4b, 0x31, 0x10, 0x03, 0x42, 0xa4, 0x01, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x42, 0x08, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0xa2, 0x02, 0x03, 0x5a, 0x54, 0x58, 0xaa, 0x02, 0x10, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0xca, 0x02, 0x10, 0x5a, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0xe2, 0x02, 0x1c,
	0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x5a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_treasury_key_proto_rawDescOnce sync.Once
	file_zrchain_treasury_key_proto_rawDescData = file_zrchain_treasury_key_proto_rawDesc
)

func file_zrchain_treasury_key_proto_rawDescGZIP() []byte {
	file_zrchain_treasury_key_proto_rawDescOnce.Do(func() {
		file_zrchain_treasury_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_treasury_key_proto_rawDescData)
	})
	return file_zrchain_treasury_key_proto_rawDescData
}

var file_zrchain_treasury_key_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zrchain_treasury_key_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_zrchain_treasury_key_proto_goTypes = []interface{}{
	(KeyRequestStatus)(0),  // 0: zrchain.treasury.KeyRequestStatus
	(KeyType)(0),           // 1: zrchain.treasury.KeyType
	(*PartySignature)(nil), // 2: zrchain.treasury.PartySignature
	(*KeyRequest)(nil),     // 3: zrchain.treasury.KeyRequest
	(*KeyReqResponse)(nil), // 4: zrchain.treasury.KeyReqResponse
	(*Key)(nil),            // 5: zrchain.treasury.Key
	(*KeyResponse)(nil),    // 6: zrchain.treasury.KeyResponse
	(*ZenBTCMetadata)(nil), // 7: zrchain.treasury.ZenBTCMetadata
	(WalletType)(0),        // 8: zrchain.treasury.WalletType
}
var file_zrchain_treasury_key_proto_depIdxs = []int32{
	1,  // 0: zrchain.treasury.KeyRequest.key_type:type_name -> zrchain.treasury.KeyType
	0,  // 1: zrchain.treasury.KeyRequest.status:type_name -> zrchain.treasury.KeyRequestStatus
	7,  // 2: zrchain.treasury.KeyRequest.zenbtc_metadata:type_name -> zrchain.treasury.ZenBTCMetadata
	2,  // 3: zrchain.treasury.KeyRequest.keyring_party_sigs:type_name -> zrchain.treasury.PartySignature
	2,  // 4: zrchain.treasury.KeyReqResponse.keyring_party_signatures:type_name -> zrchain.treasury.PartySignature
	7,  // 5: zrchain.treasury.KeyReqResponse.zenbtc_metadata:type_name -> zrchain.treasury.ZenBTCMetadata
	1,  // 6: zrchain.treasury.Key.type:type_name -> zrchain.treasury.KeyType
	7,  // 7: zrchain.treasury.Key.zenbtc_metadata:type_name -> zrchain.treasury.ZenBTCMetadata
	7,  // 8: zrchain.treasury.KeyResponse.zenbtc_metadata:type_name -> zrchain.treasury.ZenBTCMetadata
	8,  // 9: zrchain.treasury.ZenBTCMetadata.chain_type:type_name -> zrchain.treasury.WalletType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_zrchain_treasury_key_proto_init() }
func file_zrchain_treasury_key_proto_init() {
	if File_zrchain_treasury_key_proto != nil {
		return
	}
	file_zrchain_treasury_wallet_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zrchain_treasury_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartySignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyReqResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_key_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_key_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZenBTCMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_treasury_key_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_treasury_key_proto_goTypes,
		DependencyIndexes: file_zrchain_treasury_key_proto_depIdxs,
		EnumInfos:         file_zrchain_treasury_key_proto_enumTypes,
		MessageInfos:      file_zrchain_treasury_key_proto_msgTypes,
	}.Build()
	File_zrchain_treasury_key_proto = out.File
	file_zrchain_treasury_key_proto_rawDesc = nil
	file_zrchain_treasury_key_proto_goTypes = nil
	file_zrchain_treasury_key_proto_depIdxs = nil
}
