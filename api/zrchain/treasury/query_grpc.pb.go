// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: zrchain/treasury/query.proto

package treasury

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                     = "/zrchain.treasury.Query/Params"
	Query_KeyRequests_FullMethodName                = "/zrchain.treasury.Query/KeyRequests"
	Query_KeyRequestByID_FullMethodName             = "/zrchain.treasury.Query/KeyRequestByID"
	Query_Keys_FullMethodName                       = "/zrchain.treasury.Query/Keys"
	Query_KeyByID_FullMethodName                    = "/zrchain.treasury.Query/KeyByID"
	Query_SignatureRequests_FullMethodName          = "/zrchain.treasury.Query/SignatureRequests"
	Query_SignatureRequestByID_FullMethodName       = "/zrchain.treasury.Query/SignatureRequestByID"
	Query_SignTransactionRequests_FullMethodName    = "/zrchain.treasury.Query/SignTransactionRequests"
	Query_SignTransactionRequestByID_FullMethodName = "/zrchain.treasury.Query/SignTransactionRequestByID"
	Query_ZrSignKeys_FullMethodName                 = "/zrchain.treasury.Query/ZrSignKeys"
	Query_KeyByAddress_FullMethodName               = "/zrchain.treasury.Query/KeyByAddress"
	Query_ZenbtcWallets_FullMethodName              = "/zrchain.treasury.Query/ZenbtcWallets"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error)
	// Queries a list of KeyRequestByID items.
	KeyRequestByID(ctx context.Context, in *QueryKeyRequestByIDRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIDResponse, error)
	// Queries a list of Keys items.
	Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error)
	// Queries a list of KeyByID items.
	KeyByID(ctx context.Context, in *QueryKeyByIDRequest, opts ...grpc.CallOption) (*QueryKeyByIDResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error)
	// Queries a list of SignatureRequestByID items.
	SignatureRequestByID(ctx context.Context, in *QuerySignatureRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIDResponse, error)
	// Queries a list of SignTransactionRequests items.
	SignTransactionRequests(ctx context.Context, in *QuerySignTransactionRequestsRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestsResponse, error)
	// Queries a list of SignTransactionRequestByID items.
	SignTransactionRequestByID(ctx context.Context, in *QuerySignTransactionRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestByIDResponse, error)
	// Queries a list of ZrSignKeys items.
	ZrSignKeys(ctx context.Context, in *QueryZrSignKeysRequest, opts ...grpc.CallOption) (*QueryZrSignKeysResponse, error)
	// Queries a list of KeyByAddress items.
	KeyByAddress(ctx context.Context, in *QueryKeyByAddressRequest, opts ...grpc.CallOption) (*QueryKeyByAddressResponse, error)
	// Queries a list of ZenbtcWallets items.
	ZenbtcWallets(ctx context.Context, in *QueryZenbtcWalletsRequest, opts ...grpc.CallOption) (*QueryZenbtcWalletsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error) {
	out := new(QueryKeyRequestsResponse)
	err := c.cc.Invoke(ctx, Query_KeyRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequestByID(ctx context.Context, in *QueryKeyRequestByIDRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIDResponse, error) {
	out := new(QueryKeyRequestByIDResponse)
	err := c.cc.Invoke(ctx, Query_KeyRequestByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error) {
	out := new(QueryKeysResponse)
	err := c.cc.Invoke(ctx, Query_Keys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyByID(ctx context.Context, in *QueryKeyByIDRequest, opts ...grpc.CallOption) (*QueryKeyByIDResponse, error) {
	out := new(QueryKeyByIDResponse)
	err := c.cc.Invoke(ctx, Query_KeyByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error) {
	out := new(QuerySignatureRequestsResponse)
	err := c.cc.Invoke(ctx, Query_SignatureRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequestByID(ctx context.Context, in *QuerySignatureRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIDResponse, error) {
	out := new(QuerySignatureRequestByIDResponse)
	err := c.cc.Invoke(ctx, Query_SignatureRequestByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignTransactionRequests(ctx context.Context, in *QuerySignTransactionRequestsRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestsResponse, error) {
	out := new(QuerySignTransactionRequestsResponse)
	err := c.cc.Invoke(ctx, Query_SignTransactionRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignTransactionRequestByID(ctx context.Context, in *QuerySignTransactionRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestByIDResponse, error) {
	out := new(QuerySignTransactionRequestByIDResponse)
	err := c.cc.Invoke(ctx, Query_SignTransactionRequestByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZrSignKeys(ctx context.Context, in *QueryZrSignKeysRequest, opts ...grpc.CallOption) (*QueryZrSignKeysResponse, error) {
	out := new(QueryZrSignKeysResponse)
	err := c.cc.Invoke(ctx, Query_ZrSignKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyByAddress(ctx context.Context, in *QueryKeyByAddressRequest, opts ...grpc.CallOption) (*QueryKeyByAddressResponse, error) {
	out := new(QueryKeyByAddressResponse)
	err := c.cc.Invoke(ctx, Query_KeyByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZenbtcWallets(ctx context.Context, in *QueryZenbtcWalletsRequest, opts ...grpc.CallOption) (*QueryZenbtcWalletsResponse, error) {
	out := new(QueryZenbtcWalletsResponse)
	err := c.cc.Invoke(ctx, Query_ZenbtcWallets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(context.Context, *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error)
	// Queries a list of KeyRequestByID items.
	KeyRequestByID(context.Context, *QueryKeyRequestByIDRequest) (*QueryKeyRequestByIDResponse, error)
	// Queries a list of Keys items.
	Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error)
	// Queries a list of KeyByID items.
	KeyByID(context.Context, *QueryKeyByIDRequest) (*QueryKeyByIDResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(context.Context, *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error)
	// Queries a list of SignatureRequestByID items.
	SignatureRequestByID(context.Context, *QuerySignatureRequestByIDRequest) (*QuerySignatureRequestByIDResponse, error)
	// Queries a list of SignTransactionRequests items.
	SignTransactionRequests(context.Context, *QuerySignTransactionRequestsRequest) (*QuerySignTransactionRequestsResponse, error)
	// Queries a list of SignTransactionRequestByID items.
	SignTransactionRequestByID(context.Context, *QuerySignTransactionRequestByIDRequest) (*QuerySignTransactionRequestByIDResponse, error)
	// Queries a list of ZrSignKeys items.
	ZrSignKeys(context.Context, *QueryZrSignKeysRequest) (*QueryZrSignKeysResponse, error)
	// Queries a list of KeyByAddress items.
	KeyByAddress(context.Context, *QueryKeyByAddressRequest) (*QueryKeyByAddressResponse, error)
	// Queries a list of ZenbtcWallets items.
	ZenbtcWallets(context.Context, *QueryZenbtcWalletsRequest) (*QueryZenbtcWalletsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) KeyRequests(context.Context, *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequests not implemented")
}
func (UnimplementedQueryServer) KeyRequestByID(context.Context, *QueryKeyRequestByIDRequest) (*QueryKeyRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequestByID not implemented")
}
func (UnimplementedQueryServer) Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedQueryServer) KeyByID(context.Context, *QueryKeyByIDRequest) (*QueryKeyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyByID not implemented")
}
func (UnimplementedQueryServer) SignatureRequests(context.Context, *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequests not implemented")
}
func (UnimplementedQueryServer) SignatureRequestByID(context.Context, *QuerySignatureRequestByIDRequest) (*QuerySignatureRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequestByID not implemented")
}
func (UnimplementedQueryServer) SignTransactionRequests(context.Context, *QuerySignTransactionRequestsRequest) (*QuerySignTransactionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionRequests not implemented")
}
func (UnimplementedQueryServer) SignTransactionRequestByID(context.Context, *QuerySignTransactionRequestByIDRequest) (*QuerySignTransactionRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionRequestByID not implemented")
}
func (UnimplementedQueryServer) ZrSignKeys(context.Context, *QueryZrSignKeysRequest) (*QueryZrSignKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZrSignKeys not implemented")
}
func (UnimplementedQueryServer) KeyByAddress(context.Context, *QueryKeyByAddressRequest) (*QueryKeyByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyByAddress not implemented")
}
func (UnimplementedQueryServer) ZenbtcWallets(context.Context, *QueryZenbtcWalletsRequest) (*QueryZenbtcWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZenbtcWallets not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeyRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequests(ctx, req.(*QueryKeyRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeyRequestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequestByID(ctx, req.(*QueryKeyRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Keys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keys(ctx, req.(*QueryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeyByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyByID(ctx, req.(*QueryKeyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignatureRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequests(ctx, req.(*QuerySignatureRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignatureRequestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequestByID(ctx, req.(*QuerySignatureRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignTransactionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignTransactionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignTransactionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignTransactionRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignTransactionRequests(ctx, req.(*QuerySignTransactionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignTransactionRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignTransactionRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignTransactionRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignTransactionRequestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignTransactionRequestByID(ctx, req.(*QuerySignTransactionRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZrSignKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZrSignKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZrSignKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ZrSignKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZrSignKeys(ctx, req.(*QueryZrSignKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeyByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyByAddress(ctx, req.(*QueryKeyByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZenbtcWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZenbtcWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZenbtcWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ZenbtcWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZenbtcWallets(ctx, req.(*QueryZenbtcWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.treasury.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "KeyRequests",
			Handler:    _Query_KeyRequests_Handler,
		},
		{
			MethodName: "KeyRequestByID",
			Handler:    _Query_KeyRequestByID_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Query_Keys_Handler,
		},
		{
			MethodName: "KeyByID",
			Handler:    _Query_KeyByID_Handler,
		},
		{
			MethodName: "SignatureRequests",
			Handler:    _Query_SignatureRequests_Handler,
		},
		{
			MethodName: "SignatureRequestByID",
			Handler:    _Query_SignatureRequestByID_Handler,
		},
		{
			MethodName: "SignTransactionRequests",
			Handler:    _Query_SignTransactionRequests_Handler,
		},
		{
			MethodName: "SignTransactionRequestByID",
			Handler:    _Query_SignTransactionRequestByID_Handler,
		},
		{
			MethodName: "ZrSignKeys",
			Handler:    _Query_ZrSignKeys_Handler,
		},
		{
			MethodName: "KeyByAddress",
			Handler:    _Query_KeyByAddress_Handler,
		},
		{
			MethodName: "ZenbtcWallets",
			Handler:    _Query_ZenbtcWallets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/treasury/query.proto",
}
