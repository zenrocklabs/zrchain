// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: zrchain/treasury/tx.proto

package treasury

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_UpdateParams_FullMethodName                = "/zrchain.treasury.Msg/UpdateParams"
	Msg_NewKeyRequest_FullMethodName               = "/zrchain.treasury.Msg/NewKeyRequest"
	Msg_FulfilKeyRequest_FullMethodName            = "/zrchain.treasury.Msg/FulfilKeyRequest"
	Msg_NewSignatureRequest_FullMethodName         = "/zrchain.treasury.Msg/NewSignatureRequest"
	Msg_FulfilSignatureRequest_FullMethodName      = "/zrchain.treasury.Msg/FulfilSignatureRequest"
	Msg_NewSignTransactionRequest_FullMethodName   = "/zrchain.treasury.Msg/NewSignTransactionRequest"
	Msg_TransferFromKeyring_FullMethodName         = "/zrchain.treasury.Msg/TransferFromKeyring"
	Msg_NewICATransactionRequest_FullMethodName    = "/zrchain.treasury.Msg/NewICATransactionRequest"
	Msg_FulfilICATransactionRequest_FullMethodName = "/zrchain.treasury.Msg/FulfilICATransactionRequest"
	Msg_NewZrSignSignatureRequest_FullMethodName   = "/zrchain.treasury.Msg/NewZrSignSignatureRequest"
	Msg_UpdateKeyPolicy_FullMethodName             = "/zrchain.treasury.Msg/UpdateKeyPolicy"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the Msg service.
type MsgClient interface {
	// UpdateParams defines the operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// NewKeyRequest defines an operation for creating a key request.
	NewKeyRequest(ctx context.Context, in *MsgNewKeyRequest, opts ...grpc.CallOption) (*MsgNewKeyRequestResponse, error)
	// FulfilKeyRequest defines an operation for responding to a key request
	FulfilKeyRequest(ctx context.Context, in *MsgFulfilKeyRequest, opts ...grpc.CallOption) (*MsgFulfilKeyRequestResponse, error)
	// NewSignatureRequest defines an operation for creating a signature request
	NewSignatureRequest(ctx context.Context, in *MsgNewSignatureRequest, opts ...grpc.CallOption) (*MsgNewSignatureRequestResponse, error)
	// FulfilSignatureRequest defines an operation for returning a signature
	// response to a request
	FulfilSignatureRequest(ctx context.Context, in *MsgFulfilSignatureRequest, opts ...grpc.CallOption) (*MsgFulfilSignatureRequestResponse, error)
	// NewSignTransactionRequest defines an operation for creating a signature for
	// transaction request
	NewSignTransactionRequest(ctx context.Context, in *MsgNewSignTransactionRequest, opts ...grpc.CallOption) (*MsgNewSignTransactionRequestResponse, error)
	// TransferFromKeyring defines an operation for transferring tokens from a
	// keyring
	TransferFromKeyring(ctx context.Context, in *MsgTransferFromKeyring, opts ...grpc.CallOption) (*MsgTransferFromKeyringResponse, error)
	// NewICATransactionRequest defines an operation for creating an interchain
	// account transaction request
	NewICATransactionRequest(ctx context.Context, in *MsgNewICATransactionRequest, opts ...grpc.CallOption) (*MsgNewICATransactionRequestResponse, error)
	// FulfilICATransactionRequest defines an operation for responding to an
	// interchain account transaction request
	FulfilICATransactionRequest(ctx context.Context, in *MsgFulfilICATransactionRequest, opts ...grpc.CallOption) (*MsgFulfilICATransactionRequestResponse, error)
	// NewZrSignSignatureRequest defines an operation for creating a zrsign
	// signature request
	NewZrSignSignatureRequest(ctx context.Context, in *MsgNewZrSignSignatureRequest, opts ...grpc.CallOption) (*MsgNewZrSignSignatureRequestResponse, error)
	// UpdateKeyPolicy defines an operation for updating a key policy
	UpdateKeyPolicy(ctx context.Context, in *MsgUpdateKeyPolicy, opts ...grpc.CallOption) (*MsgUpdateKeyPolicyResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewKeyRequest(ctx context.Context, in *MsgNewKeyRequest, opts ...grpc.CallOption) (*MsgNewKeyRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewKeyRequestResponse)
	err := c.cc.Invoke(ctx, Msg_NewKeyRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfilKeyRequest(ctx context.Context, in *MsgFulfilKeyRequest, opts ...grpc.CallOption) (*MsgFulfilKeyRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgFulfilKeyRequestResponse)
	err := c.cc.Invoke(ctx, Msg_FulfilKeyRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewSignatureRequest(ctx context.Context, in *MsgNewSignatureRequest, opts ...grpc.CallOption) (*MsgNewSignatureRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewSignatureRequestResponse)
	err := c.cc.Invoke(ctx, Msg_NewSignatureRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfilSignatureRequest(ctx context.Context, in *MsgFulfilSignatureRequest, opts ...grpc.CallOption) (*MsgFulfilSignatureRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgFulfilSignatureRequestResponse)
	err := c.cc.Invoke(ctx, Msg_FulfilSignatureRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewSignTransactionRequest(ctx context.Context, in *MsgNewSignTransactionRequest, opts ...grpc.CallOption) (*MsgNewSignTransactionRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewSignTransactionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_NewSignTransactionRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferFromKeyring(ctx context.Context, in *MsgTransferFromKeyring, opts ...grpc.CallOption) (*MsgTransferFromKeyringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgTransferFromKeyringResponse)
	err := c.cc.Invoke(ctx, Msg_TransferFromKeyring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewICATransactionRequest(ctx context.Context, in *MsgNewICATransactionRequest, opts ...grpc.CallOption) (*MsgNewICATransactionRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewICATransactionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_NewICATransactionRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfilICATransactionRequest(ctx context.Context, in *MsgFulfilICATransactionRequest, opts ...grpc.CallOption) (*MsgFulfilICATransactionRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgFulfilICATransactionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_FulfilICATransactionRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewZrSignSignatureRequest(ctx context.Context, in *MsgNewZrSignSignatureRequest, opts ...grpc.CallOption) (*MsgNewZrSignSignatureRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewZrSignSignatureRequestResponse)
	err := c.cc.Invoke(ctx, Msg_NewZrSignSignatureRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKeyPolicy(ctx context.Context, in *MsgUpdateKeyPolicy, opts ...grpc.CallOption) (*MsgUpdateKeyPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateKeyPolicyResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateKeyPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the Msg service.
type MsgServer interface {
	// UpdateParams defines the operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// NewKeyRequest defines an operation for creating a key request.
	NewKeyRequest(context.Context, *MsgNewKeyRequest) (*MsgNewKeyRequestResponse, error)
	// FulfilKeyRequest defines an operation for responding to a key request
	FulfilKeyRequest(context.Context, *MsgFulfilKeyRequest) (*MsgFulfilKeyRequestResponse, error)
	// NewSignatureRequest defines an operation for creating a signature request
	NewSignatureRequest(context.Context, *MsgNewSignatureRequest) (*MsgNewSignatureRequestResponse, error)
	// FulfilSignatureRequest defines an operation for returning a signature
	// response to a request
	FulfilSignatureRequest(context.Context, *MsgFulfilSignatureRequest) (*MsgFulfilSignatureRequestResponse, error)
	// NewSignTransactionRequest defines an operation for creating a signature for
	// transaction request
	NewSignTransactionRequest(context.Context, *MsgNewSignTransactionRequest) (*MsgNewSignTransactionRequestResponse, error)
	// TransferFromKeyring defines an operation for transferring tokens from a
	// keyring
	TransferFromKeyring(context.Context, *MsgTransferFromKeyring) (*MsgTransferFromKeyringResponse, error)
	// NewICATransactionRequest defines an operation for creating an interchain
	// account transaction request
	NewICATransactionRequest(context.Context, *MsgNewICATransactionRequest) (*MsgNewICATransactionRequestResponse, error)
	// FulfilICATransactionRequest defines an operation for responding to an
	// interchain account transaction request
	FulfilICATransactionRequest(context.Context, *MsgFulfilICATransactionRequest) (*MsgFulfilICATransactionRequestResponse, error)
	// NewZrSignSignatureRequest defines an operation for creating a zrsign
	// signature request
	NewZrSignSignatureRequest(context.Context, *MsgNewZrSignSignatureRequest) (*MsgNewZrSignSignatureRequestResponse, error)
	// UpdateKeyPolicy defines an operation for updating a key policy
	UpdateKeyPolicy(context.Context, *MsgUpdateKeyPolicy) (*MsgUpdateKeyPolicyResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) NewKeyRequest(context.Context, *MsgNewKeyRequest) (*MsgNewKeyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewKeyRequest not implemented")
}
func (UnimplementedMsgServer) FulfilKeyRequest(context.Context, *MsgFulfilKeyRequest) (*MsgFulfilKeyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfilKeyRequest not implemented")
}
func (UnimplementedMsgServer) NewSignatureRequest(context.Context, *MsgNewSignatureRequest) (*MsgNewSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSignatureRequest not implemented")
}
func (UnimplementedMsgServer) FulfilSignatureRequest(context.Context, *MsgFulfilSignatureRequest) (*MsgFulfilSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfilSignatureRequest not implemented")
}
func (UnimplementedMsgServer) NewSignTransactionRequest(context.Context, *MsgNewSignTransactionRequest) (*MsgNewSignTransactionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSignTransactionRequest not implemented")
}
func (UnimplementedMsgServer) TransferFromKeyring(context.Context, *MsgTransferFromKeyring) (*MsgTransferFromKeyringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFromKeyring not implemented")
}
func (UnimplementedMsgServer) NewICATransactionRequest(context.Context, *MsgNewICATransactionRequest) (*MsgNewICATransactionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewICATransactionRequest not implemented")
}
func (UnimplementedMsgServer) FulfilICATransactionRequest(context.Context, *MsgFulfilICATransactionRequest) (*MsgFulfilICATransactionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfilICATransactionRequest not implemented")
}
func (UnimplementedMsgServer) NewZrSignSignatureRequest(context.Context, *MsgNewZrSignSignatureRequest) (*MsgNewZrSignSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewZrSignSignatureRequest not implemented")
}
func (UnimplementedMsgServer) UpdateKeyPolicy(context.Context, *MsgUpdateKeyPolicy) (*MsgUpdateKeyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyPolicy not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewKeyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewKeyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewKeyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewKeyRequest(ctx, req.(*MsgNewKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfilKeyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfilKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfilKeyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FulfilKeyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfilKeyRequest(ctx, req.(*MsgFulfilKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewSignatureRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewSignatureRequest(ctx, req.(*MsgNewSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfilSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfilSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfilSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FulfilSignatureRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfilSignatureRequest(ctx, req.(*MsgFulfilSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewSignTransactionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewSignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewSignTransactionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewSignTransactionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewSignTransactionRequest(ctx, req.(*MsgNewSignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferFromKeyring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFromKeyring)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferFromKeyring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferFromKeyring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferFromKeyring(ctx, req.(*MsgTransferFromKeyring))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewICATransactionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewICATransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewICATransactionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewICATransactionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewICATransactionRequest(ctx, req.(*MsgNewICATransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfilICATransactionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfilICATransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfilICATransactionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FulfilICATransactionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfilICATransactionRequest(ctx, req.(*MsgFulfilICATransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewZrSignSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewZrSignSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewZrSignSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewZrSignSignatureRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewZrSignSignatureRequest(ctx, req.(*MsgNewZrSignSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKeyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKeyPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKeyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateKeyPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKeyPolicy(ctx, req.(*MsgUpdateKeyPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.treasury.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "NewKeyRequest",
			Handler:    _Msg_NewKeyRequest_Handler,
		},
		{
			MethodName: "FulfilKeyRequest",
			Handler:    _Msg_FulfilKeyRequest_Handler,
		},
		{
			MethodName: "NewSignatureRequest",
			Handler:    _Msg_NewSignatureRequest_Handler,
		},
		{
			MethodName: "FulfilSignatureRequest",
			Handler:    _Msg_FulfilSignatureRequest_Handler,
		},
		{
			MethodName: "NewSignTransactionRequest",
			Handler:    _Msg_NewSignTransactionRequest_Handler,
		},
		{
			MethodName: "TransferFromKeyring",
			Handler:    _Msg_TransferFromKeyring_Handler,
		},
		{
			MethodName: "NewICATransactionRequest",
			Handler:    _Msg_NewICATransactionRequest_Handler,
		},
		{
			MethodName: "FulfilICATransactionRequest",
			Handler:    _Msg_FulfilICATransactionRequest_Handler,
		},
		{
			MethodName: "NewZrSignSignatureRequest",
			Handler:    _Msg_NewZrSignSignatureRequest_Handler,
		},
		{
			MethodName: "UpdateKeyPolicy",
			Handler:    _Msg_UpdateKeyPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/treasury/tx.proto",
}
