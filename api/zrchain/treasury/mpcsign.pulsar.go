// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package treasury

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_SignRequest_5_list)(nil)

type _SignRequest_5_list struct {
	list *[][]byte
}

func (x *_SignRequest_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignRequest_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_SignRequest_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignRequest_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignRequest_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignRequest at list field DataForSigning as it is not of Message kind"))
}

func (x *_SignRequest_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignRequest_5_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_SignRequest_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignRequest_7_list)(nil)

type _SignRequest_7_list struct {
	list *[]*SignedDataWithID
}

func (x *_SignRequest_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignRequest_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SignRequest_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SignedDataWithID)
	(*x.list)[i] = concreteValue
}

func (x *_SignRequest_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SignedDataWithID)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignRequest_7_list) AppendMutable() protoreflect.Value {
	v := new(SignedDataWithID)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SignRequest_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SignRequest_7_list) NewElement() protoreflect.Value {
	v := new(SignedDataWithID)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SignRequest_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignRequest_8_list)(nil)

type _SignRequest_8_list struct {
	list *[][]byte
}

func (x *_SignRequest_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignRequest_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_SignRequest_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignRequest_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignRequest_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignRequest at list field KeyringPartySignatures as it is not of Message kind"))
}

func (x *_SignRequest_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignRequest_8_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_SignRequest_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignRequest_12_list)(nil)

type _SignRequest_12_list struct {
	list *[]uint64
}

func (x *_SignRequest_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignRequest_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_SignRequest_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignRequest_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignRequest_12_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignRequest at list field ChildReqIds as it is not of Message kind"))
}

func (x *_SignRequest_12_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignRequest_12_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_SignRequest_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignRequest_14_list)(nil)

type _SignRequest_14_list struct {
	list *[]uint64
}

func (x *_SignRequest_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignRequest_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_SignRequest_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignRequest_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignRequest_14_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignRequest at list field KeyIds as it is not of Message kind"))
}

func (x *_SignRequest_14_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignRequest_14_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_SignRequest_14_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SignRequest                          protoreflect.MessageDescriptor
	fd_SignRequest_id                       protoreflect.FieldDescriptor
	fd_SignRequest_creator                  protoreflect.FieldDescriptor
	fd_SignRequest_key_id                   protoreflect.FieldDescriptor
	fd_SignRequest_key_type                 protoreflect.FieldDescriptor
	fd_SignRequest_data_for_signing         protoreflect.FieldDescriptor
	fd_SignRequest_status                   protoreflect.FieldDescriptor
	fd_SignRequest_signed_data              protoreflect.FieldDescriptor
	fd_SignRequest_keyring_party_signatures protoreflect.FieldDescriptor
	fd_SignRequest_reject_reason            protoreflect.FieldDescriptor
	fd_SignRequest_metadata                 protoreflect.FieldDescriptor
	fd_SignRequest_parent_req_id            protoreflect.FieldDescriptor
	fd_SignRequest_child_req_ids            protoreflect.FieldDescriptor
	fd_SignRequest_cache_id                 protoreflect.FieldDescriptor
	fd_SignRequest_key_ids                  protoreflect.FieldDescriptor
	fd_SignRequest_mpc_btl                  protoreflect.FieldDescriptor
	fd_SignRequest_fee                      protoreflect.FieldDescriptor
	fd_SignRequest_zenbtc_tx_bytes          protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_mpcsign_proto_init()
	md_SignRequest = File_zrchain_treasury_mpcsign_proto.Messages().ByName("SignRequest")
	fd_SignRequest_id = md_SignRequest.Fields().ByName("id")
	fd_SignRequest_creator = md_SignRequest.Fields().ByName("creator")
	fd_SignRequest_key_id = md_SignRequest.Fields().ByName("key_id")
	fd_SignRequest_key_type = md_SignRequest.Fields().ByName("key_type")
	fd_SignRequest_data_for_signing = md_SignRequest.Fields().ByName("data_for_signing")
	fd_SignRequest_status = md_SignRequest.Fields().ByName("status")
	fd_SignRequest_signed_data = md_SignRequest.Fields().ByName("signed_data")
	fd_SignRequest_keyring_party_signatures = md_SignRequest.Fields().ByName("keyring_party_signatures")
	fd_SignRequest_reject_reason = md_SignRequest.Fields().ByName("reject_reason")
	fd_SignRequest_metadata = md_SignRequest.Fields().ByName("metadata")
	fd_SignRequest_parent_req_id = md_SignRequest.Fields().ByName("parent_req_id")
	fd_SignRequest_child_req_ids = md_SignRequest.Fields().ByName("child_req_ids")
	fd_SignRequest_cache_id = md_SignRequest.Fields().ByName("cache_id")
	fd_SignRequest_key_ids = md_SignRequest.Fields().ByName("key_ids")
	fd_SignRequest_mpc_btl = md_SignRequest.Fields().ByName("mpc_btl")
	fd_SignRequest_fee = md_SignRequest.Fields().ByName("fee")
	fd_SignRequest_zenbtc_tx_bytes = md_SignRequest.Fields().ByName("zenbtc_tx_bytes")
}

var _ protoreflect.Message = (*fastReflection_SignRequest)(nil)

type fastReflection_SignRequest SignRequest

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignRequest)(x)
}

func (x *SignRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignRequest_messageType fastReflection_SignRequest_messageType
var _ protoreflect.MessageType = fastReflection_SignRequest_messageType{}

type fastReflection_SignRequest_messageType struct{}

func (x fastReflection_SignRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignRequest)(nil)
}
func (x fastReflection_SignRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_SignRequest)
}
func (x fastReflection_SignRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_SignRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignRequest) Type() protoreflect.MessageType {
	return _fastReflection_SignRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignRequest) New() protoreflect.Message {
	return new(fastReflection_SignRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignRequest) Interface() protoreflect.ProtoMessage {
	return (*SignRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_SignRequest_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_SignRequest_creator, value) {
			return
		}
	}
	if x.KeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyId)
		if !f(fd_SignRequest_key_id, value) {
			return
		}
	}
	if x.KeyType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.KeyType))
		if !f(fd_SignRequest_key_type, value) {
			return
		}
	}
	if len(x.DataForSigning) != 0 {
		value := protoreflect.ValueOfList(&_SignRequest_5_list{list: &x.DataForSigning})
		if !f(fd_SignRequest_data_for_signing, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_SignRequest_status, value) {
			return
		}
	}
	if len(x.SignedData) != 0 {
		value := protoreflect.ValueOfList(&_SignRequest_7_list{list: &x.SignedData})
		if !f(fd_SignRequest_signed_data, value) {
			return
		}
	}
	if len(x.KeyringPartySignatures) != 0 {
		value := protoreflect.ValueOfList(&_SignRequest_8_list{list: &x.KeyringPartySignatures})
		if !f(fd_SignRequest_keyring_party_signatures, value) {
			return
		}
	}
	if x.RejectReason != "" {
		value := protoreflect.ValueOfString(x.RejectReason)
		if !f(fd_SignRequest_reject_reason, value) {
			return
		}
	}
	if x.Metadata != nil {
		value := protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
		if !f(fd_SignRequest_metadata, value) {
			return
		}
	}
	if x.ParentReqId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParentReqId)
		if !f(fd_SignRequest_parent_req_id, value) {
			return
		}
	}
	if len(x.ChildReqIds) != 0 {
		value := protoreflect.ValueOfList(&_SignRequest_12_list{list: &x.ChildReqIds})
		if !f(fd_SignRequest_child_req_ids, value) {
			return
		}
	}
	if len(x.CacheId) != 0 {
		value := protoreflect.ValueOfBytes(x.CacheId)
		if !f(fd_SignRequest_cache_id, value) {
			return
		}
	}
	if len(x.KeyIds) != 0 {
		value := protoreflect.ValueOfList(&_SignRequest_14_list{list: &x.KeyIds})
		if !f(fd_SignRequest_key_ids, value) {
			return
		}
	}
	if x.MpcBtl != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MpcBtl)
		if !f(fd_SignRequest_mpc_btl, value) {
			return
		}
	}
	if x.Fee != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Fee)
		if !f(fd_SignRequest_fee, value) {
			return
		}
	}
	if len(x.ZenbtcTxBytes) != 0 {
		value := protoreflect.ValueOfBytes(x.ZenbtcTxBytes)
		if !f(fd_SignRequest_zenbtc_tx_bytes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.SignRequest.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.SignRequest.creator":
		return x.Creator != ""
	case "zrchain.treasury.SignRequest.key_id":
		return x.KeyId != uint64(0)
	case "zrchain.treasury.SignRequest.key_type":
		return x.KeyType != 0
	case "zrchain.treasury.SignRequest.data_for_signing":
		return len(x.DataForSigning) != 0
	case "zrchain.treasury.SignRequest.status":
		return x.Status != 0
	case "zrchain.treasury.SignRequest.signed_data":
		return len(x.SignedData) != 0
	case "zrchain.treasury.SignRequest.keyring_party_signatures":
		return len(x.KeyringPartySignatures) != 0
	case "zrchain.treasury.SignRequest.reject_reason":
		return x.RejectReason != ""
	case "zrchain.treasury.SignRequest.metadata":
		return x.Metadata != nil
	case "zrchain.treasury.SignRequest.parent_req_id":
		return x.ParentReqId != uint64(0)
	case "zrchain.treasury.SignRequest.child_req_ids":
		return len(x.ChildReqIds) != 0
	case "zrchain.treasury.SignRequest.cache_id":
		return len(x.CacheId) != 0
	case "zrchain.treasury.SignRequest.key_ids":
		return len(x.KeyIds) != 0
	case "zrchain.treasury.SignRequest.mpc_btl":
		return x.MpcBtl != uint64(0)
	case "zrchain.treasury.SignRequest.fee":
		return x.Fee != uint64(0)
	case "zrchain.treasury.SignRequest.zenbtc_tx_bytes":
		return len(x.ZenbtcTxBytes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.SignRequest.id":
		x.Id = uint64(0)
	case "zrchain.treasury.SignRequest.creator":
		x.Creator = ""
	case "zrchain.treasury.SignRequest.key_id":
		x.KeyId = uint64(0)
	case "zrchain.treasury.SignRequest.key_type":
		x.KeyType = 0
	case "zrchain.treasury.SignRequest.data_for_signing":
		x.DataForSigning = nil
	case "zrchain.treasury.SignRequest.status":
		x.Status = 0
	case "zrchain.treasury.SignRequest.signed_data":
		x.SignedData = nil
	case "zrchain.treasury.SignRequest.keyring_party_signatures":
		x.KeyringPartySignatures = nil
	case "zrchain.treasury.SignRequest.reject_reason":
		x.RejectReason = ""
	case "zrchain.treasury.SignRequest.metadata":
		x.Metadata = nil
	case "zrchain.treasury.SignRequest.parent_req_id":
		x.ParentReqId = uint64(0)
	case "zrchain.treasury.SignRequest.child_req_ids":
		x.ChildReqIds = nil
	case "zrchain.treasury.SignRequest.cache_id":
		x.CacheId = nil
	case "zrchain.treasury.SignRequest.key_ids":
		x.KeyIds = nil
	case "zrchain.treasury.SignRequest.mpc_btl":
		x.MpcBtl = uint64(0)
	case "zrchain.treasury.SignRequest.fee":
		x.Fee = uint64(0)
	case "zrchain.treasury.SignRequest.zenbtc_tx_bytes":
		x.ZenbtcTxBytes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.SignRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignRequest.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignRequest.key_id":
		value := x.KeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignRequest.key_type":
		value := x.KeyType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.SignRequest.data_for_signing":
		if len(x.DataForSigning) == 0 {
			return protoreflect.ValueOfList(&_SignRequest_5_list{})
		}
		listValue := &_SignRequest_5_list{list: &x.DataForSigning}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.SignRequest.signed_data":
		if len(x.SignedData) == 0 {
			return protoreflect.ValueOfList(&_SignRequest_7_list{})
		}
		listValue := &_SignRequest_7_list{list: &x.SignedData}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignRequest.keyring_party_signatures":
		if len(x.KeyringPartySignatures) == 0 {
			return protoreflect.ValueOfList(&_SignRequest_8_list{})
		}
		listValue := &_SignRequest_8_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignRequest.reject_reason":
		value := x.RejectReason
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignRequest.metadata":
		value := x.Metadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.treasury.SignRequest.parent_req_id":
		value := x.ParentReqId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignRequest.child_req_ids":
		if len(x.ChildReqIds) == 0 {
			return protoreflect.ValueOfList(&_SignRequest_12_list{})
		}
		listValue := &_SignRequest_12_list{list: &x.ChildReqIds}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignRequest.cache_id":
		value := x.CacheId
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.SignRequest.key_ids":
		if len(x.KeyIds) == 0 {
			return protoreflect.ValueOfList(&_SignRequest_14_list{})
		}
		listValue := &_SignRequest_14_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignRequest.mpc_btl":
		value := x.MpcBtl
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignRequest.fee":
		value := x.Fee
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignRequest.zenbtc_tx_bytes":
		value := x.ZenbtcTxBytes
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.SignRequest.id":
		x.Id = value.Uint()
	case "zrchain.treasury.SignRequest.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.SignRequest.key_id":
		x.KeyId = value.Uint()
	case "zrchain.treasury.SignRequest.key_type":
		x.KeyType = (KeyType)(value.Enum())
	case "zrchain.treasury.SignRequest.data_for_signing":
		lv := value.List()
		clv := lv.(*_SignRequest_5_list)
		x.DataForSigning = *clv.list
	case "zrchain.treasury.SignRequest.status":
		x.Status = (SignRequestStatus)(value.Enum())
	case "zrchain.treasury.SignRequest.signed_data":
		lv := value.List()
		clv := lv.(*_SignRequest_7_list)
		x.SignedData = *clv.list
	case "zrchain.treasury.SignRequest.keyring_party_signatures":
		lv := value.List()
		clv := lv.(*_SignRequest_8_list)
		x.KeyringPartySignatures = *clv.list
	case "zrchain.treasury.SignRequest.reject_reason":
		x.RejectReason = value.Interface().(string)
	case "zrchain.treasury.SignRequest.metadata":
		x.Metadata = value.Message().Interface().(*anypb.Any)
	case "zrchain.treasury.SignRequest.parent_req_id":
		x.ParentReqId = value.Uint()
	case "zrchain.treasury.SignRequest.child_req_ids":
		lv := value.List()
		clv := lv.(*_SignRequest_12_list)
		x.ChildReqIds = *clv.list
	case "zrchain.treasury.SignRequest.cache_id":
		x.CacheId = value.Bytes()
	case "zrchain.treasury.SignRequest.key_ids":
		lv := value.List()
		clv := lv.(*_SignRequest_14_list)
		x.KeyIds = *clv.list
	case "zrchain.treasury.SignRequest.mpc_btl":
		x.MpcBtl = value.Uint()
	case "zrchain.treasury.SignRequest.fee":
		x.Fee = value.Uint()
	case "zrchain.treasury.SignRequest.zenbtc_tx_bytes":
		x.ZenbtcTxBytes = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignRequest.data_for_signing":
		if x.DataForSigning == nil {
			x.DataForSigning = [][]byte{}
		}
		value := &_SignRequest_5_list{list: &x.DataForSigning}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignRequest.signed_data":
		if x.SignedData == nil {
			x.SignedData = []*SignedDataWithID{}
		}
		value := &_SignRequest_7_list{list: &x.SignedData}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignRequest.keyring_party_signatures":
		if x.KeyringPartySignatures == nil {
			x.KeyringPartySignatures = [][]byte{}
		}
		value := &_SignRequest_8_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignRequest.metadata":
		if x.Metadata == nil {
			x.Metadata = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
	case "zrchain.treasury.SignRequest.child_req_ids":
		if x.ChildReqIds == nil {
			x.ChildReqIds = []uint64{}
		}
		value := &_SignRequest_12_list{list: &x.ChildReqIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignRequest.key_ids":
		if x.KeyIds == nil {
			x.KeyIds = []uint64{}
		}
		value := &_SignRequest_14_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignRequest.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.key_id":
		panic(fmt.Errorf("field key_id of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.key_type":
		panic(fmt.Errorf("field key_type of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.status":
		panic(fmt.Errorf("field status of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.reject_reason":
		panic(fmt.Errorf("field reject_reason of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.parent_req_id":
		panic(fmt.Errorf("field parent_req_id of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.cache_id":
		panic(fmt.Errorf("field cache_id of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.mpc_btl":
		panic(fmt.Errorf("field mpc_btl of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.fee":
		panic(fmt.Errorf("field fee of message zrchain.treasury.SignRequest is not mutable"))
	case "zrchain.treasury.SignRequest.zenbtc_tx_bytes":
		panic(fmt.Errorf("field zenbtc_tx_bytes of message zrchain.treasury.SignRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignRequest.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignRequest.key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignRequest.key_type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.SignRequest.data_for_signing":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_SignRequest_5_list{list: &list})
	case "zrchain.treasury.SignRequest.status":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.SignRequest.signed_data":
		list := []*SignedDataWithID{}
		return protoreflect.ValueOfList(&_SignRequest_7_list{list: &list})
	case "zrchain.treasury.SignRequest.keyring_party_signatures":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_SignRequest_8_list{list: &list})
	case "zrchain.treasury.SignRequest.reject_reason":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignRequest.metadata":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.treasury.SignRequest.parent_req_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignRequest.child_req_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_SignRequest_12_list{list: &list})
	case "zrchain.treasury.SignRequest.cache_id":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.SignRequest.key_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_SignRequest_14_list{list: &list})
	case "zrchain.treasury.SignRequest.mpc_btl":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignRequest.fee":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignRequest.zenbtc_tx_bytes":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.SignRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyId))
		}
		if x.KeyType != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyType))
		}
		if len(x.DataForSigning) > 0 {
			for _, b := range x.DataForSigning {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if len(x.SignedData) > 0 {
			for _, e := range x.SignedData {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.KeyringPartySignatures) > 0 {
			for _, b := range x.KeyringPartySignatures {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.RejectReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Metadata != nil {
			l = options.Size(x.Metadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParentReqId != 0 {
			n += 1 + runtime.Sov(uint64(x.ParentReqId))
		}
		if len(x.ChildReqIds) > 0 {
			l = 0
			for _, e := range x.ChildReqIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.CacheId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.KeyIds) > 0 {
			l = 0
			for _, e := range x.KeyIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.MpcBtl != 0 {
			n += 1 + runtime.Sov(uint64(x.MpcBtl))
		}
		if x.Fee != 0 {
			n += 2 + runtime.Sov(uint64(x.Fee))
		}
		l = len(x.ZenbtcTxBytes)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ZenbtcTxBytes) > 0 {
			i -= len(x.ZenbtcTxBytes)
			copy(dAtA[i:], x.ZenbtcTxBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZenbtcTxBytes)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if x.Fee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Fee))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.MpcBtl != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MpcBtl))
			i--
			dAtA[i] = 0x78
		}
		if len(x.KeyIds) > 0 {
			var pksize2 int
			for _, num := range x.KeyIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.KeyIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x72
		}
		if len(x.CacheId) > 0 {
			i -= len(x.CacheId)
			copy(dAtA[i:], x.CacheId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CacheId)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.ChildReqIds) > 0 {
			var pksize4 int
			for _, num := range x.ChildReqIds {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.ChildReqIds {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x62
		}
		if x.ParentReqId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParentReqId))
			i--
			dAtA[i] = 0x58
		}
		if x.Metadata != nil {
			encoded, err := options.Marshal(x.Metadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.RejectReason) > 0 {
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.KeyringPartySignatures) > 0 {
			for iNdEx := len(x.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.KeyringPartySignatures[iNdEx])
				copy(dAtA[i:], x.KeyringPartySignatures[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringPartySignatures[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.SignedData) > 0 {
			for iNdEx := len(x.SignedData) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SignedData[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if len(x.DataForSigning) > 0 {
			for iNdEx := len(x.DataForSigning) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.DataForSigning[iNdEx])
				copy(dAtA[i:], x.DataForSigning[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DataForSigning[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.KeyType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyType))
			i--
			dAtA[i] = 0x20
		}
		if x.KeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
				}
				x.KeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
				}
				x.KeyType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyType |= KeyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataForSigning", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DataForSigning = append(x.DataForSigning, make([]byte, postIndex-iNdEx))
				copy(x.DataForSigning[len(x.DataForSigning)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= SignRequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignedData = append(x.SignedData, &SignedDataWithID{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SignedData[len(x.SignedData)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringPartySignatures = append(x.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
				copy(x.KeyringPartySignatures[len(x.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RejectReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Metadata == nil {
					x.Metadata = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Metadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParentReqId", wireType)
				}
				x.ParentReqId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParentReqId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ChildReqIds = append(x.ChildReqIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ChildReqIds) == 0 {
						x.ChildReqIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ChildReqIds = append(x.ChildReqIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChildReqIds", wireType)
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CacheId", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CacheId = append(x.CacheId[:0], dAtA[iNdEx:postIndex]...)
				if x.CacheId == nil {
					x.CacheId = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.KeyIds = append(x.KeyIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.KeyIds) == 0 {
						x.KeyIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.KeyIds = append(x.KeyIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
				}
				x.MpcBtl = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MpcBtl |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				x.Fee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Fee |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcTxBytes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZenbtcTxBytes = append(x.ZenbtcTxBytes[:0], dAtA[iNdEx:postIndex]...)
				if x.ZenbtcTxBytes == nil {
					x.ZenbtcTxBytes = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SignedDataWithID                 protoreflect.MessageDescriptor
	fd_SignedDataWithID_sign_request_id protoreflect.FieldDescriptor
	fd_SignedDataWithID_signed_data     protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_mpcsign_proto_init()
	md_SignedDataWithID = File_zrchain_treasury_mpcsign_proto.Messages().ByName("SignedDataWithID")
	fd_SignedDataWithID_sign_request_id = md_SignedDataWithID.Fields().ByName("sign_request_id")
	fd_SignedDataWithID_signed_data = md_SignedDataWithID.Fields().ByName("signed_data")
}

var _ protoreflect.Message = (*fastReflection_SignedDataWithID)(nil)

type fastReflection_SignedDataWithID SignedDataWithID

func (x *SignedDataWithID) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignedDataWithID)(x)
}

func (x *SignedDataWithID) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignedDataWithID_messageType fastReflection_SignedDataWithID_messageType
var _ protoreflect.MessageType = fastReflection_SignedDataWithID_messageType{}

type fastReflection_SignedDataWithID_messageType struct{}

func (x fastReflection_SignedDataWithID_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignedDataWithID)(nil)
}
func (x fastReflection_SignedDataWithID_messageType) New() protoreflect.Message {
	return new(fastReflection_SignedDataWithID)
}
func (x fastReflection_SignedDataWithID_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignedDataWithID
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignedDataWithID) Descriptor() protoreflect.MessageDescriptor {
	return md_SignedDataWithID
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignedDataWithID) Type() protoreflect.MessageType {
	return _fastReflection_SignedDataWithID_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignedDataWithID) New() protoreflect.Message {
	return new(fastReflection_SignedDataWithID)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignedDataWithID) Interface() protoreflect.ProtoMessage {
	return (*SignedDataWithID)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignedDataWithID) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SignRequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignRequestId)
		if !f(fd_SignedDataWithID_sign_request_id, value) {
			return
		}
	}
	if len(x.SignedData) != 0 {
		value := protoreflect.ValueOfBytes(x.SignedData)
		if !f(fd_SignedDataWithID_signed_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignedDataWithID) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.SignedDataWithID.sign_request_id":
		return x.SignRequestId != uint64(0)
	case "zrchain.treasury.SignedDataWithID.signed_data":
		return len(x.SignedData) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignedDataWithID"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignedDataWithID does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignedDataWithID) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.SignedDataWithID.sign_request_id":
		x.SignRequestId = uint64(0)
	case "zrchain.treasury.SignedDataWithID.signed_data":
		x.SignedData = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignedDataWithID"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignedDataWithID does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignedDataWithID) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.SignedDataWithID.sign_request_id":
		value := x.SignRequestId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignedDataWithID.signed_data":
		value := x.SignedData
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignedDataWithID"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignedDataWithID does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignedDataWithID) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.SignedDataWithID.sign_request_id":
		x.SignRequestId = value.Uint()
	case "zrchain.treasury.SignedDataWithID.signed_data":
		x.SignedData = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignedDataWithID"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignedDataWithID does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignedDataWithID) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignedDataWithID.sign_request_id":
		panic(fmt.Errorf("field sign_request_id of message zrchain.treasury.SignedDataWithID is not mutable"))
	case "zrchain.treasury.SignedDataWithID.signed_data":
		panic(fmt.Errorf("field signed_data of message zrchain.treasury.SignedDataWithID is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignedDataWithID"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignedDataWithID does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignedDataWithID) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignedDataWithID.sign_request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignedDataWithID.signed_data":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignedDataWithID"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignedDataWithID does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignedDataWithID) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.SignedDataWithID", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignedDataWithID) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignedDataWithID) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignedDataWithID) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignedDataWithID) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignedDataWithID)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SignRequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignRequestId))
		}
		l = len(x.SignedData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignedDataWithID)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SignedData) > 0 {
			i -= len(x.SignedData)
			copy(dAtA[i:], x.SignedData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignedData)))
			i--
			dAtA[i] = 0x12
		}
		if x.SignRequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignRequestId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignedDataWithID)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignedDataWithID: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignedDataWithID: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignRequestId", wireType)
				}
				x.SignRequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignRequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignedData = append(x.SignedData[:0], dAtA[iNdEx:postIndex]...)
				if x.SignedData == nil {
					x.SignedData = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SignTransactionRequest_8_list)(nil)

type _SignTransactionRequest_8_list struct {
	list *[]uint64
}

func (x *_SignTransactionRequest_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignTransactionRequest_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_SignTransactionRequest_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignTransactionRequest_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignTransactionRequest_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignTransactionRequest at list field KeyIds as it is not of Message kind"))
}

func (x *_SignTransactionRequest_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignTransactionRequest_8_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_SignTransactionRequest_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SignTransactionRequest                      protoreflect.MessageDescriptor
	fd_SignTransactionRequest_id                   protoreflect.FieldDescriptor
	fd_SignTransactionRequest_creator              protoreflect.FieldDescriptor
	fd_SignTransactionRequest_key_id               protoreflect.FieldDescriptor
	fd_SignTransactionRequest_wallet_type          protoreflect.FieldDescriptor
	fd_SignTransactionRequest_unsigned_transaction protoreflect.FieldDescriptor
	fd_SignTransactionRequest_sign_request_id      protoreflect.FieldDescriptor
	fd_SignTransactionRequest_no_broadcast         protoreflect.FieldDescriptor
	fd_SignTransactionRequest_key_ids              protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_mpcsign_proto_init()
	md_SignTransactionRequest = File_zrchain_treasury_mpcsign_proto.Messages().ByName("SignTransactionRequest")
	fd_SignTransactionRequest_id = md_SignTransactionRequest.Fields().ByName("id")
	fd_SignTransactionRequest_creator = md_SignTransactionRequest.Fields().ByName("creator")
	fd_SignTransactionRequest_key_id = md_SignTransactionRequest.Fields().ByName("key_id")
	fd_SignTransactionRequest_wallet_type = md_SignTransactionRequest.Fields().ByName("wallet_type")
	fd_SignTransactionRequest_unsigned_transaction = md_SignTransactionRequest.Fields().ByName("unsigned_transaction")
	fd_SignTransactionRequest_sign_request_id = md_SignTransactionRequest.Fields().ByName("sign_request_id")
	fd_SignTransactionRequest_no_broadcast = md_SignTransactionRequest.Fields().ByName("no_broadcast")
	fd_SignTransactionRequest_key_ids = md_SignTransactionRequest.Fields().ByName("key_ids")
}

var _ protoreflect.Message = (*fastReflection_SignTransactionRequest)(nil)

type fastReflection_SignTransactionRequest SignTransactionRequest

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignTransactionRequest)(x)
}

func (x *SignTransactionRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignTransactionRequest_messageType fastReflection_SignTransactionRequest_messageType
var _ protoreflect.MessageType = fastReflection_SignTransactionRequest_messageType{}

type fastReflection_SignTransactionRequest_messageType struct{}

func (x fastReflection_SignTransactionRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignTransactionRequest)(nil)
}
func (x fastReflection_SignTransactionRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_SignTransactionRequest)
}
func (x fastReflection_SignTransactionRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignTransactionRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignTransactionRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_SignTransactionRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignTransactionRequest) Type() protoreflect.MessageType {
	return _fastReflection_SignTransactionRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignTransactionRequest) New() protoreflect.Message {
	return new(fastReflection_SignTransactionRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignTransactionRequest) Interface() protoreflect.ProtoMessage {
	return (*SignTransactionRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignTransactionRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_SignTransactionRequest_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_SignTransactionRequest_creator, value) {
			return
		}
	}
	if x.KeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyId)
		if !f(fd_SignTransactionRequest_key_id, value) {
			return
		}
	}
	if x.WalletType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.WalletType))
		if !f(fd_SignTransactionRequest_wallet_type, value) {
			return
		}
	}
	if len(x.UnsignedTransaction) != 0 {
		value := protoreflect.ValueOfBytes(x.UnsignedTransaction)
		if !f(fd_SignTransactionRequest_unsigned_transaction, value) {
			return
		}
	}
	if x.SignRequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignRequestId)
		if !f(fd_SignTransactionRequest_sign_request_id, value) {
			return
		}
	}
	if x.NoBroadcast != false {
		value := protoreflect.ValueOfBool(x.NoBroadcast)
		if !f(fd_SignTransactionRequest_no_broadcast, value) {
			return
		}
	}
	if len(x.KeyIds) != 0 {
		value := protoreflect.ValueOfList(&_SignTransactionRequest_8_list{list: &x.KeyIds})
		if !f(fd_SignTransactionRequest_key_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignTransactionRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.SignTransactionRequest.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.SignTransactionRequest.creator":
		return x.Creator != ""
	case "zrchain.treasury.SignTransactionRequest.key_id":
		return x.KeyId != uint64(0)
	case "zrchain.treasury.SignTransactionRequest.wallet_type":
		return x.WalletType != 0
	case "zrchain.treasury.SignTransactionRequest.unsigned_transaction":
		return len(x.UnsignedTransaction) != 0
	case "zrchain.treasury.SignTransactionRequest.sign_request_id":
		return x.SignRequestId != uint64(0)
	case "zrchain.treasury.SignTransactionRequest.no_broadcast":
		return x.NoBroadcast != false
	case "zrchain.treasury.SignTransactionRequest.key_ids":
		return len(x.KeyIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTransactionRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTransactionRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.SignTransactionRequest.id":
		x.Id = uint64(0)
	case "zrchain.treasury.SignTransactionRequest.creator":
		x.Creator = ""
	case "zrchain.treasury.SignTransactionRequest.key_id":
		x.KeyId = uint64(0)
	case "zrchain.treasury.SignTransactionRequest.wallet_type":
		x.WalletType = 0
	case "zrchain.treasury.SignTransactionRequest.unsigned_transaction":
		x.UnsignedTransaction = nil
	case "zrchain.treasury.SignTransactionRequest.sign_request_id":
		x.SignRequestId = uint64(0)
	case "zrchain.treasury.SignTransactionRequest.no_broadcast":
		x.NoBroadcast = false
	case "zrchain.treasury.SignTransactionRequest.key_ids":
		x.KeyIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTransactionRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignTransactionRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.SignTransactionRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTransactionRequest.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignTransactionRequest.key_id":
		value := x.KeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTransactionRequest.wallet_type":
		value := x.WalletType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.SignTransactionRequest.unsigned_transaction":
		value := x.UnsignedTransaction
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.SignTransactionRequest.sign_request_id":
		value := x.SignRequestId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTransactionRequest.no_broadcast":
		value := x.NoBroadcast
		return protoreflect.ValueOfBool(value)
	case "zrchain.treasury.SignTransactionRequest.key_ids":
		if len(x.KeyIds) == 0 {
			return protoreflect.ValueOfList(&_SignTransactionRequest_8_list{})
		}
		listValue := &_SignTransactionRequest_8_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTransactionRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTransactionRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.SignTransactionRequest.id":
		x.Id = value.Uint()
	case "zrchain.treasury.SignTransactionRequest.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.SignTransactionRequest.key_id":
		x.KeyId = value.Uint()
	case "zrchain.treasury.SignTransactionRequest.wallet_type":
		x.WalletType = (WalletType)(value.Enum())
	case "zrchain.treasury.SignTransactionRequest.unsigned_transaction":
		x.UnsignedTransaction = value.Bytes()
	case "zrchain.treasury.SignTransactionRequest.sign_request_id":
		x.SignRequestId = value.Uint()
	case "zrchain.treasury.SignTransactionRequest.no_broadcast":
		x.NoBroadcast = value.Bool()
	case "zrchain.treasury.SignTransactionRequest.key_ids":
		lv := value.List()
		clv := lv.(*_SignTransactionRequest_8_list)
		x.KeyIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTransactionRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTransactionRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignTransactionRequest.key_ids":
		if x.KeyIds == nil {
			x.KeyIds = []uint64{}
		}
		value := &_SignTransactionRequest_8_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignTransactionRequest.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.SignTransactionRequest is not mutable"))
	case "zrchain.treasury.SignTransactionRequest.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.SignTransactionRequest is not mutable"))
	case "zrchain.treasury.SignTransactionRequest.key_id":
		panic(fmt.Errorf("field key_id of message zrchain.treasury.SignTransactionRequest is not mutable"))
	case "zrchain.treasury.SignTransactionRequest.wallet_type":
		panic(fmt.Errorf("field wallet_type of message zrchain.treasury.SignTransactionRequest is not mutable"))
	case "zrchain.treasury.SignTransactionRequest.unsigned_transaction":
		panic(fmt.Errorf("field unsigned_transaction of message zrchain.treasury.SignTransactionRequest is not mutable"))
	case "zrchain.treasury.SignTransactionRequest.sign_request_id":
		panic(fmt.Errorf("field sign_request_id of message zrchain.treasury.SignTransactionRequest is not mutable"))
	case "zrchain.treasury.SignTransactionRequest.no_broadcast":
		panic(fmt.Errorf("field no_broadcast of message zrchain.treasury.SignTransactionRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTransactionRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignTransactionRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignTransactionRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTransactionRequest.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignTransactionRequest.key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTransactionRequest.wallet_type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.SignTransactionRequest.unsigned_transaction":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.SignTransactionRequest.sign_request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTransactionRequest.no_broadcast":
		return protoreflect.ValueOfBool(false)
	case "zrchain.treasury.SignTransactionRequest.key_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_SignTransactionRequest_8_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTransactionRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignTransactionRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.SignTransactionRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignTransactionRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTransactionRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignTransactionRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignTransactionRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignTransactionRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyId))
		}
		if x.WalletType != 0 {
			n += 1 + runtime.Sov(uint64(x.WalletType))
		}
		l = len(x.UnsignedTransaction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SignRequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignRequestId))
		}
		if x.NoBroadcast {
			n += 2
		}
		if len(x.KeyIds) > 0 {
			l = 0
			for _, e := range x.KeyIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignTransactionRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.KeyIds) > 0 {
			var pksize2 int
			for _, num := range x.KeyIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.KeyIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x42
		}
		if x.NoBroadcast {
			i--
			if x.NoBroadcast {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.SignRequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignRequestId))
			i--
			dAtA[i] = 0x30
		}
		if len(x.UnsignedTransaction) > 0 {
			i -= len(x.UnsignedTransaction)
			copy(dAtA[i:], x.UnsignedTransaction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UnsignedTransaction)))
			i--
			dAtA[i] = 0x2a
		}
		if x.WalletType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WalletType))
			i--
			dAtA[i] = 0x20
		}
		if x.KeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignTransactionRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignTransactionRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
				}
				x.KeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
				}
				x.WalletType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WalletType |= WalletType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnsignedTransaction", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnsignedTransaction = append(x.UnsignedTransaction[:0], dAtA[iNdEx:postIndex]...)
				if x.UnsignedTransaction == nil {
					x.UnsignedTransaction = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignRequestId", wireType)
				}
				x.SignRequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignRequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoBroadcast", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.NoBroadcast = bool(v != 0)
			case 8:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.KeyIds = append(x.KeyIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.KeyIds) == 0 {
						x.KeyIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.KeyIds = append(x.KeyIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SignReqResponse_3_list)(nil)

type _SignReqResponse_3_list struct {
	list *[]uint64
}

func (x *_SignReqResponse_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignReqResponse_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_SignReqResponse_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignReqResponse_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignReqResponse_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignReqResponse at list field KeyIds as it is not of Message kind"))
}

func (x *_SignReqResponse_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignReqResponse_3_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_SignReqResponse_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignReqResponse_5_list)(nil)

type _SignReqResponse_5_list struct {
	list *[][]byte
}

func (x *_SignReqResponse_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignReqResponse_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_SignReqResponse_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignReqResponse_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignReqResponse_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignReqResponse at list field DataForSigning as it is not of Message kind"))
}

func (x *_SignReqResponse_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignReqResponse_5_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_SignReqResponse_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignReqResponse_7_list)(nil)

type _SignReqResponse_7_list struct {
	list *[]*SignedDataWithID
}

func (x *_SignReqResponse_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignReqResponse_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SignReqResponse_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SignedDataWithID)
	(*x.list)[i] = concreteValue
}

func (x *_SignReqResponse_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SignedDataWithID)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignReqResponse_7_list) AppendMutable() protoreflect.Value {
	v := new(SignedDataWithID)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SignReqResponse_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SignReqResponse_7_list) NewElement() protoreflect.Value {
	v := new(SignedDataWithID)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SignReqResponse_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignReqResponse_8_list)(nil)

type _SignReqResponse_8_list struct {
	list *[][]byte
}

func (x *_SignReqResponse_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignReqResponse_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_SignReqResponse_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignReqResponse_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignReqResponse_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignReqResponse at list field KeyringPartySignatures as it is not of Message kind"))
}

func (x *_SignReqResponse_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignReqResponse_8_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_SignReqResponse_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SignReqResponse_12_list)(nil)

type _SignReqResponse_12_list struct {
	list *[]uint64
}

func (x *_SignReqResponse_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignReqResponse_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_SignReqResponse_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignReqResponse_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignReqResponse_12_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignReqResponse at list field ChildReqIds as it is not of Message kind"))
}

func (x *_SignReqResponse_12_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignReqResponse_12_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_SignReqResponse_12_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SignReqResponse                          protoreflect.MessageDescriptor
	fd_SignReqResponse_id                       protoreflect.FieldDescriptor
	fd_SignReqResponse_creator                  protoreflect.FieldDescriptor
	fd_SignReqResponse_key_ids                  protoreflect.FieldDescriptor
	fd_SignReqResponse_key_type                 protoreflect.FieldDescriptor
	fd_SignReqResponse_data_for_signing         protoreflect.FieldDescriptor
	fd_SignReqResponse_status                   protoreflect.FieldDescriptor
	fd_SignReqResponse_signed_data              protoreflect.FieldDescriptor
	fd_SignReqResponse_keyring_party_signatures protoreflect.FieldDescriptor
	fd_SignReqResponse_reject_reason            protoreflect.FieldDescriptor
	fd_SignReqResponse_metadata                 protoreflect.FieldDescriptor
	fd_SignReqResponse_parent_req_id            protoreflect.FieldDescriptor
	fd_SignReqResponse_child_req_ids            protoreflect.FieldDescriptor
	fd_SignReqResponse_cache_id                 protoreflect.FieldDescriptor
	fd_SignReqResponse_mpc_btl                  protoreflect.FieldDescriptor
	fd_SignReqResponse_fee                      protoreflect.FieldDescriptor
	fd_SignReqResponse_zenbtc_tx_bytes          protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_mpcsign_proto_init()
	md_SignReqResponse = File_zrchain_treasury_mpcsign_proto.Messages().ByName("SignReqResponse")
	fd_SignReqResponse_id = md_SignReqResponse.Fields().ByName("id")
	fd_SignReqResponse_creator = md_SignReqResponse.Fields().ByName("creator")
	fd_SignReqResponse_key_ids = md_SignReqResponse.Fields().ByName("key_ids")
	fd_SignReqResponse_key_type = md_SignReqResponse.Fields().ByName("key_type")
	fd_SignReqResponse_data_for_signing = md_SignReqResponse.Fields().ByName("data_for_signing")
	fd_SignReqResponse_status = md_SignReqResponse.Fields().ByName("status")
	fd_SignReqResponse_signed_data = md_SignReqResponse.Fields().ByName("signed_data")
	fd_SignReqResponse_keyring_party_signatures = md_SignReqResponse.Fields().ByName("keyring_party_signatures")
	fd_SignReqResponse_reject_reason = md_SignReqResponse.Fields().ByName("reject_reason")
	fd_SignReqResponse_metadata = md_SignReqResponse.Fields().ByName("metadata")
	fd_SignReqResponse_parent_req_id = md_SignReqResponse.Fields().ByName("parent_req_id")
	fd_SignReqResponse_child_req_ids = md_SignReqResponse.Fields().ByName("child_req_ids")
	fd_SignReqResponse_cache_id = md_SignReqResponse.Fields().ByName("cache_id")
	fd_SignReqResponse_mpc_btl = md_SignReqResponse.Fields().ByName("mpc_btl")
	fd_SignReqResponse_fee = md_SignReqResponse.Fields().ByName("fee")
	fd_SignReqResponse_zenbtc_tx_bytes = md_SignReqResponse.Fields().ByName("zenbtc_tx_bytes")
}

var _ protoreflect.Message = (*fastReflection_SignReqResponse)(nil)

type fastReflection_SignReqResponse SignReqResponse

func (x *SignReqResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignReqResponse)(x)
}

func (x *SignReqResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignReqResponse_messageType fastReflection_SignReqResponse_messageType
var _ protoreflect.MessageType = fastReflection_SignReqResponse_messageType{}

type fastReflection_SignReqResponse_messageType struct{}

func (x fastReflection_SignReqResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignReqResponse)(nil)
}
func (x fastReflection_SignReqResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_SignReqResponse)
}
func (x fastReflection_SignReqResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignReqResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignReqResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_SignReqResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignReqResponse) Type() protoreflect.MessageType {
	return _fastReflection_SignReqResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignReqResponse) New() protoreflect.Message {
	return new(fastReflection_SignReqResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignReqResponse) Interface() protoreflect.ProtoMessage {
	return (*SignReqResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignReqResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_SignReqResponse_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_SignReqResponse_creator, value) {
			return
		}
	}
	if len(x.KeyIds) != 0 {
		value := protoreflect.ValueOfList(&_SignReqResponse_3_list{list: &x.KeyIds})
		if !f(fd_SignReqResponse_key_ids, value) {
			return
		}
	}
	if x.KeyType != "" {
		value := protoreflect.ValueOfString(x.KeyType)
		if !f(fd_SignReqResponse_key_type, value) {
			return
		}
	}
	if len(x.DataForSigning) != 0 {
		value := protoreflect.ValueOfList(&_SignReqResponse_5_list{list: &x.DataForSigning})
		if !f(fd_SignReqResponse_data_for_signing, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_SignReqResponse_status, value) {
			return
		}
	}
	if len(x.SignedData) != 0 {
		value := protoreflect.ValueOfList(&_SignReqResponse_7_list{list: &x.SignedData})
		if !f(fd_SignReqResponse_signed_data, value) {
			return
		}
	}
	if len(x.KeyringPartySignatures) != 0 {
		value := protoreflect.ValueOfList(&_SignReqResponse_8_list{list: &x.KeyringPartySignatures})
		if !f(fd_SignReqResponse_keyring_party_signatures, value) {
			return
		}
	}
	if x.RejectReason != "" {
		value := protoreflect.ValueOfString(x.RejectReason)
		if !f(fd_SignReqResponse_reject_reason, value) {
			return
		}
	}
	if x.Metadata != nil {
		value := protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
		if !f(fd_SignReqResponse_metadata, value) {
			return
		}
	}
	if x.ParentReqId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParentReqId)
		if !f(fd_SignReqResponse_parent_req_id, value) {
			return
		}
	}
	if len(x.ChildReqIds) != 0 {
		value := protoreflect.ValueOfList(&_SignReqResponse_12_list{list: &x.ChildReqIds})
		if !f(fd_SignReqResponse_child_req_ids, value) {
			return
		}
	}
	if len(x.CacheId) != 0 {
		value := protoreflect.ValueOfBytes(x.CacheId)
		if !f(fd_SignReqResponse_cache_id, value) {
			return
		}
	}
	if x.MpcBtl != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MpcBtl)
		if !f(fd_SignReqResponse_mpc_btl, value) {
			return
		}
	}
	if x.Fee != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Fee)
		if !f(fd_SignReqResponse_fee, value) {
			return
		}
	}
	if len(x.ZenbtcTxBytes) != 0 {
		value := protoreflect.ValueOfBytes(x.ZenbtcTxBytes)
		if !f(fd_SignReqResponse_zenbtc_tx_bytes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignReqResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.SignReqResponse.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.SignReqResponse.creator":
		return x.Creator != ""
	case "zrchain.treasury.SignReqResponse.key_ids":
		return len(x.KeyIds) != 0
	case "zrchain.treasury.SignReqResponse.key_type":
		return x.KeyType != ""
	case "zrchain.treasury.SignReqResponse.data_for_signing":
		return len(x.DataForSigning) != 0
	case "zrchain.treasury.SignReqResponse.status":
		return x.Status != ""
	case "zrchain.treasury.SignReqResponse.signed_data":
		return len(x.SignedData) != 0
	case "zrchain.treasury.SignReqResponse.keyring_party_signatures":
		return len(x.KeyringPartySignatures) != 0
	case "zrchain.treasury.SignReqResponse.reject_reason":
		return x.RejectReason != ""
	case "zrchain.treasury.SignReqResponse.metadata":
		return x.Metadata != nil
	case "zrchain.treasury.SignReqResponse.parent_req_id":
		return x.ParentReqId != uint64(0)
	case "zrchain.treasury.SignReqResponse.child_req_ids":
		return len(x.ChildReqIds) != 0
	case "zrchain.treasury.SignReqResponse.cache_id":
		return len(x.CacheId) != 0
	case "zrchain.treasury.SignReqResponse.mpc_btl":
		return x.MpcBtl != uint64(0)
	case "zrchain.treasury.SignReqResponse.fee":
		return x.Fee != uint64(0)
	case "zrchain.treasury.SignReqResponse.zenbtc_tx_bytes":
		return len(x.ZenbtcTxBytes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignReqResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignReqResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.SignReqResponse.id":
		x.Id = uint64(0)
	case "zrchain.treasury.SignReqResponse.creator":
		x.Creator = ""
	case "zrchain.treasury.SignReqResponse.key_ids":
		x.KeyIds = nil
	case "zrchain.treasury.SignReqResponse.key_type":
		x.KeyType = ""
	case "zrchain.treasury.SignReqResponse.data_for_signing":
		x.DataForSigning = nil
	case "zrchain.treasury.SignReqResponse.status":
		x.Status = ""
	case "zrchain.treasury.SignReqResponse.signed_data":
		x.SignedData = nil
	case "zrchain.treasury.SignReqResponse.keyring_party_signatures":
		x.KeyringPartySignatures = nil
	case "zrchain.treasury.SignReqResponse.reject_reason":
		x.RejectReason = ""
	case "zrchain.treasury.SignReqResponse.metadata":
		x.Metadata = nil
	case "zrchain.treasury.SignReqResponse.parent_req_id":
		x.ParentReqId = uint64(0)
	case "zrchain.treasury.SignReqResponse.child_req_ids":
		x.ChildReqIds = nil
	case "zrchain.treasury.SignReqResponse.cache_id":
		x.CacheId = nil
	case "zrchain.treasury.SignReqResponse.mpc_btl":
		x.MpcBtl = uint64(0)
	case "zrchain.treasury.SignReqResponse.fee":
		x.Fee = uint64(0)
	case "zrchain.treasury.SignReqResponse.zenbtc_tx_bytes":
		x.ZenbtcTxBytes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignReqResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignReqResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.SignReqResponse.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignReqResponse.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignReqResponse.key_ids":
		if len(x.KeyIds) == 0 {
			return protoreflect.ValueOfList(&_SignReqResponse_3_list{})
		}
		listValue := &_SignReqResponse_3_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignReqResponse.key_type":
		value := x.KeyType
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignReqResponse.data_for_signing":
		if len(x.DataForSigning) == 0 {
			return protoreflect.ValueOfList(&_SignReqResponse_5_list{})
		}
		listValue := &_SignReqResponse_5_list{list: &x.DataForSigning}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignReqResponse.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignReqResponse.signed_data":
		if len(x.SignedData) == 0 {
			return protoreflect.ValueOfList(&_SignReqResponse_7_list{})
		}
		listValue := &_SignReqResponse_7_list{list: &x.SignedData}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignReqResponse.keyring_party_signatures":
		if len(x.KeyringPartySignatures) == 0 {
			return protoreflect.ValueOfList(&_SignReqResponse_8_list{})
		}
		listValue := &_SignReqResponse_8_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignReqResponse.reject_reason":
		value := x.RejectReason
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignReqResponse.metadata":
		value := x.Metadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.treasury.SignReqResponse.parent_req_id":
		value := x.ParentReqId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignReqResponse.child_req_ids":
		if len(x.ChildReqIds) == 0 {
			return protoreflect.ValueOfList(&_SignReqResponse_12_list{})
		}
		listValue := &_SignReqResponse_12_list{list: &x.ChildReqIds}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.SignReqResponse.cache_id":
		value := x.CacheId
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.SignReqResponse.mpc_btl":
		value := x.MpcBtl
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignReqResponse.fee":
		value := x.Fee
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignReqResponse.zenbtc_tx_bytes":
		value := x.ZenbtcTxBytes
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignReqResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignReqResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.SignReqResponse.id":
		x.Id = value.Uint()
	case "zrchain.treasury.SignReqResponse.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.SignReqResponse.key_ids":
		lv := value.List()
		clv := lv.(*_SignReqResponse_3_list)
		x.KeyIds = *clv.list
	case "zrchain.treasury.SignReqResponse.key_type":
		x.KeyType = value.Interface().(string)
	case "zrchain.treasury.SignReqResponse.data_for_signing":
		lv := value.List()
		clv := lv.(*_SignReqResponse_5_list)
		x.DataForSigning = *clv.list
	case "zrchain.treasury.SignReqResponse.status":
		x.Status = value.Interface().(string)
	case "zrchain.treasury.SignReqResponse.signed_data":
		lv := value.List()
		clv := lv.(*_SignReqResponse_7_list)
		x.SignedData = *clv.list
	case "zrchain.treasury.SignReqResponse.keyring_party_signatures":
		lv := value.List()
		clv := lv.(*_SignReqResponse_8_list)
		x.KeyringPartySignatures = *clv.list
	case "zrchain.treasury.SignReqResponse.reject_reason":
		x.RejectReason = value.Interface().(string)
	case "zrchain.treasury.SignReqResponse.metadata":
		x.Metadata = value.Message().Interface().(*anypb.Any)
	case "zrchain.treasury.SignReqResponse.parent_req_id":
		x.ParentReqId = value.Uint()
	case "zrchain.treasury.SignReqResponse.child_req_ids":
		lv := value.List()
		clv := lv.(*_SignReqResponse_12_list)
		x.ChildReqIds = *clv.list
	case "zrchain.treasury.SignReqResponse.cache_id":
		x.CacheId = value.Bytes()
	case "zrchain.treasury.SignReqResponse.mpc_btl":
		x.MpcBtl = value.Uint()
	case "zrchain.treasury.SignReqResponse.fee":
		x.Fee = value.Uint()
	case "zrchain.treasury.SignReqResponse.zenbtc_tx_bytes":
		x.ZenbtcTxBytes = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignReqResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignReqResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignReqResponse.key_ids":
		if x.KeyIds == nil {
			x.KeyIds = []uint64{}
		}
		value := &_SignReqResponse_3_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignReqResponse.data_for_signing":
		if x.DataForSigning == nil {
			x.DataForSigning = [][]byte{}
		}
		value := &_SignReqResponse_5_list{list: &x.DataForSigning}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignReqResponse.signed_data":
		if x.SignedData == nil {
			x.SignedData = []*SignedDataWithID{}
		}
		value := &_SignReqResponse_7_list{list: &x.SignedData}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignReqResponse.keyring_party_signatures":
		if x.KeyringPartySignatures == nil {
			x.KeyringPartySignatures = [][]byte{}
		}
		value := &_SignReqResponse_8_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignReqResponse.metadata":
		if x.Metadata == nil {
			x.Metadata = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
	case "zrchain.treasury.SignReqResponse.child_req_ids":
		if x.ChildReqIds == nil {
			x.ChildReqIds = []uint64{}
		}
		value := &_SignReqResponse_12_list{list: &x.ChildReqIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignReqResponse.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.key_type":
		panic(fmt.Errorf("field key_type of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.status":
		panic(fmt.Errorf("field status of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.reject_reason":
		panic(fmt.Errorf("field reject_reason of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.parent_req_id":
		panic(fmt.Errorf("field parent_req_id of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.cache_id":
		panic(fmt.Errorf("field cache_id of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.mpc_btl":
		panic(fmt.Errorf("field mpc_btl of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.fee":
		panic(fmt.Errorf("field fee of message zrchain.treasury.SignReqResponse is not mutable"))
	case "zrchain.treasury.SignReqResponse.zenbtc_tx_bytes":
		panic(fmt.Errorf("field zenbtc_tx_bytes of message zrchain.treasury.SignReqResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignReqResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignReqResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignReqResponse.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignReqResponse.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignReqResponse.key_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_SignReqResponse_3_list{list: &list})
	case "zrchain.treasury.SignReqResponse.key_type":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignReqResponse.data_for_signing":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_SignReqResponse_5_list{list: &list})
	case "zrchain.treasury.SignReqResponse.status":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignReqResponse.signed_data":
		list := []*SignedDataWithID{}
		return protoreflect.ValueOfList(&_SignReqResponse_7_list{list: &list})
	case "zrchain.treasury.SignReqResponse.keyring_party_signatures":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_SignReqResponse_8_list{list: &list})
	case "zrchain.treasury.SignReqResponse.reject_reason":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignReqResponse.metadata":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.treasury.SignReqResponse.parent_req_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignReqResponse.child_req_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_SignReqResponse_12_list{list: &list})
	case "zrchain.treasury.SignReqResponse.cache_id":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.SignReqResponse.mpc_btl":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignReqResponse.fee":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignReqResponse.zenbtc_tx_bytes":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignReqResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignReqResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.SignReqResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignReqResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignReqResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignReqResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignReqResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignReqResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.KeyIds) > 0 {
			l = 0
			for _, e := range x.KeyIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.KeyType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.DataForSigning) > 0 {
			for _, b := range x.DataForSigning {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.SignedData) > 0 {
			for _, e := range x.SignedData {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.KeyringPartySignatures) > 0 {
			for _, b := range x.KeyringPartySignatures {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.RejectReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Metadata != nil {
			l = options.Size(x.Metadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParentReqId != 0 {
			n += 1 + runtime.Sov(uint64(x.ParentReqId))
		}
		if len(x.ChildReqIds) > 0 {
			l = 0
			for _, e := range x.ChildReqIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.CacheId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MpcBtl != 0 {
			n += 1 + runtime.Sov(uint64(x.MpcBtl))
		}
		if x.Fee != 0 {
			n += 1 + runtime.Sov(uint64(x.Fee))
		}
		l = len(x.ZenbtcTxBytes)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignReqResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ZenbtcTxBytes) > 0 {
			i -= len(x.ZenbtcTxBytes)
			copy(dAtA[i:], x.ZenbtcTxBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZenbtcTxBytes)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.Fee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Fee))
			i--
			dAtA[i] = 0x78
		}
		if x.MpcBtl != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MpcBtl))
			i--
			dAtA[i] = 0x70
		}
		if len(x.CacheId) > 0 {
			i -= len(x.CacheId)
			copy(dAtA[i:], x.CacheId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CacheId)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.ChildReqIds) > 0 {
			var pksize2 int
			for _, num := range x.ChildReqIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ChildReqIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x62
		}
		if x.ParentReqId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParentReqId))
			i--
			dAtA[i] = 0x58
		}
		if x.Metadata != nil {
			encoded, err := options.Marshal(x.Metadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.RejectReason) > 0 {
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.KeyringPartySignatures) > 0 {
			for iNdEx := len(x.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.KeyringPartySignatures[iNdEx])
				copy(dAtA[i:], x.KeyringPartySignatures[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringPartySignatures[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.SignedData) > 0 {
			for iNdEx := len(x.SignedData) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SignedData[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.DataForSigning) > 0 {
			for iNdEx := len(x.DataForSigning) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.DataForSigning[iNdEx])
				copy(dAtA[i:], x.DataForSigning[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DataForSigning[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.KeyType) > 0 {
			i -= len(x.KeyType)
			copy(dAtA[i:], x.KeyType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyType)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.KeyIds) > 0 {
			var pksize4 int
			for _, num := range x.KeyIds {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.KeyIds {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignReqResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignReqResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.KeyIds = append(x.KeyIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.KeyIds) == 0 {
						x.KeyIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.KeyIds = append(x.KeyIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataForSigning", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DataForSigning = append(x.DataForSigning, make([]byte, postIndex-iNdEx))
				copy(x.DataForSigning[len(x.DataForSigning)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignedData = append(x.SignedData, &SignedDataWithID{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SignedData[len(x.SignedData)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringPartySignatures = append(x.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
				copy(x.KeyringPartySignatures[len(x.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RejectReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Metadata == nil {
					x.Metadata = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Metadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParentReqId", wireType)
				}
				x.ParentReqId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParentReqId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ChildReqIds = append(x.ChildReqIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ChildReqIds) == 0 {
						x.ChildReqIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ChildReqIds = append(x.ChildReqIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChildReqIds", wireType)
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CacheId", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CacheId = append(x.CacheId[:0], dAtA[iNdEx:postIndex]...)
				if x.CacheId == nil {
					x.CacheId = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
				}
				x.MpcBtl = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MpcBtl |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				x.Fee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Fee |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcTxBytes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZenbtcTxBytes = append(x.ZenbtcTxBytes[:0], dAtA[iNdEx:postIndex]...)
				if x.ZenbtcTxBytes == nil {
					x.ZenbtcTxBytes = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SignTxReqResponse_9_list)(nil)

type _SignTxReqResponse_9_list struct {
	list *[]uint64
}

func (x *_SignTxReqResponse_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignTxReqResponse_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_SignTxReqResponse_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SignTxReqResponse_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignTxReqResponse_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SignTxReqResponse at list field KeyIds as it is not of Message kind"))
}

func (x *_SignTxReqResponse_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SignTxReqResponse_9_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_SignTxReqResponse_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SignTxReqResponse                      protoreflect.MessageDescriptor
	fd_SignTxReqResponse_id                   protoreflect.FieldDescriptor
	fd_SignTxReqResponse_creator              protoreflect.FieldDescriptor
	fd_SignTxReqResponse_key_id               protoreflect.FieldDescriptor
	fd_SignTxReqResponse_wallet_type          protoreflect.FieldDescriptor
	fd_SignTxReqResponse_unsigned_transaction protoreflect.FieldDescriptor
	fd_SignTxReqResponse_sign_request_id      protoreflect.FieldDescriptor
	fd_SignTxReqResponse_no_broadcast         protoreflect.FieldDescriptor
	fd_SignTxReqResponse_mpc_btl              protoreflect.FieldDescriptor
	fd_SignTxReqResponse_key_ids              protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_mpcsign_proto_init()
	md_SignTxReqResponse = File_zrchain_treasury_mpcsign_proto.Messages().ByName("SignTxReqResponse")
	fd_SignTxReqResponse_id = md_SignTxReqResponse.Fields().ByName("id")
	fd_SignTxReqResponse_creator = md_SignTxReqResponse.Fields().ByName("creator")
	fd_SignTxReqResponse_key_id = md_SignTxReqResponse.Fields().ByName("key_id")
	fd_SignTxReqResponse_wallet_type = md_SignTxReqResponse.Fields().ByName("wallet_type")
	fd_SignTxReqResponse_unsigned_transaction = md_SignTxReqResponse.Fields().ByName("unsigned_transaction")
	fd_SignTxReqResponse_sign_request_id = md_SignTxReqResponse.Fields().ByName("sign_request_id")
	fd_SignTxReqResponse_no_broadcast = md_SignTxReqResponse.Fields().ByName("no_broadcast")
	fd_SignTxReqResponse_mpc_btl = md_SignTxReqResponse.Fields().ByName("mpc_btl")
	fd_SignTxReqResponse_key_ids = md_SignTxReqResponse.Fields().ByName("key_ids")
}

var _ protoreflect.Message = (*fastReflection_SignTxReqResponse)(nil)

type fastReflection_SignTxReqResponse SignTxReqResponse

func (x *SignTxReqResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignTxReqResponse)(x)
}

func (x *SignTxReqResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignTxReqResponse_messageType fastReflection_SignTxReqResponse_messageType
var _ protoreflect.MessageType = fastReflection_SignTxReqResponse_messageType{}

type fastReflection_SignTxReqResponse_messageType struct{}

func (x fastReflection_SignTxReqResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignTxReqResponse)(nil)
}
func (x fastReflection_SignTxReqResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_SignTxReqResponse)
}
func (x fastReflection_SignTxReqResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignTxReqResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignTxReqResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_SignTxReqResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignTxReqResponse) Type() protoreflect.MessageType {
	return _fastReflection_SignTxReqResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignTxReqResponse) New() protoreflect.Message {
	return new(fastReflection_SignTxReqResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignTxReqResponse) Interface() protoreflect.ProtoMessage {
	return (*SignTxReqResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignTxReqResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_SignTxReqResponse_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_SignTxReqResponse_creator, value) {
			return
		}
	}
	if x.KeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyId)
		if !f(fd_SignTxReqResponse_key_id, value) {
			return
		}
	}
	if x.WalletType != "" {
		value := protoreflect.ValueOfString(x.WalletType)
		if !f(fd_SignTxReqResponse_wallet_type, value) {
			return
		}
	}
	if len(x.UnsignedTransaction) != 0 {
		value := protoreflect.ValueOfBytes(x.UnsignedTransaction)
		if !f(fd_SignTxReqResponse_unsigned_transaction, value) {
			return
		}
	}
	if x.SignRequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignRequestId)
		if !f(fd_SignTxReqResponse_sign_request_id, value) {
			return
		}
	}
	if x.NoBroadcast != false {
		value := protoreflect.ValueOfBool(x.NoBroadcast)
		if !f(fd_SignTxReqResponse_no_broadcast, value) {
			return
		}
	}
	if x.MpcBtl != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MpcBtl)
		if !f(fd_SignTxReqResponse_mpc_btl, value) {
			return
		}
	}
	if len(x.KeyIds) != 0 {
		value := protoreflect.ValueOfList(&_SignTxReqResponse_9_list{list: &x.KeyIds})
		if !f(fd_SignTxReqResponse_key_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignTxReqResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.SignTxReqResponse.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.SignTxReqResponse.creator":
		return x.Creator != ""
	case "zrchain.treasury.SignTxReqResponse.key_id":
		return x.KeyId != uint64(0)
	case "zrchain.treasury.SignTxReqResponse.wallet_type":
		return x.WalletType != ""
	case "zrchain.treasury.SignTxReqResponse.unsigned_transaction":
		return len(x.UnsignedTransaction) != 0
	case "zrchain.treasury.SignTxReqResponse.sign_request_id":
		return x.SignRequestId != uint64(0)
	case "zrchain.treasury.SignTxReqResponse.no_broadcast":
		return x.NoBroadcast != false
	case "zrchain.treasury.SignTxReqResponse.mpc_btl":
		return x.MpcBtl != uint64(0)
	case "zrchain.treasury.SignTxReqResponse.key_ids":
		return len(x.KeyIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTxReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTxReqResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTxReqResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.SignTxReqResponse.id":
		x.Id = uint64(0)
	case "zrchain.treasury.SignTxReqResponse.creator":
		x.Creator = ""
	case "zrchain.treasury.SignTxReqResponse.key_id":
		x.KeyId = uint64(0)
	case "zrchain.treasury.SignTxReqResponse.wallet_type":
		x.WalletType = ""
	case "zrchain.treasury.SignTxReqResponse.unsigned_transaction":
		x.UnsignedTransaction = nil
	case "zrchain.treasury.SignTxReqResponse.sign_request_id":
		x.SignRequestId = uint64(0)
	case "zrchain.treasury.SignTxReqResponse.no_broadcast":
		x.NoBroadcast = false
	case "zrchain.treasury.SignTxReqResponse.mpc_btl":
		x.MpcBtl = uint64(0)
	case "zrchain.treasury.SignTxReqResponse.key_ids":
		x.KeyIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTxReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTxReqResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignTxReqResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.SignTxReqResponse.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTxReqResponse.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignTxReqResponse.key_id":
		value := x.KeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTxReqResponse.wallet_type":
		value := x.WalletType
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.SignTxReqResponse.unsigned_transaction":
		value := x.UnsignedTransaction
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.SignTxReqResponse.sign_request_id":
		value := x.SignRequestId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTxReqResponse.no_broadcast":
		value := x.NoBroadcast
		return protoreflect.ValueOfBool(value)
	case "zrchain.treasury.SignTxReqResponse.mpc_btl":
		value := x.MpcBtl
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.SignTxReqResponse.key_ids":
		if len(x.KeyIds) == 0 {
			return protoreflect.ValueOfList(&_SignTxReqResponse_9_list{})
		}
		listValue := &_SignTxReqResponse_9_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTxReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTxReqResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTxReqResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.SignTxReqResponse.id":
		x.Id = value.Uint()
	case "zrchain.treasury.SignTxReqResponse.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.SignTxReqResponse.key_id":
		x.KeyId = value.Uint()
	case "zrchain.treasury.SignTxReqResponse.wallet_type":
		x.WalletType = value.Interface().(string)
	case "zrchain.treasury.SignTxReqResponse.unsigned_transaction":
		x.UnsignedTransaction = value.Bytes()
	case "zrchain.treasury.SignTxReqResponse.sign_request_id":
		x.SignRequestId = value.Uint()
	case "zrchain.treasury.SignTxReqResponse.no_broadcast":
		x.NoBroadcast = value.Bool()
	case "zrchain.treasury.SignTxReqResponse.mpc_btl":
		x.MpcBtl = value.Uint()
	case "zrchain.treasury.SignTxReqResponse.key_ids":
		lv := value.List()
		clv := lv.(*_SignTxReqResponse_9_list)
		x.KeyIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTxReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTxReqResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTxReqResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignTxReqResponse.key_ids":
		if x.KeyIds == nil {
			x.KeyIds = []uint64{}
		}
		value := &_SignTxReqResponse_9_list{list: &x.KeyIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.SignTxReqResponse.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.key_id":
		panic(fmt.Errorf("field key_id of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.wallet_type":
		panic(fmt.Errorf("field wallet_type of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.unsigned_transaction":
		panic(fmt.Errorf("field unsigned_transaction of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.sign_request_id":
		panic(fmt.Errorf("field sign_request_id of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.no_broadcast":
		panic(fmt.Errorf("field no_broadcast of message zrchain.treasury.SignTxReqResponse is not mutable"))
	case "zrchain.treasury.SignTxReqResponse.mpc_btl":
		panic(fmt.Errorf("field mpc_btl of message zrchain.treasury.SignTxReqResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTxReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTxReqResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignTxReqResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.SignTxReqResponse.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTxReqResponse.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignTxReqResponse.key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTxReqResponse.wallet_type":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.SignTxReqResponse.unsigned_transaction":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.SignTxReqResponse.sign_request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTxReqResponse.no_broadcast":
		return protoreflect.ValueOfBool(false)
	case "zrchain.treasury.SignTxReqResponse.mpc_btl":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.SignTxReqResponse.key_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_SignTxReqResponse_9_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.SignTxReqResponse"))
		}
		panic(fmt.Errorf("message zrchain.treasury.SignTxReqResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignTxReqResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.SignTxReqResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignTxReqResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignTxReqResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignTxReqResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignTxReqResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignTxReqResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyId))
		}
		l = len(x.WalletType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UnsignedTransaction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SignRequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignRequestId))
		}
		if x.NoBroadcast {
			n += 2
		}
		if x.MpcBtl != 0 {
			n += 1 + runtime.Sov(uint64(x.MpcBtl))
		}
		if len(x.KeyIds) > 0 {
			l = 0
			for _, e := range x.KeyIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignTxReqResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.KeyIds) > 0 {
			var pksize2 int
			for _, num := range x.KeyIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.KeyIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x4a
		}
		if x.MpcBtl != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MpcBtl))
			i--
			dAtA[i] = 0x40
		}
		if x.NoBroadcast {
			i--
			if x.NoBroadcast {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.SignRequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignRequestId))
			i--
			dAtA[i] = 0x30
		}
		if len(x.UnsignedTransaction) > 0 {
			i -= len(x.UnsignedTransaction)
			copy(dAtA[i:], x.UnsignedTransaction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UnsignedTransaction)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.WalletType) > 0 {
			i -= len(x.WalletType)
			copy(dAtA[i:], x.WalletType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WalletType)))
			i--
			dAtA[i] = 0x22
		}
		if x.KeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignTxReqResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignTxReqResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignTxReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
				}
				x.KeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WalletType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnsignedTransaction", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnsignedTransaction = append(x.UnsignedTransaction[:0], dAtA[iNdEx:postIndex]...)
				if x.UnsignedTransaction == nil {
					x.UnsignedTransaction = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignRequestId", wireType)
				}
				x.SignRequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignRequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoBroadcast", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.NoBroadcast = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
				}
				x.MpcBtl = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MpcBtl |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.KeyIds = append(x.KeyIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.KeyIds) == 0 {
						x.KeyIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.KeyIds = append(x.KeyIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ICATransactionRequest_7_list)(nil)

type _ICATransactionRequest_7_list struct {
	list *[][]byte
}

func (x *_ICATransactionRequest_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ICATransactionRequest_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_ICATransactionRequest_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ICATransactionRequest_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ICATransactionRequest_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ICATransactionRequest at list field SignedData as it is not of Message kind"))
}

func (x *_ICATransactionRequest_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ICATransactionRequest_7_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_ICATransactionRequest_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ICATransactionRequest_8_list)(nil)

type _ICATransactionRequest_8_list struct {
	list *[][]byte
}

func (x *_ICATransactionRequest_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ICATransactionRequest_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_ICATransactionRequest_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ICATransactionRequest_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ICATransactionRequest_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ICATransactionRequest at list field KeyringPartySignatures as it is not of Message kind"))
}

func (x *_ICATransactionRequest_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ICATransactionRequest_8_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_ICATransactionRequest_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ICATransactionRequest                          protoreflect.MessageDescriptor
	fd_ICATransactionRequest_id                       protoreflect.FieldDescriptor
	fd_ICATransactionRequest_creator                  protoreflect.FieldDescriptor
	fd_ICATransactionRequest_key_id                   protoreflect.FieldDescriptor
	fd_ICATransactionRequest_key_type                 protoreflect.FieldDescriptor
	fd_ICATransactionRequest_input_msg                protoreflect.FieldDescriptor
	fd_ICATransactionRequest_status                   protoreflect.FieldDescriptor
	fd_ICATransactionRequest_signed_data              protoreflect.FieldDescriptor
	fd_ICATransactionRequest_keyring_party_signatures protoreflect.FieldDescriptor
	fd_ICATransactionRequest_reject_reason            protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_treasury_mpcsign_proto_init()
	md_ICATransactionRequest = File_zrchain_treasury_mpcsign_proto.Messages().ByName("ICATransactionRequest")
	fd_ICATransactionRequest_id = md_ICATransactionRequest.Fields().ByName("id")
	fd_ICATransactionRequest_creator = md_ICATransactionRequest.Fields().ByName("creator")
	fd_ICATransactionRequest_key_id = md_ICATransactionRequest.Fields().ByName("key_id")
	fd_ICATransactionRequest_key_type = md_ICATransactionRequest.Fields().ByName("key_type")
	fd_ICATransactionRequest_input_msg = md_ICATransactionRequest.Fields().ByName("input_msg")
	fd_ICATransactionRequest_status = md_ICATransactionRequest.Fields().ByName("status")
	fd_ICATransactionRequest_signed_data = md_ICATransactionRequest.Fields().ByName("signed_data")
	fd_ICATransactionRequest_keyring_party_signatures = md_ICATransactionRequest.Fields().ByName("keyring_party_signatures")
	fd_ICATransactionRequest_reject_reason = md_ICATransactionRequest.Fields().ByName("reject_reason")
}

var _ protoreflect.Message = (*fastReflection_ICATransactionRequest)(nil)

type fastReflection_ICATransactionRequest ICATransactionRequest

func (x *ICATransactionRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ICATransactionRequest)(x)
}

func (x *ICATransactionRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ICATransactionRequest_messageType fastReflection_ICATransactionRequest_messageType
var _ protoreflect.MessageType = fastReflection_ICATransactionRequest_messageType{}

type fastReflection_ICATransactionRequest_messageType struct{}

func (x fastReflection_ICATransactionRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ICATransactionRequest)(nil)
}
func (x fastReflection_ICATransactionRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_ICATransactionRequest)
}
func (x fastReflection_ICATransactionRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ICATransactionRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ICATransactionRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_ICATransactionRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ICATransactionRequest) Type() protoreflect.MessageType {
	return _fastReflection_ICATransactionRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ICATransactionRequest) New() protoreflect.Message {
	return new(fastReflection_ICATransactionRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ICATransactionRequest) Interface() protoreflect.ProtoMessage {
	return (*ICATransactionRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ICATransactionRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_ICATransactionRequest_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_ICATransactionRequest_creator, value) {
			return
		}
	}
	if x.KeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyId)
		if !f(fd_ICATransactionRequest_key_id, value) {
			return
		}
	}
	if x.KeyType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.KeyType))
		if !f(fd_ICATransactionRequest_key_type, value) {
			return
		}
	}
	if len(x.InputMsg) != 0 {
		value := protoreflect.ValueOfBytes(x.InputMsg)
		if !f(fd_ICATransactionRequest_input_msg, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_ICATransactionRequest_status, value) {
			return
		}
	}
	if len(x.SignedData) != 0 {
		value := protoreflect.ValueOfList(&_ICATransactionRequest_7_list{list: &x.SignedData})
		if !f(fd_ICATransactionRequest_signed_data, value) {
			return
		}
	}
	if len(x.KeyringPartySignatures) != 0 {
		value := protoreflect.ValueOfList(&_ICATransactionRequest_8_list{list: &x.KeyringPartySignatures})
		if !f(fd_ICATransactionRequest_keyring_party_signatures, value) {
			return
		}
	}
	if x.RejectReason != "" {
		value := protoreflect.ValueOfString(x.RejectReason)
		if !f(fd_ICATransactionRequest_reject_reason, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ICATransactionRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.treasury.ICATransactionRequest.id":
		return x.Id != uint64(0)
	case "zrchain.treasury.ICATransactionRequest.creator":
		return x.Creator != ""
	case "zrchain.treasury.ICATransactionRequest.key_id":
		return x.KeyId != uint64(0)
	case "zrchain.treasury.ICATransactionRequest.key_type":
		return x.KeyType != 0
	case "zrchain.treasury.ICATransactionRequest.input_msg":
		return len(x.InputMsg) != 0
	case "zrchain.treasury.ICATransactionRequest.status":
		return x.Status != 0
	case "zrchain.treasury.ICATransactionRequest.signed_data":
		return len(x.SignedData) != 0
	case "zrchain.treasury.ICATransactionRequest.keyring_party_signatures":
		return len(x.KeyringPartySignatures) != 0
	case "zrchain.treasury.ICATransactionRequest.reject_reason":
		return x.RejectReason != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ICATransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ICATransactionRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ICATransactionRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.treasury.ICATransactionRequest.id":
		x.Id = uint64(0)
	case "zrchain.treasury.ICATransactionRequest.creator":
		x.Creator = ""
	case "zrchain.treasury.ICATransactionRequest.key_id":
		x.KeyId = uint64(0)
	case "zrchain.treasury.ICATransactionRequest.key_type":
		x.KeyType = 0
	case "zrchain.treasury.ICATransactionRequest.input_msg":
		x.InputMsg = nil
	case "zrchain.treasury.ICATransactionRequest.status":
		x.Status = 0
	case "zrchain.treasury.ICATransactionRequest.signed_data":
		x.SignedData = nil
	case "zrchain.treasury.ICATransactionRequest.keyring_party_signatures":
		x.KeyringPartySignatures = nil
	case "zrchain.treasury.ICATransactionRequest.reject_reason":
		x.RejectReason = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ICATransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ICATransactionRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ICATransactionRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.treasury.ICATransactionRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.ICATransactionRequest.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.treasury.ICATransactionRequest.key_id":
		value := x.KeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.treasury.ICATransactionRequest.key_type":
		value := x.KeyType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.ICATransactionRequest.input_msg":
		value := x.InputMsg
		return protoreflect.ValueOfBytes(value)
	case "zrchain.treasury.ICATransactionRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.treasury.ICATransactionRequest.signed_data":
		if len(x.SignedData) == 0 {
			return protoreflect.ValueOfList(&_ICATransactionRequest_7_list{})
		}
		listValue := &_ICATransactionRequest_7_list{list: &x.SignedData}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.ICATransactionRequest.keyring_party_signatures":
		if len(x.KeyringPartySignatures) == 0 {
			return protoreflect.ValueOfList(&_ICATransactionRequest_8_list{})
		}
		listValue := &_ICATransactionRequest_8_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.treasury.ICATransactionRequest.reject_reason":
		value := x.RejectReason
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ICATransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ICATransactionRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ICATransactionRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.treasury.ICATransactionRequest.id":
		x.Id = value.Uint()
	case "zrchain.treasury.ICATransactionRequest.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.treasury.ICATransactionRequest.key_id":
		x.KeyId = value.Uint()
	case "zrchain.treasury.ICATransactionRequest.key_type":
		x.KeyType = (KeyType)(value.Enum())
	case "zrchain.treasury.ICATransactionRequest.input_msg":
		x.InputMsg = value.Bytes()
	case "zrchain.treasury.ICATransactionRequest.status":
		x.Status = (SignRequestStatus)(value.Enum())
	case "zrchain.treasury.ICATransactionRequest.signed_data":
		lv := value.List()
		clv := lv.(*_ICATransactionRequest_7_list)
		x.SignedData = *clv.list
	case "zrchain.treasury.ICATransactionRequest.keyring_party_signatures":
		lv := value.List()
		clv := lv.(*_ICATransactionRequest_8_list)
		x.KeyringPartySignatures = *clv.list
	case "zrchain.treasury.ICATransactionRequest.reject_reason":
		x.RejectReason = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ICATransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ICATransactionRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ICATransactionRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.ICATransactionRequest.signed_data":
		if x.SignedData == nil {
			x.SignedData = [][]byte{}
		}
		value := &_ICATransactionRequest_7_list{list: &x.SignedData}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.ICATransactionRequest.keyring_party_signatures":
		if x.KeyringPartySignatures == nil {
			x.KeyringPartySignatures = [][]byte{}
		}
		value := &_ICATransactionRequest_8_list{list: &x.KeyringPartySignatures}
		return protoreflect.ValueOfList(value)
	case "zrchain.treasury.ICATransactionRequest.id":
		panic(fmt.Errorf("field id of message zrchain.treasury.ICATransactionRequest is not mutable"))
	case "zrchain.treasury.ICATransactionRequest.creator":
		panic(fmt.Errorf("field creator of message zrchain.treasury.ICATransactionRequest is not mutable"))
	case "zrchain.treasury.ICATransactionRequest.key_id":
		panic(fmt.Errorf("field key_id of message zrchain.treasury.ICATransactionRequest is not mutable"))
	case "zrchain.treasury.ICATransactionRequest.key_type":
		panic(fmt.Errorf("field key_type of message zrchain.treasury.ICATransactionRequest is not mutable"))
	case "zrchain.treasury.ICATransactionRequest.input_msg":
		panic(fmt.Errorf("field input_msg of message zrchain.treasury.ICATransactionRequest is not mutable"))
	case "zrchain.treasury.ICATransactionRequest.status":
		panic(fmt.Errorf("field status of message zrchain.treasury.ICATransactionRequest is not mutable"))
	case "zrchain.treasury.ICATransactionRequest.reject_reason":
		panic(fmt.Errorf("field reject_reason of message zrchain.treasury.ICATransactionRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ICATransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ICATransactionRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ICATransactionRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.treasury.ICATransactionRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.ICATransactionRequest.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.treasury.ICATransactionRequest.key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.treasury.ICATransactionRequest.key_type":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.ICATransactionRequest.input_msg":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.treasury.ICATransactionRequest.status":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.treasury.ICATransactionRequest.signed_data":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_ICATransactionRequest_7_list{list: &list})
	case "zrchain.treasury.ICATransactionRequest.keyring_party_signatures":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_ICATransactionRequest_8_list{list: &list})
	case "zrchain.treasury.ICATransactionRequest.reject_reason":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.treasury.ICATransactionRequest"))
		}
		panic(fmt.Errorf("message zrchain.treasury.ICATransactionRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ICATransactionRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.treasury.ICATransactionRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ICATransactionRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ICATransactionRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ICATransactionRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ICATransactionRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ICATransactionRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyId))
		}
		if x.KeyType != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyType))
		}
		l = len(x.InputMsg)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if len(x.SignedData) > 0 {
			for _, b := range x.SignedData {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.KeyringPartySignatures) > 0 {
			for _, b := range x.KeyringPartySignatures {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.RejectReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ICATransactionRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RejectReason) > 0 {
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.KeyringPartySignatures) > 0 {
			for iNdEx := len(x.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.KeyringPartySignatures[iNdEx])
				copy(dAtA[i:], x.KeyringPartySignatures[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KeyringPartySignatures[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.SignedData) > 0 {
			for iNdEx := len(x.SignedData) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SignedData[iNdEx])
				copy(dAtA[i:], x.SignedData[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignedData[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if len(x.InputMsg) > 0 {
			i -= len(x.InputMsg)
			copy(dAtA[i:], x.InputMsg)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InputMsg)))
			i--
			dAtA[i] = 0x2a
		}
		if x.KeyType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyType))
			i--
			dAtA[i] = 0x20
		}
		if x.KeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ICATransactionRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ICATransactionRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ICATransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
				}
				x.KeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
				}
				x.KeyType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyType |= KeyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InputMsg", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InputMsg = append(x.InputMsg[:0], dAtA[iNdEx:postIndex]...)
				if x.InputMsg == nil {
					x.InputMsg = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= SignRequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignedData = append(x.SignedData, make([]byte, postIndex-iNdEx))
				copy(x.SignedData[len(x.SignedData)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KeyringPartySignatures = append(x.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
				copy(x.KeyringPartySignatures[len(x.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RejectReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/treasury/mpcsign.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignRequestStatus indicates the status of an MPC signature request.
// A request starts as "pending", waiting to be picked up. Then it can move to
// either "approved" or "rejected", depending on the decision of the MPC nodes.
type SignRequestStatus int32

const (
	// The request is missing the status field.
	SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED SignRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	SignRequestStatus_SIGN_REQUEST_STATUS_PENDING SignRequestStatus = 1
	// The request is partially fulfilled - at least one more response from
	// a different MPC party is needed to confirm it.
	SignRequestStatus_SIGN_REQUEST_STATUS_PARTIAL SignRequestStatus = 2
	// The request was fulfilled. This is a final state for a request.
	SignRequestStatus_SIGN_REQUEST_STATUS_FULFILLED SignRequestStatus = 3
	// The request was rejected. This is a final state for a request.
	SignRequestStatus_SIGN_REQUEST_STATUS_REJECTED SignRequestStatus = 4
)

// Enum value maps for SignRequestStatus.
var (
	SignRequestStatus_name = map[int32]string{
		0: "SIGN_REQUEST_STATUS_UNSPECIFIED",
		1: "SIGN_REQUEST_STATUS_PENDING",
		2: "SIGN_REQUEST_STATUS_PARTIAL",
		3: "SIGN_REQUEST_STATUS_FULFILLED",
		4: "SIGN_REQUEST_STATUS_REJECTED",
	}
	SignRequestStatus_value = map[string]int32{
		"SIGN_REQUEST_STATUS_UNSPECIFIED": 0,
		"SIGN_REQUEST_STATUS_PENDING":     1,
		"SIGN_REQUEST_STATUS_PARTIAL":     2,
		"SIGN_REQUEST_STATUS_FULFILLED":   3,
		"SIGN_REQUEST_STATUS_REJECTED":    4,
	}
)

func (x SignRequestStatus) Enum() *SignRequestStatus {
	p := new(SignRequestStatus)
	*p = x
	return p
}

func (x SignRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_treasury_mpcsign_proto_enumTypes[0].Descriptor()
}

func (SignRequestStatus) Type() protoreflect.EnumType {
	return &file_zrchain_treasury_mpcsign_proto_enumTypes[0]
}

func (x SignRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignRequestStatus.Descriptor instead.
func (SignRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{0}
}

// format of a sign request
type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string              `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId                  uint64              `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // Deprecated
	KeyType                KeyType             `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	DataForSigning         [][]byte            `protobuf:"bytes,5,rep,name=data_for_signing,json=dataForSigning,proto3" json:"data_for_signing,omitempty"`
	Status                 SignRequestStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=zrchain.treasury.SignRequestStatus" json:"status,omitempty"`
	SignedData             []*SignedDataWithID `protobuf:"bytes,7,rep,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
	KeyringPartySignatures [][]byte            `protobuf:"bytes,8,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string              `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Metadata               *anypb.Any          `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ParentReqId            uint64              `protobuf:"varint,11,opt,name=parent_req_id,json=parentReqId,proto3" json:"parent_req_id,omitempty"`
	ChildReqIds            []uint64            `protobuf:"varint,12,rep,packed,name=child_req_ids,json=childReqIds,proto3" json:"child_req_ids,omitempty"`
	CacheId                []byte              `protobuf:"bytes,13,opt,name=cache_id,json=cacheId,proto3" json:"cache_id,omitempty"`
	KeyIds                 []uint64            `protobuf:"varint,14,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	MpcBtl                 uint64              `protobuf:"varint,15,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	Fee                    uint64              `protobuf:"varint,16,opt,name=fee,proto3" json:"fee,omitempty"`
	ZenbtcTxBytes          []byte              `protobuf:"bytes,17,opt,name=zenbtc_tx_bytes,json=zenbtcTxBytes,proto3" json:"zenbtc_tx_bytes,omitempty"` // Optional
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{0}
}

func (x *SignRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *SignRequest) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *SignRequest) GetDataForSigning() [][]byte {
	if x != nil {
		return x.DataForSigning
	}
	return nil
}

func (x *SignRequest) GetStatus() SignRequestStatus {
	if x != nil {
		return x.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (x *SignRequest) GetSignedData() []*SignedDataWithID {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *SignRequest) GetKeyringPartySignatures() [][]byte {
	if x != nil {
		return x.KeyringPartySignatures
	}
	return nil
}

func (x *SignRequest) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *SignRequest) GetMetadata() *anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SignRequest) GetParentReqId() uint64 {
	if x != nil {
		return x.ParentReqId
	}
	return 0
}

func (x *SignRequest) GetChildReqIds() []uint64 {
	if x != nil {
		return x.ChildReqIds
	}
	return nil
}

func (x *SignRequest) GetCacheId() []byte {
	if x != nil {
		return x.CacheId
	}
	return nil
}

func (x *SignRequest) GetKeyIds() []uint64 {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

func (x *SignRequest) GetMpcBtl() uint64 {
	if x != nil {
		return x.MpcBtl
	}
	return 0
}

func (x *SignRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SignRequest) GetZenbtcTxBytes() []byte {
	if x != nil {
		return x.ZenbtcTxBytes
	}
	return nil
}

// format of a signed data with an id value used to sort the signed data
type SignedDataWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignRequestId uint64 `protobuf:"varint,1,opt,name=sign_request_id,json=signRequestId,proto3" json:"sign_request_id,omitempty"`
	SignedData    []byte `protobuf:"bytes,2,opt,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
}

func (x *SignedDataWithID) Reset() {
	*x = SignedDataWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedDataWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedDataWithID) ProtoMessage() {}

// Deprecated: Use SignedDataWithID.ProtoReflect.Descriptor instead.
func (*SignedDataWithID) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{1}
}

func (x *SignedDataWithID) GetSignRequestId() uint64 {
	if x != nil {
		return x.SignRequestId
	}
	return 0
}

func (x *SignedDataWithID) GetSignedData() []byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

// format of a sign transaction request
type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator             string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId               uint64     `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // Deprecated
	WalletType          WalletType `protobuf:"varint,4,opt,name=wallet_type,json=walletType,proto3,enum=zrchain.treasury.WalletType" json:"wallet_type,omitempty"`
	UnsignedTransaction []byte     `protobuf:"bytes,5,opt,name=unsigned_transaction,json=unsignedTransaction,proto3" json:"unsigned_transaction,omitempty"`
	SignRequestId       uint64     `protobuf:"varint,6,opt,name=sign_request_id,json=signRequestId,proto3" json:"sign_request_id,omitempty"`
	NoBroadcast         bool       `protobuf:"varint,7,opt,name=no_broadcast,json=noBroadcast,proto3" json:"no_broadcast,omitempty"`
	KeyIds              []uint64   `protobuf:"varint,8,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{2}
}

func (x *SignTransactionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignTransactionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *SignTransactionRequest) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignTransactionRequest) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (x *SignTransactionRequest) GetUnsignedTransaction() []byte {
	if x != nil {
		return x.UnsignedTransaction
	}
	return nil
}

func (x *SignTransactionRequest) GetSignRequestId() uint64 {
	if x != nil {
		return x.SignRequestId
	}
	return 0
}

func (x *SignTransactionRequest) GetNoBroadcast() bool {
	if x != nil {
		return x.NoBroadcast
	}
	return false
}

func (x *SignTransactionRequest) GetKeyIds() []uint64 {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

// format of a sign request response
type SignReqResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string              `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyIds                 []uint64            `protobuf:"varint,3,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	KeyType                string              `protobuf:"bytes,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	DataForSigning         [][]byte            `protobuf:"bytes,5,rep,name=data_for_signing,json=dataForSigning,proto3" json:"data_for_signing,omitempty"`
	Status                 string              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	SignedData             []*SignedDataWithID `protobuf:"bytes,7,rep,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
	KeyringPartySignatures [][]byte            `protobuf:"bytes,8,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string              `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Metadata               *anypb.Any          `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ParentReqId            uint64              `protobuf:"varint,11,opt,name=parent_req_id,json=parentReqId,proto3" json:"parent_req_id,omitempty"`
	ChildReqIds            []uint64            `protobuf:"varint,12,rep,packed,name=child_req_ids,json=childReqIds,proto3" json:"child_req_ids,omitempty"`
	CacheId                []byte              `protobuf:"bytes,13,opt,name=cache_id,json=cacheId,proto3" json:"cache_id,omitempty"`
	MpcBtl                 uint64              `protobuf:"varint,14,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	Fee                    uint64              `protobuf:"varint,15,opt,name=fee,proto3" json:"fee,omitempty"`
	ZenbtcTxBytes          []byte              `protobuf:"bytes,16,opt,name=zenbtc_tx_bytes,json=zenbtcTxBytes,proto3" json:"zenbtc_tx_bytes,omitempty"` // Optional
}

func (x *SignReqResponse) Reset() {
	*x = SignReqResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignReqResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignReqResponse) ProtoMessage() {}

// Deprecated: Use SignReqResponse.ProtoReflect.Descriptor instead.
func (*SignReqResponse) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{3}
}

func (x *SignReqResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignReqResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *SignReqResponse) GetKeyIds() []uint64 {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

func (x *SignReqResponse) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *SignReqResponse) GetDataForSigning() [][]byte {
	if x != nil {
		return x.DataForSigning
	}
	return nil
}

func (x *SignReqResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SignReqResponse) GetSignedData() []*SignedDataWithID {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *SignReqResponse) GetKeyringPartySignatures() [][]byte {
	if x != nil {
		return x.KeyringPartySignatures
	}
	return nil
}

func (x *SignReqResponse) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *SignReqResponse) GetMetadata() *anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SignReqResponse) GetParentReqId() uint64 {
	if x != nil {
		return x.ParentReqId
	}
	return 0
}

func (x *SignReqResponse) GetChildReqIds() []uint64 {
	if x != nil {
		return x.ChildReqIds
	}
	return nil
}

func (x *SignReqResponse) GetCacheId() []byte {
	if x != nil {
		return x.CacheId
	}
	return nil
}

func (x *SignReqResponse) GetMpcBtl() uint64 {
	if x != nil {
		return x.MpcBtl
	}
	return 0
}

func (x *SignReqResponse) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SignReqResponse) GetZenbtcTxBytes() []byte {
	if x != nil {
		return x.ZenbtcTxBytes
	}
	return nil
}

// format of a sign transaction request response
type SignTxReqResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator             string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId               uint64   `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // Deprecated
	WalletType          string   `protobuf:"bytes,4,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`
	UnsignedTransaction []byte   `protobuf:"bytes,5,opt,name=unsigned_transaction,json=unsignedTransaction,proto3" json:"unsigned_transaction,omitempty"`
	SignRequestId       uint64   `protobuf:"varint,6,opt,name=sign_request_id,json=signRequestId,proto3" json:"sign_request_id,omitempty"`
	NoBroadcast         bool     `protobuf:"varint,7,opt,name=no_broadcast,json=noBroadcast,proto3" json:"no_broadcast,omitempty"`
	MpcBtl              uint64   `protobuf:"varint,8,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	KeyIds              []uint64 `protobuf:"varint,9,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
}

func (x *SignTxReqResponse) Reset() {
	*x = SignTxReqResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTxReqResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxReqResponse) ProtoMessage() {}

// Deprecated: Use SignTxReqResponse.ProtoReflect.Descriptor instead.
func (*SignTxReqResponse) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{4}
}

func (x *SignTxReqResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignTxReqResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *SignTxReqResponse) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignTxReqResponse) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *SignTxReqResponse) GetUnsignedTransaction() []byte {
	if x != nil {
		return x.UnsignedTransaction
	}
	return nil
}

func (x *SignTxReqResponse) GetSignRequestId() uint64 {
	if x != nil {
		return x.SignRequestId
	}
	return 0
}

func (x *SignTxReqResponse) GetNoBroadcast() bool {
	if x != nil {
		return x.NoBroadcast
	}
	return false
}

func (x *SignTxReqResponse) GetMpcBtl() uint64 {
	if x != nil {
		return x.MpcBtl
	}
	return 0
}

func (x *SignTxReqResponse) GetKeyIds() []uint64 {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

// format of a sign transaction request for an InterChain Account transaction
type ICATransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator  string  `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId    uint64  `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType  KeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	InputMsg []byte  `protobuf:"bytes,5,opt,name=input_msg,json=inputMsg,proto3" json:"input_msg,omitempty"`
	// ibc.applications.interchain_accounts.v1.MsgSendTx input_msg = 5;
	Status                 SignRequestStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zrchain.treasury.SignRequestStatus" json:"status,omitempty"`
	SignedData             [][]byte          `protobuf:"bytes,7,rep,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
	KeyringPartySignatures [][]byte          `protobuf:"bytes,8,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string            `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *ICATransactionRequest) Reset() {
	*x = ICATransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_treasury_mpcsign_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICATransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICATransactionRequest) ProtoMessage() {}

// Deprecated: Use ICATransactionRequest.ProtoReflect.Descriptor instead.
func (*ICATransactionRequest) Descriptor() ([]byte, []int) {
	return file_zrchain_treasury_mpcsign_proto_rawDescGZIP(), []int{5}
}

func (x *ICATransactionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ICATransactionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ICATransactionRequest) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ICATransactionRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *ICATransactionRequest) GetInputMsg() []byte {
	if x != nil {
		return x.InputMsg
	}
	return nil
}

func (x *ICATransactionRequest) GetStatus() SignRequestStatus {
	if x != nil {
		return x.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (x *ICATransactionRequest) GetSignedData() [][]byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *ICATransactionRequest) GetKeyringPartySignatures() [][]byte {
	if x != nil {
		return x.KeyringPartySignatures
	}
	return nil
}

func (x *ICATransactionRequest) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

var File_zrchain_treasury_mpcsign_proto protoreflect.FileDescriptor

var file_zrchain_treasury_mpcsign_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x2f, 0x6d, 0x70, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2f,
	0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x7a, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x05, 0x0a, 0x0b, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x18, 0x6b,
	0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x6b,
	0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70, 0x63, 0x5f,
	0x62, 0x74, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x70, 0x63, 0x42, 0x74,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x5f, 0x74, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x7a, 0x65,
	0x6e, 0x62, 0x74, 0x63, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x02, 0x0a, 0x16, 0x53, 0x69, 0x67,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x22, 0xbd, 0x04, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x18, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70, 0x63, 0x5f, 0x62,
	0x74, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x70, 0x63, 0x42, 0x74, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x5f, 0x74, 0x78, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x7a, 0x65, 0x6e,
	0x62, 0x74, 0x63, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x11, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x6f, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70, 0x63, 0x5f, 0x62, 0x74, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x70, 0x63, 0x42, 0x74, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x15, 0x49, 0x43, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x18, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x16, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0xbf, 0x01,
	0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x42,
	0xa8, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x42, 0x0c, 0x4d, 0x70, 0x63, 0x73, 0x69, 0x67,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x5a, 0x54,
	0x58, 0xaa, 0x02, 0x10, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0xca, 0x02, 0x10, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0xe2, 0x02, 0x1c, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x3a, 0x3a, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zrchain_treasury_mpcsign_proto_rawDescOnce sync.Once
	file_zrchain_treasury_mpcsign_proto_rawDescData = file_zrchain_treasury_mpcsign_proto_rawDesc
)

func file_zrchain_treasury_mpcsign_proto_rawDescGZIP() []byte {
	file_zrchain_treasury_mpcsign_proto_rawDescOnce.Do(func() {
		file_zrchain_treasury_mpcsign_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_treasury_mpcsign_proto_rawDescData)
	})
	return file_zrchain_treasury_mpcsign_proto_rawDescData
}

var file_zrchain_treasury_mpcsign_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zrchain_treasury_mpcsign_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_zrchain_treasury_mpcsign_proto_goTypes = []interface{}{
	(SignRequestStatus)(0),         // 0: zrchain.treasury.SignRequestStatus
	(*SignRequest)(nil),            // 1: zrchain.treasury.SignRequest
	(*SignedDataWithID)(nil),       // 2: zrchain.treasury.SignedDataWithID
	(*SignTransactionRequest)(nil), // 3: zrchain.treasury.SignTransactionRequest
	(*SignReqResponse)(nil),        // 4: zrchain.treasury.SignReqResponse
	(*SignTxReqResponse)(nil),      // 5: zrchain.treasury.SignTxReqResponse
	(*ICATransactionRequest)(nil),  // 6: zrchain.treasury.ICATransactionRequest
	(KeyType)(0),                   // 7: zrchain.treasury.KeyType
	(*anypb.Any)(nil),              // 8: google.protobuf.Any
	(WalletType)(0),                // 9: zrchain.treasury.WalletType
}
var file_zrchain_treasury_mpcsign_proto_depIdxs = []int32{
	7, // 0: zrchain.treasury.SignRequest.key_type:type_name -> zrchain.treasury.KeyType
	0, // 1: zrchain.treasury.SignRequest.status:type_name -> zrchain.treasury.SignRequestStatus
	2, // 2: zrchain.treasury.SignRequest.signed_data:type_name -> zrchain.treasury.SignedDataWithID
	8, // 3: zrchain.treasury.SignRequest.metadata:type_name -> google.protobuf.Any
	9, // 4: zrchain.treasury.SignTransactionRequest.wallet_type:type_name -> zrchain.treasury.WalletType
	2, // 5: zrchain.treasury.SignReqResponse.signed_data:type_name -> zrchain.treasury.SignedDataWithID
	8, // 6: zrchain.treasury.SignReqResponse.metadata:type_name -> google.protobuf.Any
	7, // 7: zrchain.treasury.ICATransactionRequest.key_type:type_name -> zrchain.treasury.KeyType
	0, // 8: zrchain.treasury.ICATransactionRequest.status:type_name -> zrchain.treasury.SignRequestStatus
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_zrchain_treasury_mpcsign_proto_init() }
func file_zrchain_treasury_mpcsign_proto_init() {
	if File_zrchain_treasury_mpcsign_proto != nil {
		return
	}
	file_zrchain_treasury_key_proto_init()
	file_zrchain_treasury_wallet_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zrchain_treasury_mpcsign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_mpcsign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedDataWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_mpcsign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_mpcsign_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignReqResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_mpcsign_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTxReqResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_treasury_mpcsign_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICATransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_treasury_mpcsign_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_treasury_mpcsign_proto_goTypes,
		DependencyIndexes: file_zrchain_treasury_mpcsign_proto_depIdxs,
		EnumInfos:         file_zrchain_treasury_mpcsign_proto_enumTypes,
		MessageInfos:      file_zrchain_treasury_mpcsign_proto_msgTypes,
	}.Build()
	File_zrchain_treasury_mpcsign_proto = out.File
	file_zrchain_treasury_mpcsign_proto_rawDesc = nil
	file_zrchain_treasury_mpcsign_proto_goTypes = nil
	file_zrchain_treasury_mpcsign_proto_depIdxs = nil
}
