// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package zentp

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Bridge                      protoreflect.MessageDescriptor
	fd_Bridge_id                   protoreflect.FieldDescriptor
	fd_Bridge_denom                protoreflect.FieldDescriptor
	fd_Bridge_creator              protoreflect.FieldDescriptor
	fd_Bridge_source_address       protoreflect.FieldDescriptor
	fd_Bridge_source_chain         protoreflect.FieldDescriptor
	fd_Bridge_destination_chain    protoreflect.FieldDescriptor
	fd_Bridge_amount               protoreflect.FieldDescriptor
	fd_Bridge_recipient_address    protoreflect.FieldDescriptor
	fd_Bridge_tx_id                protoreflect.FieldDescriptor
	fd_Bridge_tx_hash              protoreflect.FieldDescriptor
	fd_Bridge_state                protoreflect.FieldDescriptor
	fd_Bridge_block_height         protoreflect.FieldDescriptor
	fd_Bridge_awaiting_event_since protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zentp_bridge_proto_init()
	md_Bridge = File_zrchain_zentp_bridge_proto.Messages().ByName("Bridge")
	fd_Bridge_id = md_Bridge.Fields().ByName("id")
	fd_Bridge_denom = md_Bridge.Fields().ByName("denom")
	fd_Bridge_creator = md_Bridge.Fields().ByName("creator")
	fd_Bridge_source_address = md_Bridge.Fields().ByName("source_address")
	fd_Bridge_source_chain = md_Bridge.Fields().ByName("source_chain")
	fd_Bridge_destination_chain = md_Bridge.Fields().ByName("destination_chain")
	fd_Bridge_amount = md_Bridge.Fields().ByName("amount")
	fd_Bridge_recipient_address = md_Bridge.Fields().ByName("recipient_address")
	fd_Bridge_tx_id = md_Bridge.Fields().ByName("tx_id")
	fd_Bridge_tx_hash = md_Bridge.Fields().ByName("tx_hash")
	fd_Bridge_state = md_Bridge.Fields().ByName("state")
	fd_Bridge_block_height = md_Bridge.Fields().ByName("block_height")
	fd_Bridge_awaiting_event_since = md_Bridge.Fields().ByName("awaiting_event_since")
}

var _ protoreflect.Message = (*fastReflection_Bridge)(nil)

type fastReflection_Bridge Bridge

func (x *Bridge) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Bridge)(x)
}

func (x *Bridge) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zentp_bridge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Bridge_messageType fastReflection_Bridge_messageType
var _ protoreflect.MessageType = fastReflection_Bridge_messageType{}

type fastReflection_Bridge_messageType struct{}

func (x fastReflection_Bridge_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Bridge)(nil)
}
func (x fastReflection_Bridge_messageType) New() protoreflect.Message {
	return new(fastReflection_Bridge)
}
func (x fastReflection_Bridge_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Bridge
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Bridge) Descriptor() protoreflect.MessageDescriptor {
	return md_Bridge
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Bridge) Type() protoreflect.MessageType {
	return _fastReflection_Bridge_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Bridge) New() protoreflect.Message {
	return new(fastReflection_Bridge)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Bridge) Interface() protoreflect.ProtoMessage {
	return (*Bridge)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Bridge) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Bridge_id, value) {
			return
		}
	}
	if x.Denom != "" {
		value := protoreflect.ValueOfString(x.Denom)
		if !f(fd_Bridge_denom, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Bridge_creator, value) {
			return
		}
	}
	if x.SourceAddress != "" {
		value := protoreflect.ValueOfString(x.SourceAddress)
		if !f(fd_Bridge_source_address, value) {
			return
		}
	}
	if x.SourceChain != "" {
		value := protoreflect.ValueOfString(x.SourceChain)
		if !f(fd_Bridge_source_chain, value) {
			return
		}
	}
	if x.DestinationChain != "" {
		value := protoreflect.ValueOfString(x.DestinationChain)
		if !f(fd_Bridge_destination_chain, value) {
			return
		}
	}
	if x.Amount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Amount)
		if !f(fd_Bridge_amount, value) {
			return
		}
	}
	if x.RecipientAddress != "" {
		value := protoreflect.ValueOfString(x.RecipientAddress)
		if !f(fd_Bridge_recipient_address, value) {
			return
		}
	}
	if x.TxId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TxId)
		if !f(fd_Bridge_tx_id, value) {
			return
		}
	}
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_Bridge_tx_hash, value) {
			return
		}
	}
	if x.State != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.State))
		if !f(fd_Bridge_state, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_Bridge_block_height, value) {
			return
		}
	}
	if x.AwaitingEventSince != int64(0) {
		value := protoreflect.ValueOfInt64(x.AwaitingEventSince)
		if !f(fd_Bridge_awaiting_event_since, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Bridge) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zentp.Bridge.id":
		return x.Id != uint64(0)
	case "zrchain.zentp.Bridge.denom":
		return x.Denom != ""
	case "zrchain.zentp.Bridge.creator":
		return x.Creator != ""
	case "zrchain.zentp.Bridge.source_address":
		return x.SourceAddress != ""
	case "zrchain.zentp.Bridge.source_chain":
		return x.SourceChain != ""
	case "zrchain.zentp.Bridge.destination_chain":
		return x.DestinationChain != ""
	case "zrchain.zentp.Bridge.amount":
		return x.Amount != uint64(0)
	case "zrchain.zentp.Bridge.recipient_address":
		return x.RecipientAddress != ""
	case "zrchain.zentp.Bridge.tx_id":
		return x.TxId != uint64(0)
	case "zrchain.zentp.Bridge.tx_hash":
		return x.TxHash != ""
	case "zrchain.zentp.Bridge.state":
		return x.State != 0
	case "zrchain.zentp.Bridge.block_height":
		return x.BlockHeight != int64(0)
	case "zrchain.zentp.Bridge.awaiting_event_since":
		return x.AwaitingEventSince != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zentp.Bridge"))
		}
		panic(fmt.Errorf("message zrchain.zentp.Bridge does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zentp.Bridge.id":
		x.Id = uint64(0)
	case "zrchain.zentp.Bridge.denom":
		x.Denom = ""
	case "zrchain.zentp.Bridge.creator":
		x.Creator = ""
	case "zrchain.zentp.Bridge.source_address":
		x.SourceAddress = ""
	case "zrchain.zentp.Bridge.source_chain":
		x.SourceChain = ""
	case "zrchain.zentp.Bridge.destination_chain":
		x.DestinationChain = ""
	case "zrchain.zentp.Bridge.amount":
		x.Amount = uint64(0)
	case "zrchain.zentp.Bridge.recipient_address":
		x.RecipientAddress = ""
	case "zrchain.zentp.Bridge.tx_id":
		x.TxId = uint64(0)
	case "zrchain.zentp.Bridge.tx_hash":
		x.TxHash = ""
	case "zrchain.zentp.Bridge.state":
		x.State = 0
	case "zrchain.zentp.Bridge.block_height":
		x.BlockHeight = int64(0)
	case "zrchain.zentp.Bridge.awaiting_event_since":
		x.AwaitingEventSince = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zentp.Bridge"))
		}
		panic(fmt.Errorf("message zrchain.zentp.Bridge does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Bridge) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zentp.Bridge.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zentp.Bridge.denom":
		value := x.Denom
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.source_address":
		value := x.SourceAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.source_chain":
		value := x.SourceChain
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.destination_chain":
		value := x.DestinationChain
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.amount":
		value := x.Amount
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zentp.Bridge.recipient_address":
		value := x.RecipientAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.tx_id":
		value := x.TxId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zentp.Bridge.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "zrchain.zentp.Bridge.state":
		value := x.State
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.zentp.Bridge.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "zrchain.zentp.Bridge.awaiting_event_since":
		value := x.AwaitingEventSince
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zentp.Bridge"))
		}
		panic(fmt.Errorf("message zrchain.zentp.Bridge does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zentp.Bridge.id":
		x.Id = value.Uint()
	case "zrchain.zentp.Bridge.denom":
		x.Denom = value.Interface().(string)
	case "zrchain.zentp.Bridge.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.zentp.Bridge.source_address":
		x.SourceAddress = value.Interface().(string)
	case "zrchain.zentp.Bridge.source_chain":
		x.SourceChain = value.Interface().(string)
	case "zrchain.zentp.Bridge.destination_chain":
		x.DestinationChain = value.Interface().(string)
	case "zrchain.zentp.Bridge.amount":
		x.Amount = value.Uint()
	case "zrchain.zentp.Bridge.recipient_address":
		x.RecipientAddress = value.Interface().(string)
	case "zrchain.zentp.Bridge.tx_id":
		x.TxId = value.Uint()
	case "zrchain.zentp.Bridge.tx_hash":
		x.TxHash = value.Interface().(string)
	case "zrchain.zentp.Bridge.state":
		x.State = (BridgeStatus)(value.Enum())
	case "zrchain.zentp.Bridge.block_height":
		x.BlockHeight = value.Int()
	case "zrchain.zentp.Bridge.awaiting_event_since":
		x.AwaitingEventSince = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zentp.Bridge"))
		}
		panic(fmt.Errorf("message zrchain.zentp.Bridge does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zentp.Bridge.id":
		panic(fmt.Errorf("field id of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.denom":
		panic(fmt.Errorf("field denom of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.creator":
		panic(fmt.Errorf("field creator of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.source_address":
		panic(fmt.Errorf("field source_address of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.source_chain":
		panic(fmt.Errorf("field source_chain of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.destination_chain":
		panic(fmt.Errorf("field destination_chain of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.amount":
		panic(fmt.Errorf("field amount of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.recipient_address":
		panic(fmt.Errorf("field recipient_address of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.tx_id":
		panic(fmt.Errorf("field tx_id of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.tx_hash":
		panic(fmt.Errorf("field tx_hash of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.state":
		panic(fmt.Errorf("field state of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.block_height":
		panic(fmt.Errorf("field block_height of message zrchain.zentp.Bridge is not mutable"))
	case "zrchain.zentp.Bridge.awaiting_event_since":
		panic(fmt.Errorf("field awaiting_event_since of message zrchain.zentp.Bridge is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zentp.Bridge"))
		}
		panic(fmt.Errorf("message zrchain.zentp.Bridge does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Bridge) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zentp.Bridge.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zentp.Bridge.denom":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.source_address":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.source_chain":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.destination_chain":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.amount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zentp.Bridge.recipient_address":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.tx_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zentp.Bridge.tx_hash":
		return protoreflect.ValueOfString("")
	case "zrchain.zentp.Bridge.state":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.zentp.Bridge.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.zentp.Bridge.awaiting_event_since":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zentp.Bridge"))
		}
		panic(fmt.Errorf("message zrchain.zentp.Bridge does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Bridge) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zentp.Bridge", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Bridge) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Bridge) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Bridge) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Bridge)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceChain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestinationChain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		l = len(x.RecipientAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TxId != 0 {
			n += 1 + runtime.Sov(uint64(x.TxId))
		}
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.AwaitingEventSince != 0 {
			n += 1 + runtime.Sov(uint64(x.AwaitingEventSince))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Bridge)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AwaitingEventSince != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AwaitingEventSince))
			i--
			dAtA[i] = 0x68
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x60
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x58
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0x52
		}
		if x.TxId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TxId))
			i--
			dAtA[i] = 0x48
		}
		if len(x.RecipientAddress) > 0 {
			i -= len(x.RecipientAddress)
			copy(dAtA[i:], x.RecipientAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecipientAddress)))
			i--
			dAtA[i] = 0x42
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x38
		}
		if len(x.DestinationChain) > 0 {
			i -= len(x.DestinationChain)
			copy(dAtA[i:], x.DestinationChain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationChain)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.SourceChain) > 0 {
			i -= len(x.SourceChain)
			copy(dAtA[i:], x.SourceChain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceChain)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.SourceAddress) > 0 {
			i -= len(x.SourceAddress)
			copy(dAtA[i:], x.SourceAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Denom) > 0 {
			i -= len(x.Denom)
			copy(dAtA[i:], x.Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Denom)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Bridge)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Bridge: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Bridge: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceChain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationChain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecipientAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
				}
				x.TxId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TxId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= BridgeStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AwaitingEventSince", wireType)
				}
				x.AwaitingEventSince = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AwaitingEventSince |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/zentp/bridge.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MBStatus represents the different possible states of a mint/burn operation.
type BridgeStatus int32

const (
	// Undefined: The status of the operation is not specified.
	BridgeStatus_BRIDGE_STATUS_UNSPECIFIED BridgeStatus = 0
	// Pending: The operation is currently being processed.
	BridgeStatus_BRIDGE_STATUS_PENDING BridgeStatus = 1
	// Completed: The operation has been successfully finalized.
	BridgeStatus_BRIDGE_STATUS_COMPLETED BridgeStatus = 2
	// Failed: The operation has failed.
	BridgeStatus_BRIDGE_STATUS_FAILED BridgeStatus = 4
)

// Enum value maps for BridgeStatus.
var (
	BridgeStatus_name = map[int32]string{
		0: "BRIDGE_STATUS_UNSPECIFIED",
		1: "BRIDGE_STATUS_PENDING",
		2: "BRIDGE_STATUS_COMPLETED",
		4: "BRIDGE_STATUS_FAILED",
	}
	BridgeStatus_value = map[string]int32{
		"BRIDGE_STATUS_UNSPECIFIED": 0,
		"BRIDGE_STATUS_PENDING":     1,
		"BRIDGE_STATUS_COMPLETED":   2,
		"BRIDGE_STATUS_FAILED":      4,
	}
)

func (x BridgeStatus) Enum() *BridgeStatus {
	p := new(BridgeStatus)
	*p = x
	return p
}

func (x BridgeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_zentp_bridge_proto_enumTypes[0].Descriptor()
}

func (BridgeStatus) Type() protoreflect.EnumType {
	return &file_zrchain_zentp_bridge_proto_enumTypes[0]
}

func (x BridgeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeStatus.Descriptor instead.
func (BridgeStatus) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_zentp_bridge_proto_rawDescGZIP(), []int{0}
}

// Bridge represents a mint and burn operation between two networks.
type Bridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Denom              string       `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Creator            string       `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	SourceAddress      string       `protobuf:"bytes,4,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceChain        string       `protobuf:"bytes,5,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	DestinationChain   string       `protobuf:"bytes,6,opt,name=destination_chain,json=destinationChain,proto3" json:"destination_chain,omitempty"`
	Amount             uint64       `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	RecipientAddress   string       `protobuf:"bytes,8,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	TxId               uint64       `protobuf:"varint,9,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TxHash             string       `protobuf:"bytes,10,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	State              BridgeStatus `protobuf:"varint,11,opt,name=state,proto3,enum=zrchain.zentp.BridgeStatus" json:"state,omitempty"`
	BlockHeight        int64        `protobuf:"varint,12,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	AwaitingEventSince int64        `protobuf:"varint,13,opt,name=awaiting_event_since,json=awaitingEventSince,proto3" json:"awaiting_event_since,omitempty"`
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zentp_bridge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_zrchain_zentp_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *Bridge) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bridge) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Bridge) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Bridge) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *Bridge) GetSourceChain() string {
	if x != nil {
		return x.SourceChain
	}
	return ""
}

func (x *Bridge) GetDestinationChain() string {
	if x != nil {
		return x.DestinationChain
	}
	return ""
}

func (x *Bridge) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Bridge) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *Bridge) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *Bridge) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Bridge) GetState() BridgeStatus {
	if x != nil {
		return x.State
	}
	return BridgeStatus_BRIDGE_STATUS_UNSPECIFIED
}

func (x *Bridge) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Bridge) GetAwaitingEventSince() int64 {
	if x != nil {
		return x.AwaitingEventSince
	}
	return 0
}

var File_zrchain_zentp_bridge_proto protoreflect.FileDescriptor

var file_zrchain_zentp_bridge_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x74, 0x70, 0x2f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x74, 0x70, 0x22, 0xba, 0x03, 0x0a, 0x06,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x74, 0x70, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x2a, 0x7f, 0x0a, 0x0c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x49, 0x44,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0xb1, 0x01, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x74, 0x70, 0x42,
	0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x65, 0x6e, 0x72, 0x6f,
	0x63, 0x6b, 0x2d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x74, 0x70, 0xa2, 0x02, 0x03, 0x5a, 0x5a, 0x58,
	0xaa, 0x02, 0x0d, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x5a, 0x65, 0x6e, 0x74, 0x70,
	0xca, 0x02, 0x0d, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a, 0x65, 0x6e, 0x74, 0x70,
	0xe2, 0x02, 0x19, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a, 0x65, 0x6e, 0x74, 0x70,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x5a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x5a, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_zentp_bridge_proto_rawDescOnce sync.Once
	file_zrchain_zentp_bridge_proto_rawDescData = file_zrchain_zentp_bridge_proto_rawDesc
)

func file_zrchain_zentp_bridge_proto_rawDescGZIP() []byte {
	file_zrchain_zentp_bridge_proto_rawDescOnce.Do(func() {
		file_zrchain_zentp_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_zentp_bridge_proto_rawDescData)
	})
	return file_zrchain_zentp_bridge_proto_rawDescData
}

var file_zrchain_zentp_bridge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zrchain_zentp_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_zrchain_zentp_bridge_proto_goTypes = []interface{}{
	(BridgeStatus)(0), // 0: zrchain.zentp.BridgeStatus
	(*Bridge)(nil),    // 1: zrchain.zentp.Bridge
}
var file_zrchain_zentp_bridge_proto_depIdxs = []int32{
	0, // 0: zrchain.zentp.Bridge.state:type_name -> zrchain.zentp.BridgeStatus
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_zrchain_zentp_bridge_proto_init() }
func file_zrchain_zentp_bridge_proto_init() {
	if File_zrchain_zentp_bridge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zrchain_zentp_bridge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_zentp_bridge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_zentp_bridge_proto_goTypes,
		DependencyIndexes: file_zrchain_zentp_bridge_proto_depIdxs,
		EnumInfos:         file_zrchain_zentp_bridge_proto_enumTypes,
		MessageInfos:      file_zrchain_zentp_bridge_proto_msgTypes,
	}.Build()
	File_zrchain_zentp_bridge_proto = out.File
	file_zrchain_zentp_bridge_proto_rawDesc = nil
	file_zrchain_zentp_bridge_proto_goTypes = nil
	file_zrchain_zentp_bridge_proto_depIdxs = nil
}
