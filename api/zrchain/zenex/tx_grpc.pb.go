// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: zrchain/zenex/tx.proto

package zenex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_UpdateParams_FullMethodName            = "/zrchain.zenex.Msg/UpdateParams"
	Msg_SwapRequest_FullMethodName             = "/zrchain.zenex.Msg/SwapRequest"
	Msg_ZenexTransferRequest_FullMethodName    = "/zrchain.zenex.Msg/ZenexTransferRequest"
	Msg_AcknowledgePoolTransfer_FullMethodName = "/zrchain.zenex.Msg/AcknowledgePoolTransfer"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the Msg service.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// Swap defines a (cross-chain) swap operation.
	SwapRequest(ctx context.Context, in *MsgSwapRequest, opts ...grpc.CallOption) (*MsgSwapRequestResponse, error)
	// ZenexTransfer defines the message for transferring funds
	// to or from the change address.
	ZenexTransferRequest(ctx context.Context, in *MsgZenexTransferRequest, opts ...grpc.CallOption) (*MsgZenexTransferRequestResponse, error)
	// AcknowledgePoolTransfer defines the message for acknowledging a pool transfer.
	AcknowledgePoolTransfer(ctx context.Context, in *MsgAcknowledgePoolTransfer, opts ...grpc.CallOption) (*MsgAcknowledgePoolTransferResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SwapRequest(ctx context.Context, in *MsgSwapRequest, opts ...grpc.CallOption) (*MsgSwapRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSwapRequestResponse)
	err := c.cc.Invoke(ctx, Msg_SwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ZenexTransferRequest(ctx context.Context, in *MsgZenexTransferRequest, opts ...grpc.CallOption) (*MsgZenexTransferRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgZenexTransferRequestResponse)
	err := c.cc.Invoke(ctx, Msg_ZenexTransferRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcknowledgePoolTransfer(ctx context.Context, in *MsgAcknowledgePoolTransfer, opts ...grpc.CallOption) (*MsgAcknowledgePoolTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAcknowledgePoolTransferResponse)
	err := c.cc.Invoke(ctx, Msg_AcknowledgePoolTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// Swap defines a (cross-chain) swap operation.
	SwapRequest(context.Context, *MsgSwapRequest) (*MsgSwapRequestResponse, error)
	// ZenexTransfer defines the message for transferring funds
	// to or from the change address.
	ZenexTransferRequest(context.Context, *MsgZenexTransferRequest) (*MsgZenexTransferRequestResponse, error)
	// AcknowledgePoolTransfer defines the message for acknowledging a pool transfer.
	AcknowledgePoolTransfer(context.Context, *MsgAcknowledgePoolTransfer) (*MsgAcknowledgePoolTransferResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) SwapRequest(context.Context, *MsgSwapRequest) (*MsgSwapRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapRequest not implemented")
}
func (UnimplementedMsgServer) ZenexTransferRequest(context.Context, *MsgZenexTransferRequest) (*MsgZenexTransferRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZenexTransferRequest not implemented")
}
func (UnimplementedMsgServer) AcknowledgePoolTransfer(context.Context, *MsgAcknowledgePoolTransfer) (*MsgAcknowledgePoolTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgePoolTransfer not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SwapRequest(ctx, req.(*MsgSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ZenexTransferRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgZenexTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ZenexTransferRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ZenexTransferRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ZenexTransferRequest(ctx, req.(*MsgZenexTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcknowledgePoolTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcknowledgePoolTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcknowledgePoolTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AcknowledgePoolTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcknowledgePoolTransfer(ctx, req.(*MsgAcknowledgePoolTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.zenex.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "SwapRequest",
			Handler:    _Msg_SwapRequest_Handler,
		},
		{
			MethodName: "ZenexTransferRequest",
			Handler:    _Msg_ZenexTransferRequest_Handler,
		},
		{
			MethodName: "AcknowledgePoolTransfer",
			Handler:    _Msg_AcknowledgePoolTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/zenex/tx.proto",
}
