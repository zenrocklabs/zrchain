// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package zenex

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	validation "github.com/Zenrock-Foundation/zrchain/v6/api/zrchain/validation"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Swap                  protoreflect.MessageDescriptor
	fd_Swap_creator          protoreflect.FieldDescriptor
	fd_Swap_swap_id          protoreflect.FieldDescriptor
	fd_Swap_status           protoreflect.FieldDescriptor
	fd_Swap_pair             protoreflect.FieldDescriptor
	fd_Swap_data             protoreflect.FieldDescriptor
	fd_Swap_sender_key_id    protoreflect.FieldDescriptor
	fd_Swap_recipient_key_id protoreflect.FieldDescriptor
	fd_Swap_workspace        protoreflect.FieldDescriptor
	fd_Swap_zenbtc_yield     protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zenex_swap_proto_init()
	md_Swap = File_zrchain_zenex_swap_proto.Messages().ByName("Swap")
	fd_Swap_creator = md_Swap.Fields().ByName("creator")
	fd_Swap_swap_id = md_Swap.Fields().ByName("swap_id")
	fd_Swap_status = md_Swap.Fields().ByName("status")
	fd_Swap_pair = md_Swap.Fields().ByName("pair")
	fd_Swap_data = md_Swap.Fields().ByName("data")
	fd_Swap_sender_key_id = md_Swap.Fields().ByName("sender_key_id")
	fd_Swap_recipient_key_id = md_Swap.Fields().ByName("recipient_key_id")
	fd_Swap_workspace = md_Swap.Fields().ByName("workspace")
	fd_Swap_zenbtc_yield = md_Swap.Fields().ByName("zenbtc_yield")
}

var _ protoreflect.Message = (*fastReflection_Swap)(nil)

type fastReflection_Swap Swap

func (x *Swap) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Swap)(x)
}

func (x *Swap) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zenex_swap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Swap_messageType fastReflection_Swap_messageType
var _ protoreflect.MessageType = fastReflection_Swap_messageType{}

type fastReflection_Swap_messageType struct{}

func (x fastReflection_Swap_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Swap)(nil)
}
func (x fastReflection_Swap_messageType) New() protoreflect.Message {
	return new(fastReflection_Swap)
}
func (x fastReflection_Swap_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Swap
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Swap) Descriptor() protoreflect.MessageDescriptor {
	return md_Swap
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Swap) Type() protoreflect.MessageType {
	return _fastReflection_Swap_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Swap) New() protoreflect.Message {
	return new(fastReflection_Swap)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Swap) Interface() protoreflect.ProtoMessage {
	return (*Swap)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Swap) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Swap_creator, value) {
			return
		}
	}
	if x.SwapId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SwapId)
		if !f(fd_Swap_swap_id, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Swap_status, value) {
			return
		}
	}
	if x.Pair != "" {
		value := protoreflect.ValueOfString(x.Pair)
		if !f(fd_Swap_pair, value) {
			return
		}
	}
	if x.Data != nil {
		value := protoreflect.ValueOfMessage(x.Data.ProtoReflect())
		if !f(fd_Swap_data, value) {
			return
		}
	}
	if x.SenderKeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SenderKeyId)
		if !f(fd_Swap_sender_key_id, value) {
			return
		}
	}
	if x.RecipientKeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RecipientKeyId)
		if !f(fd_Swap_recipient_key_id, value) {
			return
		}
	}
	if x.Workspace != "" {
		value := protoreflect.ValueOfString(x.Workspace)
		if !f(fd_Swap_workspace, value) {
			return
		}
	}
	if x.ZenbtcYield != false {
		value := protoreflect.ValueOfBool(x.ZenbtcYield)
		if !f(fd_Swap_zenbtc_yield, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Swap) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zenex.Swap.creator":
		return x.Creator != ""
	case "zrchain.zenex.Swap.swap_id":
		return x.SwapId != uint64(0)
	case "zrchain.zenex.Swap.status":
		return x.Status != 0
	case "zrchain.zenex.Swap.pair":
		return x.Pair != ""
	case "zrchain.zenex.Swap.data":
		return x.Data != nil
	case "zrchain.zenex.Swap.sender_key_id":
		return x.SenderKeyId != uint64(0)
	case "zrchain.zenex.Swap.recipient_key_id":
		return x.RecipientKeyId != uint64(0)
	case "zrchain.zenex.Swap.workspace":
		return x.Workspace != ""
	case "zrchain.zenex.Swap.zenbtc_yield":
		return x.ZenbtcYield != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.Swap"))
		}
		panic(fmt.Errorf("message zrchain.zenex.Swap does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Swap) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zenex.Swap.creator":
		x.Creator = ""
	case "zrchain.zenex.Swap.swap_id":
		x.SwapId = uint64(0)
	case "zrchain.zenex.Swap.status":
		x.Status = 0
	case "zrchain.zenex.Swap.pair":
		x.Pair = ""
	case "zrchain.zenex.Swap.data":
		x.Data = nil
	case "zrchain.zenex.Swap.sender_key_id":
		x.SenderKeyId = uint64(0)
	case "zrchain.zenex.Swap.recipient_key_id":
		x.RecipientKeyId = uint64(0)
	case "zrchain.zenex.Swap.workspace":
		x.Workspace = ""
	case "zrchain.zenex.Swap.zenbtc_yield":
		x.ZenbtcYield = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.Swap"))
		}
		panic(fmt.Errorf("message zrchain.zenex.Swap does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Swap) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zenex.Swap.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "zrchain.zenex.Swap.swap_id":
		value := x.SwapId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenex.Swap.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.zenex.Swap.pair":
		value := x.Pair
		return protoreflect.ValueOfString(value)
	case "zrchain.zenex.Swap.data":
		value := x.Data
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.zenex.Swap.sender_key_id":
		value := x.SenderKeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenex.Swap.recipient_key_id":
		value := x.RecipientKeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenex.Swap.workspace":
		value := x.Workspace
		return protoreflect.ValueOfString(value)
	case "zrchain.zenex.Swap.zenbtc_yield":
		value := x.ZenbtcYield
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.Swap"))
		}
		panic(fmt.Errorf("message zrchain.zenex.Swap does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Swap) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zenex.Swap.creator":
		x.Creator = value.Interface().(string)
	case "zrchain.zenex.Swap.swap_id":
		x.SwapId = value.Uint()
	case "zrchain.zenex.Swap.status":
		x.Status = (SwapStatus)(value.Enum())
	case "zrchain.zenex.Swap.pair":
		x.Pair = value.Interface().(string)
	case "zrchain.zenex.Swap.data":
		x.Data = value.Message().Interface().(*SwapData)
	case "zrchain.zenex.Swap.sender_key_id":
		x.SenderKeyId = value.Uint()
	case "zrchain.zenex.Swap.recipient_key_id":
		x.RecipientKeyId = value.Uint()
	case "zrchain.zenex.Swap.workspace":
		x.Workspace = value.Interface().(string)
	case "zrchain.zenex.Swap.zenbtc_yield":
		x.ZenbtcYield = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.Swap"))
		}
		panic(fmt.Errorf("message zrchain.zenex.Swap does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Swap) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenex.Swap.data":
		if x.Data == nil {
			x.Data = new(SwapData)
		}
		return protoreflect.ValueOfMessage(x.Data.ProtoReflect())
	case "zrchain.zenex.Swap.creator":
		panic(fmt.Errorf("field creator of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.swap_id":
		panic(fmt.Errorf("field swap_id of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.status":
		panic(fmt.Errorf("field status of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.pair":
		panic(fmt.Errorf("field pair of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.sender_key_id":
		panic(fmt.Errorf("field sender_key_id of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.recipient_key_id":
		panic(fmt.Errorf("field recipient_key_id of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.workspace":
		panic(fmt.Errorf("field workspace of message zrchain.zenex.Swap is not mutable"))
	case "zrchain.zenex.Swap.zenbtc_yield":
		panic(fmt.Errorf("field zenbtc_yield of message zrchain.zenex.Swap is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.Swap"))
		}
		panic(fmt.Errorf("message zrchain.zenex.Swap does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Swap) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenex.Swap.creator":
		return protoreflect.ValueOfString("")
	case "zrchain.zenex.Swap.swap_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenex.Swap.status":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.zenex.Swap.pair":
		return protoreflect.ValueOfString("")
	case "zrchain.zenex.Swap.data":
		m := new(SwapData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.zenex.Swap.sender_key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenex.Swap.recipient_key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenex.Swap.workspace":
		return protoreflect.ValueOfString("")
	case "zrchain.zenex.Swap.zenbtc_yield":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.Swap"))
		}
		panic(fmt.Errorf("message zrchain.zenex.Swap does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Swap) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zenex.Swap", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Swap) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Swap) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Swap) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Swap) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Swap)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SwapId != 0 {
			n += 1 + runtime.Sov(uint64(x.SwapId))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Pair)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Data != nil {
			l = options.Size(x.Data)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SenderKeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.SenderKeyId))
		}
		if x.RecipientKeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.RecipientKeyId))
		}
		l = len(x.Workspace)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ZenbtcYield {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Swap)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ZenbtcYield {
			i--
			if x.ZenbtcYield {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x48
		}
		if len(x.Workspace) > 0 {
			i -= len(x.Workspace)
			copy(dAtA[i:], x.Workspace)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Workspace)))
			i--
			dAtA[i] = 0x42
		}
		if x.RecipientKeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RecipientKeyId))
			i--
			dAtA[i] = 0x38
		}
		if x.SenderKeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SenderKeyId))
			i--
			dAtA[i] = 0x30
		}
		if x.Data != nil {
			encoded, err := options.Marshal(x.Data)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Pair) > 0 {
			i -= len(x.Pair)
			copy(dAtA[i:], x.Pair)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pair)))
			i--
			dAtA[i] = 0x22
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x18
		}
		if x.SwapId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SwapId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Swap)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Swap: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Swap: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapId", wireType)
				}
				x.SwapId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SwapId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= SwapStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pair = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Data == nil {
					x.Data = &SwapData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Data); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SenderKeyId", wireType)
				}
				x.SenderKeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SenderKeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecipientKeyId", wireType)
				}
				x.RecipientKeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RecipientKeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Workspace = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZenbtcYield", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ZenbtcYield = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SwapData             protoreflect.MessageDescriptor
	fd_SwapData_base_token  protoreflect.FieldDescriptor
	fd_SwapData_quote_token protoreflect.FieldDescriptor
	fd_SwapData_price       protoreflect.FieldDescriptor
	fd_SwapData_amount_in   protoreflect.FieldDescriptor
	fd_SwapData_amount_out  protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zenex_swap_proto_init()
	md_SwapData = File_zrchain_zenex_swap_proto.Messages().ByName("SwapData")
	fd_SwapData_base_token = md_SwapData.Fields().ByName("base_token")
	fd_SwapData_quote_token = md_SwapData.Fields().ByName("quote_token")
	fd_SwapData_price = md_SwapData.Fields().ByName("price")
	fd_SwapData_amount_in = md_SwapData.Fields().ByName("amount_in")
	fd_SwapData_amount_out = md_SwapData.Fields().ByName("amount_out")
}

var _ protoreflect.Message = (*fastReflection_SwapData)(nil)

type fastReflection_SwapData SwapData

func (x *SwapData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SwapData)(x)
}

func (x *SwapData) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zenex_swap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SwapData_messageType fastReflection_SwapData_messageType
var _ protoreflect.MessageType = fastReflection_SwapData_messageType{}

type fastReflection_SwapData_messageType struct{}

func (x fastReflection_SwapData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SwapData)(nil)
}
func (x fastReflection_SwapData_messageType) New() protoreflect.Message {
	return new(fastReflection_SwapData)
}
func (x fastReflection_SwapData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SwapData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SwapData) Descriptor() protoreflect.MessageDescriptor {
	return md_SwapData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SwapData) Type() protoreflect.MessageType {
	return _fastReflection_SwapData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SwapData) New() protoreflect.Message {
	return new(fastReflection_SwapData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SwapData) Interface() protoreflect.ProtoMessage {
	return (*SwapData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SwapData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseToken != nil {
		value := protoreflect.ValueOfMessage(x.BaseToken.ProtoReflect())
		if !f(fd_SwapData_base_token, value) {
			return
		}
	}
	if x.QuoteToken != nil {
		value := protoreflect.ValueOfMessage(x.QuoteToken.ProtoReflect())
		if !f(fd_SwapData_quote_token, value) {
			return
		}
	}
	if x.Price != "" {
		value := protoreflect.ValueOfString(x.Price)
		if !f(fd_SwapData_price, value) {
			return
		}
	}
	if x.AmountIn != "" {
		value := protoreflect.ValueOfString(x.AmountIn)
		if !f(fd_SwapData_amount_in, value) {
			return
		}
	}
	if x.AmountOut != "" {
		value := protoreflect.ValueOfString(x.AmountOut)
		if !f(fd_SwapData_amount_out, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SwapData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zenex.SwapData.base_token":
		return x.BaseToken != nil
	case "zrchain.zenex.SwapData.quote_token":
		return x.QuoteToken != nil
	case "zrchain.zenex.SwapData.price":
		return x.Price != ""
	case "zrchain.zenex.SwapData.amount_in":
		return x.AmountIn != ""
	case "zrchain.zenex.SwapData.amount_out":
		return x.AmountOut != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapData"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zenex.SwapData.base_token":
		x.BaseToken = nil
	case "zrchain.zenex.SwapData.quote_token":
		x.QuoteToken = nil
	case "zrchain.zenex.SwapData.price":
		x.Price = ""
	case "zrchain.zenex.SwapData.amount_in":
		x.AmountIn = ""
	case "zrchain.zenex.SwapData.amount_out":
		x.AmountOut = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapData"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SwapData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zenex.SwapData.base_token":
		value := x.BaseToken
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.zenex.SwapData.quote_token":
		value := x.QuoteToken
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.zenex.SwapData.price":
		value := x.Price
		return protoreflect.ValueOfString(value)
	case "zrchain.zenex.SwapData.amount_in":
		value := x.AmountIn
		return protoreflect.ValueOfString(value)
	case "zrchain.zenex.SwapData.amount_out":
		value := x.AmountOut
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapData"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zenex.SwapData.base_token":
		x.BaseToken = value.Message().Interface().(*validation.AssetData)
	case "zrchain.zenex.SwapData.quote_token":
		x.QuoteToken = value.Message().Interface().(*validation.AssetData)
	case "zrchain.zenex.SwapData.price":
		x.Price = value.Interface().(string)
	case "zrchain.zenex.SwapData.amount_in":
		x.AmountIn = value.Interface().(string)
	case "zrchain.zenex.SwapData.amount_out":
		x.AmountOut = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapData"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenex.SwapData.base_token":
		if x.BaseToken == nil {
			x.BaseToken = new(validation.AssetData)
		}
		return protoreflect.ValueOfMessage(x.BaseToken.ProtoReflect())
	case "zrchain.zenex.SwapData.quote_token":
		if x.QuoteToken == nil {
			x.QuoteToken = new(validation.AssetData)
		}
		return protoreflect.ValueOfMessage(x.QuoteToken.ProtoReflect())
	case "zrchain.zenex.SwapData.price":
		panic(fmt.Errorf("field price of message zrchain.zenex.SwapData is not mutable"))
	case "zrchain.zenex.SwapData.amount_in":
		panic(fmt.Errorf("field amount_in of message zrchain.zenex.SwapData is not mutable"))
	case "zrchain.zenex.SwapData.amount_out":
		panic(fmt.Errorf("field amount_out of message zrchain.zenex.SwapData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapData"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SwapData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenex.SwapData.base_token":
		m := new(validation.AssetData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.zenex.SwapData.quote_token":
		m := new(validation.AssetData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.zenex.SwapData.price":
		return protoreflect.ValueOfString("")
	case "zrchain.zenex.SwapData.amount_in":
		return protoreflect.ValueOfString("")
	case "zrchain.zenex.SwapData.amount_out":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapData"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SwapData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zenex.SwapData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SwapData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SwapData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SwapData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SwapData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BaseToken != nil {
			l = options.Size(x.BaseToken)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.QuoteToken != nil {
			l = options.Size(x.QuoteToken)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Price)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AmountIn)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AmountOut)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SwapData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AmountOut) > 0 {
			i -= len(x.AmountOut)
			copy(dAtA[i:], x.AmountOut)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountOut)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.AmountIn) > 0 {
			i -= len(x.AmountIn)
			copy(dAtA[i:], x.AmountIn)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountIn)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Price) > 0 {
			i -= len(x.Price)
			copy(dAtA[i:], x.Price)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Price)))
			i--
			dAtA[i] = 0x1a
		}
		if x.QuoteToken != nil {
			encoded, err := options.Marshal(x.QuoteToken)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.BaseToken != nil {
			encoded, err := options.Marshal(x.BaseToken)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SwapData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SwapData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SwapData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseToken", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BaseToken == nil {
					x.BaseToken = &validation.AssetData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BaseToken); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QuoteToken", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.QuoteToken == nil {
					x.QuoteToken = &validation.AssetData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.QuoteToken); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Price = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountIn = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountOut = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SwapPair             protoreflect.MessageDescriptor
	fd_SwapPair_base_token  protoreflect.FieldDescriptor
	fd_SwapPair_quote_token protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zenex_swap_proto_init()
	md_SwapPair = File_zrchain_zenex_swap_proto.Messages().ByName("SwapPair")
	fd_SwapPair_base_token = md_SwapPair.Fields().ByName("base_token")
	fd_SwapPair_quote_token = md_SwapPair.Fields().ByName("quote_token")
}

var _ protoreflect.Message = (*fastReflection_SwapPair)(nil)

type fastReflection_SwapPair SwapPair

func (x *SwapPair) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SwapPair)(x)
}

func (x *SwapPair) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zenex_swap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SwapPair_messageType fastReflection_SwapPair_messageType
var _ protoreflect.MessageType = fastReflection_SwapPair_messageType{}

type fastReflection_SwapPair_messageType struct{}

func (x fastReflection_SwapPair_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SwapPair)(nil)
}
func (x fastReflection_SwapPair_messageType) New() protoreflect.Message {
	return new(fastReflection_SwapPair)
}
func (x fastReflection_SwapPair_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SwapPair
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SwapPair) Descriptor() protoreflect.MessageDescriptor {
	return md_SwapPair
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SwapPair) Type() protoreflect.MessageType {
	return _fastReflection_SwapPair_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SwapPair) New() protoreflect.Message {
	return new(fastReflection_SwapPair)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SwapPair) Interface() protoreflect.ProtoMessage {
	return (*SwapPair)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SwapPair) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseToken != nil {
		value := protoreflect.ValueOfMessage(x.BaseToken.ProtoReflect())
		if !f(fd_SwapPair_base_token, value) {
			return
		}
	}
	if x.QuoteToken != nil {
		value := protoreflect.ValueOfMessage(x.QuoteToken.ProtoReflect())
		if !f(fd_SwapPair_quote_token, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SwapPair) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zenex.SwapPair.base_token":
		return x.BaseToken != nil
	case "zrchain.zenex.SwapPair.quote_token":
		return x.QuoteToken != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapPair"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapPair does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapPair) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zenex.SwapPair.base_token":
		x.BaseToken = nil
	case "zrchain.zenex.SwapPair.quote_token":
		x.QuoteToken = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapPair"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapPair does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SwapPair) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zenex.SwapPair.base_token":
		value := x.BaseToken
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.zenex.SwapPair.quote_token":
		value := x.QuoteToken
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapPair"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapPair does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapPair) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zenex.SwapPair.base_token":
		x.BaseToken = value.Message().Interface().(*validation.AssetData)
	case "zrchain.zenex.SwapPair.quote_token":
		x.QuoteToken = value.Message().Interface().(*validation.AssetData)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapPair"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapPair does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapPair) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenex.SwapPair.base_token":
		if x.BaseToken == nil {
			x.BaseToken = new(validation.AssetData)
		}
		return protoreflect.ValueOfMessage(x.BaseToken.ProtoReflect())
	case "zrchain.zenex.SwapPair.quote_token":
		if x.QuoteToken == nil {
			x.QuoteToken = new(validation.AssetData)
		}
		return protoreflect.ValueOfMessage(x.QuoteToken.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapPair"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapPair does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SwapPair) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenex.SwapPair.base_token":
		m := new(validation.AssetData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.zenex.SwapPair.quote_token":
		m := new(validation.AssetData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenex.SwapPair"))
		}
		panic(fmt.Errorf("message zrchain.zenex.SwapPair does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SwapPair) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zenex.SwapPair", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SwapPair) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SwapPair) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SwapPair) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SwapPair) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SwapPair)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BaseToken != nil {
			l = options.Size(x.BaseToken)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.QuoteToken != nil {
			l = options.Size(x.QuoteToken)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SwapPair)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.QuoteToken != nil {
			encoded, err := options.Marshal(x.QuoteToken)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.BaseToken != nil {
			encoded, err := options.Marshal(x.BaseToken)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SwapPair)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SwapPair: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SwapPair: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseToken", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BaseToken == nil {
					x.BaseToken = &validation.AssetData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BaseToken); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QuoteToken", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.QuoteToken == nil {
					x.QuoteToken = &validation.AssetData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.QuoteToken); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/zenex/swap.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SwapStatus defines the status of the swap.
type SwapStatus int32

const (
	// The swap status is unspecified (all swaps will be returned)
	SwapStatus_SWAP_STATUS_UNSPECIFIED SwapStatus = 0
	// The swap status is requested
	SwapStatus_SWAP_STATUS_REQUESTED SwapStatus = 1
	// The swap status is rejected
	SwapStatus_SWAP_STATUS_REJECTED SwapStatus = 2
	// The swap status is completed
	SwapStatus_SWAP_STATUS_COMPLETED SwapStatus = 3
)

// Enum value maps for SwapStatus.
var (
	SwapStatus_name = map[int32]string{
		0: "SWAP_STATUS_UNSPECIFIED",
		1: "SWAP_STATUS_REQUESTED",
		2: "SWAP_STATUS_REJECTED",
		3: "SWAP_STATUS_COMPLETED",
	}
	SwapStatus_value = map[string]int32{
		"SWAP_STATUS_UNSPECIFIED": 0,
		"SWAP_STATUS_REQUESTED":   1,
		"SWAP_STATUS_REJECTED":    2,
		"SWAP_STATUS_COMPLETED":   3,
	}
)

func (x SwapStatus) Enum() *SwapStatus {
	p := new(SwapStatus)
	*p = x
	return p
}

func (x SwapStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwapStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zrchain_zenex_swap_proto_enumTypes[0].Descriptor()
}

func (SwapStatus) Type() protoreflect.EnumType {
	return &file_zrchain_zenex_swap_proto_enumTypes[0]
}

func (x SwapStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwapStatus.Descriptor instead.
func (SwapStatus) EnumDescriptor() ([]byte, []int) {
	return file_zrchain_zenex_swap_proto_rawDescGZIP(), []int{0}
}

// Swap objects defines a cross-chain swap operation
type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator        string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SwapId         uint64     `protobuf:"varint,2,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	Status         SwapStatus `protobuf:"varint,3,opt,name=status,proto3,enum=zrchain.zenex.SwapStatus" json:"status,omitempty"`
	Pair           string     `protobuf:"bytes,4,opt,name=pair,proto3" json:"pair,omitempty"`
	Data           *SwapData  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	SenderKeyId    uint64     `protobuf:"varint,6,opt,name=sender_key_id,json=senderKeyId,proto3" json:"sender_key_id,omitempty"`
	RecipientKeyId uint64     `protobuf:"varint,7,opt,name=recipient_key_id,json=recipientKeyId,proto3" json:"recipient_key_id,omitempty"`
	Workspace      string     `protobuf:"bytes,8,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ZenbtcYield    bool       `protobuf:"varint,9,opt,name=zenbtc_yield,json=zenbtcYield,proto3" json:"zenbtc_yield,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zenex_swap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_zrchain_zenex_swap_proto_rawDescGZIP(), []int{0}
}

func (x *Swap) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Swap) GetSwapId() uint64 {
	if x != nil {
		return x.SwapId
	}
	return 0
}

func (x *Swap) GetStatus() SwapStatus {
	if x != nil {
		return x.Status
	}
	return SwapStatus_SWAP_STATUS_UNSPECIFIED
}

func (x *Swap) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *Swap) GetData() *SwapData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Swap) GetSenderKeyId() uint64 {
	if x != nil {
		return x.SenderKeyId
	}
	return 0
}

func (x *Swap) GetRecipientKeyId() uint64 {
	if x != nil {
		return x.RecipientKeyId
	}
	return 0
}

func (x *Swap) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *Swap) GetZenbtcYield() bool {
	if x != nil {
		return x.ZenbtcYield
	}
	return false
}

// SwapData defines the data for a swap.
type SwapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseToken  *validation.AssetData `protobuf:"bytes,1,opt,name=base_token,json=baseToken,proto3" json:"base_token,omitempty"`
	QuoteToken *validation.AssetData `protobuf:"bytes,2,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`
	Price      string                `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	AmountIn   string                `protobuf:"bytes,4,opt,name=amount_in,json=amountIn,proto3" json:"amount_in,omitempty"`
	// amount_out will be filled when the Msg is processed
	AmountOut string `protobuf:"bytes,5,opt,name=amount_out,json=amountOut,proto3" json:"amount_out,omitempty"`
}

func (x *SwapData) Reset() {
	*x = SwapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zenex_swap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapData) ProtoMessage() {}

// Deprecated: Use SwapData.ProtoReflect.Descriptor instead.
func (*SwapData) Descriptor() ([]byte, []int) {
	return file_zrchain_zenex_swap_proto_rawDescGZIP(), []int{1}
}

func (x *SwapData) GetBaseToken() *validation.AssetData {
	if x != nil {
		return x.BaseToken
	}
	return nil
}

func (x *SwapData) GetQuoteToken() *validation.AssetData {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *SwapData) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SwapData) GetAmountIn() string {
	if x != nil {
		return x.AmountIn
	}
	return ""
}

func (x *SwapData) GetAmountOut() string {
	if x != nil {
		return x.AmountOut
	}
	return ""
}

// SwapPair defines the pair of tokens for a swap
// using validation asset data
type SwapPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseToken  *validation.AssetData `protobuf:"bytes,1,opt,name=base_token,json=baseToken,proto3" json:"base_token,omitempty"`
	QuoteToken *validation.AssetData `protobuf:"bytes,2,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`
}

func (x *SwapPair) Reset() {
	*x = SwapPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zenex_swap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPair) ProtoMessage() {}

// Deprecated: Use SwapPair.ProtoReflect.Descriptor instead.
func (*SwapPair) Descriptor() ([]byte, []int) {
	return file_zrchain_zenex_swap_proto_rawDescGZIP(), []int{2}
}

func (x *SwapPair) GetBaseToken() *validation.AssetData {
	if x != nil {
		return x.BaseToken
	}
	return nil
}

func (x *SwapPair) GetQuoteToken() *validation.AssetData {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

var File_zrchain_zenex_swap_proto protoreflect.FileDescriptor

var file_zrchain_zenex_swap_proto_rawDesc = []byte{
	0x0a, 0x18, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x65, 0x78, 0x2f,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x7a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x65, 0x78, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x65, 0x78, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65,
	0x6e, 0x65, 0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x59, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x82, 0x03, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x12,
	0x55, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2a, 0x79, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x57, 0x41, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0xaf, 0x01, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e,
	0x65, 0x78, 0x42, 0x09, 0x53, 0x77, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x65, 0x6e, 0x72,
	0x6f, 0x63, 0x6b, 0x2d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x65, 0x78, 0xa2, 0x02, 0x03, 0x5a, 0x5a,
	0x58, 0xaa, 0x02, 0x0d, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x5a, 0x65, 0x6e, 0x65,
	0x78, 0xca, 0x02, 0x0d, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a, 0x65, 0x6e, 0x65,
	0x78, 0xe2, 0x02, 0x19, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a, 0x65, 0x6e, 0x65,
	0x78, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e,
	0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x5a, 0x65, 0x6e, 0x65, 0x78, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_zenex_swap_proto_rawDescOnce sync.Once
	file_zrchain_zenex_swap_proto_rawDescData = file_zrchain_zenex_swap_proto_rawDesc
)

func file_zrchain_zenex_swap_proto_rawDescGZIP() []byte {
	file_zrchain_zenex_swap_proto_rawDescOnce.Do(func() {
		file_zrchain_zenex_swap_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_zenex_swap_proto_rawDescData)
	})
	return file_zrchain_zenex_swap_proto_rawDescData
}

var file_zrchain_zenex_swap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zrchain_zenex_swap_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_zrchain_zenex_swap_proto_goTypes = []interface{}{
	(SwapStatus)(0),              // 0: zrchain.zenex.SwapStatus
	(*Swap)(nil),                 // 1: zrchain.zenex.Swap
	(*SwapData)(nil),             // 2: zrchain.zenex.SwapData
	(*SwapPair)(nil),             // 3: zrchain.zenex.SwapPair
	(*validation.AssetData)(nil), // 4: zrchain.validation.AssetData
}
var file_zrchain_zenex_swap_proto_depIdxs = []int32{
	0, // 0: zrchain.zenex.Swap.status:type_name -> zrchain.zenex.SwapStatus
	2, // 1: zrchain.zenex.Swap.data:type_name -> zrchain.zenex.SwapData
	4, // 2: zrchain.zenex.SwapData.base_token:type_name -> zrchain.validation.AssetData
	4, // 3: zrchain.zenex.SwapData.quote_token:type_name -> zrchain.validation.AssetData
	4, // 4: zrchain.zenex.SwapPair.base_token:type_name -> zrchain.validation.AssetData
	4, // 5: zrchain.zenex.SwapPair.quote_token:type_name -> zrchain.validation.AssetData
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_zrchain_zenex_swap_proto_init() }
func file_zrchain_zenex_swap_proto_init() {
	if File_zrchain_zenex_swap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zrchain_zenex_swap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_zenex_swap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_zenex_swap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_zenex_swap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_zenex_swap_proto_goTypes,
		DependencyIndexes: file_zrchain_zenex_swap_proto_depIdxs,
		EnumInfos:         file_zrchain_zenex_swap_proto_enumTypes,
		MessageInfos:      file_zrchain_zenex_swap_proto_msgTypes,
	}.Build()
	File_zrchain_zenex_swap_proto = out.File
	file_zrchain_zenex_swap_proto_rawDesc = nil
	file_zrchain_zenex_swap_proto_goTypes = nil
	file_zrchain_zenex_swap_proto_depIdxs = nil
}
