// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: zrchain/policy/query.proto

package policy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/zrchain.policy.Query/Params"
	Query_Actions_FullMethodName              = "/zrchain.policy.Query/Actions"
	Query_Policies_FullMethodName             = "/zrchain.policy.Query/Policies"
	Query_PolicyById_FullMethodName           = "/zrchain.policy.Query/PolicyById"
	Query_SignMethodsByAddress_FullMethodName = "/zrchain.policy.Query/SignMethodsByAddress"
	Query_PoliciesByCreator_FullMethodName    = "/zrchain.policy.Query/PoliciesByCreator"
	Query_ActionDetailsById_FullMethodName    = "/zrchain.policy.Query/ActionDetailsById"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Actions items.
	Actions(ctx context.Context, in *QueryActionsRequest, opts ...grpc.CallOption) (*QueryActionsResponse, error)
	// Queries a list of Policies items.
	Policies(ctx context.Context, in *QueryPoliciesRequest, opts ...grpc.CallOption) (*QueryPoliciesResponse, error)
	// Queries a list of PolicyById items.
	PolicyById(ctx context.Context, in *QueryPolicyByIdRequest, opts ...grpc.CallOption) (*QueryPolicyByIdResponse, error)
	// Queries a list of SignMethodsByAddress items.
	SignMethodsByAddress(ctx context.Context, in *QuerySignMethodsByAddressRequest, opts ...grpc.CallOption) (*QuerySignMethodsByAddressResponse, error)
	// Queries a list of PoliciesByCreator items.
	PoliciesByCreator(ctx context.Context, in *QueryPoliciesByCreatorRequest, opts ...grpc.CallOption) (*QueryPoliciesByCreatorResponse, error)
	// Queries a list of ActionDetailsById items.
	ActionDetailsById(ctx context.Context, in *QueryActionDetailsByIdRequest, opts ...grpc.CallOption) (*QueryActionDetailsByIdResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Actions(ctx context.Context, in *QueryActionsRequest, opts ...grpc.CallOption) (*QueryActionsResponse, error) {
	out := new(QueryActionsResponse)
	err := c.cc.Invoke(ctx, Query_Actions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Policies(ctx context.Context, in *QueryPoliciesRequest, opts ...grpc.CallOption) (*QueryPoliciesResponse, error) {
	out := new(QueryPoliciesResponse)
	err := c.cc.Invoke(ctx, Query_Policies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PolicyById(ctx context.Context, in *QueryPolicyByIdRequest, opts ...grpc.CallOption) (*QueryPolicyByIdResponse, error) {
	out := new(QueryPolicyByIdResponse)
	err := c.cc.Invoke(ctx, Query_PolicyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignMethodsByAddress(ctx context.Context, in *QuerySignMethodsByAddressRequest, opts ...grpc.CallOption) (*QuerySignMethodsByAddressResponse, error) {
	out := new(QuerySignMethodsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_SignMethodsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoliciesByCreator(ctx context.Context, in *QueryPoliciesByCreatorRequest, opts ...grpc.CallOption) (*QueryPoliciesByCreatorResponse, error) {
	out := new(QueryPoliciesByCreatorResponse)
	err := c.cc.Invoke(ctx, Query_PoliciesByCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActionDetailsById(ctx context.Context, in *QueryActionDetailsByIdRequest, opts ...grpc.CallOption) (*QueryActionDetailsByIdResponse, error) {
	out := new(QueryActionDetailsByIdResponse)
	err := c.cc.Invoke(ctx, Query_ActionDetailsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Actions items.
	Actions(context.Context, *QueryActionsRequest) (*QueryActionsResponse, error)
	// Queries a list of Policies items.
	Policies(context.Context, *QueryPoliciesRequest) (*QueryPoliciesResponse, error)
	// Queries a list of PolicyById items.
	PolicyById(context.Context, *QueryPolicyByIdRequest) (*QueryPolicyByIdResponse, error)
	// Queries a list of SignMethodsByAddress items.
	SignMethodsByAddress(context.Context, *QuerySignMethodsByAddressRequest) (*QuerySignMethodsByAddressResponse, error)
	// Queries a list of PoliciesByCreator items.
	PoliciesByCreator(context.Context, *QueryPoliciesByCreatorRequest) (*QueryPoliciesByCreatorResponse, error)
	// Queries a list of ActionDetailsById items.
	ActionDetailsById(context.Context, *QueryActionDetailsByIdRequest) (*QueryActionDetailsByIdResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Actions(context.Context, *QueryActionsRequest) (*QueryActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actions not implemented")
}
func (UnimplementedQueryServer) Policies(context.Context, *QueryPoliciesRequest) (*QueryPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Policies not implemented")
}
func (UnimplementedQueryServer) PolicyById(context.Context, *QueryPolicyByIdRequest) (*QueryPolicyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyById not implemented")
}
func (UnimplementedQueryServer) SignMethodsByAddress(context.Context, *QuerySignMethodsByAddressRequest) (*QuerySignMethodsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMethodsByAddress not implemented")
}
func (UnimplementedQueryServer) PoliciesByCreator(context.Context, *QueryPoliciesByCreatorRequest) (*QueryPoliciesByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoliciesByCreator not implemented")
}
func (UnimplementedQueryServer) ActionDetailsById(context.Context, *QueryActionDetailsByIdRequest) (*QueryActionDetailsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionDetailsById not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Actions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Actions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Actions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Actions(ctx, req.(*QueryActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Policies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Policies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Policies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Policies(ctx, req.(*QueryPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PolicyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPolicyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PolicyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PolicyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PolicyById(ctx, req.(*QueryPolicyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignMethodsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignMethodsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignMethodsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignMethodsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignMethodsByAddress(ctx, req.(*QuerySignMethodsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoliciesByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoliciesByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoliciesByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoliciesByCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoliciesByCreator(ctx, req.(*QueryPoliciesByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActionDetailsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActionDetailsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActionDetailsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActionDetailsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActionDetailsById(ctx, req.(*QueryActionDetailsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.policy.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Actions",
			Handler:    _Query_Actions_Handler,
		},
		{
			MethodName: "Policies",
			Handler:    _Query_Policies_Handler,
		},
		{
			MethodName: "PolicyById",
			Handler:    _Query_PolicyById_Handler,
		},
		{
			MethodName: "SignMethodsByAddress",
			Handler:    _Query_SignMethodsByAddress_Handler,
		},
		{
			MethodName: "PoliciesByCreator",
			Handler:    _Query_PoliciesByCreator_Handler,
		},
		{
			MethodName: "ActionDetailsById",
			Handler:    _Query_ActionDetailsById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/policy/query.proto",
}
