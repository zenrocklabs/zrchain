// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: zrchain/policy/tx.proto

package policy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_UpdateParams_FullMethodName     = "/zrchain.policy.Msg/UpdateParams"
	Msg_NewPolicy_FullMethodName        = "/zrchain.policy.Msg/NewPolicy"
	Msg_RevokeAction_FullMethodName     = "/zrchain.policy.Msg/RevokeAction"
	Msg_ApproveAction_FullMethodName    = "/zrchain.policy.Msg/ApproveAction"
	Msg_AddSignMethod_FullMethodName    = "/zrchain.policy.Msg/AddSignMethod"
	Msg_RemoveSignMethod_FullMethodName = "/zrchain.policy.Msg/RemoveSignMethod"
	Msg_AddMultiGrant_FullMethodName    = "/zrchain.policy.Msg/AddMultiGrant"
	Msg_RemoveMultiGrant_FullMethodName = "/zrchain.policy.Msg/RemoveMultiGrant"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the Msg service.
type MsgClient interface {
	// UpdateParams defines the operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// NewPolicy defines the operation for creating a new policy.
	NewPolicy(ctx context.Context, in *MsgNewPolicy, opts ...grpc.CallOption) (*MsgNewPolicyResponse, error)
	// RevokeAction defines the operation for revoking an action.
	RevokeAction(ctx context.Context, in *MsgRevokeAction, opts ...grpc.CallOption) (*MsgRevokeActionResponse, error)
	// ApproveAction defines the operation for approving an action.
	ApproveAction(ctx context.Context, in *MsgApproveAction, opts ...grpc.CallOption) (*MsgApproveActionResponse, error)
	// AddSignMethod defines the operation for adding a sign method.
	AddSignMethod(ctx context.Context, in *MsgAddSignMethod, opts ...grpc.CallOption) (*MsgAddSignMethodResponse, error)
	// RemoveSignMethod defines the operation for removing a sign method.
	RemoveSignMethod(ctx context.Context, in *MsgRemoveSignMethod, opts ...grpc.CallOption) (*MsgRemoveSignMethodResponse, error)
	// AddMultiGrant defines the operation for adding multiple grants
	AddMultiGrant(ctx context.Context, in *MsgAddMultiGrant, opts ...grpc.CallOption) (*MsgAddMultiGrantResponse, error)
	// RemoveMultiGrant defines the operation for removing multiple grants
	RemoveMultiGrant(ctx context.Context, in *MsgRemoveMultiGrant, opts ...grpc.CallOption) (*MsgRemoveMultiGrantResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewPolicy(ctx context.Context, in *MsgNewPolicy, opts ...grpc.CallOption) (*MsgNewPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgNewPolicyResponse)
	err := c.cc.Invoke(ctx, Msg_NewPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeAction(ctx context.Context, in *MsgRevokeAction, opts ...grpc.CallOption) (*MsgRevokeActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRevokeActionResponse)
	err := c.cc.Invoke(ctx, Msg_RevokeAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveAction(ctx context.Context, in *MsgApproveAction, opts ...grpc.CallOption) (*MsgApproveActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgApproveActionResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddSignMethod(ctx context.Context, in *MsgAddSignMethod, opts ...grpc.CallOption) (*MsgAddSignMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAddSignMethodResponse)
	err := c.cc.Invoke(ctx, Msg_AddSignMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveSignMethod(ctx context.Context, in *MsgRemoveSignMethod, opts ...grpc.CallOption) (*MsgRemoveSignMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveSignMethodResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveSignMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMultiGrant(ctx context.Context, in *MsgAddMultiGrant, opts ...grpc.CallOption) (*MsgAddMultiGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAddMultiGrantResponse)
	err := c.cc.Invoke(ctx, Msg_AddMultiGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveMultiGrant(ctx context.Context, in *MsgRemoveMultiGrant, opts ...grpc.CallOption) (*MsgRemoveMultiGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveMultiGrantResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveMultiGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the Msg service.
type MsgServer interface {
	// UpdateParams defines the operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// NewPolicy defines the operation for creating a new policy.
	NewPolicy(context.Context, *MsgNewPolicy) (*MsgNewPolicyResponse, error)
	// RevokeAction defines the operation for revoking an action.
	RevokeAction(context.Context, *MsgRevokeAction) (*MsgRevokeActionResponse, error)
	// ApproveAction defines the operation for approving an action.
	ApproveAction(context.Context, *MsgApproveAction) (*MsgApproveActionResponse, error)
	// AddSignMethod defines the operation for adding a sign method.
	AddSignMethod(context.Context, *MsgAddSignMethod) (*MsgAddSignMethodResponse, error)
	// RemoveSignMethod defines the operation for removing a sign method.
	RemoveSignMethod(context.Context, *MsgRemoveSignMethod) (*MsgRemoveSignMethodResponse, error)
	// AddMultiGrant defines the operation for adding multiple grants
	AddMultiGrant(context.Context, *MsgAddMultiGrant) (*MsgAddMultiGrantResponse, error)
	// RemoveMultiGrant defines the operation for removing multiple grants
	RemoveMultiGrant(context.Context, *MsgRemoveMultiGrant) (*MsgRemoveMultiGrantResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) NewPolicy(context.Context, *MsgNewPolicy) (*MsgNewPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPolicy not implemented")
}
func (UnimplementedMsgServer) RevokeAction(context.Context, *MsgRevokeAction) (*MsgRevokeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAction not implemented")
}
func (UnimplementedMsgServer) ApproveAction(context.Context, *MsgApproveAction) (*MsgApproveActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAction not implemented")
}
func (UnimplementedMsgServer) AddSignMethod(context.Context, *MsgAddSignMethod) (*MsgAddSignMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSignMethod not implemented")
}
func (UnimplementedMsgServer) RemoveSignMethod(context.Context, *MsgRemoveSignMethod) (*MsgRemoveSignMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSignMethod not implemented")
}
func (UnimplementedMsgServer) AddMultiGrant(context.Context, *MsgAddMultiGrant) (*MsgAddMultiGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiGrant not implemented")
}
func (UnimplementedMsgServer) RemoveMultiGrant(context.Context, *MsgRemoveMultiGrant) (*MsgRemoveMultiGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiGrant not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_NewPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewPolicy(ctx, req.(*MsgNewPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RevokeAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeAction(ctx, req.(*MsgRevokeAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveAction(ctx, req.(*MsgApproveAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddSignMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddSignMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddSignMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddSignMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddSignMethod(ctx, req.(*MsgAddSignMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveSignMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveSignMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveSignMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveSignMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveSignMethod(ctx, req.(*MsgRemoveSignMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMultiGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMultiGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMultiGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddMultiGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMultiGrant(ctx, req.(*MsgAddMultiGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveMultiGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMultiGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveMultiGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveMultiGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveMultiGrant(ctx, req.(*MsgRemoveMultiGrant))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.policy.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "NewPolicy",
			Handler:    _Msg_NewPolicy_Handler,
		},
		{
			MethodName: "RevokeAction",
			Handler:    _Msg_RevokeAction_Handler,
		},
		{
			MethodName: "ApproveAction",
			Handler:    _Msg_ApproveAction_Handler,
		},
		{
			MethodName: "AddSignMethod",
			Handler:    _Msg_AddSignMethod_Handler,
		},
		{
			MethodName: "RemoveSignMethod",
			Handler:    _Msg_RemoveSignMethod_Handler,
		},
		{
			MethodName: "AddMultiGrant",
			Handler:    _Msg_AddMultiGrant_Handler,
		},
		{
			MethodName: "RemoveMultiGrant",
			Handler:    _Msg_RemoveMultiGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/policy/tx.proto",
}
