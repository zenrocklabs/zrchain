// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package validation

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	api "github.com/Zenrock-Foundation/zrchain/v6/api/api"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	zenbtc "github.com/zenrocklabs/zenbtc/api/zrchain/zenbtc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_GenesisState_3_list)(nil)

type _GenesisState_3_list struct {
	list *[]*LastValidatorPower
}

func (x *_GenesisState_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LastValidatorPower)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LastValidatorPower)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_3_list) AppendMutable() protoreflect.Value {
	v := new(LastValidatorPower)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_3_list) NewElement() protoreflect.Value {
	v := new(LastValidatorPower)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*ValidatorHV
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidatorHV)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidatorHV)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(ValidatorHV)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(ValidatorHV)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*Delegation
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Delegation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Delegation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(Delegation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(Delegation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*UnbondingDelegation
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UnbondingDelegation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UnbondingDelegation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(UnbondingDelegation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(UnbondingDelegation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_7_list)(nil)

type _GenesisState_7_list struct {
	list *[]*Redelegation
}

func (x *_GenesisState_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Redelegation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Redelegation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_7_list) AppendMutable() protoreflect.Value {
	v := new(Redelegation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_7_list) NewElement() protoreflect.Value {
	v := new(Redelegation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_10_list)(nil)

type _GenesisState_10_list struct {
	list *[]*AssetData
}

func (x *_GenesisState_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AssetData)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AssetData)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_10_list) AppendMutable() protoreflect.Value {
	v := new(AssetData)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_10_list) NewElement() protoreflect.Value {
	v := new(AssetData)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_12_list)(nil)

type _GenesisState_12_list struct {
	list *[]*SlashEvent
}

func (x *_GenesisState_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SlashEvent)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SlashEvent)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_12_list) AppendMutable() protoreflect.Value {
	v := new(SlashEvent)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_12_list) NewElement() protoreflect.Value {
	v := new(SlashEvent)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_14_list)(nil)

type _GenesisState_14_list struct {
	list *[]*ValidationInfo
}

func (x *_GenesisState_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidationInfo)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidationInfo)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_14_list) AppendMutable() protoreflect.Value {
	v := new(ValidationInfo)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_14_list) NewElement() protoreflect.Value {
	v := new(ValidationInfo)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_15_list)(nil)

type _GenesisState_15_list struct {
	list *[]*api.BTCBlockHeader
}

func (x *_GenesisState_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*api.BTCBlockHeader)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*api.BTCBlockHeader)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_15_list) AppendMutable() protoreflect.Value {
	v := new(api.BTCBlockHeader)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_15_list) NewElement() protoreflect.Value {
	v := new(api.BTCBlockHeader)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_15_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_16_list)(nil)

type _GenesisState_16_list struct {
	list *[]*SolanaNonce
}

func (x *_GenesisState_16_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_16_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_16_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SolanaNonce)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_16_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SolanaNonce)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_16_list) AppendMutable() protoreflect.Value {
	v := new(SolanaNonce)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_16_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_16_list) NewElement() protoreflect.Value {
	v := new(SolanaNonce)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_16_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_18_list)(nil)

type _GenesisState_18_list struct {
	list *[]*zenbtc.NonceData
}

func (x *_GenesisState_18_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_18_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_18_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*zenbtc.NonceData)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_18_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*zenbtc.NonceData)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_18_list) AppendMutable() protoreflect.Value {
	v := new(zenbtc.NonceData)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_18_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_18_list) NewElement() protoreflect.Value {
	v := new(zenbtc.NonceData)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_18_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_19_list)(nil)

type _GenesisState_19_list struct {
	list *[]*zenbtc.RequestedBitcoinHeaders
}

func (x *_GenesisState_19_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_19_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_19_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*zenbtc.RequestedBitcoinHeaders)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_19_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*zenbtc.RequestedBitcoinHeaders)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_19_list) AppendMutable() protoreflect.Value {
	v := new(zenbtc.RequestedBitcoinHeaders)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_19_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_19_list) NewElement() protoreflect.Value {
	v := new(zenbtc.RequestedBitcoinHeaders)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_19_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_20_list)(nil)

type _GenesisState_20_list struct {
	list *[]string
}

func (x *_GenesisState_20_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_20_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_GenesisState_20_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_20_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_20_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message GenesisState at list field AvsRewardsPool as it is not of Message kind"))
}

func (x *_GenesisState_20_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_20_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_GenesisState_20_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_21_list)(nil)

type _GenesisState_21_list struct {
	list *[]uint64
}

func (x *_GenesisState_21_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_21_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_GenesisState_21_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_21_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_21_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message GenesisState at list field EthereumNonceRequested as it is not of Message kind"))
}

func (x *_GenesisState_21_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_21_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_GenesisState_21_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_22_list)(nil)

type _GenesisState_22_list struct {
	list *[]uint64
}

func (x *_GenesisState_22_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_22_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_GenesisState_22_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_22_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_22_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message GenesisState at list field SolanaNonceRequested as it is not of Message kind"))
}

func (x *_GenesisState_22_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_22_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_GenesisState_22_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_23_list)(nil)

type _GenesisState_23_list struct {
	list *[]string
}

func (x *_GenesisState_23_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_23_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_GenesisState_23_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_23_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_23_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message GenesisState at list field SolanaZentpAccountsRequested as it is not of Message kind"))
}

func (x *_GenesisState_23_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_23_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_GenesisState_23_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_24_list)(nil)

type _GenesisState_24_list struct {
	list *[]string
}

func (x *_GenesisState_24_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_24_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_GenesisState_24_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_24_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_24_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message GenesisState at list field SolanaAccountsRequested as it is not of Message kind"))
}

func (x *_GenesisState_24_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_24_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_GenesisState_24_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                                      protoreflect.MessageDescriptor
	fd_GenesisState_params                               protoreflect.FieldDescriptor
	fd_GenesisState_last_total_power                     protoreflect.FieldDescriptor
	fd_GenesisState_last_validator_powers                protoreflect.FieldDescriptor
	fd_GenesisState_validators                           protoreflect.FieldDescriptor
	fd_GenesisState_delegations                          protoreflect.FieldDescriptor
	fd_GenesisState_unbonding_delegations                protoreflect.FieldDescriptor
	fd_GenesisState_redelegations                        protoreflect.FieldDescriptor
	fd_GenesisState_exported                             protoreflect.FieldDescriptor
	fd_GenesisState_HVParams                             protoreflect.FieldDescriptor
	fd_GenesisState_asset_prices                         protoreflect.FieldDescriptor
	fd_GenesisState_last_valid_ve_height                 protoreflect.FieldDescriptor
	fd_GenesisState_slash_events                         protoreflect.FieldDescriptor
	fd_GenesisState_slash_event_count                    protoreflect.FieldDescriptor
	fd_GenesisState_validation_infos                     protoreflect.FieldDescriptor
	fd_GenesisState_btc_block_headers                    protoreflect.FieldDescriptor
	fd_GenesisState_last_used_solana_nonce               protoreflect.FieldDescriptor
	fd_GenesisState_backfill_request                     protoreflect.FieldDescriptor
	fd_GenesisState_last_used_ethereum_nonce             protoreflect.FieldDescriptor
	fd_GenesisState_requested_historical_bitcoin_headers protoreflect.FieldDescriptor
	fd_GenesisState_avs_rewards_pool                     protoreflect.FieldDescriptor
	fd_GenesisState_ethereum_nonce_requested             protoreflect.FieldDescriptor
	fd_GenesisState_solana_nonce_requested               protoreflect.FieldDescriptor
	fd_GenesisState_solana_zentp_accounts_requested      protoreflect.FieldDescriptor
	fd_GenesisState_solana_accounts_requested            protoreflect.FieldDescriptor
	fd_GenesisState_last_completed_zentp_mint_id         protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_genesis_proto_init()
	md_GenesisState = File_zrchain_validation_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_last_total_power = md_GenesisState.Fields().ByName("last_total_power")
	fd_GenesisState_last_validator_powers = md_GenesisState.Fields().ByName("last_validator_powers")
	fd_GenesisState_validators = md_GenesisState.Fields().ByName("validators")
	fd_GenesisState_delegations = md_GenesisState.Fields().ByName("delegations")
	fd_GenesisState_unbonding_delegations = md_GenesisState.Fields().ByName("unbonding_delegations")
	fd_GenesisState_redelegations = md_GenesisState.Fields().ByName("redelegations")
	fd_GenesisState_exported = md_GenesisState.Fields().ByName("exported")
	fd_GenesisState_HVParams = md_GenesisState.Fields().ByName("HVParams")
	fd_GenesisState_asset_prices = md_GenesisState.Fields().ByName("asset_prices")
	fd_GenesisState_last_valid_ve_height = md_GenesisState.Fields().ByName("last_valid_ve_height")
	fd_GenesisState_slash_events = md_GenesisState.Fields().ByName("slash_events")
	fd_GenesisState_slash_event_count = md_GenesisState.Fields().ByName("slash_event_count")
	fd_GenesisState_validation_infos = md_GenesisState.Fields().ByName("validation_infos")
	fd_GenesisState_btc_block_headers = md_GenesisState.Fields().ByName("btc_block_headers")
	fd_GenesisState_last_used_solana_nonce = md_GenesisState.Fields().ByName("last_used_solana_nonce")
	fd_GenesisState_backfill_request = md_GenesisState.Fields().ByName("backfill_request")
	fd_GenesisState_last_used_ethereum_nonce = md_GenesisState.Fields().ByName("last_used_ethereum_nonce")
	fd_GenesisState_requested_historical_bitcoin_headers = md_GenesisState.Fields().ByName("requested_historical_bitcoin_headers")
	fd_GenesisState_avs_rewards_pool = md_GenesisState.Fields().ByName("avs_rewards_pool")
	fd_GenesisState_ethereum_nonce_requested = md_GenesisState.Fields().ByName("ethereum_nonce_requested")
	fd_GenesisState_solana_nonce_requested = md_GenesisState.Fields().ByName("solana_nonce_requested")
	fd_GenesisState_solana_zentp_accounts_requested = md_GenesisState.Fields().ByName("solana_zentp_accounts_requested")
	fd_GenesisState_solana_accounts_requested = md_GenesisState.Fields().ByName("solana_accounts_requested")
	fd_GenesisState_last_completed_zentp_mint_id = md_GenesisState.Fields().ByName("last_completed_zentp_mint_id")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if len(x.LastTotalPower) != 0 {
		value := protoreflect.ValueOfBytes(x.LastTotalPower)
		if !f(fd_GenesisState_last_total_power, value) {
			return
		}
	}
	if len(x.LastValidatorPowers) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_3_list{list: &x.LastValidatorPowers})
		if !f(fd_GenesisState_last_validator_powers, value) {
			return
		}
	}
	if len(x.Validators) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.Validators})
		if !f(fd_GenesisState_validators, value) {
			return
		}
	}
	if len(x.Delegations) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.Delegations})
		if !f(fd_GenesisState_delegations, value) {
			return
		}
	}
	if len(x.UnbondingDelegations) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.UnbondingDelegations})
		if !f(fd_GenesisState_unbonding_delegations, value) {
			return
		}
	}
	if len(x.Redelegations) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_7_list{list: &x.Redelegations})
		if !f(fd_GenesisState_redelegations, value) {
			return
		}
	}
	if x.Exported != false {
		value := protoreflect.ValueOfBool(x.Exported)
		if !f(fd_GenesisState_exported, value) {
			return
		}
	}
	if x.HVParams != nil {
		value := protoreflect.ValueOfMessage(x.HVParams.ProtoReflect())
		if !f(fd_GenesisState_HVParams, value) {
			return
		}
	}
	if len(x.AssetPrices) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_10_list{list: &x.AssetPrices})
		if !f(fd_GenesisState_asset_prices, value) {
			return
		}
	}
	if x.LastValidVeHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastValidVeHeight)
		if !f(fd_GenesisState_last_valid_ve_height, value) {
			return
		}
	}
	if len(x.SlashEvents) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_12_list{list: &x.SlashEvents})
		if !f(fd_GenesisState_slash_events, value) {
			return
		}
	}
	if x.SlashEventCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SlashEventCount)
		if !f(fd_GenesisState_slash_event_count, value) {
			return
		}
	}
	if len(x.ValidationInfos) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_14_list{list: &x.ValidationInfos})
		if !f(fd_GenesisState_validation_infos, value) {
			return
		}
	}
	if len(x.BtcBlockHeaders) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_15_list{list: &x.BtcBlockHeaders})
		if !f(fd_GenesisState_btc_block_headers, value) {
			return
		}
	}
	if len(x.LastUsedSolanaNonce) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_16_list{list: &x.LastUsedSolanaNonce})
		if !f(fd_GenesisState_last_used_solana_nonce, value) {
			return
		}
	}
	if x.BackfillRequest != nil {
		value := protoreflect.ValueOfMessage(x.BackfillRequest.ProtoReflect())
		if !f(fd_GenesisState_backfill_request, value) {
			return
		}
	}
	if len(x.LastUsedEthereumNonce) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_18_list{list: &x.LastUsedEthereumNonce})
		if !f(fd_GenesisState_last_used_ethereum_nonce, value) {
			return
		}
	}
	if len(x.RequestedHistoricalBitcoinHeaders) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_19_list{list: &x.RequestedHistoricalBitcoinHeaders})
		if !f(fd_GenesisState_requested_historical_bitcoin_headers, value) {
			return
		}
	}
	if len(x.AvsRewardsPool) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_20_list{list: &x.AvsRewardsPool})
		if !f(fd_GenesisState_avs_rewards_pool, value) {
			return
		}
	}
	if len(x.EthereumNonceRequested) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_21_list{list: &x.EthereumNonceRequested})
		if !f(fd_GenesisState_ethereum_nonce_requested, value) {
			return
		}
	}
	if len(x.SolanaNonceRequested) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_22_list{list: &x.SolanaNonceRequested})
		if !f(fd_GenesisState_solana_nonce_requested, value) {
			return
		}
	}
	if len(x.SolanaZentpAccountsRequested) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_23_list{list: &x.SolanaZentpAccountsRequested})
		if !f(fd_GenesisState_solana_zentp_accounts_requested, value) {
			return
		}
	}
	if len(x.SolanaAccountsRequested) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_24_list{list: &x.SolanaAccountsRequested})
		if !f(fd_GenesisState_solana_accounts_requested, value) {
			return
		}
	}
	if x.LastCompletedZentpMintId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastCompletedZentpMintId)
		if !f(fd_GenesisState_last_completed_zentp_mint_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.GenesisState.params":
		return x.Params != nil
	case "zrchain.validation.GenesisState.last_total_power":
		return len(x.LastTotalPower) != 0
	case "zrchain.validation.GenesisState.last_validator_powers":
		return len(x.LastValidatorPowers) != 0
	case "zrchain.validation.GenesisState.validators":
		return len(x.Validators) != 0
	case "zrchain.validation.GenesisState.delegations":
		return len(x.Delegations) != 0
	case "zrchain.validation.GenesisState.unbonding_delegations":
		return len(x.UnbondingDelegations) != 0
	case "zrchain.validation.GenesisState.redelegations":
		return len(x.Redelegations) != 0
	case "zrchain.validation.GenesisState.exported":
		return x.Exported != false
	case "zrchain.validation.GenesisState.HVParams":
		return x.HVParams != nil
	case "zrchain.validation.GenesisState.asset_prices":
		return len(x.AssetPrices) != 0
	case "zrchain.validation.GenesisState.last_valid_ve_height":
		return x.LastValidVeHeight != int64(0)
	case "zrchain.validation.GenesisState.slash_events":
		return len(x.SlashEvents) != 0
	case "zrchain.validation.GenesisState.slash_event_count":
		return x.SlashEventCount != uint64(0)
	case "zrchain.validation.GenesisState.validation_infos":
		return len(x.ValidationInfos) != 0
	case "zrchain.validation.GenesisState.btc_block_headers":
		return len(x.BtcBlockHeaders) != 0
	case "zrchain.validation.GenesisState.last_used_solana_nonce":
		return len(x.LastUsedSolanaNonce) != 0
	case "zrchain.validation.GenesisState.backfill_request":
		return x.BackfillRequest != nil
	case "zrchain.validation.GenesisState.last_used_ethereum_nonce":
		return len(x.LastUsedEthereumNonce) != 0
	case "zrchain.validation.GenesisState.requested_historical_bitcoin_headers":
		return len(x.RequestedHistoricalBitcoinHeaders) != 0
	case "zrchain.validation.GenesisState.avs_rewards_pool":
		return len(x.AvsRewardsPool) != 0
	case "zrchain.validation.GenesisState.ethereum_nonce_requested":
		return len(x.EthereumNonceRequested) != 0
	case "zrchain.validation.GenesisState.solana_nonce_requested":
		return len(x.SolanaNonceRequested) != 0
	case "zrchain.validation.GenesisState.solana_zentp_accounts_requested":
		return len(x.SolanaZentpAccountsRequested) != 0
	case "zrchain.validation.GenesisState.solana_accounts_requested":
		return len(x.SolanaAccountsRequested) != 0
	case "zrchain.validation.GenesisState.last_completed_zentp_mint_id":
		return x.LastCompletedZentpMintId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.validation.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.GenesisState.params":
		x.Params = nil
	case "zrchain.validation.GenesisState.last_total_power":
		x.LastTotalPower = nil
	case "zrchain.validation.GenesisState.last_validator_powers":
		x.LastValidatorPowers = nil
	case "zrchain.validation.GenesisState.validators":
		x.Validators = nil
	case "zrchain.validation.GenesisState.delegations":
		x.Delegations = nil
	case "zrchain.validation.GenesisState.unbonding_delegations":
		x.UnbondingDelegations = nil
	case "zrchain.validation.GenesisState.redelegations":
		x.Redelegations = nil
	case "zrchain.validation.GenesisState.exported":
		x.Exported = false
	case "zrchain.validation.GenesisState.HVParams":
		x.HVParams = nil
	case "zrchain.validation.GenesisState.asset_prices":
		x.AssetPrices = nil
	case "zrchain.validation.GenesisState.last_valid_ve_height":
		x.LastValidVeHeight = int64(0)
	case "zrchain.validation.GenesisState.slash_events":
		x.SlashEvents = nil
	case "zrchain.validation.GenesisState.slash_event_count":
		x.SlashEventCount = uint64(0)
	case "zrchain.validation.GenesisState.validation_infos":
		x.ValidationInfos = nil
	case "zrchain.validation.GenesisState.btc_block_headers":
		x.BtcBlockHeaders = nil
	case "zrchain.validation.GenesisState.last_used_solana_nonce":
		x.LastUsedSolanaNonce = nil
	case "zrchain.validation.GenesisState.backfill_request":
		x.BackfillRequest = nil
	case "zrchain.validation.GenesisState.last_used_ethereum_nonce":
		x.LastUsedEthereumNonce = nil
	case "zrchain.validation.GenesisState.requested_historical_bitcoin_headers":
		x.RequestedHistoricalBitcoinHeaders = nil
	case "zrchain.validation.GenesisState.avs_rewards_pool":
		x.AvsRewardsPool = nil
	case "zrchain.validation.GenesisState.ethereum_nonce_requested":
		x.EthereumNonceRequested = nil
	case "zrchain.validation.GenesisState.solana_nonce_requested":
		x.SolanaNonceRequested = nil
	case "zrchain.validation.GenesisState.solana_zentp_accounts_requested":
		x.SolanaZentpAccountsRequested = nil
	case "zrchain.validation.GenesisState.solana_accounts_requested":
		x.SolanaAccountsRequested = nil
	case "zrchain.validation.GenesisState.last_completed_zentp_mint_id":
		x.LastCompletedZentpMintId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.validation.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.GenesisState.last_total_power":
		value := x.LastTotalPower
		return protoreflect.ValueOfBytes(value)
	case "zrchain.validation.GenesisState.last_validator_powers":
		if len(x.LastValidatorPowers) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_3_list{})
		}
		listValue := &_GenesisState_3_list{list: &x.LastValidatorPowers}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.validators":
		if len(x.Validators) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.Validators}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.delegations":
		if len(x.Delegations) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.Delegations}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.unbonding_delegations":
		if len(x.UnbondingDelegations) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.UnbondingDelegations}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.redelegations":
		if len(x.Redelegations) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_7_list{})
		}
		listValue := &_GenesisState_7_list{list: &x.Redelegations}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.exported":
		value := x.Exported
		return protoreflect.ValueOfBool(value)
	case "zrchain.validation.GenesisState.HVParams":
		value := x.HVParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.GenesisState.asset_prices":
		if len(x.AssetPrices) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_10_list{})
		}
		listValue := &_GenesisState_10_list{list: &x.AssetPrices}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.last_valid_ve_height":
		value := x.LastValidVeHeight
		return protoreflect.ValueOfInt64(value)
	case "zrchain.validation.GenesisState.slash_events":
		if len(x.SlashEvents) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_12_list{})
		}
		listValue := &_GenesisState_12_list{list: &x.SlashEvents}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.slash_event_count":
		value := x.SlashEventCount
		return protoreflect.ValueOfUint64(value)
	case "zrchain.validation.GenesisState.validation_infos":
		if len(x.ValidationInfos) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_14_list{})
		}
		listValue := &_GenesisState_14_list{list: &x.ValidationInfos}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.btc_block_headers":
		if len(x.BtcBlockHeaders) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_15_list{})
		}
		listValue := &_GenesisState_15_list{list: &x.BtcBlockHeaders}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.last_used_solana_nonce":
		if len(x.LastUsedSolanaNonce) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_16_list{})
		}
		listValue := &_GenesisState_16_list{list: &x.LastUsedSolanaNonce}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.backfill_request":
		value := x.BackfillRequest
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.GenesisState.last_used_ethereum_nonce":
		if len(x.LastUsedEthereumNonce) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_18_list{})
		}
		listValue := &_GenesisState_18_list{list: &x.LastUsedEthereumNonce}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.requested_historical_bitcoin_headers":
		if len(x.RequestedHistoricalBitcoinHeaders) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_19_list{})
		}
		listValue := &_GenesisState_19_list{list: &x.RequestedHistoricalBitcoinHeaders}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.avs_rewards_pool":
		if len(x.AvsRewardsPool) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_20_list{})
		}
		listValue := &_GenesisState_20_list{list: &x.AvsRewardsPool}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.ethereum_nonce_requested":
		if len(x.EthereumNonceRequested) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_21_list{})
		}
		listValue := &_GenesisState_21_list{list: &x.EthereumNonceRequested}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.solana_nonce_requested":
		if len(x.SolanaNonceRequested) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_22_list{})
		}
		listValue := &_GenesisState_22_list{list: &x.SolanaNonceRequested}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.solana_zentp_accounts_requested":
		if len(x.SolanaZentpAccountsRequested) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_23_list{})
		}
		listValue := &_GenesisState_23_list{list: &x.SolanaZentpAccountsRequested}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.solana_accounts_requested":
		if len(x.SolanaAccountsRequested) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_24_list{})
		}
		listValue := &_GenesisState_24_list{list: &x.SolanaAccountsRequested}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.GenesisState.last_completed_zentp_mint_id":
		value := x.LastCompletedZentpMintId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.validation.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "zrchain.validation.GenesisState.last_total_power":
		x.LastTotalPower = value.Bytes()
	case "zrchain.validation.GenesisState.last_validator_powers":
		lv := value.List()
		clv := lv.(*_GenesisState_3_list)
		x.LastValidatorPowers = *clv.list
	case "zrchain.validation.GenesisState.validators":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.Validators = *clv.list
	case "zrchain.validation.GenesisState.delegations":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.Delegations = *clv.list
	case "zrchain.validation.GenesisState.unbonding_delegations":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.UnbondingDelegations = *clv.list
	case "zrchain.validation.GenesisState.redelegations":
		lv := value.List()
		clv := lv.(*_GenesisState_7_list)
		x.Redelegations = *clv.list
	case "zrchain.validation.GenesisState.exported":
		x.Exported = value.Bool()
	case "zrchain.validation.GenesisState.HVParams":
		x.HVParams = value.Message().Interface().(*HVParams)
	case "zrchain.validation.GenesisState.asset_prices":
		lv := value.List()
		clv := lv.(*_GenesisState_10_list)
		x.AssetPrices = *clv.list
	case "zrchain.validation.GenesisState.last_valid_ve_height":
		x.LastValidVeHeight = value.Int()
	case "zrchain.validation.GenesisState.slash_events":
		lv := value.List()
		clv := lv.(*_GenesisState_12_list)
		x.SlashEvents = *clv.list
	case "zrchain.validation.GenesisState.slash_event_count":
		x.SlashEventCount = value.Uint()
	case "zrchain.validation.GenesisState.validation_infos":
		lv := value.List()
		clv := lv.(*_GenesisState_14_list)
		x.ValidationInfos = *clv.list
	case "zrchain.validation.GenesisState.btc_block_headers":
		lv := value.List()
		clv := lv.(*_GenesisState_15_list)
		x.BtcBlockHeaders = *clv.list
	case "zrchain.validation.GenesisState.last_used_solana_nonce":
		lv := value.List()
		clv := lv.(*_GenesisState_16_list)
		x.LastUsedSolanaNonce = *clv.list
	case "zrchain.validation.GenesisState.backfill_request":
		x.BackfillRequest = value.Message().Interface().(*BackfillRequests)
	case "zrchain.validation.GenesisState.last_used_ethereum_nonce":
		lv := value.List()
		clv := lv.(*_GenesisState_18_list)
		x.LastUsedEthereumNonce = *clv.list
	case "zrchain.validation.GenesisState.requested_historical_bitcoin_headers":
		lv := value.List()
		clv := lv.(*_GenesisState_19_list)
		x.RequestedHistoricalBitcoinHeaders = *clv.list
	case "zrchain.validation.GenesisState.avs_rewards_pool":
		lv := value.List()
		clv := lv.(*_GenesisState_20_list)
		x.AvsRewardsPool = *clv.list
	case "zrchain.validation.GenesisState.ethereum_nonce_requested":
		lv := value.List()
		clv := lv.(*_GenesisState_21_list)
		x.EthereumNonceRequested = *clv.list
	case "zrchain.validation.GenesisState.solana_nonce_requested":
		lv := value.List()
		clv := lv.(*_GenesisState_22_list)
		x.SolanaNonceRequested = *clv.list
	case "zrchain.validation.GenesisState.solana_zentp_accounts_requested":
		lv := value.List()
		clv := lv.(*_GenesisState_23_list)
		x.SolanaZentpAccountsRequested = *clv.list
	case "zrchain.validation.GenesisState.solana_accounts_requested":
		lv := value.List()
		clv := lv.(*_GenesisState_24_list)
		x.SolanaAccountsRequested = *clv.list
	case "zrchain.validation.GenesisState.last_completed_zentp_mint_id":
		x.LastCompletedZentpMintId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.validation.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "zrchain.validation.GenesisState.last_validator_powers":
		if x.LastValidatorPowers == nil {
			x.LastValidatorPowers = []*LastValidatorPower{}
		}
		value := &_GenesisState_3_list{list: &x.LastValidatorPowers}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.validators":
		if x.Validators == nil {
			x.Validators = []*ValidatorHV{}
		}
		value := &_GenesisState_4_list{list: &x.Validators}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.delegations":
		if x.Delegations == nil {
			x.Delegations = []*Delegation{}
		}
		value := &_GenesisState_5_list{list: &x.Delegations}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.unbonding_delegations":
		if x.UnbondingDelegations == nil {
			x.UnbondingDelegations = []*UnbondingDelegation{}
		}
		value := &_GenesisState_6_list{list: &x.UnbondingDelegations}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.redelegations":
		if x.Redelegations == nil {
			x.Redelegations = []*Redelegation{}
		}
		value := &_GenesisState_7_list{list: &x.Redelegations}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.HVParams":
		if x.HVParams == nil {
			x.HVParams = new(HVParams)
		}
		return protoreflect.ValueOfMessage(x.HVParams.ProtoReflect())
	case "zrchain.validation.GenesisState.asset_prices":
		if x.AssetPrices == nil {
			x.AssetPrices = []*AssetData{}
		}
		value := &_GenesisState_10_list{list: &x.AssetPrices}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.slash_events":
		if x.SlashEvents == nil {
			x.SlashEvents = []*SlashEvent{}
		}
		value := &_GenesisState_12_list{list: &x.SlashEvents}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.validation_infos":
		if x.ValidationInfos == nil {
			x.ValidationInfos = []*ValidationInfo{}
		}
		value := &_GenesisState_14_list{list: &x.ValidationInfos}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.btc_block_headers":
		if x.BtcBlockHeaders == nil {
			x.BtcBlockHeaders = []*api.BTCBlockHeader{}
		}
		value := &_GenesisState_15_list{list: &x.BtcBlockHeaders}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.last_used_solana_nonce":
		if x.LastUsedSolanaNonce == nil {
			x.LastUsedSolanaNonce = []*SolanaNonce{}
		}
		value := &_GenesisState_16_list{list: &x.LastUsedSolanaNonce}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.backfill_request":
		if x.BackfillRequest == nil {
			x.BackfillRequest = new(BackfillRequests)
		}
		return protoreflect.ValueOfMessage(x.BackfillRequest.ProtoReflect())
	case "zrchain.validation.GenesisState.last_used_ethereum_nonce":
		if x.LastUsedEthereumNonce == nil {
			x.LastUsedEthereumNonce = []*zenbtc.NonceData{}
		}
		value := &_GenesisState_18_list{list: &x.LastUsedEthereumNonce}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.requested_historical_bitcoin_headers":
		if x.RequestedHistoricalBitcoinHeaders == nil {
			x.RequestedHistoricalBitcoinHeaders = []*zenbtc.RequestedBitcoinHeaders{}
		}
		value := &_GenesisState_19_list{list: &x.RequestedHistoricalBitcoinHeaders}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.avs_rewards_pool":
		if x.AvsRewardsPool == nil {
			x.AvsRewardsPool = []string{}
		}
		value := &_GenesisState_20_list{list: &x.AvsRewardsPool}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.ethereum_nonce_requested":
		if x.EthereumNonceRequested == nil {
			x.EthereumNonceRequested = []uint64{}
		}
		value := &_GenesisState_21_list{list: &x.EthereumNonceRequested}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.solana_nonce_requested":
		if x.SolanaNonceRequested == nil {
			x.SolanaNonceRequested = []uint64{}
		}
		value := &_GenesisState_22_list{list: &x.SolanaNonceRequested}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.solana_zentp_accounts_requested":
		if x.SolanaZentpAccountsRequested == nil {
			x.SolanaZentpAccountsRequested = []string{}
		}
		value := &_GenesisState_23_list{list: &x.SolanaZentpAccountsRequested}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.solana_accounts_requested":
		if x.SolanaAccountsRequested == nil {
			x.SolanaAccountsRequested = []string{}
		}
		value := &_GenesisState_24_list{list: &x.SolanaAccountsRequested}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.GenesisState.last_total_power":
		panic(fmt.Errorf("field last_total_power of message zrchain.validation.GenesisState is not mutable"))
	case "zrchain.validation.GenesisState.exported":
		panic(fmt.Errorf("field exported of message zrchain.validation.GenesisState is not mutable"))
	case "zrchain.validation.GenesisState.last_valid_ve_height":
		panic(fmt.Errorf("field last_valid_ve_height of message zrchain.validation.GenesisState is not mutable"))
	case "zrchain.validation.GenesisState.slash_event_count":
		panic(fmt.Errorf("field slash_event_count of message zrchain.validation.GenesisState is not mutable"))
	case "zrchain.validation.GenesisState.last_completed_zentp_mint_id":
		panic(fmt.Errorf("field last_completed_zentp_mint_id of message zrchain.validation.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.validation.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.GenesisState.last_total_power":
		return protoreflect.ValueOfBytes(nil)
	case "zrchain.validation.GenesisState.last_validator_powers":
		list := []*LastValidatorPower{}
		return protoreflect.ValueOfList(&_GenesisState_3_list{list: &list})
	case "zrchain.validation.GenesisState.validators":
		list := []*ValidatorHV{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "zrchain.validation.GenesisState.delegations":
		list := []*Delegation{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	case "zrchain.validation.GenesisState.unbonding_delegations":
		list := []*UnbondingDelegation{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "zrchain.validation.GenesisState.redelegations":
		list := []*Redelegation{}
		return protoreflect.ValueOfList(&_GenesisState_7_list{list: &list})
	case "zrchain.validation.GenesisState.exported":
		return protoreflect.ValueOfBool(false)
	case "zrchain.validation.GenesisState.HVParams":
		m := new(HVParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.GenesisState.asset_prices":
		list := []*AssetData{}
		return protoreflect.ValueOfList(&_GenesisState_10_list{list: &list})
	case "zrchain.validation.GenesisState.last_valid_ve_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.validation.GenesisState.slash_events":
		list := []*SlashEvent{}
		return protoreflect.ValueOfList(&_GenesisState_12_list{list: &list})
	case "zrchain.validation.GenesisState.slash_event_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.validation.GenesisState.validation_infos":
		list := []*ValidationInfo{}
		return protoreflect.ValueOfList(&_GenesisState_14_list{list: &list})
	case "zrchain.validation.GenesisState.btc_block_headers":
		list := []*api.BTCBlockHeader{}
		return protoreflect.ValueOfList(&_GenesisState_15_list{list: &list})
	case "zrchain.validation.GenesisState.last_used_solana_nonce":
		list := []*SolanaNonce{}
		return protoreflect.ValueOfList(&_GenesisState_16_list{list: &list})
	case "zrchain.validation.GenesisState.backfill_request":
		m := new(BackfillRequests)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.GenesisState.last_used_ethereum_nonce":
		list := []*zenbtc.NonceData{}
		return protoreflect.ValueOfList(&_GenesisState_18_list{list: &list})
	case "zrchain.validation.GenesisState.requested_historical_bitcoin_headers":
		list := []*zenbtc.RequestedBitcoinHeaders{}
		return protoreflect.ValueOfList(&_GenesisState_19_list{list: &list})
	case "zrchain.validation.GenesisState.avs_rewards_pool":
		list := []string{}
		return protoreflect.ValueOfList(&_GenesisState_20_list{list: &list})
	case "zrchain.validation.GenesisState.ethereum_nonce_requested":
		list := []uint64{}
		return protoreflect.ValueOfList(&_GenesisState_21_list{list: &list})
	case "zrchain.validation.GenesisState.solana_nonce_requested":
		list := []uint64{}
		return protoreflect.ValueOfList(&_GenesisState_22_list{list: &list})
	case "zrchain.validation.GenesisState.solana_zentp_accounts_requested":
		list := []string{}
		return protoreflect.ValueOfList(&_GenesisState_23_list{list: &list})
	case "zrchain.validation.GenesisState.solana_accounts_requested":
		list := []string{}
		return protoreflect.ValueOfList(&_GenesisState_24_list{list: &list})
	case "zrchain.validation.GenesisState.last_completed_zentp_mint_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.validation.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LastTotalPower)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.LastValidatorPowers) > 0 {
			for _, e := range x.LastValidatorPowers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Validators) > 0 {
			for _, e := range x.Validators {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Delegations) > 0 {
			for _, e := range x.Delegations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.UnbondingDelegations) > 0 {
			for _, e := range x.UnbondingDelegations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Redelegations) > 0 {
			for _, e := range x.Redelegations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Exported {
			n += 2
		}
		if x.HVParams != nil {
			l = options.Size(x.HVParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AssetPrices) > 0 {
			for _, e := range x.AssetPrices {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.LastValidVeHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.LastValidVeHeight))
		}
		if len(x.SlashEvents) > 0 {
			for _, e := range x.SlashEvents {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.SlashEventCount != 0 {
			n += 1 + runtime.Sov(uint64(x.SlashEventCount))
		}
		if len(x.ValidationInfos) > 0 {
			for _, e := range x.ValidationInfos {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BtcBlockHeaders) > 0 {
			for _, e := range x.BtcBlockHeaders {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.LastUsedSolanaNonce) > 0 {
			for _, e := range x.LastUsedSolanaNonce {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.BackfillRequest != nil {
			l = options.Size(x.BackfillRequest)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.LastUsedEthereumNonce) > 0 {
			for _, e := range x.LastUsedEthereumNonce {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.RequestedHistoricalBitcoinHeaders) > 0 {
			for _, e := range x.RequestedHistoricalBitcoinHeaders {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AvsRewardsPool) > 0 {
			for _, s := range x.AvsRewardsPool {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.EthereumNonceRequested) > 0 {
			l = 0
			for _, e := range x.EthereumNonceRequested {
				l += runtime.Sov(uint64(e))
			}
			n += 2 + runtime.Sov(uint64(l)) + l
		}
		if len(x.SolanaNonceRequested) > 0 {
			l = 0
			for _, e := range x.SolanaNonceRequested {
				l += runtime.Sov(uint64(e))
			}
			n += 2 + runtime.Sov(uint64(l)) + l
		}
		if len(x.SolanaZentpAccountsRequested) > 0 {
			for _, s := range x.SolanaZentpAccountsRequested {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SolanaAccountsRequested) > 0 {
			for _, s := range x.SolanaAccountsRequested {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.LastCompletedZentpMintId != 0 {
			n += 2 + runtime.Sov(uint64(x.LastCompletedZentpMintId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastCompletedZentpMintId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastCompletedZentpMintId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if len(x.SolanaAccountsRequested) > 0 {
			for iNdEx := len(x.SolanaAccountsRequested) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SolanaAccountsRequested[iNdEx])
				copy(dAtA[i:], x.SolanaAccountsRequested[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SolanaAccountsRequested[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xc2
			}
		}
		if len(x.SolanaZentpAccountsRequested) > 0 {
			for iNdEx := len(x.SolanaZentpAccountsRequested) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SolanaZentpAccountsRequested[iNdEx])
				copy(dAtA[i:], x.SolanaZentpAccountsRequested[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SolanaZentpAccountsRequested[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.SolanaNonceRequested) > 0 {
			var pksize2 int
			for _, num := range x.SolanaNonceRequested {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.SolanaNonceRequested {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if len(x.EthereumNonceRequested) > 0 {
			var pksize4 int
			for _, num := range x.EthereumNonceRequested {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.EthereumNonceRequested {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if len(x.AvsRewardsPool) > 0 {
			for iNdEx := len(x.AvsRewardsPool) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.AvsRewardsPool[iNdEx])
				copy(dAtA[i:], x.AvsRewardsPool[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AvsRewardsPool[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xa2
			}
		}
		if len(x.RequestedHistoricalBitcoinHeaders) > 0 {
			for iNdEx := len(x.RequestedHistoricalBitcoinHeaders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RequestedHistoricalBitcoinHeaders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x9a
			}
		}
		if len(x.LastUsedEthereumNonce) > 0 {
			for iNdEx := len(x.LastUsedEthereumNonce) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LastUsedEthereumNonce[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x92
			}
		}
		if x.BackfillRequest != nil {
			encoded, err := options.Marshal(x.BackfillRequest)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.LastUsedSolanaNonce) > 0 {
			for iNdEx := len(x.LastUsedSolanaNonce) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LastUsedSolanaNonce[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x82
			}
		}
		if len(x.BtcBlockHeaders) > 0 {
			for iNdEx := len(x.BtcBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BtcBlockHeaders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.ValidationInfos) > 0 {
			for iNdEx := len(x.ValidationInfos) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ValidationInfos[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if x.SlashEventCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlashEventCount))
			i--
			dAtA[i] = 0x68
		}
		if len(x.SlashEvents) > 0 {
			for iNdEx := len(x.SlashEvents) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SlashEvents[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if x.LastValidVeHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastValidVeHeight))
			i--
			dAtA[i] = 0x58
		}
		if len(x.AssetPrices) > 0 {
			for iNdEx := len(x.AssetPrices) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AssetPrices[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.HVParams != nil {
			encoded, err := options.Marshal(x.HVParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Exported {
			i--
			if x.Exported {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if len(x.Redelegations) > 0 {
			for iNdEx := len(x.Redelegations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Redelegations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.UnbondingDelegations) > 0 {
			for iNdEx := len(x.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.UnbondingDelegations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.Delegations) > 0 {
			for iNdEx := len(x.Delegations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Delegations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.Validators) > 0 {
			for iNdEx := len(x.Validators) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Validators[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.LastValidatorPowers) > 0 {
			for iNdEx := len(x.LastValidatorPowers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LastValidatorPowers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.LastTotalPower) > 0 {
			i -= len(x.LastTotalPower)
			copy(dAtA[i:], x.LastTotalPower)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastTotalPower)))
			i--
			dAtA[i] = 0x12
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastTotalPower", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastTotalPower = append(x.LastTotalPower[:0], dAtA[iNdEx:postIndex]...)
				if x.LastTotalPower == nil {
					x.LastTotalPower = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastValidatorPowers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastValidatorPowers = append(x.LastValidatorPowers, &LastValidatorPower{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastValidatorPowers[len(x.LastValidatorPowers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validators = append(x.Validators, &ValidatorHV{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Validators[len(x.Validators)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Delegations = append(x.Delegations, &Delegation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Delegations[len(x.Delegations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnbondingDelegations = append(x.UnbondingDelegations, &UnbondingDelegation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnbondingDelegations[len(x.UnbondingDelegations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Redelegations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Redelegations = append(x.Redelegations, &Redelegation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Redelegations[len(x.Redelegations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Exported = bool(v != 0)
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HVParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.HVParams == nil {
					x.HVParams = &HVParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.HVParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetPrices", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AssetPrices = append(x.AssetPrices, &AssetData{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AssetPrices[len(x.AssetPrices)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastValidVeHeight", wireType)
				}
				x.LastValidVeHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastValidVeHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashEvents", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashEvents = append(x.SlashEvents, &SlashEvent{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SlashEvents[len(x.SlashEvents)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashEventCount", wireType)
				}
				x.SlashEventCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlashEventCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationInfos", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidationInfos = append(x.ValidationInfos, &ValidationInfo{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValidationInfos[len(x.ValidationInfos)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtcBlockHeaders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BtcBlockHeaders = append(x.BtcBlockHeaders, &api.BTCBlockHeader{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BtcBlockHeaders[len(x.BtcBlockHeaders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastUsedSolanaNonce", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastUsedSolanaNonce = append(x.LastUsedSolanaNonce, &SolanaNonce{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastUsedSolanaNonce[len(x.LastUsedSolanaNonce)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BackfillRequest", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BackfillRequest == nil {
					x.BackfillRequest = &BackfillRequests{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BackfillRequest); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastUsedEthereumNonce", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastUsedEthereumNonce = append(x.LastUsedEthereumNonce, &zenbtc.NonceData{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastUsedEthereumNonce[len(x.LastUsedEthereumNonce)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestedHistoricalBitcoinHeaders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestedHistoricalBitcoinHeaders = append(x.RequestedHistoricalBitcoinHeaders, &zenbtc.RequestedBitcoinHeaders{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RequestedHistoricalBitcoinHeaders[len(x.RequestedHistoricalBitcoinHeaders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvsRewardsPool", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AvsRewardsPool = append(x.AvsRewardsPool, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 21:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.EthereumNonceRequested = append(x.EthereumNonceRequested, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.EthereumNonceRequested) == 0 {
						x.EthereumNonceRequested = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.EthereumNonceRequested = append(x.EthereumNonceRequested, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EthereumNonceRequested", wireType)
				}
			case 22:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.SolanaNonceRequested = append(x.SolanaNonceRequested, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.SolanaNonceRequested) == 0 {
						x.SolanaNonceRequested = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.SolanaNonceRequested = append(x.SolanaNonceRequested, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SolanaNonceRequested", wireType)
				}
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SolanaZentpAccountsRequested", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SolanaZentpAccountsRequested = append(x.SolanaZentpAccountsRequested, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SolanaAccountsRequested", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SolanaAccountsRequested = append(x.SolanaAccountsRequested, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastCompletedZentpMintId", wireType)
				}
				x.LastCompletedZentpMintId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastCompletedZentpMintId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LastValidatorPower         protoreflect.MessageDescriptor
	fd_LastValidatorPower_address protoreflect.FieldDescriptor
	fd_LastValidatorPower_power   protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_genesis_proto_init()
	md_LastValidatorPower = File_zrchain_validation_genesis_proto.Messages().ByName("LastValidatorPower")
	fd_LastValidatorPower_address = md_LastValidatorPower.Fields().ByName("address")
	fd_LastValidatorPower_power = md_LastValidatorPower.Fields().ByName("power")
}

var _ protoreflect.Message = (*fastReflection_LastValidatorPower)(nil)

type fastReflection_LastValidatorPower LastValidatorPower

func (x *LastValidatorPower) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LastValidatorPower)(x)
}

func (x *LastValidatorPower) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LastValidatorPower_messageType fastReflection_LastValidatorPower_messageType
var _ protoreflect.MessageType = fastReflection_LastValidatorPower_messageType{}

type fastReflection_LastValidatorPower_messageType struct{}

func (x fastReflection_LastValidatorPower_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LastValidatorPower)(nil)
}
func (x fastReflection_LastValidatorPower_messageType) New() protoreflect.Message {
	return new(fastReflection_LastValidatorPower)
}
func (x fastReflection_LastValidatorPower_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LastValidatorPower
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LastValidatorPower) Descriptor() protoreflect.MessageDescriptor {
	return md_LastValidatorPower
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LastValidatorPower) Type() protoreflect.MessageType {
	return _fastReflection_LastValidatorPower_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LastValidatorPower) New() protoreflect.Message {
	return new(fastReflection_LastValidatorPower)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LastValidatorPower) Interface() protoreflect.ProtoMessage {
	return (*LastValidatorPower)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LastValidatorPower) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_LastValidatorPower_address, value) {
			return
		}
	}
	if x.Power != int64(0) {
		value := protoreflect.ValueOfInt64(x.Power)
		if !f(fd_LastValidatorPower_power, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LastValidatorPower) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.LastValidatorPower.address":
		return x.Address != ""
	case "zrchain.validation.LastValidatorPower.power":
		return x.Power != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.LastValidatorPower"))
		}
		panic(fmt.Errorf("message zrchain.validation.LastValidatorPower does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastValidatorPower) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.LastValidatorPower.address":
		x.Address = ""
	case "zrchain.validation.LastValidatorPower.power":
		x.Power = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.LastValidatorPower"))
		}
		panic(fmt.Errorf("message zrchain.validation.LastValidatorPower does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LastValidatorPower) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.LastValidatorPower.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.LastValidatorPower.power":
		value := x.Power
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.LastValidatorPower"))
		}
		panic(fmt.Errorf("message zrchain.validation.LastValidatorPower does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastValidatorPower) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.LastValidatorPower.address":
		x.Address = value.Interface().(string)
	case "zrchain.validation.LastValidatorPower.power":
		x.Power = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.LastValidatorPower"))
		}
		panic(fmt.Errorf("message zrchain.validation.LastValidatorPower does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastValidatorPower) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.LastValidatorPower.address":
		panic(fmt.Errorf("field address of message zrchain.validation.LastValidatorPower is not mutable"))
	case "zrchain.validation.LastValidatorPower.power":
		panic(fmt.Errorf("field power of message zrchain.validation.LastValidatorPower is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.LastValidatorPower"))
		}
		panic(fmt.Errorf("message zrchain.validation.LastValidatorPower does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LastValidatorPower) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.LastValidatorPower.address":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.LastValidatorPower.power":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.LastValidatorPower"))
		}
		panic(fmt.Errorf("message zrchain.validation.LastValidatorPower does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LastValidatorPower) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.LastValidatorPower", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LastValidatorPower) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastValidatorPower) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LastValidatorPower) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LastValidatorPower) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LastValidatorPower)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Power != 0 {
			n += 1 + runtime.Sov(uint64(x.Power))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LastValidatorPower)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Power != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Power))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LastValidatorPower)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LastValidatorPower: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LastValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
				}
				x.Power = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Power |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/validation/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the staking module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines all the parameters of related to deposit.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// last_total_power tracks the total amounts of bonded tokens recorded during
	// the previous end block.
	LastTotalPower []byte `protobuf:"bytes,2,opt,name=last_total_power,json=lastTotalPower,proto3" json:"last_total_power,omitempty"`
	// last_validator_powers is a special index that provides a historical list
	// of the last-block's bonded validators.
	LastValidatorPowers []*LastValidatorPower `protobuf:"bytes,3,rep,name=last_validator_powers,json=lastValidatorPowers,proto3" json:"last_validator_powers,omitempty"`
	// validators defines the validator set at genesis.
	Validators []*ValidatorHV `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators,omitempty"`
	// delegations defines the delegations active at genesis.
	Delegations []*Delegation `protobuf:"bytes,5,rep,name=delegations,proto3" json:"delegations,omitempty"`
	// unbonding_delegations defines the unbonding delegations active at genesis.
	UnbondingDelegations []*UnbondingDelegation `protobuf:"bytes,6,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations,omitempty"`
	// redelegations defines the redelegations active at genesis.
	Redelegations []*Redelegation `protobuf:"bytes,7,rep,name=redelegations,proto3" json:"redelegations,omitempty"`
	// exported defines a bool to identify whether the chain dealing with exported
	// or initialized genesis.
	Exported bool `protobuf:"varint,8,opt,name=exported,proto3" json:"exported,omitempty"`
	// HVParams defines the hybrid validation parameters at genesis.
	HVParams *HVParams `protobuf:"bytes,9,opt,name=HVParams,proto3" json:"HVParams,omitempty"`
	// asset_prices defines the asset prices at genesis.
	AssetPrices []*AssetData `protobuf:"bytes,10,rep,name=asset_prices,json=assetPrices,proto3" json:"asset_prices,omitempty"`
	// last_valid_ve_height defines the last valid ve height at genesis.
	LastValidVeHeight int64 `protobuf:"varint,11,opt,name=last_valid_ve_height,json=lastValidVeHeight,proto3" json:"last_valid_ve_height,omitempty"`
	// slash_events defines the slash events at genesis.
	SlashEvents []*SlashEvent `protobuf:"bytes,12,rep,name=slash_events,json=slashEvents,proto3" json:"slash_events,omitempty"`
	// slash_event_count defines the slash event count at genesis.
	SlashEventCount uint64 `protobuf:"varint,13,opt,name=slash_event_count,json=slashEventCount,proto3" json:"slash_event_count,omitempty"`
	// validation_infos defines the validation infos at genesis.
	ValidationInfos []*ValidationInfo `protobuf:"bytes,14,rep,name=validation_infos,json=validationInfos,proto3" json:"validation_infos,omitempty"`
	// btc_block_headers defines the Bitcoin block headers at genesis.
	BtcBlockHeaders []*api.BTCBlockHeader `protobuf:"bytes,15,rep,name=btc_block_headers,json=btcBlockHeaders,proto3" json:"btc_block_headers,omitempty"`
	// last_used_solana_nonce defines the last used Solana nonce at genesis.
	LastUsedSolanaNonce []*SolanaNonce `protobuf:"bytes,16,rep,name=last_used_solana_nonce,json=lastUsedSolanaNonce,proto3" json:"last_used_solana_nonce,omitempty"`
	// backfill_requests defines the backfill requests at genesis.
	BackfillRequest *BackfillRequests `protobuf:"bytes,17,opt,name=backfill_request,json=backfillRequest,proto3" json:"backfill_request,omitempty"`
	// last_used_ethereum_nonce defines the last used Ethereum nonce at genesis.
	LastUsedEthereumNonce []*zenbtc.NonceData `protobuf:"bytes,18,rep,name=last_used_ethereum_nonce,json=lastUsedEthereumNonce,proto3" json:"last_used_ethereum_nonce,omitempty"`
	// requested_historical_bitcoin_headers defines the requested historical Bitcoin headers at genesis.
	RequestedHistoricalBitcoinHeaders []*zenbtc.RequestedBitcoinHeaders `protobuf:"bytes,19,rep,name=requested_historical_bitcoin_headers,json=requestedHistoricalBitcoinHeaders,proto3" json:"requested_historical_bitcoin_headers,omitempty"`
	// avs_rewards_pool defines the AVS rewards pool at genesis.
	AvsRewardsPool []string `protobuf:"bytes,20,rep,name=avs_rewards_pool,json=avsRewardsPool,proto3" json:"avs_rewards_pool,omitempty"`
	// ethereum_nonce_requested defines the Ethereum nonce requested at genesis.
	EthereumNonceRequested []uint64 `protobuf:"varint,21,rep,packed,name=ethereum_nonce_requested,json=ethereumNonceRequested,proto3" json:"ethereum_nonce_requested,omitempty"`
	// solana_nonce_requested defines the Solana nonce requested at genesis.
	SolanaNonceRequested []uint64 `protobuf:"varint,22,rep,packed,name=solana_nonce_requested,json=solanaNonceRequested,proto3" json:"solana_nonce_requested,omitempty"`
	// solana_zentp_accounts_requested defines the Solana Zentp accounts requested at genesis.
	SolanaZentpAccountsRequested []string `protobuf:"bytes,23,rep,name=solana_zentp_accounts_requested,json=solanaZentpAccountsRequested,proto3" json:"solana_zentp_accounts_requested,omitempty"`
	// solana_accounts_requested defines the Solana accounts requested at genesis.
	SolanaAccountsRequested []string `protobuf:"bytes,24,rep,name=solana_accounts_requested,json=solanaAccountsRequested,proto3" json:"solana_accounts_requested,omitempty"`
	// last_completed_zentp_mint_id defines the last completed Zentp mint id at genesis.
	LastCompletedZentpMintId uint64 `protobuf:"varint,25,opt,name=last_completed_zentp_mint_id,json=lastCompletedZentpMintId,proto3" json:"last_completed_zentp_mint_id,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetLastTotalPower() []byte {
	if x != nil {
		return x.LastTotalPower
	}
	return nil
}

func (x *GenesisState) GetLastValidatorPowers() []*LastValidatorPower {
	if x != nil {
		return x.LastValidatorPowers
	}
	return nil
}

func (x *GenesisState) GetValidators() []*ValidatorHV {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *GenesisState) GetDelegations() []*Delegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *GenesisState) GetUnbondingDelegations() []*UnbondingDelegation {
	if x != nil {
		return x.UnbondingDelegations
	}
	return nil
}

func (x *GenesisState) GetRedelegations() []*Redelegation {
	if x != nil {
		return x.Redelegations
	}
	return nil
}

func (x *GenesisState) GetExported() bool {
	if x != nil {
		return x.Exported
	}
	return false
}

func (x *GenesisState) GetHVParams() *HVParams {
	if x != nil {
		return x.HVParams
	}
	return nil
}

func (x *GenesisState) GetAssetPrices() []*AssetData {
	if x != nil {
		return x.AssetPrices
	}
	return nil
}

func (x *GenesisState) GetLastValidVeHeight() int64 {
	if x != nil {
		return x.LastValidVeHeight
	}
	return 0
}

func (x *GenesisState) GetSlashEvents() []*SlashEvent {
	if x != nil {
		return x.SlashEvents
	}
	return nil
}

func (x *GenesisState) GetSlashEventCount() uint64 {
	if x != nil {
		return x.SlashEventCount
	}
	return 0
}

func (x *GenesisState) GetValidationInfos() []*ValidationInfo {
	if x != nil {
		return x.ValidationInfos
	}
	return nil
}

func (x *GenesisState) GetBtcBlockHeaders() []*api.BTCBlockHeader {
	if x != nil {
		return x.BtcBlockHeaders
	}
	return nil
}

func (x *GenesisState) GetLastUsedSolanaNonce() []*SolanaNonce {
	if x != nil {
		return x.LastUsedSolanaNonce
	}
	return nil
}

func (x *GenesisState) GetBackfillRequest() *BackfillRequests {
	if x != nil {
		return x.BackfillRequest
	}
	return nil
}

func (x *GenesisState) GetLastUsedEthereumNonce() []*zenbtc.NonceData {
	if x != nil {
		return x.LastUsedEthereumNonce
	}
	return nil
}

func (x *GenesisState) GetRequestedHistoricalBitcoinHeaders() []*zenbtc.RequestedBitcoinHeaders {
	if x != nil {
		return x.RequestedHistoricalBitcoinHeaders
	}
	return nil
}

func (x *GenesisState) GetAvsRewardsPool() []string {
	if x != nil {
		return x.AvsRewardsPool
	}
	return nil
}

func (x *GenesisState) GetEthereumNonceRequested() []uint64 {
	if x != nil {
		return x.EthereumNonceRequested
	}
	return nil
}

func (x *GenesisState) GetSolanaNonceRequested() []uint64 {
	if x != nil {
		return x.SolanaNonceRequested
	}
	return nil
}

func (x *GenesisState) GetSolanaZentpAccountsRequested() []string {
	if x != nil {
		return x.SolanaZentpAccountsRequested
	}
	return nil
}

func (x *GenesisState) GetSolanaAccountsRequested() []string {
	if x != nil {
		return x.SolanaAccountsRequested
	}
	return nil
}

func (x *GenesisState) GetLastCompletedZentpMintId() uint64 {
	if x != nil {
		return x.LastCompletedZentpMintId
	}
	return 0
}

// LastValidatorPower required for validator set update logic.
type LastValidatorPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the validator.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// power defines the power of the validator.
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (x *LastValidatorPower) Reset() {
	*x = LastValidatorPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastValidatorPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastValidatorPower) ProtoMessage() {}

// Deprecated: Use LastValidatorPower.ProtoReflect.Descriptor instead.
func (*LastValidatorPower) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *LastValidatorPower) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LastValidatorPower) GetPower() int64 {
	if x != nil {
		return x.Power
	}
	return 0
}

var File_zrchain_validation_genesis_proto protoreflect.FileDescriptor

var file_zrchain_validation_genesis_proto_rawDesc = []byte{
	0x0a, 0x20, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f,
	0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf7, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x09,
	0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x5a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x30, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x65, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x56, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a,
	0x15, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x14, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x48, 0x56, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x56, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x48, 0x56, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x76, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x62, 0x74, 0x63, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x54, 0x43, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x0f, 0x62, 0x74, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5d, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62,
	0x74, 0x63, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0xc8, 0xde,
	0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x76, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x42, 0x05,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x18, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x42, 0x05, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x16,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x16, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x04, 0x42, 0x05, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x14, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x1f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x7a, 0x65,
	0x6e, 0x74, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x42, 0x05, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x1c, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5a, 0x65, 0x6e, 0x74, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x19, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x05, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x65, 0x6e, 0x74, 0x70, 0x5f, 0x6d, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5a, 0x65, 0x6e, 0x74, 0x70, 0x4d, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x12, 0x4c,
	0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f,
	0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x42, 0xb4, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x5a, 0x56, 0x58, 0xaa, 0x02, 0x12, 0x5a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0x02, 0x12, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x1e, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x3a, 0x3a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_validation_genesis_proto_rawDescOnce sync.Once
	file_zrchain_validation_genesis_proto_rawDescData = file_zrchain_validation_genesis_proto_rawDesc
)

func file_zrchain_validation_genesis_proto_rawDescGZIP() []byte {
	file_zrchain_validation_genesis_proto_rawDescOnce.Do(func() {
		file_zrchain_validation_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_validation_genesis_proto_rawDescData)
	})
	return file_zrchain_validation_genesis_proto_rawDescData
}

var file_zrchain_validation_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zrchain_validation_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),                   // 0: zrchain.validation.GenesisState
	(*LastValidatorPower)(nil),             // 1: zrchain.validation.LastValidatorPower
	(*Params)(nil),                         // 2: zrchain.validation.Params
	(*ValidatorHV)(nil),                    // 3: zrchain.validation.ValidatorHV
	(*Delegation)(nil),                     // 4: zrchain.validation.Delegation
	(*UnbondingDelegation)(nil),            // 5: zrchain.validation.UnbondingDelegation
	(*Redelegation)(nil),                   // 6: zrchain.validation.Redelegation
	(*HVParams)(nil),                       // 7: zrchain.validation.HVParams
	(*AssetData)(nil),                      // 8: zrchain.validation.AssetData
	(*SlashEvent)(nil),                     // 9: zrchain.validation.SlashEvent
	(*ValidationInfo)(nil),                 // 10: zrchain.validation.ValidationInfo
	(*api.BTCBlockHeader)(nil),             // 11: api.BTCBlockHeader
	(*SolanaNonce)(nil),                    // 12: zrchain.validation.SolanaNonce
	(*BackfillRequests)(nil),               // 13: zrchain.validation.BackfillRequests
	(*zenbtc.NonceData)(nil),               // 14: zrchain.zenbtc.NonceData
	(*zenbtc.RequestedBitcoinHeaders)(nil), // 15: zrchain.zenbtc.RequestedBitcoinHeaders
}
var file_zrchain_validation_genesis_proto_depIdxs = []int32{
	2,  // 0: zrchain.validation.GenesisState.params:type_name -> zrchain.validation.Params
	1,  // 1: zrchain.validation.GenesisState.last_validator_powers:type_name -> zrchain.validation.LastValidatorPower
	3,  // 2: zrchain.validation.GenesisState.validators:type_name -> zrchain.validation.ValidatorHV
	4,  // 3: zrchain.validation.GenesisState.delegations:type_name -> zrchain.validation.Delegation
	5,  // 4: zrchain.validation.GenesisState.unbonding_delegations:type_name -> zrchain.validation.UnbondingDelegation
	6,  // 5: zrchain.validation.GenesisState.redelegations:type_name -> zrchain.validation.Redelegation
	7,  // 6: zrchain.validation.GenesisState.HVParams:type_name -> zrchain.validation.HVParams
	8,  // 7: zrchain.validation.GenesisState.asset_prices:type_name -> zrchain.validation.AssetData
	9,  // 8: zrchain.validation.GenesisState.slash_events:type_name -> zrchain.validation.SlashEvent
	10, // 9: zrchain.validation.GenesisState.validation_infos:type_name -> zrchain.validation.ValidationInfo
	11, // 10: zrchain.validation.GenesisState.btc_block_headers:type_name -> api.BTCBlockHeader
	12, // 11: zrchain.validation.GenesisState.last_used_solana_nonce:type_name -> zrchain.validation.SolanaNonce
	13, // 12: zrchain.validation.GenesisState.backfill_request:type_name -> zrchain.validation.BackfillRequests
	14, // 13: zrchain.validation.GenesisState.last_used_ethereum_nonce:type_name -> zrchain.zenbtc.NonceData
	15, // 14: zrchain.validation.GenesisState.requested_historical_bitcoin_headers:type_name -> zrchain.zenbtc.RequestedBitcoinHeaders
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_zrchain_validation_genesis_proto_init() }
func file_zrchain_validation_genesis_proto_init() {
	if File_zrchain_validation_genesis_proto != nil {
		return
	}
	file_zrchain_validation_staking_proto_init()
	file_zrchain_validation_solana_proto_init()
	file_zrchain_validation_tx_proto_init()
	file_zrchain_validation_asset_data_proto_init()
	file_zrchain_validation_hybrid_validation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zrchain_validation_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_validation_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastValidatorPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_validation_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_validation_genesis_proto_goTypes,
		DependencyIndexes: file_zrchain_validation_genesis_proto_depIdxs,
		MessageInfos:      file_zrchain_validation_genesis_proto_msgTypes,
	}.Build()
	File_zrchain_validation_genesis_proto = out.File
	file_zrchain_validation_genesis_proto_rawDesc = nil
	file_zrchain_validation_genesis_proto_goTypes = nil
	file_zrchain_validation_genesis_proto_depIdxs = nil
}
