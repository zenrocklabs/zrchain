// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package validation

import (
	_ "cosmossdk.io/api/amino"
	types "cosmossdk.io/api/tendermint/types"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_ValidatorHV_14_list)(nil)

type _ValidatorHV_14_list struct {
	list *[]uint64
}

func (x *_ValidatorHV_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ValidatorHV_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_ValidatorHV_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ValidatorHV_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ValidatorHV_14_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ValidatorHV at list field UnbondingIds as it is not of Message kind"))
}

func (x *_ValidatorHV_14_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ValidatorHV_14_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_ValidatorHV_14_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ValidatorHV                             protoreflect.MessageDescriptor
	fd_ValidatorHV_operator_address            protoreflect.FieldDescriptor
	fd_ValidatorHV_consensus_pubkey            protoreflect.FieldDescriptor
	fd_ValidatorHV_jailed                      protoreflect.FieldDescriptor
	fd_ValidatorHV_status                      protoreflect.FieldDescriptor
	fd_ValidatorHV_tokensNative                protoreflect.FieldDescriptor
	fd_ValidatorHV_tokensAVS                   protoreflect.FieldDescriptor
	fd_ValidatorHV_delegator_shares            protoreflect.FieldDescriptor
	fd_ValidatorHV_description                 protoreflect.FieldDescriptor
	fd_ValidatorHV_unbonding_height            protoreflect.FieldDescriptor
	fd_ValidatorHV_unbonding_time              protoreflect.FieldDescriptor
	fd_ValidatorHV_commission                  protoreflect.FieldDescriptor
	fd_ValidatorHV_min_self_delegation         protoreflect.FieldDescriptor
	fd_ValidatorHV_unbonding_on_hold_ref_count protoreflect.FieldDescriptor
	fd_ValidatorHV_unbonding_ids               protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_hybrid_validation_proto_init()
	md_ValidatorHV = File_zrchain_validation_hybrid_validation_proto.Messages().ByName("ValidatorHV")
	fd_ValidatorHV_operator_address = md_ValidatorHV.Fields().ByName("operator_address")
	fd_ValidatorHV_consensus_pubkey = md_ValidatorHV.Fields().ByName("consensus_pubkey")
	fd_ValidatorHV_jailed = md_ValidatorHV.Fields().ByName("jailed")
	fd_ValidatorHV_status = md_ValidatorHV.Fields().ByName("status")
	fd_ValidatorHV_tokensNative = md_ValidatorHV.Fields().ByName("tokensNative")
	fd_ValidatorHV_tokensAVS = md_ValidatorHV.Fields().ByName("tokensAVS")
	fd_ValidatorHV_delegator_shares = md_ValidatorHV.Fields().ByName("delegator_shares")
	fd_ValidatorHV_description = md_ValidatorHV.Fields().ByName("description")
	fd_ValidatorHV_unbonding_height = md_ValidatorHV.Fields().ByName("unbonding_height")
	fd_ValidatorHV_unbonding_time = md_ValidatorHV.Fields().ByName("unbonding_time")
	fd_ValidatorHV_commission = md_ValidatorHV.Fields().ByName("commission")
	fd_ValidatorHV_min_self_delegation = md_ValidatorHV.Fields().ByName("min_self_delegation")
	fd_ValidatorHV_unbonding_on_hold_ref_count = md_ValidatorHV.Fields().ByName("unbonding_on_hold_ref_count")
	fd_ValidatorHV_unbonding_ids = md_ValidatorHV.Fields().ByName("unbonding_ids")
}

var _ protoreflect.Message = (*fastReflection_ValidatorHV)(nil)

type fastReflection_ValidatorHV ValidatorHV

func (x *ValidatorHV) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidatorHV)(x)
}

func (x *ValidatorHV) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidatorHV_messageType fastReflection_ValidatorHV_messageType
var _ protoreflect.MessageType = fastReflection_ValidatorHV_messageType{}

type fastReflection_ValidatorHV_messageType struct{}

func (x fastReflection_ValidatorHV_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidatorHV)(nil)
}
func (x fastReflection_ValidatorHV_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidatorHV)
}
func (x fastReflection_ValidatorHV_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidatorHV
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidatorHV) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidatorHV
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidatorHV) Type() protoreflect.MessageType {
	return _fastReflection_ValidatorHV_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidatorHV) New() protoreflect.Message {
	return new(fastReflection_ValidatorHV)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidatorHV) Interface() protoreflect.ProtoMessage {
	return (*ValidatorHV)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidatorHV) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OperatorAddress != "" {
		value := protoreflect.ValueOfString(x.OperatorAddress)
		if !f(fd_ValidatorHV_operator_address, value) {
			return
		}
	}
	if x.ConsensusPubkey != nil {
		value := protoreflect.ValueOfMessage(x.ConsensusPubkey.ProtoReflect())
		if !f(fd_ValidatorHV_consensus_pubkey, value) {
			return
		}
	}
	if x.Jailed != false {
		value := protoreflect.ValueOfBool(x.Jailed)
		if !f(fd_ValidatorHV_jailed, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_ValidatorHV_status, value) {
			return
		}
	}
	if x.TokensNative != "" {
		value := protoreflect.ValueOfString(x.TokensNative)
		if !f(fd_ValidatorHV_tokensNative, value) {
			return
		}
	}
	if x.TokensAVS != "" {
		value := protoreflect.ValueOfString(x.TokensAVS)
		if !f(fd_ValidatorHV_tokensAVS, value) {
			return
		}
	}
	if x.DelegatorShares != "" {
		value := protoreflect.ValueOfString(x.DelegatorShares)
		if !f(fd_ValidatorHV_delegator_shares, value) {
			return
		}
	}
	if x.Description != nil {
		value := protoreflect.ValueOfMessage(x.Description.ProtoReflect())
		if !f(fd_ValidatorHV_description, value) {
			return
		}
	}
	if x.UnbondingHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.UnbondingHeight)
		if !f(fd_ValidatorHV_unbonding_height, value) {
			return
		}
	}
	if x.UnbondingTime != nil {
		value := protoreflect.ValueOfMessage(x.UnbondingTime.ProtoReflect())
		if !f(fd_ValidatorHV_unbonding_time, value) {
			return
		}
	}
	if x.Commission != nil {
		value := protoreflect.ValueOfMessage(x.Commission.ProtoReflect())
		if !f(fd_ValidatorHV_commission, value) {
			return
		}
	}
	if x.MinSelfDelegation != "" {
		value := protoreflect.ValueOfString(x.MinSelfDelegation)
		if !f(fd_ValidatorHV_min_self_delegation, value) {
			return
		}
	}
	if x.UnbondingOnHoldRefCount != int64(0) {
		value := protoreflect.ValueOfInt64(x.UnbondingOnHoldRefCount)
		if !f(fd_ValidatorHV_unbonding_on_hold_ref_count, value) {
			return
		}
	}
	if len(x.UnbondingIds) != 0 {
		value := protoreflect.ValueOfList(&_ValidatorHV_14_list{list: &x.UnbondingIds})
		if !f(fd_ValidatorHV_unbonding_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidatorHV) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.ValidatorHV.operator_address":
		return x.OperatorAddress != ""
	case "zrchain.validation.ValidatorHV.consensus_pubkey":
		return x.ConsensusPubkey != nil
	case "zrchain.validation.ValidatorHV.jailed":
		return x.Jailed != false
	case "zrchain.validation.ValidatorHV.status":
		return x.Status != 0
	case "zrchain.validation.ValidatorHV.tokensNative":
		return x.TokensNative != ""
	case "zrchain.validation.ValidatorHV.tokensAVS":
		return x.TokensAVS != ""
	case "zrchain.validation.ValidatorHV.delegator_shares":
		return x.DelegatorShares != ""
	case "zrchain.validation.ValidatorHV.description":
		return x.Description != nil
	case "zrchain.validation.ValidatorHV.unbonding_height":
		return x.UnbondingHeight != int64(0)
	case "zrchain.validation.ValidatorHV.unbonding_time":
		return x.UnbondingTime != nil
	case "zrchain.validation.ValidatorHV.commission":
		return x.Commission != nil
	case "zrchain.validation.ValidatorHV.min_self_delegation":
		return x.MinSelfDelegation != ""
	case "zrchain.validation.ValidatorHV.unbonding_on_hold_ref_count":
		return x.UnbondingOnHoldRefCount != int64(0)
	case "zrchain.validation.ValidatorHV.unbonding_ids":
		return len(x.UnbondingIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidatorHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidatorHV does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorHV) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.ValidatorHV.operator_address":
		x.OperatorAddress = ""
	case "zrchain.validation.ValidatorHV.consensus_pubkey":
		x.ConsensusPubkey = nil
	case "zrchain.validation.ValidatorHV.jailed":
		x.Jailed = false
	case "zrchain.validation.ValidatorHV.status":
		x.Status = 0
	case "zrchain.validation.ValidatorHV.tokensNative":
		x.TokensNative = ""
	case "zrchain.validation.ValidatorHV.tokensAVS":
		x.TokensAVS = ""
	case "zrchain.validation.ValidatorHV.delegator_shares":
		x.DelegatorShares = ""
	case "zrchain.validation.ValidatorHV.description":
		x.Description = nil
	case "zrchain.validation.ValidatorHV.unbonding_height":
		x.UnbondingHeight = int64(0)
	case "zrchain.validation.ValidatorHV.unbonding_time":
		x.UnbondingTime = nil
	case "zrchain.validation.ValidatorHV.commission":
		x.Commission = nil
	case "zrchain.validation.ValidatorHV.min_self_delegation":
		x.MinSelfDelegation = ""
	case "zrchain.validation.ValidatorHV.unbonding_on_hold_ref_count":
		x.UnbondingOnHoldRefCount = int64(0)
	case "zrchain.validation.ValidatorHV.unbonding_ids":
		x.UnbondingIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidatorHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidatorHV does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidatorHV) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.ValidatorHV.operator_address":
		value := x.OperatorAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.ValidatorHV.consensus_pubkey":
		value := x.ConsensusPubkey
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.ValidatorHV.jailed":
		value := x.Jailed
		return protoreflect.ValueOfBool(value)
	case "zrchain.validation.ValidatorHV.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "zrchain.validation.ValidatorHV.tokensNative":
		value := x.TokensNative
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.ValidatorHV.tokensAVS":
		value := x.TokensAVS
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.ValidatorHV.delegator_shares":
		value := x.DelegatorShares
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.ValidatorHV.description":
		value := x.Description
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.ValidatorHV.unbonding_height":
		value := x.UnbondingHeight
		return protoreflect.ValueOfInt64(value)
	case "zrchain.validation.ValidatorHV.unbonding_time":
		value := x.UnbondingTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.ValidatorHV.commission":
		value := x.Commission
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.ValidatorHV.min_self_delegation":
		value := x.MinSelfDelegation
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.ValidatorHV.unbonding_on_hold_ref_count":
		value := x.UnbondingOnHoldRefCount
		return protoreflect.ValueOfInt64(value)
	case "zrchain.validation.ValidatorHV.unbonding_ids":
		if len(x.UnbondingIds) == 0 {
			return protoreflect.ValueOfList(&_ValidatorHV_14_list{})
		}
		listValue := &_ValidatorHV_14_list{list: &x.UnbondingIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidatorHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidatorHV does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorHV) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.ValidatorHV.operator_address":
		x.OperatorAddress = value.Interface().(string)
	case "zrchain.validation.ValidatorHV.consensus_pubkey":
		x.ConsensusPubkey = value.Message().Interface().(*anypb.Any)
	case "zrchain.validation.ValidatorHV.jailed":
		x.Jailed = value.Bool()
	case "zrchain.validation.ValidatorHV.status":
		x.Status = (BondStatus)(value.Enum())
	case "zrchain.validation.ValidatorHV.tokensNative":
		x.TokensNative = value.Interface().(string)
	case "zrchain.validation.ValidatorHV.tokensAVS":
		x.TokensAVS = value.Interface().(string)
	case "zrchain.validation.ValidatorHV.delegator_shares":
		x.DelegatorShares = value.Interface().(string)
	case "zrchain.validation.ValidatorHV.description":
		x.Description = value.Message().Interface().(*Description)
	case "zrchain.validation.ValidatorHV.unbonding_height":
		x.UnbondingHeight = value.Int()
	case "zrchain.validation.ValidatorHV.unbonding_time":
		x.UnbondingTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "zrchain.validation.ValidatorHV.commission":
		x.Commission = value.Message().Interface().(*Commission)
	case "zrchain.validation.ValidatorHV.min_self_delegation":
		x.MinSelfDelegation = value.Interface().(string)
	case "zrchain.validation.ValidatorHV.unbonding_on_hold_ref_count":
		x.UnbondingOnHoldRefCount = value.Int()
	case "zrchain.validation.ValidatorHV.unbonding_ids":
		lv := value.List()
		clv := lv.(*_ValidatorHV_14_list)
		x.UnbondingIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidatorHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidatorHV does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorHV) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.ValidatorHV.consensus_pubkey":
		if x.ConsensusPubkey == nil {
			x.ConsensusPubkey = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.ConsensusPubkey.ProtoReflect())
	case "zrchain.validation.ValidatorHV.description":
		if x.Description == nil {
			x.Description = new(Description)
		}
		return protoreflect.ValueOfMessage(x.Description.ProtoReflect())
	case "zrchain.validation.ValidatorHV.unbonding_time":
		if x.UnbondingTime == nil {
			x.UnbondingTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.UnbondingTime.ProtoReflect())
	case "zrchain.validation.ValidatorHV.commission":
		if x.Commission == nil {
			x.Commission = new(Commission)
		}
		return protoreflect.ValueOfMessage(x.Commission.ProtoReflect())
	case "zrchain.validation.ValidatorHV.unbonding_ids":
		if x.UnbondingIds == nil {
			x.UnbondingIds = []uint64{}
		}
		value := &_ValidatorHV_14_list{list: &x.UnbondingIds}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.ValidatorHV.operator_address":
		panic(fmt.Errorf("field operator_address of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.jailed":
		panic(fmt.Errorf("field jailed of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.status":
		panic(fmt.Errorf("field status of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.tokensNative":
		panic(fmt.Errorf("field tokensNative of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.tokensAVS":
		panic(fmt.Errorf("field tokensAVS of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.delegator_shares":
		panic(fmt.Errorf("field delegator_shares of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.unbonding_height":
		panic(fmt.Errorf("field unbonding_height of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.min_self_delegation":
		panic(fmt.Errorf("field min_self_delegation of message zrchain.validation.ValidatorHV is not mutable"))
	case "zrchain.validation.ValidatorHV.unbonding_on_hold_ref_count":
		panic(fmt.Errorf("field unbonding_on_hold_ref_count of message zrchain.validation.ValidatorHV is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidatorHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidatorHV does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidatorHV) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.ValidatorHV.operator_address":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.ValidatorHV.consensus_pubkey":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.ValidatorHV.jailed":
		return protoreflect.ValueOfBool(false)
	case "zrchain.validation.ValidatorHV.status":
		return protoreflect.ValueOfEnum(0)
	case "zrchain.validation.ValidatorHV.tokensNative":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.ValidatorHV.tokensAVS":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.ValidatorHV.delegator_shares":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.ValidatorHV.description":
		m := new(Description)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.ValidatorHV.unbonding_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.validation.ValidatorHV.unbonding_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.ValidatorHV.commission":
		m := new(Commission)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.ValidatorHV.min_self_delegation":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.ValidatorHV.unbonding_on_hold_ref_count":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.validation.ValidatorHV.unbonding_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_ValidatorHV_14_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidatorHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidatorHV does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidatorHV) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.ValidatorHV", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidatorHV) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorHV) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidatorHV) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidatorHV) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidatorHV)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OperatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ConsensusPubkey != nil {
			l = options.Size(x.ConsensusPubkey)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Jailed {
			n += 2
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.TokensNative)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokensAVS)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DelegatorShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Description != nil {
			l = options.Size(x.Description)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnbondingHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.UnbondingHeight))
		}
		if x.UnbondingTime != nil {
			l = options.Size(x.UnbondingTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Commission != nil {
			l = options.Size(x.Commission)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinSelfDelegation)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnbondingOnHoldRefCount != 0 {
			n += 1 + runtime.Sov(uint64(x.UnbondingOnHoldRefCount))
		}
		if len(x.UnbondingIds) > 0 {
			l = 0
			for _, e := range x.UnbondingIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidatorHV)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.UnbondingIds) > 0 {
			var pksize2 int
			for _, num := range x.UnbondingIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.UnbondingIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x72
		}
		if x.UnbondingOnHoldRefCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnbondingOnHoldRefCount))
			i--
			dAtA[i] = 0x68
		}
		if len(x.MinSelfDelegation) > 0 {
			i -= len(x.MinSelfDelegation)
			copy(dAtA[i:], x.MinSelfDelegation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinSelfDelegation)))
			i--
			dAtA[i] = 0x62
		}
		if x.Commission != nil {
			encoded, err := options.Marshal(x.Commission)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.UnbondingTime != nil {
			encoded, err := options.Marshal(x.UnbondingTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if x.UnbondingHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnbondingHeight))
			i--
			dAtA[i] = 0x48
		}
		if x.Description != nil {
			encoded, err := options.Marshal(x.Description)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.DelegatorShares) > 0 {
			i -= len(x.DelegatorShares)
			copy(dAtA[i:], x.DelegatorShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DelegatorShares)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.TokensAVS) > 0 {
			i -= len(x.TokensAVS)
			copy(dAtA[i:], x.TokensAVS)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokensAVS)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.TokensNative) > 0 {
			i -= len(x.TokensNative)
			copy(dAtA[i:], x.TokensNative)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokensNative)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x20
		}
		if x.Jailed {
			i--
			if x.Jailed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.ConsensusPubkey != nil {
			encoded, err := options.Marshal(x.ConsensusPubkey)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OperatorAddress) > 0 {
			i -= len(x.OperatorAddress)
			copy(dAtA[i:], x.OperatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OperatorAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidatorHV)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidatorHV: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidatorHV: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OperatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ConsensusPubkey == nil {
					x.ConsensusPubkey = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ConsensusPubkey); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Jailed = bool(v != 0)
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= BondStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokensNative", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokensNative = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokensAVS", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokensAVS = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegatorShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Description == nil {
					x.Description = &Description{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Description); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
				}
				x.UnbondingHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnbondingHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UnbondingTime == nil {
					x.UnbondingTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnbondingTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Commission == nil {
					x.Commission = &Commission{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Commission); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinSelfDelegation = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingOnHoldRefCount", wireType)
				}
				x.UnbondingOnHoldRefCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnbondingOnHoldRefCount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.UnbondingIds = append(x.UnbondingIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.UnbondingIds) == 0 {
						x.UnbondingIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.UnbondingIds = append(x.UnbondingIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_HistoricalInfoHV_2_list)(nil)

type _HistoricalInfoHV_2_list struct {
	list *[]*ValidatorHV
}

func (x *_HistoricalInfoHV_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_HistoricalInfoHV_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_HistoricalInfoHV_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidatorHV)
	(*x.list)[i] = concreteValue
}

func (x *_HistoricalInfoHV_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidatorHV)
	*x.list = append(*x.list, concreteValue)
}

func (x *_HistoricalInfoHV_2_list) AppendMutable() protoreflect.Value {
	v := new(ValidatorHV)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HistoricalInfoHV_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_HistoricalInfoHV_2_list) NewElement() protoreflect.Value {
	v := new(ValidatorHV)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HistoricalInfoHV_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_HistoricalInfoHV        protoreflect.MessageDescriptor
	fd_HistoricalInfoHV_header protoreflect.FieldDescriptor
	fd_HistoricalInfoHV_valset protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_hybrid_validation_proto_init()
	md_HistoricalInfoHV = File_zrchain_validation_hybrid_validation_proto.Messages().ByName("HistoricalInfoHV")
	fd_HistoricalInfoHV_header = md_HistoricalInfoHV.Fields().ByName("header")
	fd_HistoricalInfoHV_valset = md_HistoricalInfoHV.Fields().ByName("valset")
}

var _ protoreflect.Message = (*fastReflection_HistoricalInfoHV)(nil)

type fastReflection_HistoricalInfoHV HistoricalInfoHV

func (x *HistoricalInfoHV) ProtoReflect() protoreflect.Message {
	return (*fastReflection_HistoricalInfoHV)(x)
}

func (x *HistoricalInfoHV) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_HistoricalInfoHV_messageType fastReflection_HistoricalInfoHV_messageType
var _ protoreflect.MessageType = fastReflection_HistoricalInfoHV_messageType{}

type fastReflection_HistoricalInfoHV_messageType struct{}

func (x fastReflection_HistoricalInfoHV_messageType) Zero() protoreflect.Message {
	return (*fastReflection_HistoricalInfoHV)(nil)
}
func (x fastReflection_HistoricalInfoHV_messageType) New() protoreflect.Message {
	return new(fastReflection_HistoricalInfoHV)
}
func (x fastReflection_HistoricalInfoHV_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_HistoricalInfoHV
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_HistoricalInfoHV) Descriptor() protoreflect.MessageDescriptor {
	return md_HistoricalInfoHV
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_HistoricalInfoHV) Type() protoreflect.MessageType {
	return _fastReflection_HistoricalInfoHV_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_HistoricalInfoHV) New() protoreflect.Message {
	return new(fastReflection_HistoricalInfoHV)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_HistoricalInfoHV) Interface() protoreflect.ProtoMessage {
	return (*HistoricalInfoHV)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_HistoricalInfoHV) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Header != nil {
		value := protoreflect.ValueOfMessage(x.Header.ProtoReflect())
		if !f(fd_HistoricalInfoHV_header, value) {
			return
		}
	}
	if len(x.Valset) != 0 {
		value := protoreflect.ValueOfList(&_HistoricalInfoHV_2_list{list: &x.Valset})
		if !f(fd_HistoricalInfoHV_valset, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_HistoricalInfoHV) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.HistoricalInfoHV.header":
		return x.Header != nil
	case "zrchain.validation.HistoricalInfoHV.valset":
		return len(x.Valset) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HistoricalInfoHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.HistoricalInfoHV does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalInfoHV) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.HistoricalInfoHV.header":
		x.Header = nil
	case "zrchain.validation.HistoricalInfoHV.valset":
		x.Valset = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HistoricalInfoHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.HistoricalInfoHV does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_HistoricalInfoHV) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.HistoricalInfoHV.header":
		value := x.Header
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.validation.HistoricalInfoHV.valset":
		if len(x.Valset) == 0 {
			return protoreflect.ValueOfList(&_HistoricalInfoHV_2_list{})
		}
		listValue := &_HistoricalInfoHV_2_list{list: &x.Valset}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HistoricalInfoHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.HistoricalInfoHV does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalInfoHV) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.HistoricalInfoHV.header":
		x.Header = value.Message().Interface().(*types.Header)
	case "zrchain.validation.HistoricalInfoHV.valset":
		lv := value.List()
		clv := lv.(*_HistoricalInfoHV_2_list)
		x.Valset = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HistoricalInfoHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.HistoricalInfoHV does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalInfoHV) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.HistoricalInfoHV.header":
		if x.Header == nil {
			x.Header = new(types.Header)
		}
		return protoreflect.ValueOfMessage(x.Header.ProtoReflect())
	case "zrchain.validation.HistoricalInfoHV.valset":
		if x.Valset == nil {
			x.Valset = []*ValidatorHV{}
		}
		value := &_HistoricalInfoHV_2_list{list: &x.Valset}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HistoricalInfoHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.HistoricalInfoHV does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_HistoricalInfoHV) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.HistoricalInfoHV.header":
		m := new(types.Header)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.validation.HistoricalInfoHV.valset":
		list := []*ValidatorHV{}
		return protoreflect.ValueOfList(&_HistoricalInfoHV_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HistoricalInfoHV"))
		}
		panic(fmt.Errorf("message zrchain.validation.HistoricalInfoHV does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_HistoricalInfoHV) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.HistoricalInfoHV", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_HistoricalInfoHV) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalInfoHV) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_HistoricalInfoHV) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_HistoricalInfoHV) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*HistoricalInfoHV)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Header != nil {
			l = options.Size(x.Header)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Valset) > 0 {
			for _, e := range x.Valset {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*HistoricalInfoHV)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Valset) > 0 {
			for iNdEx := len(x.Valset) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Valset[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Header != nil {
			encoded, err := options.Marshal(x.Header)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*HistoricalInfoHV)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HistoricalInfoHV: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HistoricalInfoHV: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Header == nil {
					x.Header = &types.Header{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Header); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Valset = append(x.Valset, &ValidatorHV{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Valset[len(x.Valset)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SlashEvent                     protoreflect.MessageDescriptor
	fd_SlashEvent_blockHeight         protoreflect.FieldDescriptor
	fd_SlashEvent_validatorAddr       protoreflect.FieldDescriptor
	fd_SlashEvent_percentageSlashed   protoreflect.FieldDescriptor
	fd_SlashEvent_tokensSlashedNative protoreflect.FieldDescriptor
	fd_SlashEvent_tokensSlashedAVS    protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_hybrid_validation_proto_init()
	md_SlashEvent = File_zrchain_validation_hybrid_validation_proto.Messages().ByName("SlashEvent")
	fd_SlashEvent_blockHeight = md_SlashEvent.Fields().ByName("blockHeight")
	fd_SlashEvent_validatorAddr = md_SlashEvent.Fields().ByName("validatorAddr")
	fd_SlashEvent_percentageSlashed = md_SlashEvent.Fields().ByName("percentageSlashed")
	fd_SlashEvent_tokensSlashedNative = md_SlashEvent.Fields().ByName("tokensSlashedNative")
	fd_SlashEvent_tokensSlashedAVS = md_SlashEvent.Fields().ByName("tokensSlashedAVS")
}

var _ protoreflect.Message = (*fastReflection_SlashEvent)(nil)

type fastReflection_SlashEvent SlashEvent

func (x *SlashEvent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SlashEvent)(x)
}

func (x *SlashEvent) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SlashEvent_messageType fastReflection_SlashEvent_messageType
var _ protoreflect.MessageType = fastReflection_SlashEvent_messageType{}

type fastReflection_SlashEvent_messageType struct{}

func (x fastReflection_SlashEvent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SlashEvent)(nil)
}
func (x fastReflection_SlashEvent_messageType) New() protoreflect.Message {
	return new(fastReflection_SlashEvent)
}
func (x fastReflection_SlashEvent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SlashEvent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SlashEvent) Descriptor() protoreflect.MessageDescriptor {
	return md_SlashEvent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SlashEvent) Type() protoreflect.MessageType {
	return _fastReflection_SlashEvent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SlashEvent) New() protoreflect.Message {
	return new(fastReflection_SlashEvent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SlashEvent) Interface() protoreflect.ProtoMessage {
	return (*SlashEvent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SlashEvent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_SlashEvent_blockHeight, value) {
			return
		}
	}
	if x.ValidatorAddr != "" {
		value := protoreflect.ValueOfString(x.ValidatorAddr)
		if !f(fd_SlashEvent_validatorAddr, value) {
			return
		}
	}
	if x.PercentageSlashed != "" {
		value := protoreflect.ValueOfString(x.PercentageSlashed)
		if !f(fd_SlashEvent_percentageSlashed, value) {
			return
		}
	}
	if x.TokensSlashedNative != "" {
		value := protoreflect.ValueOfString(x.TokensSlashedNative)
		if !f(fd_SlashEvent_tokensSlashedNative, value) {
			return
		}
	}
	if x.TokensSlashedAVS != "" {
		value := protoreflect.ValueOfString(x.TokensSlashedAVS)
		if !f(fd_SlashEvent_tokensSlashedAVS, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SlashEvent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.SlashEvent.blockHeight":
		return x.BlockHeight != int64(0)
	case "zrchain.validation.SlashEvent.validatorAddr":
		return x.ValidatorAddr != ""
	case "zrchain.validation.SlashEvent.percentageSlashed":
		return x.PercentageSlashed != ""
	case "zrchain.validation.SlashEvent.tokensSlashedNative":
		return x.TokensSlashedNative != ""
	case "zrchain.validation.SlashEvent.tokensSlashedAVS":
		return x.TokensSlashedAVS != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.SlashEvent"))
		}
		panic(fmt.Errorf("message zrchain.validation.SlashEvent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SlashEvent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.SlashEvent.blockHeight":
		x.BlockHeight = int64(0)
	case "zrchain.validation.SlashEvent.validatorAddr":
		x.ValidatorAddr = ""
	case "zrchain.validation.SlashEvent.percentageSlashed":
		x.PercentageSlashed = ""
	case "zrchain.validation.SlashEvent.tokensSlashedNative":
		x.TokensSlashedNative = ""
	case "zrchain.validation.SlashEvent.tokensSlashedAVS":
		x.TokensSlashedAVS = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.SlashEvent"))
		}
		panic(fmt.Errorf("message zrchain.validation.SlashEvent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SlashEvent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.SlashEvent.blockHeight":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "zrchain.validation.SlashEvent.validatorAddr":
		value := x.ValidatorAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.SlashEvent.percentageSlashed":
		value := x.PercentageSlashed
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.SlashEvent.tokensSlashedNative":
		value := x.TokensSlashedNative
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.SlashEvent.tokensSlashedAVS":
		value := x.TokensSlashedAVS
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.SlashEvent"))
		}
		panic(fmt.Errorf("message zrchain.validation.SlashEvent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SlashEvent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.SlashEvent.blockHeight":
		x.BlockHeight = value.Int()
	case "zrchain.validation.SlashEvent.validatorAddr":
		x.ValidatorAddr = value.Interface().(string)
	case "zrchain.validation.SlashEvent.percentageSlashed":
		x.PercentageSlashed = value.Interface().(string)
	case "zrchain.validation.SlashEvent.tokensSlashedNative":
		x.TokensSlashedNative = value.Interface().(string)
	case "zrchain.validation.SlashEvent.tokensSlashedAVS":
		x.TokensSlashedAVS = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.SlashEvent"))
		}
		panic(fmt.Errorf("message zrchain.validation.SlashEvent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SlashEvent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.SlashEvent.blockHeight":
		panic(fmt.Errorf("field blockHeight of message zrchain.validation.SlashEvent is not mutable"))
	case "zrchain.validation.SlashEvent.validatorAddr":
		panic(fmt.Errorf("field validatorAddr of message zrchain.validation.SlashEvent is not mutable"))
	case "zrchain.validation.SlashEvent.percentageSlashed":
		panic(fmt.Errorf("field percentageSlashed of message zrchain.validation.SlashEvent is not mutable"))
	case "zrchain.validation.SlashEvent.tokensSlashedNative":
		panic(fmt.Errorf("field tokensSlashedNative of message zrchain.validation.SlashEvent is not mutable"))
	case "zrchain.validation.SlashEvent.tokensSlashedAVS":
		panic(fmt.Errorf("field tokensSlashedAVS of message zrchain.validation.SlashEvent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.SlashEvent"))
		}
		panic(fmt.Errorf("message zrchain.validation.SlashEvent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SlashEvent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.SlashEvent.blockHeight":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.validation.SlashEvent.validatorAddr":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.SlashEvent.percentageSlashed":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.SlashEvent.tokensSlashedNative":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.SlashEvent.tokensSlashedAVS":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.SlashEvent"))
		}
		panic(fmt.Errorf("message zrchain.validation.SlashEvent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SlashEvent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.SlashEvent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SlashEvent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SlashEvent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SlashEvent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SlashEvent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SlashEvent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		l = len(x.ValidatorAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PercentageSlashed)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokensSlashedNative)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokensSlashedAVS)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SlashEvent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TokensSlashedAVS) > 0 {
			i -= len(x.TokensSlashedAVS)
			copy(dAtA[i:], x.TokensSlashedAVS)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokensSlashedAVS)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TokensSlashedNative) > 0 {
			i -= len(x.TokensSlashedNative)
			copy(dAtA[i:], x.TokensSlashedNative)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokensSlashedNative)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PercentageSlashed) > 0 {
			i -= len(x.PercentageSlashed)
			copy(dAtA[i:], x.PercentageSlashed)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PercentageSlashed)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ValidatorAddr) > 0 {
			i -= len(x.ValidatorAddr)
			copy(dAtA[i:], x.ValidatorAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorAddr)))
			i--
			dAtA[i] = 0x12
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SlashEvent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SlashEvent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SlashEvent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PercentageSlashed", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PercentageSlashed = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokensSlashedNative", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokensSlashedNative = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokensSlashedAVS", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokensSlashedAVS = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_HVParams_3_list)(nil)

type _HVParams_3_list struct {
	list *[]*AssetData
}

func (x *_HVParams_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_HVParams_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_HVParams_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AssetData)
	(*x.list)[i] = concreteValue
}

func (x *_HVParams_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AssetData)
	*x.list = append(*x.list, concreteValue)
}

func (x *_HVParams_3_list) AppendMutable() protoreflect.Value {
	v := new(AssetData)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HVParams_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_HVParams_3_list) NewElement() protoreflect.Value {
	v := new(AssetData)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HVParams_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_HVParams                          protoreflect.MessageDescriptor
	fd_HVParams_AVSRewardsRate           protoreflect.FieldDescriptor
	fd_HVParams_BlockTime                protoreflect.FieldDescriptor
	fd_HVParams_stakeableAssets          protoreflect.FieldDescriptor
	fd_HVParams_priceRetentionBlockRange protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_hybrid_validation_proto_init()
	md_HVParams = File_zrchain_validation_hybrid_validation_proto.Messages().ByName("HVParams")
	fd_HVParams_AVSRewardsRate = md_HVParams.Fields().ByName("AVSRewardsRate")
	fd_HVParams_BlockTime = md_HVParams.Fields().ByName("BlockTime")
	fd_HVParams_stakeableAssets = md_HVParams.Fields().ByName("stakeableAssets")
	fd_HVParams_priceRetentionBlockRange = md_HVParams.Fields().ByName("priceRetentionBlockRange")
}

var _ protoreflect.Message = (*fastReflection_HVParams)(nil)

type fastReflection_HVParams HVParams

func (x *HVParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_HVParams)(x)
}

func (x *HVParams) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_HVParams_messageType fastReflection_HVParams_messageType
var _ protoreflect.MessageType = fastReflection_HVParams_messageType{}

type fastReflection_HVParams_messageType struct{}

func (x fastReflection_HVParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_HVParams)(nil)
}
func (x fastReflection_HVParams_messageType) New() protoreflect.Message {
	return new(fastReflection_HVParams)
}
func (x fastReflection_HVParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_HVParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_HVParams) Descriptor() protoreflect.MessageDescriptor {
	return md_HVParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_HVParams) Type() protoreflect.MessageType {
	return _fastReflection_HVParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_HVParams) New() protoreflect.Message {
	return new(fastReflection_HVParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_HVParams) Interface() protoreflect.ProtoMessage {
	return (*HVParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_HVParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AVSRewardsRate != "" {
		value := protoreflect.ValueOfString(x.AVSRewardsRate)
		if !f(fd_HVParams_AVSRewardsRate, value) {
			return
		}
	}
	if x.BlockTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockTime)
		if !f(fd_HVParams_BlockTime, value) {
			return
		}
	}
	if len(x.StakeableAssets) != 0 {
		value := protoreflect.ValueOfList(&_HVParams_3_list{list: &x.StakeableAssets})
		if !f(fd_HVParams_stakeableAssets, value) {
			return
		}
	}
	if x.PriceRetentionBlockRange != int64(0) {
		value := protoreflect.ValueOfInt64(x.PriceRetentionBlockRange)
		if !f(fd_HVParams_priceRetentionBlockRange, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_HVParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.HVParams.AVSRewardsRate":
		return x.AVSRewardsRate != ""
	case "zrchain.validation.HVParams.BlockTime":
		return x.BlockTime != int64(0)
	case "zrchain.validation.HVParams.stakeableAssets":
		return len(x.StakeableAssets) != 0
	case "zrchain.validation.HVParams.priceRetentionBlockRange":
		return x.PriceRetentionBlockRange != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HVParams"))
		}
		panic(fmt.Errorf("message zrchain.validation.HVParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HVParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.HVParams.AVSRewardsRate":
		x.AVSRewardsRate = ""
	case "zrchain.validation.HVParams.BlockTime":
		x.BlockTime = int64(0)
	case "zrchain.validation.HVParams.stakeableAssets":
		x.StakeableAssets = nil
	case "zrchain.validation.HVParams.priceRetentionBlockRange":
		x.PriceRetentionBlockRange = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HVParams"))
		}
		panic(fmt.Errorf("message zrchain.validation.HVParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_HVParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.HVParams.AVSRewardsRate":
		value := x.AVSRewardsRate
		return protoreflect.ValueOfString(value)
	case "zrchain.validation.HVParams.BlockTime":
		value := x.BlockTime
		return protoreflect.ValueOfInt64(value)
	case "zrchain.validation.HVParams.stakeableAssets":
		if len(x.StakeableAssets) == 0 {
			return protoreflect.ValueOfList(&_HVParams_3_list{})
		}
		listValue := &_HVParams_3_list{list: &x.StakeableAssets}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.HVParams.priceRetentionBlockRange":
		value := x.PriceRetentionBlockRange
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HVParams"))
		}
		panic(fmt.Errorf("message zrchain.validation.HVParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HVParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.HVParams.AVSRewardsRate":
		x.AVSRewardsRate = value.Interface().(string)
	case "zrchain.validation.HVParams.BlockTime":
		x.BlockTime = value.Int()
	case "zrchain.validation.HVParams.stakeableAssets":
		lv := value.List()
		clv := lv.(*_HVParams_3_list)
		x.StakeableAssets = *clv.list
	case "zrchain.validation.HVParams.priceRetentionBlockRange":
		x.PriceRetentionBlockRange = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HVParams"))
		}
		panic(fmt.Errorf("message zrchain.validation.HVParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HVParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.HVParams.stakeableAssets":
		if x.StakeableAssets == nil {
			x.StakeableAssets = []*AssetData{}
		}
		value := &_HVParams_3_list{list: &x.StakeableAssets}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.HVParams.AVSRewardsRate":
		panic(fmt.Errorf("field AVSRewardsRate of message zrchain.validation.HVParams is not mutable"))
	case "zrchain.validation.HVParams.BlockTime":
		panic(fmt.Errorf("field BlockTime of message zrchain.validation.HVParams is not mutable"))
	case "zrchain.validation.HVParams.priceRetentionBlockRange":
		panic(fmt.Errorf("field priceRetentionBlockRange of message zrchain.validation.HVParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HVParams"))
		}
		panic(fmt.Errorf("message zrchain.validation.HVParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_HVParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.HVParams.AVSRewardsRate":
		return protoreflect.ValueOfString("")
	case "zrchain.validation.HVParams.BlockTime":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.validation.HVParams.stakeableAssets":
		list := []*AssetData{}
		return protoreflect.ValueOfList(&_HVParams_3_list{list: &list})
	case "zrchain.validation.HVParams.priceRetentionBlockRange":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.HVParams"))
		}
		panic(fmt.Errorf("message zrchain.validation.HVParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_HVParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.HVParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_HVParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HVParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_HVParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_HVParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*HVParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AVSRewardsRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockTime))
		}
		if len(x.StakeableAssets) > 0 {
			for _, e := range x.StakeableAssets {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.PriceRetentionBlockRange != 0 {
			n += 1 + runtime.Sov(uint64(x.PriceRetentionBlockRange))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*HVParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PriceRetentionBlockRange != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PriceRetentionBlockRange))
			i--
			dAtA[i] = 0x20
		}
		if len(x.StakeableAssets) > 0 {
			for iNdEx := len(x.StakeableAssets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StakeableAssets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.BlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockTime))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AVSRewardsRate) > 0 {
			i -= len(x.AVSRewardsRate)
			copy(dAtA[i:], x.AVSRewardsRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AVSRewardsRate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*HVParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HVParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HVParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AVSRewardsRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AVSRewardsRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
				}
				x.BlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakeableAssets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakeableAssets = append(x.StakeableAssets, &AssetData{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StakeableAssets[len(x.StakeableAssets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PriceRetentionBlockRange", wireType)
				}
				x.PriceRetentionBlockRange = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PriceRetentionBlockRange |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ValidationInfo_1_list)(nil)

type _ValidationInfo_1_list struct {
	list *[]string
}

func (x *_ValidationInfo_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ValidationInfo_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ValidationInfo_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ValidationInfo_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ValidationInfo_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ValidationInfo at list field NonVotingValidators as it is not of Message kind"))
}

func (x *_ValidationInfo_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ValidationInfo_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ValidationInfo_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ValidationInfo_2_list)(nil)

type _ValidationInfo_2_list struct {
	list *[]string
}

func (x *_ValidationInfo_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ValidationInfo_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ValidationInfo_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ValidationInfo_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ValidationInfo_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ValidationInfo at list field MismatchedVoteExtensions as it is not of Message kind"))
}

func (x *_ValidationInfo_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ValidationInfo_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ValidationInfo_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ValidationInfo                            protoreflect.MessageDescriptor
	fd_ValidationInfo_non_voting_validators      protoreflect.FieldDescriptor
	fd_ValidationInfo_mismatched_vote_extensions protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_validation_hybrid_validation_proto_init()
	md_ValidationInfo = File_zrchain_validation_hybrid_validation_proto.Messages().ByName("ValidationInfo")
	fd_ValidationInfo_non_voting_validators = md_ValidationInfo.Fields().ByName("non_voting_validators")
	fd_ValidationInfo_mismatched_vote_extensions = md_ValidationInfo.Fields().ByName("mismatched_vote_extensions")
}

var _ protoreflect.Message = (*fastReflection_ValidationInfo)(nil)

type fastReflection_ValidationInfo ValidationInfo

func (x *ValidationInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidationInfo)(x)
}

func (x *ValidationInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidationInfo_messageType fastReflection_ValidationInfo_messageType
var _ protoreflect.MessageType = fastReflection_ValidationInfo_messageType{}

type fastReflection_ValidationInfo_messageType struct{}

func (x fastReflection_ValidationInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidationInfo)(nil)
}
func (x fastReflection_ValidationInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidationInfo)
}
func (x fastReflection_ValidationInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidationInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidationInfo) Type() protoreflect.MessageType {
	return _fastReflection_ValidationInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidationInfo) New() protoreflect.Message {
	return new(fastReflection_ValidationInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidationInfo) Interface() protoreflect.ProtoMessage {
	return (*ValidationInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidationInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.NonVotingValidators) != 0 {
		value := protoreflect.ValueOfList(&_ValidationInfo_1_list{list: &x.NonVotingValidators})
		if !f(fd_ValidationInfo_non_voting_validators, value) {
			return
		}
	}
	if len(x.MismatchedVoteExtensions) != 0 {
		value := protoreflect.ValueOfList(&_ValidationInfo_2_list{list: &x.MismatchedVoteExtensions})
		if !f(fd_ValidationInfo_mismatched_vote_extensions, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidationInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.validation.ValidationInfo.non_voting_validators":
		return len(x.NonVotingValidators) != 0
	case "zrchain.validation.ValidationInfo.mismatched_vote_extensions":
		return len(x.MismatchedVoteExtensions) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidationInfo"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidationInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.validation.ValidationInfo.non_voting_validators":
		x.NonVotingValidators = nil
	case "zrchain.validation.ValidationInfo.mismatched_vote_extensions":
		x.MismatchedVoteExtensions = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidationInfo"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidationInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidationInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.validation.ValidationInfo.non_voting_validators":
		if len(x.NonVotingValidators) == 0 {
			return protoreflect.ValueOfList(&_ValidationInfo_1_list{})
		}
		listValue := &_ValidationInfo_1_list{list: &x.NonVotingValidators}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.validation.ValidationInfo.mismatched_vote_extensions":
		if len(x.MismatchedVoteExtensions) == 0 {
			return protoreflect.ValueOfList(&_ValidationInfo_2_list{})
		}
		listValue := &_ValidationInfo_2_list{list: &x.MismatchedVoteExtensions}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidationInfo"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidationInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.validation.ValidationInfo.non_voting_validators":
		lv := value.List()
		clv := lv.(*_ValidationInfo_1_list)
		x.NonVotingValidators = *clv.list
	case "zrchain.validation.ValidationInfo.mismatched_vote_extensions":
		lv := value.List()
		clv := lv.(*_ValidationInfo_2_list)
		x.MismatchedVoteExtensions = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidationInfo"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidationInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.ValidationInfo.non_voting_validators":
		if x.NonVotingValidators == nil {
			x.NonVotingValidators = []string{}
		}
		value := &_ValidationInfo_1_list{list: &x.NonVotingValidators}
		return protoreflect.ValueOfList(value)
	case "zrchain.validation.ValidationInfo.mismatched_vote_extensions":
		if x.MismatchedVoteExtensions == nil {
			x.MismatchedVoteExtensions = []string{}
		}
		value := &_ValidationInfo_2_list{list: &x.MismatchedVoteExtensions}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidationInfo"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidationInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidationInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.validation.ValidationInfo.non_voting_validators":
		list := []string{}
		return protoreflect.ValueOfList(&_ValidationInfo_1_list{list: &list})
	case "zrchain.validation.ValidationInfo.mismatched_vote_extensions":
		list := []string{}
		return protoreflect.ValueOfList(&_ValidationInfo_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.validation.ValidationInfo"))
		}
		panic(fmt.Errorf("message zrchain.validation.ValidationInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidationInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.validation.ValidationInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidationInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidationInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidationInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidationInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.NonVotingValidators) > 0 {
			for _, s := range x.NonVotingValidators {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.MismatchedVoteExtensions) > 0 {
			for _, s := range x.MismatchedVoteExtensions {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidationInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MismatchedVoteExtensions) > 0 {
			for iNdEx := len(x.MismatchedVoteExtensions) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.MismatchedVoteExtensions[iNdEx])
				copy(dAtA[i:], x.MismatchedVoteExtensions[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MismatchedVoteExtensions[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.NonVotingValidators) > 0 {
			for iNdEx := len(x.NonVotingValidators) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.NonVotingValidators[iNdEx])
				copy(dAtA[i:], x.NonVotingValidators[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NonVotingValidators[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidationInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NonVotingValidators", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NonVotingValidators = append(x.NonVotingValidators, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MismatchedVoteExtensions", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MismatchedVoteExtensions = append(x.MismatchedVoteExtensions, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/validation/hybrid_validation.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type ValidatorHV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operator_address defines the address of the validator's operator; bech
	// encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// consensus_pubkey is the consensus public key of the validator, as a
	// Protobuf Any.
	ConsensusPubkey *anypb.Any `protobuf:"bytes,2,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// jailed defined whether the validator has been jailed from bonded status or
	// not.
	Jailed bool `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// status is the validator status (bonded/unbonding/unbonded).
	Status BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=zrchain.validation.BondStatus" json:"status,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	TokensNative string `protobuf:"bytes,5,opt,name=tokensNative,proto3" json:"tokensNative,omitempty"`
	TokensAVS    string `protobuf:"bytes,6,opt,name=tokensAVS,proto3" json:"tokensAVS,omitempty"`
	// delegator_shares defines total shares issued to a validator's delegators.
	DelegatorShares string `protobuf:"bytes,7,opt,name=delegator_shares,json=delegatorShares,proto3" json:"delegator_shares,omitempty"`
	// description defines the description terms for the validator.
	Description *Description `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// unbonding_height defines, if unbonding, the height at which this validator
	// has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,9,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty"`
	// unbonding_time defines, if unbonding, the min time for the validator to
	// complete unbonding.
	UnbondingTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	// commission defines the commission parameters.
	Commission *Commission `protobuf:"bytes,11,opt,name=commission,proto3" json:"commission,omitempty"`
	// min_self_delegation is the validator's self declared minimum self
	// delegation.
	MinSelfDelegation string `protobuf:"bytes,12,opt,name=min_self_delegation,json=minSelfDelegation,proto3" json:"min_self_delegation,omitempty"`
	// strictly positive if this validator's unbonding has been stopped by
	// external modules
	UnbondingOnHoldRefCount int64 `protobuf:"varint,13,opt,name=unbonding_on_hold_ref_count,json=unbondingOnHoldRefCount,proto3" json:"unbonding_on_hold_ref_count,omitempty"`
	// list of unbonding ids, each uniquely identifying an unbonding of this
	// validator
	UnbondingIds []uint64 `protobuf:"varint,14,rep,packed,name=unbonding_ids,json=unbondingIds,proto3" json:"unbonding_ids,omitempty"`
}

func (x *ValidatorHV) Reset() {
	*x = ValidatorHV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorHV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorHV) ProtoMessage() {}

// Deprecated: Use ValidatorHV.ProtoReflect.Descriptor instead.
func (*ValidatorHV) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_hybrid_validation_proto_rawDescGZIP(), []int{0}
}

func (x *ValidatorHV) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *ValidatorHV) GetConsensusPubkey() *anypb.Any {
	if x != nil {
		return x.ConsensusPubkey
	}
	return nil
}

func (x *ValidatorHV) GetJailed() bool {
	if x != nil {
		return x.Jailed
	}
	return false
}

func (x *ValidatorHV) GetStatus() BondStatus {
	if x != nil {
		return x.Status
	}
	return BondStatus_BOND_STATUS_UNSPECIFIED
}

func (x *ValidatorHV) GetTokensNative() string {
	if x != nil {
		return x.TokensNative
	}
	return ""
}

func (x *ValidatorHV) GetTokensAVS() string {
	if x != nil {
		return x.TokensAVS
	}
	return ""
}

func (x *ValidatorHV) GetDelegatorShares() string {
	if x != nil {
		return x.DelegatorShares
	}
	return ""
}

func (x *ValidatorHV) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ValidatorHV) GetUnbondingHeight() int64 {
	if x != nil {
		return x.UnbondingHeight
	}
	return 0
}

func (x *ValidatorHV) GetUnbondingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnbondingTime
	}
	return nil
}

func (x *ValidatorHV) GetCommission() *Commission {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *ValidatorHV) GetMinSelfDelegation() string {
	if x != nil {
		return x.MinSelfDelegation
	}
	return ""
}

func (x *ValidatorHV) GetUnbondingOnHoldRefCount() int64 {
	if x != nil {
		return x.UnbondingOnHoldRefCount
	}
	return 0
}

func (x *ValidatorHV) GetUnbondingIds() []uint64 {
	if x != nil {
		return x.UnbondingIds
	}
	return nil
}

// HistoricalInfo contains header and validator information for a given block.
// It is stored as part of staking module's state, which persists the `n` most
// recent HistoricalInfo
// (`n` is set by the staking module's `historical_entries` parameter).
type HistoricalInfoHV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *types.Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Valset []*ValidatorHV `protobuf:"bytes,2,rep,name=valset,proto3" json:"valset,omitempty"`
}

func (x *HistoricalInfoHV) Reset() {
	*x = HistoricalInfoHV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalInfoHV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalInfoHV) ProtoMessage() {}

// Deprecated: Use HistoricalInfoHV.ProtoReflect.Descriptor instead.
func (*HistoricalInfoHV) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_hybrid_validation_proto_rawDescGZIP(), []int{1}
}

func (x *HistoricalInfoHV) GetHeader() *types.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HistoricalInfoHV) GetValset() []*ValidatorHV {
	if x != nil {
		return x.Valset
	}
	return nil
}

type SlashEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight         int64  `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ValidatorAddr       string `protobuf:"bytes,2,opt,name=validatorAddr,proto3" json:"validatorAddr,omitempty"`
	PercentageSlashed   string `protobuf:"bytes,3,opt,name=percentageSlashed,proto3" json:"percentageSlashed,omitempty"`
	TokensSlashedNative string `protobuf:"bytes,4,opt,name=tokensSlashedNative,proto3" json:"tokensSlashedNative,omitempty"`
	TokensSlashedAVS    string `protobuf:"bytes,5,opt,name=tokensSlashedAVS,proto3" json:"tokensSlashedAVS,omitempty"`
}

func (x *SlashEvent) Reset() {
	*x = SlashEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashEvent) ProtoMessage() {}

// Deprecated: Use SlashEvent.ProtoReflect.Descriptor instead.
func (*SlashEvent) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_hybrid_validation_proto_rawDescGZIP(), []int{2}
}

func (x *SlashEvent) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *SlashEvent) GetValidatorAddr() string {
	if x != nil {
		return x.ValidatorAddr
	}
	return ""
}

func (x *SlashEvent) GetPercentageSlashed() string {
	if x != nil {
		return x.PercentageSlashed
	}
	return ""
}

func (x *SlashEvent) GetTokensSlashedNative() string {
	if x != nil {
		return x.TokensSlashedNative
	}
	return ""
}

func (x *SlashEvent) GetTokensSlashedAVS() string {
	if x != nil {
		return x.TokensSlashedAVS
	}
	return ""
}

type HVParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AVSRewardsRate           string       `protobuf:"bytes,1,opt,name=AVSRewardsRate,proto3" json:"AVSRewardsRate,omitempty"` // % APR
	BlockTime                int64        `protobuf:"varint,2,opt,name=BlockTime,proto3" json:"BlockTime,omitempty"`          // seconds
	StakeableAssets          []*AssetData `protobuf:"bytes,3,rep,name=stakeableAssets,proto3" json:"stakeableAssets,omitempty"`
	PriceRetentionBlockRange int64        `protobuf:"varint,4,opt,name=priceRetentionBlockRange,proto3" json:"priceRetentionBlockRange,omitempty"`
}

func (x *HVParams) Reset() {
	*x = HVParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HVParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HVParams) ProtoMessage() {}

// Deprecated: Use HVParams.ProtoReflect.Descriptor instead.
func (*HVParams) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_hybrid_validation_proto_rawDescGZIP(), []int{3}
}

func (x *HVParams) GetAVSRewardsRate() string {
	if x != nil {
		return x.AVSRewardsRate
	}
	return ""
}

func (x *HVParams) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *HVParams) GetStakeableAssets() []*AssetData {
	if x != nil {
		return x.StakeableAssets
	}
	return nil
}

func (x *HVParams) GetPriceRetentionBlockRange() int64 {
	if x != nil {
		return x.PriceRetentionBlockRange
	}
	return 0
}

type ValidationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonVotingValidators      []string `protobuf:"bytes,1,rep,name=non_voting_validators,json=nonVotingValidators,proto3" json:"non_voting_validators,omitempty"`
	MismatchedVoteExtensions []string `protobuf:"bytes,2,rep,name=mismatched_vote_extensions,json=mismatchedVoteExtensions,proto3" json:"mismatched_vote_extensions,omitempty"`
}

func (x *ValidationInfo) Reset() {
	*x = ValidationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_validation_hybrid_validation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationInfo) ProtoMessage() {}

// Deprecated: Use ValidationInfo.ProtoReflect.Descriptor instead.
func (*ValidationInfo) Descriptor() ([]byte, []int) {
	return file_zrchain_validation_hybrid_validation_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationInfo) GetNonVotingValidators() []string {
	if x != nil {
		return x.NonVotingValidators
	}
	return nil
}

func (x *ValidationInfo) GetMismatchedVoteExtensions() []string {
	if x != nil {
		return x.MismatchedVoteExtensions
	}
	return nil
}

var File_zrchain_validation_hybrid_validation_proto protoreflect.FileDescriptor

var file_zrchain_validation_hybrid_validation_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x07, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x56, 0x12, 0x43, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x18, 0xca, 0xb4, 0x2d, 0x14,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x41, 0x56, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x41, 0x56,
	0x53, 0x12, 0x5c, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x75, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0xc8, 0xde,
	0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x75, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x11, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0x93, 0x01, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x56, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x09,
	0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x56, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x73, 0x65, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x0a, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x5f, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x5d, 0x0a,
	0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x57, 0x0a, 0x10,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x41, 0x56, 0x53,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x6c, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x56, 0x53, 0x22, 0x88, 0x02, 0x0a, 0x08, 0x48, 0x56, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x41, 0x56, 0x53, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e, 0x41,
	0x56, 0x53, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xbd, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02,
	0x03, 0x5a, 0x56, 0x58, 0xaa, 0x02, 0x12, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x12, 0x5a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02,
	0x1e, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x13, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_validation_hybrid_validation_proto_rawDescOnce sync.Once
	file_zrchain_validation_hybrid_validation_proto_rawDescData = file_zrchain_validation_hybrid_validation_proto_rawDesc
)

func file_zrchain_validation_hybrid_validation_proto_rawDescGZIP() []byte {
	file_zrchain_validation_hybrid_validation_proto_rawDescOnce.Do(func() {
		file_zrchain_validation_hybrid_validation_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_validation_hybrid_validation_proto_rawDescData)
	})
	return file_zrchain_validation_hybrid_validation_proto_rawDescData
}

var file_zrchain_validation_hybrid_validation_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_zrchain_validation_hybrid_validation_proto_goTypes = []interface{}{
	(*ValidatorHV)(nil),           // 0: zrchain.validation.ValidatorHV
	(*HistoricalInfoHV)(nil),      // 1: zrchain.validation.HistoricalInfoHV
	(*SlashEvent)(nil),            // 2: zrchain.validation.SlashEvent
	(*HVParams)(nil),              // 3: zrchain.validation.HVParams
	(*ValidationInfo)(nil),        // 4: zrchain.validation.ValidationInfo
	(*anypb.Any)(nil),             // 5: google.protobuf.Any
	(BondStatus)(0),               // 6: zrchain.validation.BondStatus
	(*Description)(nil),           // 7: zrchain.validation.Description
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*Commission)(nil),            // 9: zrchain.validation.Commission
	(*types.Header)(nil),          // 10: tendermint.types.Header
	(*AssetData)(nil),             // 11: zrchain.validation.AssetData
}
var file_zrchain_validation_hybrid_validation_proto_depIdxs = []int32{
	5,  // 0: zrchain.validation.ValidatorHV.consensus_pubkey:type_name -> google.protobuf.Any
	6,  // 1: zrchain.validation.ValidatorHV.status:type_name -> zrchain.validation.BondStatus
	7,  // 2: zrchain.validation.ValidatorHV.description:type_name -> zrchain.validation.Description
	8,  // 3: zrchain.validation.ValidatorHV.unbonding_time:type_name -> google.protobuf.Timestamp
	9,  // 4: zrchain.validation.ValidatorHV.commission:type_name -> zrchain.validation.Commission
	10, // 5: zrchain.validation.HistoricalInfoHV.header:type_name -> tendermint.types.Header
	0,  // 6: zrchain.validation.HistoricalInfoHV.valset:type_name -> zrchain.validation.ValidatorHV
	11, // 7: zrchain.validation.HVParams.stakeableAssets:type_name -> zrchain.validation.AssetData
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_zrchain_validation_hybrid_validation_proto_init() }
func file_zrchain_validation_hybrid_validation_proto_init() {
	if File_zrchain_validation_hybrid_validation_proto != nil {
		return
	}
	file_zrchain_validation_asset_data_proto_init()
	file_zrchain_validation_staking_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zrchain_validation_hybrid_validation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorHV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_validation_hybrid_validation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalInfoHV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_validation_hybrid_validation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlashEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_validation_hybrid_validation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HVParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_validation_hybrid_validation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_validation_hybrid_validation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_validation_hybrid_validation_proto_goTypes,
		DependencyIndexes: file_zrchain_validation_hybrid_validation_proto_depIdxs,
		MessageInfos:      file_zrchain_validation_hybrid_validation_proto_msgTypes,
	}.Build()
	File_zrchain_validation_hybrid_validation_proto = out.File
	file_zrchain_validation_hybrid_validation_proto_rawDesc = nil
	file_zrchain_validation_hybrid_validation_proto_goTypes = nil
	file_zrchain_validation_hybrid_validation_proto_depIdxs = nil
}
