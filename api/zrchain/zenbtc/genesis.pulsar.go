// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package zenbtc

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.Map = (*_GenesisState_2_map)(nil)

type _GenesisState_2_map struct {
	m *map[string]*LockTransaction
}

func (x *_GenesisState_2_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_GenesisState_2_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_GenesisState_2_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_GenesisState_2_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_GenesisState_2_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LockTransaction)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_GenesisState_2_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(LockTransaction)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_GenesisState_2_map) NewValue() protoreflect.Value {
	v := new(LockTransaction)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_GenesisState_3_map)(nil)

type _GenesisState_3_map struct {
	m *map[uint64]*PendingMintTransaction
}

func (x *_GenesisState_3_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_GenesisState_3_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfUint64(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_GenesisState_3_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Uint()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_GenesisState_3_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_GenesisState_3_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PendingMintTransaction)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_GenesisState_3_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(PendingMintTransaction)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_GenesisState_3_map) NewValue() protoreflect.Value {
	v := new(PendingMintTransaction)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_GenesisState_7_map)(nil)

type _GenesisState_7_map struct {
	m *map[uint64]*BurnEvent
}

func (x *_GenesisState_7_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_GenesisState_7_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfUint64(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_GenesisState_7_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Uint()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_GenesisState_7_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_GenesisState_7_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BurnEvent)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_GenesisState_7_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(BurnEvent)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_GenesisState_7_map) NewValue() protoreflect.Value {
	v := new(BurnEvent)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_GenesisState_10_map)(nil)

type _GenesisState_10_map struct {
	m *map[uint64]*Redemption
}

func (x *_GenesisState_10_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_GenesisState_10_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfUint64(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_GenesisState_10_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Uint()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_GenesisState_10_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_GenesisState_10_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Redemption)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_GenesisState_10_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(Redemption)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_GenesisState_10_map) NewValue() protoreflect.Value {
	v := new(Redemption)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_map) IsValid() bool {
	return x.m != nil
}

var (
	md_GenesisState                                    protoreflect.MessageDescriptor
	fd_GenesisState_params                             protoreflect.FieldDescriptor
	fd_GenesisState_lock_transactions                  protoreflect.FieldDescriptor
	fd_GenesisState_pending_mint_transactions          protoreflect.FieldDescriptor
	fd_GenesisState_first_pending_eth_mint_transaction protoreflect.FieldDescriptor
	fd_GenesisState_first_pending_sol_mint_transaction protoreflect.FieldDescriptor
	fd_GenesisState_pending_mint_transaction_count     protoreflect.FieldDescriptor
	fd_GenesisState_burn_events                        protoreflect.FieldDescriptor
	fd_GenesisState_first_pending_burn_event           protoreflect.FieldDescriptor
	fd_GenesisState_burn_event_count                   protoreflect.FieldDescriptor
	fd_GenesisState_redemptions                        protoreflect.FieldDescriptor
	fd_GenesisState_first_pending_redemption           protoreflect.FieldDescriptor
	fd_GenesisState_first_redemption_awaiting_sign     protoreflect.FieldDescriptor
	fd_GenesisState_supply                             protoreflect.FieldDescriptor
	fd_GenesisState_first_pending_stake_transaction    protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zenbtc_genesis_proto_init()
	md_GenesisState = File_zrchain_zenbtc_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_lock_transactions = md_GenesisState.Fields().ByName("lock_transactions")
	fd_GenesisState_pending_mint_transactions = md_GenesisState.Fields().ByName("pending_mint_transactions")
	fd_GenesisState_first_pending_eth_mint_transaction = md_GenesisState.Fields().ByName("first_pending_eth_mint_transaction")
	fd_GenesisState_first_pending_sol_mint_transaction = md_GenesisState.Fields().ByName("first_pending_sol_mint_transaction")
	fd_GenesisState_pending_mint_transaction_count = md_GenesisState.Fields().ByName("pending_mint_transaction_count")
	fd_GenesisState_burn_events = md_GenesisState.Fields().ByName("burn_events")
	fd_GenesisState_first_pending_burn_event = md_GenesisState.Fields().ByName("first_pending_burn_event")
	fd_GenesisState_burn_event_count = md_GenesisState.Fields().ByName("burn_event_count")
	fd_GenesisState_redemptions = md_GenesisState.Fields().ByName("redemptions")
	fd_GenesisState_first_pending_redemption = md_GenesisState.Fields().ByName("first_pending_redemption")
	fd_GenesisState_first_redemption_awaiting_sign = md_GenesisState.Fields().ByName("first_redemption_awaiting_sign")
	fd_GenesisState_supply = md_GenesisState.Fields().ByName("supply")
	fd_GenesisState_first_pending_stake_transaction = md_GenesisState.Fields().ByName("first_pending_stake_transaction")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zenbtc_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if len(x.LockTransactions) != 0 {
		value := protoreflect.ValueOfMap(&_GenesisState_2_map{m: &x.LockTransactions})
		if !f(fd_GenesisState_lock_transactions, value) {
			return
		}
	}
	if len(x.PendingMintTransactions) != 0 {
		value := protoreflect.ValueOfMap(&_GenesisState_3_map{m: &x.PendingMintTransactions})
		if !f(fd_GenesisState_pending_mint_transactions, value) {
			return
		}
	}
	if x.FirstPendingEthMintTransaction != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FirstPendingEthMintTransaction)
		if !f(fd_GenesisState_first_pending_eth_mint_transaction, value) {
			return
		}
	}
	if x.FirstPendingSolMintTransaction != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FirstPendingSolMintTransaction)
		if !f(fd_GenesisState_first_pending_sol_mint_transaction, value) {
			return
		}
	}
	if x.PendingMintTransactionCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PendingMintTransactionCount)
		if !f(fd_GenesisState_pending_mint_transaction_count, value) {
			return
		}
	}
	if len(x.BurnEvents) != 0 {
		value := protoreflect.ValueOfMap(&_GenesisState_7_map{m: &x.BurnEvents})
		if !f(fd_GenesisState_burn_events, value) {
			return
		}
	}
	if x.FirstPendingBurnEvent != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FirstPendingBurnEvent)
		if !f(fd_GenesisState_first_pending_burn_event, value) {
			return
		}
	}
	if x.BurnEventCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BurnEventCount)
		if !f(fd_GenesisState_burn_event_count, value) {
			return
		}
	}
	if len(x.Redemptions) != 0 {
		value := protoreflect.ValueOfMap(&_GenesisState_10_map{m: &x.Redemptions})
		if !f(fd_GenesisState_redemptions, value) {
			return
		}
	}
	if x.FirstPendingRedemption != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FirstPendingRedemption)
		if !f(fd_GenesisState_first_pending_redemption, value) {
			return
		}
	}
	if x.FirstRedemptionAwaitingSign != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FirstRedemptionAwaitingSign)
		if !f(fd_GenesisState_first_redemption_awaiting_sign, value) {
			return
		}
	}
	if x.Supply != nil {
		value := protoreflect.ValueOfMessage(x.Supply.ProtoReflect())
		if !f(fd_GenesisState_supply, value) {
			return
		}
	}
	if x.FirstPendingStakeTransaction != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FirstPendingStakeTransaction)
		if !f(fd_GenesisState_first_pending_stake_transaction, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zenbtc.GenesisState.params":
		return x.Params != nil
	case "zrchain.zenbtc.GenesisState.lock_transactions":
		return len(x.LockTransactions) != 0
	case "zrchain.zenbtc.GenesisState.pending_mint_transactions":
		return len(x.PendingMintTransactions) != 0
	case "zrchain.zenbtc.GenesisState.first_pending_eth_mint_transaction":
		return x.FirstPendingEthMintTransaction != uint64(0)
	case "zrchain.zenbtc.GenesisState.first_pending_sol_mint_transaction":
		return x.FirstPendingSolMintTransaction != uint64(0)
	case "zrchain.zenbtc.GenesisState.pending_mint_transaction_count":
		return x.PendingMintTransactionCount != uint64(0)
	case "zrchain.zenbtc.GenesisState.burn_events":
		return len(x.BurnEvents) != 0
	case "zrchain.zenbtc.GenesisState.first_pending_burn_event":
		return x.FirstPendingBurnEvent != uint64(0)
	case "zrchain.zenbtc.GenesisState.burn_event_count":
		return x.BurnEventCount != uint64(0)
	case "zrchain.zenbtc.GenesisState.redemptions":
		return len(x.Redemptions) != 0
	case "zrchain.zenbtc.GenesisState.first_pending_redemption":
		return x.FirstPendingRedemption != uint64(0)
	case "zrchain.zenbtc.GenesisState.first_redemption_awaiting_sign":
		return x.FirstRedemptionAwaitingSign != uint64(0)
	case "zrchain.zenbtc.GenesisState.supply":
		return x.Supply != nil
	case "zrchain.zenbtc.GenesisState.first_pending_stake_transaction":
		return x.FirstPendingStakeTransaction != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zenbtc.GenesisState.params":
		x.Params = nil
	case "zrchain.zenbtc.GenesisState.lock_transactions":
		x.LockTransactions = nil
	case "zrchain.zenbtc.GenesisState.pending_mint_transactions":
		x.PendingMintTransactions = nil
	case "zrchain.zenbtc.GenesisState.first_pending_eth_mint_transaction":
		x.FirstPendingEthMintTransaction = uint64(0)
	case "zrchain.zenbtc.GenesisState.first_pending_sol_mint_transaction":
		x.FirstPendingSolMintTransaction = uint64(0)
	case "zrchain.zenbtc.GenesisState.pending_mint_transaction_count":
		x.PendingMintTransactionCount = uint64(0)
	case "zrchain.zenbtc.GenesisState.burn_events":
		x.BurnEvents = nil
	case "zrchain.zenbtc.GenesisState.first_pending_burn_event":
		x.FirstPendingBurnEvent = uint64(0)
	case "zrchain.zenbtc.GenesisState.burn_event_count":
		x.BurnEventCount = uint64(0)
	case "zrchain.zenbtc.GenesisState.redemptions":
		x.Redemptions = nil
	case "zrchain.zenbtc.GenesisState.first_pending_redemption":
		x.FirstPendingRedemption = uint64(0)
	case "zrchain.zenbtc.GenesisState.first_redemption_awaiting_sign":
		x.FirstRedemptionAwaitingSign = uint64(0)
	case "zrchain.zenbtc.GenesisState.supply":
		x.Supply = nil
	case "zrchain.zenbtc.GenesisState.first_pending_stake_transaction":
		x.FirstPendingStakeTransaction = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zenbtc.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.zenbtc.GenesisState.lock_transactions":
		if len(x.LockTransactions) == 0 {
			return protoreflect.ValueOfMap(&_GenesisState_2_map{})
		}
		mapValue := &_GenesisState_2_map{m: &x.LockTransactions}
		return protoreflect.ValueOfMap(mapValue)
	case "zrchain.zenbtc.GenesisState.pending_mint_transactions":
		if len(x.PendingMintTransactions) == 0 {
			return protoreflect.ValueOfMap(&_GenesisState_3_map{})
		}
		mapValue := &_GenesisState_3_map{m: &x.PendingMintTransactions}
		return protoreflect.ValueOfMap(mapValue)
	case "zrchain.zenbtc.GenesisState.first_pending_eth_mint_transaction":
		value := x.FirstPendingEthMintTransaction
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.first_pending_sol_mint_transaction":
		value := x.FirstPendingSolMintTransaction
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.pending_mint_transaction_count":
		value := x.PendingMintTransactionCount
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.burn_events":
		if len(x.BurnEvents) == 0 {
			return protoreflect.ValueOfMap(&_GenesisState_7_map{})
		}
		mapValue := &_GenesisState_7_map{m: &x.BurnEvents}
		return protoreflect.ValueOfMap(mapValue)
	case "zrchain.zenbtc.GenesisState.first_pending_burn_event":
		value := x.FirstPendingBurnEvent
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.burn_event_count":
		value := x.BurnEventCount
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.redemptions":
		if len(x.Redemptions) == 0 {
			return protoreflect.ValueOfMap(&_GenesisState_10_map{})
		}
		mapValue := &_GenesisState_10_map{m: &x.Redemptions}
		return protoreflect.ValueOfMap(mapValue)
	case "zrchain.zenbtc.GenesisState.first_pending_redemption":
		value := x.FirstPendingRedemption
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.first_redemption_awaiting_sign":
		value := x.FirstRedemptionAwaitingSign
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.GenesisState.supply":
		value := x.Supply
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "zrchain.zenbtc.GenesisState.first_pending_stake_transaction":
		value := x.FirstPendingStakeTransaction
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zenbtc.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "zrchain.zenbtc.GenesisState.lock_transactions":
		mv := value.Map()
		cmv := mv.(*_GenesisState_2_map)
		x.LockTransactions = *cmv.m
	case "zrchain.zenbtc.GenesisState.pending_mint_transactions":
		mv := value.Map()
		cmv := mv.(*_GenesisState_3_map)
		x.PendingMintTransactions = *cmv.m
	case "zrchain.zenbtc.GenesisState.first_pending_eth_mint_transaction":
		x.FirstPendingEthMintTransaction = value.Uint()
	case "zrchain.zenbtc.GenesisState.first_pending_sol_mint_transaction":
		x.FirstPendingSolMintTransaction = value.Uint()
	case "zrchain.zenbtc.GenesisState.pending_mint_transaction_count":
		x.PendingMintTransactionCount = value.Uint()
	case "zrchain.zenbtc.GenesisState.burn_events":
		mv := value.Map()
		cmv := mv.(*_GenesisState_7_map)
		x.BurnEvents = *cmv.m
	case "zrchain.zenbtc.GenesisState.first_pending_burn_event":
		x.FirstPendingBurnEvent = value.Uint()
	case "zrchain.zenbtc.GenesisState.burn_event_count":
		x.BurnEventCount = value.Uint()
	case "zrchain.zenbtc.GenesisState.redemptions":
		mv := value.Map()
		cmv := mv.(*_GenesisState_10_map)
		x.Redemptions = *cmv.m
	case "zrchain.zenbtc.GenesisState.first_pending_redemption":
		x.FirstPendingRedemption = value.Uint()
	case "zrchain.zenbtc.GenesisState.first_redemption_awaiting_sign":
		x.FirstRedemptionAwaitingSign = value.Uint()
	case "zrchain.zenbtc.GenesisState.supply":
		x.Supply = value.Message().Interface().(*Supply)
	case "zrchain.zenbtc.GenesisState.first_pending_stake_transaction":
		x.FirstPendingStakeTransaction = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenbtc.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "zrchain.zenbtc.GenesisState.lock_transactions":
		if x.LockTransactions == nil {
			x.LockTransactions = make(map[string]*LockTransaction)
		}
		value := &_GenesisState_2_map{m: &x.LockTransactions}
		return protoreflect.ValueOfMap(value)
	case "zrchain.zenbtc.GenesisState.pending_mint_transactions":
		if x.PendingMintTransactions == nil {
			x.PendingMintTransactions = make(map[uint64]*PendingMintTransaction)
		}
		value := &_GenesisState_3_map{m: &x.PendingMintTransactions}
		return protoreflect.ValueOfMap(value)
	case "zrchain.zenbtc.GenesisState.burn_events":
		if x.BurnEvents == nil {
			x.BurnEvents = make(map[uint64]*BurnEvent)
		}
		value := &_GenesisState_7_map{m: &x.BurnEvents}
		return protoreflect.ValueOfMap(value)
	case "zrchain.zenbtc.GenesisState.redemptions":
		if x.Redemptions == nil {
			x.Redemptions = make(map[uint64]*Redemption)
		}
		value := &_GenesisState_10_map{m: &x.Redemptions}
		return protoreflect.ValueOfMap(value)
	case "zrchain.zenbtc.GenesisState.supply":
		if x.Supply == nil {
			x.Supply = new(Supply)
		}
		return protoreflect.ValueOfMessage(x.Supply.ProtoReflect())
	case "zrchain.zenbtc.GenesisState.first_pending_eth_mint_transaction":
		panic(fmt.Errorf("field first_pending_eth_mint_transaction of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.first_pending_sol_mint_transaction":
		panic(fmt.Errorf("field first_pending_sol_mint_transaction of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.pending_mint_transaction_count":
		panic(fmt.Errorf("field pending_mint_transaction_count of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.first_pending_burn_event":
		panic(fmt.Errorf("field first_pending_burn_event of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.burn_event_count":
		panic(fmt.Errorf("field burn_event_count of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.first_pending_redemption":
		panic(fmt.Errorf("field first_pending_redemption of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.first_redemption_awaiting_sign":
		panic(fmt.Errorf("field first_redemption_awaiting_sign of message zrchain.zenbtc.GenesisState is not mutable"))
	case "zrchain.zenbtc.GenesisState.first_pending_stake_transaction":
		panic(fmt.Errorf("field first_pending_stake_transaction of message zrchain.zenbtc.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenbtc.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.zenbtc.GenesisState.lock_transactions":
		m := make(map[string]*LockTransaction)
		return protoreflect.ValueOfMap(&_GenesisState_2_map{m: &m})
	case "zrchain.zenbtc.GenesisState.pending_mint_transactions":
		m := make(map[uint64]*PendingMintTransaction)
		return protoreflect.ValueOfMap(&_GenesisState_3_map{m: &m})
	case "zrchain.zenbtc.GenesisState.first_pending_eth_mint_transaction":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.first_pending_sol_mint_transaction":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.pending_mint_transaction_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.burn_events":
		m := make(map[uint64]*BurnEvent)
		return protoreflect.ValueOfMap(&_GenesisState_7_map{m: &m})
	case "zrchain.zenbtc.GenesisState.first_pending_burn_event":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.burn_event_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.redemptions":
		m := make(map[uint64]*Redemption)
		return protoreflect.ValueOfMap(&_GenesisState_10_map{m: &m})
	case "zrchain.zenbtc.GenesisState.first_pending_redemption":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.first_redemption_awaiting_sign":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.GenesisState.supply":
		m := new(Supply)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "zrchain.zenbtc.GenesisState.first_pending_stake_transaction":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.GenesisState"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zenbtc.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.LockTransactions) > 0 {
			SiZeMaP := func(k string, v *LockTransaction) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.LockTransactions))
				for k := range x.LockTransactions {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.LockTransactions[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.LockTransactions {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.PendingMintTransactions) > 0 {
			SiZeMaP := func(k uint64, v *PendingMintTransaction) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]uint64, 0, len(x.PendingMintTransactions))
				for k := range x.PendingMintTransactions {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.PendingMintTransactions[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.PendingMintTransactions {
					SiZeMaP(k, v)
				}
			}
		}
		if x.FirstPendingEthMintTransaction != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstPendingEthMintTransaction))
		}
		if x.FirstPendingSolMintTransaction != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstPendingSolMintTransaction))
		}
		if x.PendingMintTransactionCount != 0 {
			n += 1 + runtime.Sov(uint64(x.PendingMintTransactionCount))
		}
		if len(x.BurnEvents) > 0 {
			SiZeMaP := func(k uint64, v *BurnEvent) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]uint64, 0, len(x.BurnEvents))
				for k := range x.BurnEvents {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.BurnEvents[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.BurnEvents {
					SiZeMaP(k, v)
				}
			}
		}
		if x.FirstPendingBurnEvent != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstPendingBurnEvent))
		}
		if x.BurnEventCount != 0 {
			n += 1 + runtime.Sov(uint64(x.BurnEventCount))
		}
		if len(x.Redemptions) > 0 {
			SiZeMaP := func(k uint64, v *Redemption) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]uint64, 0, len(x.Redemptions))
				for k := range x.Redemptions {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.Redemptions[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Redemptions {
					SiZeMaP(k, v)
				}
			}
		}
		if x.FirstPendingRedemption != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstPendingRedemption))
		}
		if x.FirstRedemptionAwaitingSign != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstRedemptionAwaitingSign))
		}
		if x.Supply != nil {
			l = options.Size(x.Supply)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FirstPendingStakeTransaction != 0 {
			n += 1 + runtime.Sov(uint64(x.FirstPendingStakeTransaction))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FirstPendingStakeTransaction != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstPendingStakeTransaction))
			i--
			dAtA[i] = 0x70
		}
		if x.Supply != nil {
			encoded, err := options.Marshal(x.Supply)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x6a
		}
		if x.FirstRedemptionAwaitingSign != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstRedemptionAwaitingSign))
			i--
			dAtA[i] = 0x60
		}
		if x.FirstPendingRedemption != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstPendingRedemption))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Redemptions) > 0 {
			MaRsHaLmAp := func(k uint64, v *Redemption) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x52
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForRedemptions := make([]uint64, 0, len(x.Redemptions))
				for k := range x.Redemptions {
					keysForRedemptions = append(keysForRedemptions, uint64(k))
				}
				sort.Slice(keysForRedemptions, func(i, j int) bool {
					return keysForRedemptions[i] < keysForRedemptions[j]
				})
				for iNdEx := len(keysForRedemptions) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Redemptions[uint64(keysForRedemptions[iNdEx])]
					out, err := MaRsHaLmAp(keysForRedemptions[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Redemptions {
					v := x.Redemptions[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if x.BurnEventCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BurnEventCount))
			i--
			dAtA[i] = 0x48
		}
		if x.FirstPendingBurnEvent != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstPendingBurnEvent))
			i--
			dAtA[i] = 0x40
		}
		if len(x.BurnEvents) > 0 {
			MaRsHaLmAp := func(k uint64, v *BurnEvent) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x3a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForBurnEvents := make([]uint64, 0, len(x.BurnEvents))
				for k := range x.BurnEvents {
					keysForBurnEvents = append(keysForBurnEvents, uint64(k))
				}
				sort.Slice(keysForBurnEvents, func(i, j int) bool {
					return keysForBurnEvents[i] < keysForBurnEvents[j]
				})
				for iNdEx := len(keysForBurnEvents) - 1; iNdEx >= 0; iNdEx-- {
					v := x.BurnEvents[uint64(keysForBurnEvents[iNdEx])]
					out, err := MaRsHaLmAp(keysForBurnEvents[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.BurnEvents {
					v := x.BurnEvents[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if x.PendingMintTransactionCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PendingMintTransactionCount))
			i--
			dAtA[i] = 0x30
		}
		if x.FirstPendingSolMintTransaction != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstPendingSolMintTransaction))
			i--
			dAtA[i] = 0x28
		}
		if x.FirstPendingEthMintTransaction != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FirstPendingEthMintTransaction))
			i--
			dAtA[i] = 0x20
		}
		if len(x.PendingMintTransactions) > 0 {
			MaRsHaLmAp := func(k uint64, v *PendingMintTransaction) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x1a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForPendingMintTransactions := make([]uint64, 0, len(x.PendingMintTransactions))
				for k := range x.PendingMintTransactions {
					keysForPendingMintTransactions = append(keysForPendingMintTransactions, uint64(k))
				}
				sort.Slice(keysForPendingMintTransactions, func(i, j int) bool {
					return keysForPendingMintTransactions[i] < keysForPendingMintTransactions[j]
				})
				for iNdEx := len(keysForPendingMintTransactions) - 1; iNdEx >= 0; iNdEx-- {
					v := x.PendingMintTransactions[uint64(keysForPendingMintTransactions[iNdEx])]
					out, err := MaRsHaLmAp(keysForPendingMintTransactions[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.PendingMintTransactions {
					v := x.PendingMintTransactions[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.LockTransactions) > 0 {
			MaRsHaLmAp := func(k string, v *LockTransaction) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x12
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForLockTransactions := make([]string, 0, len(x.LockTransactions))
				for k := range x.LockTransactions {
					keysForLockTransactions = append(keysForLockTransactions, string(k))
				}
				sort.Slice(keysForLockTransactions, func(i, j int) bool {
					return keysForLockTransactions[i] < keysForLockTransactions[j]
				})
				for iNdEx := len(keysForLockTransactions) - 1; iNdEx >= 0; iNdEx-- {
					v := x.LockTransactions[string(keysForLockTransactions[iNdEx])]
					out, err := MaRsHaLmAp(keysForLockTransactions[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.LockTransactions {
					v := x.LockTransactions[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockTransactions", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LockTransactions == nil {
					x.LockTransactions = make(map[string]*LockTransaction)
				}
				var mapkey string
				var mapvalue *LockTransaction
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &LockTransaction{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.LockTransactions[mapkey] = mapvalue
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingMintTransactions", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PendingMintTransactions == nil {
					x.PendingMintTransactions = make(map[uint64]*PendingMintTransaction)
				}
				var mapkey uint64
				var mapvalue *PendingMintTransaction
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &PendingMintTransaction{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.PendingMintTransactions[mapkey] = mapvalue
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstPendingEthMintTransaction", wireType)
				}
				x.FirstPendingEthMintTransaction = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstPendingEthMintTransaction |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstPendingSolMintTransaction", wireType)
				}
				x.FirstPendingSolMintTransaction = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstPendingSolMintTransaction |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingMintTransactionCount", wireType)
				}
				x.PendingMintTransactionCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PendingMintTransactionCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnEvents", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BurnEvents == nil {
					x.BurnEvents = make(map[uint64]*BurnEvent)
				}
				var mapkey uint64
				var mapvalue *BurnEvent
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &BurnEvent{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.BurnEvents[mapkey] = mapvalue
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstPendingBurnEvent", wireType)
				}
				x.FirstPendingBurnEvent = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstPendingBurnEvent |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnEventCount", wireType)
				}
				x.BurnEventCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BurnEventCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Redemptions", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Redemptions == nil {
					x.Redemptions = make(map[uint64]*Redemption)
				}
				var mapkey uint64
				var mapvalue *Redemption
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &Redemption{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Redemptions[mapkey] = mapvalue
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstPendingRedemption", wireType)
				}
				x.FirstPendingRedemption = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstPendingRedemption |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstRedemptionAwaitingSign", wireType)
				}
				x.FirstRedemptionAwaitingSign = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstRedemptionAwaitingSign |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Supply == nil {
					x.Supply = &Supply{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Supply); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstPendingStakeTransaction", wireType)
				}
				x.FirstPendingStakeTransaction = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FirstPendingStakeTransaction |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/zenbtc/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the zenbtc module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines all the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// lock_transactions defines the lock transactions of the module.
	LockTransactions map[string]*LockTransaction `protobuf:"bytes,2,rep,name=lock_transactions,json=lockTransactions,proto3" json:"lock_transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// pending_mint_transactions defines the pending mint transactions of the module.
	PendingMintTransactions map[uint64]*PendingMintTransaction `protobuf:"bytes,3,rep,name=pending_mint_transactions,json=pendingMintTransactions,proto3" json:"pending_mint_transactions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// first_pending_eth_mint_transaction defines the first pending Ethereum mint transaction of the module.
	FirstPendingEthMintTransaction uint64 `protobuf:"varint,4,opt,name=first_pending_eth_mint_transaction,json=firstPendingEthMintTransaction,proto3" json:"first_pending_eth_mint_transaction,omitempty"`
	// first_pending_sol_mint_transaction defines the first pending Solana mint transaction of the module.
	FirstPendingSolMintTransaction uint64 `protobuf:"varint,5,opt,name=first_pending_sol_mint_transaction,json=firstPendingSolMintTransaction,proto3" json:"first_pending_sol_mint_transaction,omitempty"`
	// pending_mint_transaction_count defines the count of pending mint transactions of the module.
	PendingMintTransactionCount uint64 `protobuf:"varint,6,opt,name=pending_mint_transaction_count,json=pendingMintTransactionCount,proto3" json:"pending_mint_transaction_count,omitempty"`
	// burn_events defines the burn events of the module.
	BurnEvents map[uint64]*BurnEvent `protobuf:"bytes,7,rep,name=burn_events,json=burnEvents,proto3" json:"burn_events,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// first_pending_burn_event defines the first pending burn event of the module.
	FirstPendingBurnEvent uint64 `protobuf:"varint,8,opt,name=first_pending_burn_event,json=firstPendingBurnEvent,proto3" json:"first_pending_burn_event,omitempty"`
	// burn_event_count defines the count of burn events of the module.
	BurnEventCount uint64 `protobuf:"varint,9,opt,name=burn_event_count,json=burnEventCount,proto3" json:"burn_event_count,omitempty"`
	// redemptions defines the redemptions of the module.
	Redemptions map[uint64]*Redemption `protobuf:"bytes,10,rep,name=redemptions,proto3" json:"redemptions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// first_pending_redemption defines the first pending redemption of the module.
	FirstPendingRedemption uint64 `protobuf:"varint,11,opt,name=first_pending_redemption,json=firstPendingRedemption,proto3" json:"first_pending_redemption,omitempty"`
	// first_redemption_awaiting_sign defines the first redemption awaiting sign of the module.
	FirstRedemptionAwaitingSign uint64 `protobuf:"varint,12,opt,name=first_redemption_awaiting_sign,json=firstRedemptionAwaitingSign,proto3" json:"first_redemption_awaiting_sign,omitempty"`
	// supply defines the supply of the module.
	Supply *Supply `protobuf:"bytes,13,opt,name=supply,proto3" json:"supply,omitempty"`
	// first_pending_stake_transaction defines the first pending stake transaction of the module.
	FirstPendingStakeTransaction uint64 `protobuf:"varint,14,opt,name=first_pending_stake_transaction,json=firstPendingStakeTransaction,proto3" json:"first_pending_stake_transaction,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zenbtc_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_zrchain_zenbtc_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetLockTransactions() map[string]*LockTransaction {
	if x != nil {
		return x.LockTransactions
	}
	return nil
}

func (x *GenesisState) GetPendingMintTransactions() map[uint64]*PendingMintTransaction {
	if x != nil {
		return x.PendingMintTransactions
	}
	return nil
}

func (x *GenesisState) GetFirstPendingEthMintTransaction() uint64 {
	if x != nil {
		return x.FirstPendingEthMintTransaction
	}
	return 0
}

func (x *GenesisState) GetFirstPendingSolMintTransaction() uint64 {
	if x != nil {
		return x.FirstPendingSolMintTransaction
	}
	return 0
}

func (x *GenesisState) GetPendingMintTransactionCount() uint64 {
	if x != nil {
		return x.PendingMintTransactionCount
	}
	return 0
}

func (x *GenesisState) GetBurnEvents() map[uint64]*BurnEvent {
	if x != nil {
		return x.BurnEvents
	}
	return nil
}

func (x *GenesisState) GetFirstPendingBurnEvent() uint64 {
	if x != nil {
		return x.FirstPendingBurnEvent
	}
	return 0
}

func (x *GenesisState) GetBurnEventCount() uint64 {
	if x != nil {
		return x.BurnEventCount
	}
	return 0
}

func (x *GenesisState) GetRedemptions() map[uint64]*Redemption {
	if x != nil {
		return x.Redemptions
	}
	return nil
}

func (x *GenesisState) GetFirstPendingRedemption() uint64 {
	if x != nil {
		return x.FirstPendingRedemption
	}
	return 0
}

func (x *GenesisState) GetFirstRedemptionAwaitingSign() uint64 {
	if x != nil {
		return x.FirstRedemptionAwaitingSign
	}
	return 0
}

func (x *GenesisState) GetSupply() *Supply {
	if x != nil {
		return x.Supply
	}
	return nil
}

func (x *GenesisState) GetFirstPendingStakeTransaction() uint64 {
	if x != nil {
		return x.FirstPendingStakeTransaction
	}
	return 0
}

var File_zrchain_zenbtc_genesis_proto protoreflect.FileDescriptor

var file_zrchain_zenbtc_genesis_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x1a, 0x11,
	0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65,
	0x6e, 0x62, 0x74, 0x63, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x74,
	0x63, 0x2f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e,
	0x62, 0x74, 0x63, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf,
	0x0b, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x17, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x72,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x75, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x64, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x1c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0f, 0x42, 0x75,
	0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e,
	0x42, 0x75, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0xb8, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x65, 0x6e, 0x72, 0x6f, 0x63, 0x6b, 0x2d, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76,
	0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65,
	0x6e, 0x62, 0x74, 0x63, 0xa2, 0x02, 0x03, 0x5a, 0x5a, 0x58, 0xaa, 0x02, 0x0e, 0x5a, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x5a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0xca, 0x02, 0x0e, 0x5a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0xe2, 0x02, 0x1a, 0x5a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x5a, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x5a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zrchain_zenbtc_genesis_proto_rawDescOnce sync.Once
	file_zrchain_zenbtc_genesis_proto_rawDescData = file_zrchain_zenbtc_genesis_proto_rawDesc
)

func file_zrchain_zenbtc_genesis_proto_rawDescGZIP() []byte {
	file_zrchain_zenbtc_genesis_proto_rawDescOnce.Do(func() {
		file_zrchain_zenbtc_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_zenbtc_genesis_proto_rawDescData)
	})
	return file_zrchain_zenbtc_genesis_proto_rawDescData
}

var file_zrchain_zenbtc_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_zrchain_zenbtc_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),           // 0: zrchain.zenbtc.GenesisState
	nil,                            // 1: zrchain.zenbtc.GenesisState.LockTransactionsEntry
	nil,                            // 2: zrchain.zenbtc.GenesisState.PendingMintTransactionsEntry
	nil,                            // 3: zrchain.zenbtc.GenesisState.BurnEventsEntry
	nil,                            // 4: zrchain.zenbtc.GenesisState.RedemptionsEntry
	(*Params)(nil),                 // 5: zrchain.zenbtc.Params
	(*Supply)(nil),                 // 6: zrchain.zenbtc.Supply
	(*LockTransaction)(nil),        // 7: zrchain.zenbtc.LockTransaction
	(*PendingMintTransaction)(nil), // 8: zrchain.zenbtc.PendingMintTransaction
	(*BurnEvent)(nil),              // 9: zrchain.zenbtc.BurnEvent
	(*Redemption)(nil),             // 10: zrchain.zenbtc.Redemption
}
var file_zrchain_zenbtc_genesis_proto_depIdxs = []int32{
	5,  // 0: zrchain.zenbtc.GenesisState.params:type_name -> zrchain.zenbtc.Params
	1,  // 1: zrchain.zenbtc.GenesisState.lock_transactions:type_name -> zrchain.zenbtc.GenesisState.LockTransactionsEntry
	2,  // 2: zrchain.zenbtc.GenesisState.pending_mint_transactions:type_name -> zrchain.zenbtc.GenesisState.PendingMintTransactionsEntry
	3,  // 3: zrchain.zenbtc.GenesisState.burn_events:type_name -> zrchain.zenbtc.GenesisState.BurnEventsEntry
	4,  // 4: zrchain.zenbtc.GenesisState.redemptions:type_name -> zrchain.zenbtc.GenesisState.RedemptionsEntry
	6,  // 5: zrchain.zenbtc.GenesisState.supply:type_name -> zrchain.zenbtc.Supply
	7,  // 6: zrchain.zenbtc.GenesisState.LockTransactionsEntry.value:type_name -> zrchain.zenbtc.LockTransaction
	8,  // 7: zrchain.zenbtc.GenesisState.PendingMintTransactionsEntry.value:type_name -> zrchain.zenbtc.PendingMintTransaction
	9,  // 8: zrchain.zenbtc.GenesisState.BurnEventsEntry.value:type_name -> zrchain.zenbtc.BurnEvent
	10, // 9: zrchain.zenbtc.GenesisState.RedemptionsEntry.value:type_name -> zrchain.zenbtc.Redemption
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_zrchain_zenbtc_genesis_proto_init() }
func file_zrchain_zenbtc_genesis_proto_init() {
	if File_zrchain_zenbtc_genesis_proto != nil {
		return
	}
	file_zrchain_zenbtc_params_proto_init()
	file_zrchain_zenbtc_supply_proto_init()
	file_zrchain_zenbtc_redemptions_proto_init()
	file_zrchain_zenbtc_mint_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zrchain_zenbtc_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_zenbtc_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_zenbtc_genesis_proto_goTypes,
		DependencyIndexes: file_zrchain_zenbtc_genesis_proto_depIdxs,
		MessageInfos:      file_zrchain_zenbtc_genesis_proto_msgTypes,
	}.Build()
	File_zrchain_zenbtc_genesis_proto = out.File
	file_zrchain_zenbtc_genesis_proto_rawDesc = nil
	file_zrchain_zenbtc_genesis_proto_goTypes = nil
	file_zrchain_zenbtc_genesis_proto_depIdxs = nil
}
