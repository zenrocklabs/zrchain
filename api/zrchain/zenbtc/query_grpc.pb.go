// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: zrchain/zenbtc/query.proto

package zenbtc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_QueryParams_FullMethodName                  = "/zrchain.zenbtc.Query/QueryParams"
	Query_GetLockTransactions_FullMethodName          = "/zrchain.zenbtc.Query/GetLockTransactions"
	Query_GetRedemptions_FullMethodName               = "/zrchain.zenbtc.Query/GetRedemptions"
	Query_QueryPendingMintTransactions_FullMethodName = "/zrchain.zenbtc.Query/QueryPendingMintTransactions"
	Query_QueryPendingMintTransaction_FullMethodName  = "/zrchain.zenbtc.Query/QueryPendingMintTransaction"
	Query_QuerySupply_FullMethodName                  = "/zrchain.zenbtc.Query/QuerySupply"
	Query_QueryBurnEvents_FullMethodName              = "/zrchain.zenbtc.Query/QueryBurnEvents"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of LockTransactions items.
	GetLockTransactions(ctx context.Context, in *QueryLockTransactionsRequest, opts ...grpc.CallOption) (*QueryLockTransactionsResponse, error)
	// Queries a list of Redemptions items.
	GetRedemptions(ctx context.Context, in *QueryRedemptionsRequest, opts ...grpc.CallOption) (*QueryRedemptionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransactions(ctx context.Context, in *QueryPendingMintTransactionsRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransaction(ctx context.Context, in *QueryPendingMintTransactionRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionResponse, error)
	// Queries the current supply of zenBTC.
	QuerySupply(ctx context.Context, in *QuerySupplyRequest, opts ...grpc.CallOption) (*QuerySupplyResponse, error)
	// Queries a list of BurnEvents items.
	QueryBurnEvents(ctx context.Context, in *QueryBurnEventsRequest, opts ...grpc.CallOption) (*QueryBurnEventsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_QueryParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLockTransactions(ctx context.Context, in *QueryLockTransactionsRequest, opts ...grpc.CallOption) (*QueryLockTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryLockTransactionsResponse)
	err := c.cc.Invoke(ctx, Query_GetLockTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptions(ctx context.Context, in *QueryRedemptionsRequest, opts ...grpc.CallOption) (*QueryRedemptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRedemptionsResponse)
	err := c.cc.Invoke(ctx, Query_GetRedemptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingMintTransactions(ctx context.Context, in *QueryPendingMintTransactionsRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPendingMintTransactionsResponse)
	err := c.cc.Invoke(ctx, Query_QueryPendingMintTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingMintTransaction(ctx context.Context, in *QueryPendingMintTransactionRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPendingMintTransactionResponse)
	err := c.cc.Invoke(ctx, Query_QueryPendingMintTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySupply(ctx context.Context, in *QuerySupplyRequest, opts ...grpc.CallOption) (*QuerySupplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySupplyResponse)
	err := c.cc.Invoke(ctx, Query_QuerySupply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBurnEvents(ctx context.Context, in *QueryBurnEventsRequest, opts ...grpc.CallOption) (*QueryBurnEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBurnEventsResponse)
	err := c.cc.Invoke(ctx, Query_QueryBurnEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of LockTransactions items.
	GetLockTransactions(context.Context, *QueryLockTransactionsRequest) (*QueryLockTransactionsResponse, error)
	// Queries a list of Redemptions items.
	GetRedemptions(context.Context, *QueryRedemptionsRequest) (*QueryRedemptionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransactions(context.Context, *QueryPendingMintTransactionsRequest) (*QueryPendingMintTransactionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransaction(context.Context, *QueryPendingMintTransactionRequest) (*QueryPendingMintTransactionResponse, error)
	// Queries the current supply of zenBTC.
	QuerySupply(context.Context, *QuerySupplyRequest) (*QuerySupplyResponse, error)
	// Queries a list of BurnEvents items.
	QueryBurnEvents(context.Context, *QueryBurnEventsRequest) (*QueryBurnEventsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (UnimplementedQueryServer) GetLockTransactions(context.Context, *QueryLockTransactionsRequest) (*QueryLockTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockTransactions not implemented")
}
func (UnimplementedQueryServer) GetRedemptions(context.Context, *QueryRedemptionsRequest) (*QueryRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptions not implemented")
}
func (UnimplementedQueryServer) QueryPendingMintTransactions(context.Context, *QueryPendingMintTransactionsRequest) (*QueryPendingMintTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingMintTransactions not implemented")
}
func (UnimplementedQueryServer) QueryPendingMintTransaction(context.Context, *QueryPendingMintTransactionRequest) (*QueryPendingMintTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingMintTransaction not implemented")
}
func (UnimplementedQueryServer) QuerySupply(context.Context, *QuerySupplyRequest) (*QuerySupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySupply not implemented")
}
func (UnimplementedQueryServer) QueryBurnEvents(context.Context, *QueryBurnEventsRequest) (*QueryBurnEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBurnEvents not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLockTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLockTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLockTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLockTransactions(ctx, req.(*QueryLockTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRedemptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptions(ctx, req.(*QueryRedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingMintTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingMintTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingMintTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPendingMintTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingMintTransactions(ctx, req.(*QueryPendingMintTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingMintTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingMintTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingMintTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPendingMintTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingMintTransaction(ctx, req.(*QueryPendingMintTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySupply(ctx, req.(*QuerySupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBurnEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBurnEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBurnEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryBurnEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBurnEvents(ctx, req.(*QueryBurnEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.zenbtc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "GetLockTransactions",
			Handler:    _Query_GetLockTransactions_Handler,
		},
		{
			MethodName: "GetRedemptions",
			Handler:    _Query_GetRedemptions_Handler,
		},
		{
			MethodName: "QueryPendingMintTransactions",
			Handler:    _Query_QueryPendingMintTransactions_Handler,
		},
		{
			MethodName: "QueryPendingMintTransaction",
			Handler:    _Query_QueryPendingMintTransaction_Handler,
		},
		{
			MethodName: "QuerySupply",
			Handler:    _Query_QuerySupply_Handler,
		},
		{
			MethodName: "QueryBurnEvents",
			Handler:    _Query_QueryBurnEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/zenbtc/query.proto",
}
