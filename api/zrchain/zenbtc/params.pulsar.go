// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package zenbtc

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_7_list)(nil)

type _Params_7_list struct {
	list *[]uint64
}

func (x *_Params_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_Params_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field ChangeAddressKeyIDs as it is not of Message kind"))
}

func (x *_Params_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_7_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Params_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                     protoreflect.MessageDescriptor
	fd_Params_depositKeyringAddr  protoreflect.FieldDescriptor
	fd_Params_stakerKeyID         protoreflect.FieldDescriptor
	fd_Params_ethMinterKeyID      protoreflect.FieldDescriptor
	fd_Params_unstakerKeyID       protoreflect.FieldDescriptor
	fd_Params_completerKeyID      protoreflect.FieldDescriptor
	fd_Params_rewardsDepositKeyID protoreflect.FieldDescriptor
	fd_Params_changeAddressKeyIDs protoreflect.FieldDescriptor
	fd_Params_bitcoinProxyAddress protoreflect.FieldDescriptor
	fd_Params_ethTokenAddr        protoreflect.FieldDescriptor
	fd_Params_controllerAddr      protoreflect.FieldDescriptor
	fd_Params_solana              protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zenbtc_params_proto_init()
	md_Params = File_zrchain_zenbtc_params_proto.Messages().ByName("Params")
	fd_Params_depositKeyringAddr = md_Params.Fields().ByName("depositKeyringAddr")
	fd_Params_stakerKeyID = md_Params.Fields().ByName("stakerKeyID")
	fd_Params_ethMinterKeyID = md_Params.Fields().ByName("ethMinterKeyID")
	fd_Params_unstakerKeyID = md_Params.Fields().ByName("unstakerKeyID")
	fd_Params_completerKeyID = md_Params.Fields().ByName("completerKeyID")
	fd_Params_rewardsDepositKeyID = md_Params.Fields().ByName("rewardsDepositKeyID")
	fd_Params_changeAddressKeyIDs = md_Params.Fields().ByName("changeAddressKeyIDs")
	fd_Params_bitcoinProxyAddress = md_Params.Fields().ByName("bitcoinProxyAddress")
	fd_Params_ethTokenAddr = md_Params.Fields().ByName("ethTokenAddr")
	fd_Params_controllerAddr = md_Params.Fields().ByName("controllerAddr")
	fd_Params_solana = md_Params.Fields().ByName("solana")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zenbtc_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DepositKeyringAddr != "" {
		value := protoreflect.ValueOfString(x.DepositKeyringAddr)
		if !f(fd_Params_depositKeyringAddr, value) {
			return
		}
	}
	if x.StakerKeyID != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StakerKeyID)
		if !f(fd_Params_stakerKeyID, value) {
			return
		}
	}
	if x.EthMinterKeyID != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EthMinterKeyID)
		if !f(fd_Params_ethMinterKeyID, value) {
			return
		}
	}
	if x.UnstakerKeyID != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UnstakerKeyID)
		if !f(fd_Params_unstakerKeyID, value) {
			return
		}
	}
	if x.CompleterKeyID != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CompleterKeyID)
		if !f(fd_Params_completerKeyID, value) {
			return
		}
	}
	if x.RewardsDepositKeyID != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RewardsDepositKeyID)
		if !f(fd_Params_rewardsDepositKeyID, value) {
			return
		}
	}
	if len(x.ChangeAddressKeyIDs) != 0 {
		value := protoreflect.ValueOfList(&_Params_7_list{list: &x.ChangeAddressKeyIDs})
		if !f(fd_Params_changeAddressKeyIDs, value) {
			return
		}
	}
	if x.BitcoinProxyAddress != "" {
		value := protoreflect.ValueOfString(x.BitcoinProxyAddress)
		if !f(fd_Params_bitcoinProxyAddress, value) {
			return
		}
	}
	if x.EthTokenAddr != "" {
		value := protoreflect.ValueOfString(x.EthTokenAddr)
		if !f(fd_Params_ethTokenAddr, value) {
			return
		}
	}
	if x.ControllerAddr != "" {
		value := protoreflect.ValueOfString(x.ControllerAddr)
		if !f(fd_Params_controllerAddr, value) {
			return
		}
	}
	if x.Solana != nil {
		value := protoreflect.ValueOfMessage(x.Solana.ProtoReflect())
		if !f(fd_Params_solana, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zenbtc.Params.depositKeyringAddr":
		return x.DepositKeyringAddr != ""
	case "zrchain.zenbtc.Params.stakerKeyID":
		return x.StakerKeyID != uint64(0)
	case "zrchain.zenbtc.Params.ethMinterKeyID":
		return x.EthMinterKeyID != uint64(0)
	case "zrchain.zenbtc.Params.unstakerKeyID":
		return x.UnstakerKeyID != uint64(0)
	case "zrchain.zenbtc.Params.completerKeyID":
		return x.CompleterKeyID != uint64(0)
	case "zrchain.zenbtc.Params.rewardsDepositKeyID":
		return x.RewardsDepositKeyID != uint64(0)
	case "zrchain.zenbtc.Params.changeAddressKeyIDs":
		return len(x.ChangeAddressKeyIDs) != 0
	case "zrchain.zenbtc.Params.bitcoinProxyAddress":
		return x.BitcoinProxyAddress != ""
	case "zrchain.zenbtc.Params.ethTokenAddr":
		return x.EthTokenAddr != ""
	case "zrchain.zenbtc.Params.controllerAddr":
		return x.ControllerAddr != ""
	case "zrchain.zenbtc.Params.solana":
		return x.Solana != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Params"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zenbtc.Params.depositKeyringAddr":
		x.DepositKeyringAddr = ""
	case "zrchain.zenbtc.Params.stakerKeyID":
		x.StakerKeyID = uint64(0)
	case "zrchain.zenbtc.Params.ethMinterKeyID":
		x.EthMinterKeyID = uint64(0)
	case "zrchain.zenbtc.Params.unstakerKeyID":
		x.UnstakerKeyID = uint64(0)
	case "zrchain.zenbtc.Params.completerKeyID":
		x.CompleterKeyID = uint64(0)
	case "zrchain.zenbtc.Params.rewardsDepositKeyID":
		x.RewardsDepositKeyID = uint64(0)
	case "zrchain.zenbtc.Params.changeAddressKeyIDs":
		x.ChangeAddressKeyIDs = nil
	case "zrchain.zenbtc.Params.bitcoinProxyAddress":
		x.BitcoinProxyAddress = ""
	case "zrchain.zenbtc.Params.ethTokenAddr":
		x.EthTokenAddr = ""
	case "zrchain.zenbtc.Params.controllerAddr":
		x.ControllerAddr = ""
	case "zrchain.zenbtc.Params.solana":
		x.Solana = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Params"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zenbtc.Params.depositKeyringAddr":
		value := x.DepositKeyringAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Params.stakerKeyID":
		value := x.StakerKeyID
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Params.ethMinterKeyID":
		value := x.EthMinterKeyID
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Params.unstakerKeyID":
		value := x.UnstakerKeyID
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Params.completerKeyID":
		value := x.CompleterKeyID
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Params.rewardsDepositKeyID":
		value := x.RewardsDepositKeyID
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Params.changeAddressKeyIDs":
		if len(x.ChangeAddressKeyIDs) == 0 {
			return protoreflect.ValueOfList(&_Params_7_list{})
		}
		listValue := &_Params_7_list{list: &x.ChangeAddressKeyIDs}
		return protoreflect.ValueOfList(listValue)
	case "zrchain.zenbtc.Params.bitcoinProxyAddress":
		value := x.BitcoinProxyAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Params.ethTokenAddr":
		value := x.EthTokenAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Params.controllerAddr":
		value := x.ControllerAddr
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Params.solana":
		value := x.Solana
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Params"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zenbtc.Params.depositKeyringAddr":
		x.DepositKeyringAddr = value.Interface().(string)
	case "zrchain.zenbtc.Params.stakerKeyID":
		x.StakerKeyID = value.Uint()
	case "zrchain.zenbtc.Params.ethMinterKeyID":
		x.EthMinterKeyID = value.Uint()
	case "zrchain.zenbtc.Params.unstakerKeyID":
		x.UnstakerKeyID = value.Uint()
	case "zrchain.zenbtc.Params.completerKeyID":
		x.CompleterKeyID = value.Uint()
	case "zrchain.zenbtc.Params.rewardsDepositKeyID":
		x.RewardsDepositKeyID = value.Uint()
	case "zrchain.zenbtc.Params.changeAddressKeyIDs":
		lv := value.List()
		clv := lv.(*_Params_7_list)
		x.ChangeAddressKeyIDs = *clv.list
	case "zrchain.zenbtc.Params.bitcoinProxyAddress":
		x.BitcoinProxyAddress = value.Interface().(string)
	case "zrchain.zenbtc.Params.ethTokenAddr":
		x.EthTokenAddr = value.Interface().(string)
	case "zrchain.zenbtc.Params.controllerAddr":
		x.ControllerAddr = value.Interface().(string)
	case "zrchain.zenbtc.Params.solana":
		x.Solana = value.Message().Interface().(*Solana)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Params"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenbtc.Params.changeAddressKeyIDs":
		if x.ChangeAddressKeyIDs == nil {
			x.ChangeAddressKeyIDs = []uint64{}
		}
		value := &_Params_7_list{list: &x.ChangeAddressKeyIDs}
		return protoreflect.ValueOfList(value)
	case "zrchain.zenbtc.Params.solana":
		if x.Solana == nil {
			x.Solana = new(Solana)
		}
		return protoreflect.ValueOfMessage(x.Solana.ProtoReflect())
	case "zrchain.zenbtc.Params.depositKeyringAddr":
		panic(fmt.Errorf("field depositKeyringAddr of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.stakerKeyID":
		panic(fmt.Errorf("field stakerKeyID of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.ethMinterKeyID":
		panic(fmt.Errorf("field ethMinterKeyID of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.unstakerKeyID":
		panic(fmt.Errorf("field unstakerKeyID of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.completerKeyID":
		panic(fmt.Errorf("field completerKeyID of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.rewardsDepositKeyID":
		panic(fmt.Errorf("field rewardsDepositKeyID of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.bitcoinProxyAddress":
		panic(fmt.Errorf("field bitcoinProxyAddress of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.ethTokenAddr":
		panic(fmt.Errorf("field ethTokenAddr of message zrchain.zenbtc.Params is not mutable"))
	case "zrchain.zenbtc.Params.controllerAddr":
		panic(fmt.Errorf("field controllerAddr of message zrchain.zenbtc.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Params"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenbtc.Params.depositKeyringAddr":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Params.stakerKeyID":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Params.ethMinterKeyID":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Params.unstakerKeyID":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Params.completerKeyID":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Params.rewardsDepositKeyID":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Params.changeAddressKeyIDs":
		list := []uint64{}
		return protoreflect.ValueOfList(&_Params_7_list{list: &list})
	case "zrchain.zenbtc.Params.bitcoinProxyAddress":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Params.ethTokenAddr":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Params.controllerAddr":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Params.solana":
		m := new(Solana)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Params"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zenbtc.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.DepositKeyringAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StakerKeyID != 0 {
			n += 1 + runtime.Sov(uint64(x.StakerKeyID))
		}
		if x.EthMinterKeyID != 0 {
			n += 1 + runtime.Sov(uint64(x.EthMinterKeyID))
		}
		if x.UnstakerKeyID != 0 {
			n += 1 + runtime.Sov(uint64(x.UnstakerKeyID))
		}
		if x.CompleterKeyID != 0 {
			n += 1 + runtime.Sov(uint64(x.CompleterKeyID))
		}
		if x.RewardsDepositKeyID != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardsDepositKeyID))
		}
		if len(x.ChangeAddressKeyIDs) > 0 {
			l = 0
			for _, e := range x.ChangeAddressKeyIDs {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.BitcoinProxyAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EthTokenAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ControllerAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Solana != nil {
			l = options.Size(x.Solana)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Solana != nil {
			encoded, err := options.Marshal(x.Solana)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.ControllerAddr) > 0 {
			i -= len(x.ControllerAddr)
			copy(dAtA[i:], x.ControllerAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ControllerAddr)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.EthTokenAddr) > 0 {
			i -= len(x.EthTokenAddr)
			copy(dAtA[i:], x.EthTokenAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EthTokenAddr)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.BitcoinProxyAddress) > 0 {
			i -= len(x.BitcoinProxyAddress)
			copy(dAtA[i:], x.BitcoinProxyAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BitcoinProxyAddress)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.ChangeAddressKeyIDs) > 0 {
			var pksize2 int
			for _, num := range x.ChangeAddressKeyIDs {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ChangeAddressKeyIDs {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x3a
		}
		if x.RewardsDepositKeyID != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsDepositKeyID))
			i--
			dAtA[i] = 0x30
		}
		if x.CompleterKeyID != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CompleterKeyID))
			i--
			dAtA[i] = 0x28
		}
		if x.UnstakerKeyID != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnstakerKeyID))
			i--
			dAtA[i] = 0x20
		}
		if x.EthMinterKeyID != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EthMinterKeyID))
			i--
			dAtA[i] = 0x18
		}
		if x.StakerKeyID != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StakerKeyID))
			i--
			dAtA[i] = 0x10
		}
		if len(x.DepositKeyringAddr) > 0 {
			i -= len(x.DepositKeyringAddr)
			copy(dAtA[i:], x.DepositKeyringAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DepositKeyringAddr)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositKeyringAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositKeyringAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakerKeyID", wireType)
				}
				x.StakerKeyID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StakerKeyID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EthMinterKeyID", wireType)
				}
				x.EthMinterKeyID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EthMinterKeyID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnstakerKeyID", wireType)
				}
				x.UnstakerKeyID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnstakerKeyID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompleterKeyID", wireType)
				}
				x.CompleterKeyID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CompleterKeyID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsDepositKeyID", wireType)
				}
				x.RewardsDepositKeyID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardsDepositKeyID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ChangeAddressKeyIDs = append(x.ChangeAddressKeyIDs, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ChangeAddressKeyIDs) == 0 {
						x.ChangeAddressKeyIDs = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ChangeAddressKeyIDs = append(x.ChangeAddressKeyIDs, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChangeAddressKeyIDs", wireType)
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BitcoinProxyAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BitcoinProxyAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EthTokenAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EthTokenAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ControllerAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ControllerAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Solana", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Solana == nil {
					x.Solana = &Solana{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Solana); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Solana                        protoreflect.MessageDescriptor
	fd_Solana_signer_key_id          protoreflect.FieldDescriptor
	fd_Solana_program_id             protoreflect.FieldDescriptor
	fd_Solana_nonce_account_key      protoreflect.FieldDescriptor
	fd_Solana_nonce_authority_key    protoreflect.FieldDescriptor
	fd_Solana_mint_address           protoreflect.FieldDescriptor
	fd_Solana_fee_wallet             protoreflect.FieldDescriptor
	fd_Solana_fee                    protoreflect.FieldDescriptor
	fd_Solana_multisig_key_address   protoreflect.FieldDescriptor
	fd_Solana_btl                    protoreflect.FieldDescriptor
	fd_Solana_event_store_program_id protoreflect.FieldDescriptor
)

func init() {
	file_zrchain_zenbtc_params_proto_init()
	md_Solana = File_zrchain_zenbtc_params_proto.Messages().ByName("Solana")
	fd_Solana_signer_key_id = md_Solana.Fields().ByName("signer_key_id")
	fd_Solana_program_id = md_Solana.Fields().ByName("program_id")
	fd_Solana_nonce_account_key = md_Solana.Fields().ByName("nonce_account_key")
	fd_Solana_nonce_authority_key = md_Solana.Fields().ByName("nonce_authority_key")
	fd_Solana_mint_address = md_Solana.Fields().ByName("mint_address")
	fd_Solana_fee_wallet = md_Solana.Fields().ByName("fee_wallet")
	fd_Solana_fee = md_Solana.Fields().ByName("fee")
	fd_Solana_multisig_key_address = md_Solana.Fields().ByName("multisig_key_address")
	fd_Solana_btl = md_Solana.Fields().ByName("btl")
	fd_Solana_event_store_program_id = md_Solana.Fields().ByName("event_store_program_id")
}

var _ protoreflect.Message = (*fastReflection_Solana)(nil)

type fastReflection_Solana Solana

func (x *Solana) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Solana)(x)
}

func (x *Solana) slowProtoReflect() protoreflect.Message {
	mi := &file_zrchain_zenbtc_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Solana_messageType fastReflection_Solana_messageType
var _ protoreflect.MessageType = fastReflection_Solana_messageType{}

type fastReflection_Solana_messageType struct{}

func (x fastReflection_Solana_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Solana)(nil)
}
func (x fastReflection_Solana_messageType) New() protoreflect.Message {
	return new(fastReflection_Solana)
}
func (x fastReflection_Solana_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Solana
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Solana) Descriptor() protoreflect.MessageDescriptor {
	return md_Solana
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Solana) Type() protoreflect.MessageType {
	return _fastReflection_Solana_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Solana) New() protoreflect.Message {
	return new(fastReflection_Solana)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Solana) Interface() protoreflect.ProtoMessage {
	return (*Solana)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Solana) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SignerKeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignerKeyId)
		if !f(fd_Solana_signer_key_id, value) {
			return
		}
	}
	if x.ProgramId != "" {
		value := protoreflect.ValueOfString(x.ProgramId)
		if !f(fd_Solana_program_id, value) {
			return
		}
	}
	if x.NonceAccountKey != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NonceAccountKey)
		if !f(fd_Solana_nonce_account_key, value) {
			return
		}
	}
	if x.NonceAuthorityKey != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NonceAuthorityKey)
		if !f(fd_Solana_nonce_authority_key, value) {
			return
		}
	}
	if x.MintAddress != "" {
		value := protoreflect.ValueOfString(x.MintAddress)
		if !f(fd_Solana_mint_address, value) {
			return
		}
	}
	if x.FeeWallet != "" {
		value := protoreflect.ValueOfString(x.FeeWallet)
		if !f(fd_Solana_fee_wallet, value) {
			return
		}
	}
	if x.Fee != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Fee)
		if !f(fd_Solana_fee, value) {
			return
		}
	}
	if x.MultisigKeyAddress != "" {
		value := protoreflect.ValueOfString(x.MultisigKeyAddress)
		if !f(fd_Solana_multisig_key_address, value) {
			return
		}
	}
	if x.Btl != int64(0) {
		value := protoreflect.ValueOfInt64(x.Btl)
		if !f(fd_Solana_btl, value) {
			return
		}
	}
	if x.EventStoreProgramId != "" {
		value := protoreflect.ValueOfString(x.EventStoreProgramId)
		if !f(fd_Solana_event_store_program_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Solana) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "zrchain.zenbtc.Solana.signer_key_id":
		return x.SignerKeyId != uint64(0)
	case "zrchain.zenbtc.Solana.program_id":
		return x.ProgramId != ""
	case "zrchain.zenbtc.Solana.nonce_account_key":
		return x.NonceAccountKey != uint64(0)
	case "zrchain.zenbtc.Solana.nonce_authority_key":
		return x.NonceAuthorityKey != uint64(0)
	case "zrchain.zenbtc.Solana.mint_address":
		return x.MintAddress != ""
	case "zrchain.zenbtc.Solana.fee_wallet":
		return x.FeeWallet != ""
	case "zrchain.zenbtc.Solana.fee":
		return x.Fee != uint64(0)
	case "zrchain.zenbtc.Solana.multisig_key_address":
		return x.MultisigKeyAddress != ""
	case "zrchain.zenbtc.Solana.btl":
		return x.Btl != int64(0)
	case "zrchain.zenbtc.Solana.event_store_program_id":
		return x.EventStoreProgramId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Solana"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Solana does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Solana) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "zrchain.zenbtc.Solana.signer_key_id":
		x.SignerKeyId = uint64(0)
	case "zrchain.zenbtc.Solana.program_id":
		x.ProgramId = ""
	case "zrchain.zenbtc.Solana.nonce_account_key":
		x.NonceAccountKey = uint64(0)
	case "zrchain.zenbtc.Solana.nonce_authority_key":
		x.NonceAuthorityKey = uint64(0)
	case "zrchain.zenbtc.Solana.mint_address":
		x.MintAddress = ""
	case "zrchain.zenbtc.Solana.fee_wallet":
		x.FeeWallet = ""
	case "zrchain.zenbtc.Solana.fee":
		x.Fee = uint64(0)
	case "zrchain.zenbtc.Solana.multisig_key_address":
		x.MultisigKeyAddress = ""
	case "zrchain.zenbtc.Solana.btl":
		x.Btl = int64(0)
	case "zrchain.zenbtc.Solana.event_store_program_id":
		x.EventStoreProgramId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Solana"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Solana does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Solana) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "zrchain.zenbtc.Solana.signer_key_id":
		value := x.SignerKeyId
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Solana.program_id":
		value := x.ProgramId
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Solana.nonce_account_key":
		value := x.NonceAccountKey
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Solana.nonce_authority_key":
		value := x.NonceAuthorityKey
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Solana.mint_address":
		value := x.MintAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Solana.fee_wallet":
		value := x.FeeWallet
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Solana.fee":
		value := x.Fee
		return protoreflect.ValueOfUint64(value)
	case "zrchain.zenbtc.Solana.multisig_key_address":
		value := x.MultisigKeyAddress
		return protoreflect.ValueOfString(value)
	case "zrchain.zenbtc.Solana.btl":
		value := x.Btl
		return protoreflect.ValueOfInt64(value)
	case "zrchain.zenbtc.Solana.event_store_program_id":
		value := x.EventStoreProgramId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Solana"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Solana does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Solana) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "zrchain.zenbtc.Solana.signer_key_id":
		x.SignerKeyId = value.Uint()
	case "zrchain.zenbtc.Solana.program_id":
		x.ProgramId = value.Interface().(string)
	case "zrchain.zenbtc.Solana.nonce_account_key":
		x.NonceAccountKey = value.Uint()
	case "zrchain.zenbtc.Solana.nonce_authority_key":
		x.NonceAuthorityKey = value.Uint()
	case "zrchain.zenbtc.Solana.mint_address":
		x.MintAddress = value.Interface().(string)
	case "zrchain.zenbtc.Solana.fee_wallet":
		x.FeeWallet = value.Interface().(string)
	case "zrchain.zenbtc.Solana.fee":
		x.Fee = value.Uint()
	case "zrchain.zenbtc.Solana.multisig_key_address":
		x.MultisigKeyAddress = value.Interface().(string)
	case "zrchain.zenbtc.Solana.btl":
		x.Btl = value.Int()
	case "zrchain.zenbtc.Solana.event_store_program_id":
		x.EventStoreProgramId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Solana"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Solana does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Solana) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenbtc.Solana.signer_key_id":
		panic(fmt.Errorf("field signer_key_id of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.program_id":
		panic(fmt.Errorf("field program_id of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.nonce_account_key":
		panic(fmt.Errorf("field nonce_account_key of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.nonce_authority_key":
		panic(fmt.Errorf("field nonce_authority_key of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.mint_address":
		panic(fmt.Errorf("field mint_address of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.fee_wallet":
		panic(fmt.Errorf("field fee_wallet of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.fee":
		panic(fmt.Errorf("field fee of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.multisig_key_address":
		panic(fmt.Errorf("field multisig_key_address of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.btl":
		panic(fmt.Errorf("field btl of message zrchain.zenbtc.Solana is not mutable"))
	case "zrchain.zenbtc.Solana.event_store_program_id":
		panic(fmt.Errorf("field event_store_program_id of message zrchain.zenbtc.Solana is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Solana"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Solana does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Solana) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "zrchain.zenbtc.Solana.signer_key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Solana.program_id":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Solana.nonce_account_key":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Solana.nonce_authority_key":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Solana.mint_address":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Solana.fee_wallet":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Solana.fee":
		return protoreflect.ValueOfUint64(uint64(0))
	case "zrchain.zenbtc.Solana.multisig_key_address":
		return protoreflect.ValueOfString("")
	case "zrchain.zenbtc.Solana.btl":
		return protoreflect.ValueOfInt64(int64(0))
	case "zrchain.zenbtc.Solana.event_store_program_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: zrchain.zenbtc.Solana"))
		}
		panic(fmt.Errorf("message zrchain.zenbtc.Solana does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Solana) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in zrchain.zenbtc.Solana", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Solana) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Solana) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Solana) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Solana) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Solana)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SignerKeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.SignerKeyId))
		}
		l = len(x.ProgramId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NonceAccountKey != 0 {
			n += 1 + runtime.Sov(uint64(x.NonceAccountKey))
		}
		if x.NonceAuthorityKey != 0 {
			n += 1 + runtime.Sov(uint64(x.NonceAuthorityKey))
		}
		l = len(x.MintAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeeWallet)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Fee != 0 {
			n += 1 + runtime.Sov(uint64(x.Fee))
		}
		l = len(x.MultisigKeyAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Btl != 0 {
			n += 1 + runtime.Sov(uint64(x.Btl))
		}
		l = len(x.EventStoreProgramId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Solana)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EventStoreProgramId) > 0 {
			i -= len(x.EventStoreProgramId)
			copy(dAtA[i:], x.EventStoreProgramId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EventStoreProgramId)))
			i--
			dAtA[i] = 0x52
		}
		if x.Btl != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Btl))
			i--
			dAtA[i] = 0x48
		}
		if len(x.MultisigKeyAddress) > 0 {
			i -= len(x.MultisigKeyAddress)
			copy(dAtA[i:], x.MultisigKeyAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MultisigKeyAddress)))
			i--
			dAtA[i] = 0x42
		}
		if x.Fee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Fee))
			i--
			dAtA[i] = 0x38
		}
		if len(x.FeeWallet) > 0 {
			i -= len(x.FeeWallet)
			copy(dAtA[i:], x.FeeWallet)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeWallet)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.MintAddress) > 0 {
			i -= len(x.MintAddress)
			copy(dAtA[i:], x.MintAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MintAddress)))
			i--
			dAtA[i] = 0x2a
		}
		if x.NonceAuthorityKey != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NonceAuthorityKey))
			i--
			dAtA[i] = 0x20
		}
		if x.NonceAccountKey != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NonceAccountKey))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ProgramId) > 0 {
			i -= len(x.ProgramId)
			copy(dAtA[i:], x.ProgramId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProgramId)))
			i--
			dAtA[i] = 0x12
		}
		if x.SignerKeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignerKeyId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Solana)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Solana: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Solana: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignerKeyId", wireType)
				}
				x.SignerKeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignerKeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProgramId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NonceAccountKey", wireType)
				}
				x.NonceAccountKey = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NonceAccountKey |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NonceAuthorityKey", wireType)
				}
				x.NonceAuthorityKey = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NonceAuthorityKey |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MintAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeWallet", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeWallet = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				x.Fee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Fee |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MultisigKeyAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MultisigKeyAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Btl", wireType)
				}
				x.Btl = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Btl |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EventStoreProgramId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EventStoreProgramId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: zrchain/zenbtc/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositKeyringAddr  string   `protobuf:"bytes,1,opt,name=depositKeyringAddr,proto3" json:"depositKeyringAddr,omitempty"`
	StakerKeyID         uint64   `protobuf:"varint,2,opt,name=stakerKeyID,proto3" json:"stakerKeyID,omitempty"`
	EthMinterKeyID      uint64   `protobuf:"varint,3,opt,name=ethMinterKeyID,proto3" json:"ethMinterKeyID,omitempty"`
	UnstakerKeyID       uint64   `protobuf:"varint,4,opt,name=unstakerKeyID,proto3" json:"unstakerKeyID,omitempty"`
	CompleterKeyID      uint64   `protobuf:"varint,5,opt,name=completerKeyID,proto3" json:"completerKeyID,omitempty"`
	RewardsDepositKeyID uint64   `protobuf:"varint,6,opt,name=rewardsDepositKeyID,proto3" json:"rewardsDepositKeyID,omitempty"`
	ChangeAddressKeyIDs []uint64 `protobuf:"varint,7,rep,packed,name=changeAddressKeyIDs,proto3" json:"changeAddressKeyIDs,omitempty"`
	BitcoinProxyAddress string   `protobuf:"bytes,8,opt,name=bitcoinProxyAddress,proto3" json:"bitcoinProxyAddress,omitempty"`
	EthTokenAddr        string   `protobuf:"bytes,9,opt,name=ethTokenAddr,proto3" json:"ethTokenAddr,omitempty"`
	ControllerAddr      string   `protobuf:"bytes,10,opt,name=controllerAddr,proto3" json:"controllerAddr,omitempty"`
	Solana              *Solana  `protobuf:"bytes,11,opt,name=solana,proto3" json:"solana,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zenbtc_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_zrchain_zenbtc_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetDepositKeyringAddr() string {
	if x != nil {
		return x.DepositKeyringAddr
	}
	return ""
}

func (x *Params) GetStakerKeyID() uint64 {
	if x != nil {
		return x.StakerKeyID
	}
	return 0
}

func (x *Params) GetEthMinterKeyID() uint64 {
	if x != nil {
		return x.EthMinterKeyID
	}
	return 0
}

func (x *Params) GetUnstakerKeyID() uint64 {
	if x != nil {
		return x.UnstakerKeyID
	}
	return 0
}

func (x *Params) GetCompleterKeyID() uint64 {
	if x != nil {
		return x.CompleterKeyID
	}
	return 0
}

func (x *Params) GetRewardsDepositKeyID() uint64 {
	if x != nil {
		return x.RewardsDepositKeyID
	}
	return 0
}

func (x *Params) GetChangeAddressKeyIDs() []uint64 {
	if x != nil {
		return x.ChangeAddressKeyIDs
	}
	return nil
}

func (x *Params) GetBitcoinProxyAddress() string {
	if x != nil {
		return x.BitcoinProxyAddress
	}
	return ""
}

func (x *Params) GetEthTokenAddr() string {
	if x != nil {
		return x.EthTokenAddr
	}
	return ""
}

func (x *Params) GetControllerAddr() string {
	if x != nil {
		return x.ControllerAddr
	}
	return ""
}

func (x *Params) GetSolana() *Solana {
	if x != nil {
		return x.Solana
	}
	return nil
}

type Solana struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerKeyId         uint64 `protobuf:"varint,1,opt,name=signer_key_id,json=signerKeyId,proto3" json:"signer_key_id,omitempty"`
	ProgramId           string `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	NonceAccountKey     uint64 `protobuf:"varint,3,opt,name=nonce_account_key,json=nonceAccountKey,proto3" json:"nonce_account_key,omitempty"`
	NonceAuthorityKey   uint64 `protobuf:"varint,4,opt,name=nonce_authority_key,json=nonceAuthorityKey,proto3" json:"nonce_authority_key,omitempty"`
	MintAddress         string `protobuf:"bytes,5,opt,name=mint_address,json=mintAddress,proto3" json:"mint_address,omitempty"`
	FeeWallet           string `protobuf:"bytes,6,opt,name=fee_wallet,json=feeWallet,proto3" json:"fee_wallet,omitempty"`
	Fee                 uint64 `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	MultisigKeyAddress  string `protobuf:"bytes,8,opt,name=multisig_key_address,json=multisigKeyAddress,proto3" json:"multisig_key_address,omitempty"`
	Btl                 int64  `protobuf:"varint,9,opt,name=btl,proto3" json:"btl,omitempty"`
	EventStoreProgramId string `protobuf:"bytes,10,opt,name=event_store_program_id,json=eventStoreProgramId,proto3" json:"event_store_program_id,omitempty"`
}

func (x *Solana) Reset() {
	*x = Solana{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zrchain_zenbtc_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solana) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solana) ProtoMessage() {}

// Deprecated: Use Solana.ProtoReflect.Descriptor instead.
func (*Solana) Descriptor() ([]byte, []int) {
	return file_zrchain_zenbtc_params_proto_rawDescGZIP(), []int{1}
}

func (x *Solana) GetSignerKeyId() uint64 {
	if x != nil {
		return x.SignerKeyId
	}
	return 0
}

func (x *Solana) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Solana) GetNonceAccountKey() uint64 {
	if x != nil {
		return x.NonceAccountKey
	}
	return 0
}

func (x *Solana) GetNonceAuthorityKey() uint64 {
	if x != nil {
		return x.NonceAuthorityKey
	}
	return 0
}

func (x *Solana) GetMintAddress() string {
	if x != nil {
		return x.MintAddress
	}
	return ""
}

func (x *Solana) GetFeeWallet() string {
	if x != nil {
		return x.FeeWallet
	}
	return ""
}

func (x *Solana) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Solana) GetMultisigKeyAddress() string {
	if x != nil {
		return x.MultisigKeyAddress
	}
	return ""
}

func (x *Solana) GetBtl() int64 {
	if x != nil {
		return x.Btl
	}
	return 0
}

func (x *Solana) GetEventStoreProgramId() string {
	if x != nil {
		return x.EventStoreProgramId
	}
	return ""
}

var File_zrchain_zenbtc_params_proto protoreflect.FileDescriptor

var file_zrchain_zenbtc_params_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x1a, 0x11, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x74, 0x68,
	0x4d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x3a, 0x20, 0xe8, 0xa0, 0x1f,
	0x01, 0x8a, 0xe7, 0xb0, 0x2a, 0x17, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x78, 0x2f,
	0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x2f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xfa, 0x02,
	0x0a, 0x06, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65,
	0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x74, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x74, 0x6c, 0x12,
	0x33, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xb7, 0x01, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x7a, 0x65, 0x6e, 0x62, 0x74,
	0x63, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x65, 0x6e,
	0x72, 0x6f, 0x63, 0x6b, 0x2d, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0xa2, 0x02, 0x03,
	0x5a, 0x5a, 0x58, 0xaa, 0x02, 0x0e, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x5a, 0x65,
	0x6e, 0x62, 0x74, 0x63, 0xca, 0x02, 0x0e, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x5a,
	0x65, 0x6e, 0x62, 0x74, 0x63, 0xe2, 0x02, 0x1a, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c,
	0x5a, 0x65, 0x6e, 0x62, 0x74, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0f, 0x5a, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x5a, 0x65,
	0x6e, 0x62, 0x74, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zrchain_zenbtc_params_proto_rawDescOnce sync.Once
	file_zrchain_zenbtc_params_proto_rawDescData = file_zrchain_zenbtc_params_proto_rawDesc
)

func file_zrchain_zenbtc_params_proto_rawDescGZIP() []byte {
	file_zrchain_zenbtc_params_proto_rawDescOnce.Do(func() {
		file_zrchain_zenbtc_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_zrchain_zenbtc_params_proto_rawDescData)
	})
	return file_zrchain_zenbtc_params_proto_rawDescData
}

var file_zrchain_zenbtc_params_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zrchain_zenbtc_params_proto_goTypes = []interface{}{
	(*Params)(nil), // 0: zrchain.zenbtc.Params
	(*Solana)(nil), // 1: zrchain.zenbtc.Solana
}
var file_zrchain_zenbtc_params_proto_depIdxs = []int32{
	1, // 0: zrchain.zenbtc.Params.solana:type_name -> zrchain.zenbtc.Solana
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_zrchain_zenbtc_params_proto_init() }
func file_zrchain_zenbtc_params_proto_init() {
	if File_zrchain_zenbtc_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zrchain_zenbtc_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zrchain_zenbtc_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solana); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zrchain_zenbtc_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zrchain_zenbtc_params_proto_goTypes,
		DependencyIndexes: file_zrchain_zenbtc_params_proto_depIdxs,
		MessageInfos:      file_zrchain_zenbtc_params_proto_msgTypes,
	}.Build()
	File_zrchain_zenbtc_params_proto = out.File
	file_zrchain_zenbtc_params_proto_rawDesc = nil
	file_zrchain_zenbtc_params_proto_goTypes = nil
	file_zrchain_zenbtc_params_proto_depIdxs = nil
}
