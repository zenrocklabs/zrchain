// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/sidecar_service.proto

package api

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LatestBitcoinBlockHeaderRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=ChainName,proto3" json:"ChainName,omitempty"`
}

func (m *LatestBitcoinBlockHeaderRequest) Reset()         { *m = LatestBitcoinBlockHeaderRequest{} }
func (m *LatestBitcoinBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*LatestBitcoinBlockHeaderRequest) ProtoMessage()    {}
func (*LatestBitcoinBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{0}
}
func (m *LatestBitcoinBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestBitcoinBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestBitcoinBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestBitcoinBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestBitcoinBlockHeaderRequest.Merge(m, src)
}
func (m *LatestBitcoinBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *LatestBitcoinBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestBitcoinBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LatestBitcoinBlockHeaderRequest proto.InternalMessageInfo

func (m *LatestBitcoinBlockHeaderRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type BitcoinBlockHeaderByHeightRequest struct {
	BlockHeight int64  `protobuf:"varint,1,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	ChainName   string `protobuf:"bytes,2,opt,name=ChainName,proto3" json:"ChainName,omitempty"`
}

func (m *BitcoinBlockHeaderByHeightRequest) Reset()         { *m = BitcoinBlockHeaderByHeightRequest{} }
func (m *BitcoinBlockHeaderByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*BitcoinBlockHeaderByHeightRequest) ProtoMessage()    {}
func (*BitcoinBlockHeaderByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{1}
}
func (m *BitcoinBlockHeaderByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinBlockHeaderByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinBlockHeaderByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BitcoinBlockHeaderByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinBlockHeaderByHeightRequest.Merge(m, src)
}
func (m *BitcoinBlockHeaderByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinBlockHeaderByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinBlockHeaderByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinBlockHeaderByHeightRequest proto.InternalMessageInfo

func (m *BitcoinBlockHeaderByHeightRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BitcoinBlockHeaderByHeightRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type BitcoinBlockHeaderResponse struct {
	BlockHeader *BTCBlockHeader `protobuf:"bytes,1,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
	BlockHeight int64           `protobuf:"varint,2,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	TipHeight   int64           `protobuf:"varint,3,opt,name=TipHeight,proto3" json:"TipHeight,omitempty"`
}

func (m *BitcoinBlockHeaderResponse) Reset()         { *m = BitcoinBlockHeaderResponse{} }
func (m *BitcoinBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*BitcoinBlockHeaderResponse) ProtoMessage()    {}
func (*BitcoinBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{2}
}
func (m *BitcoinBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BitcoinBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinBlockHeaderResponse.Merge(m, src)
}
func (m *BitcoinBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinBlockHeaderResponse proto.InternalMessageInfo

func (m *BitcoinBlockHeaderResponse) GetBlockHeader() *BTCBlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *BitcoinBlockHeaderResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BitcoinBlockHeaderResponse) GetTipHeight() int64 {
	if m != nil {
		return m.TipHeight
	}
	return 0
}

type BTCBlockHeader struct {
	Version    int64  `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	PrevBlock  string `protobuf:"bytes,2,opt,name=PrevBlock,proto3" json:"PrevBlock,omitempty"`
	MerkleRoot string `protobuf:"bytes,3,opt,name=MerkleRoot,proto3" json:"MerkleRoot,omitempty"`
	TimeStamp  int64  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Bits       int64  `protobuf:"varint,5,opt,name=Bits,proto3" json:"Bits,omitempty"`
	Nonce      int64  `protobuf:"varint,6,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	BlockHash  string `protobuf:"bytes,7,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (m *BTCBlockHeader) Reset()         { *m = BTCBlockHeader{} }
func (m *BTCBlockHeader) String() string { return proto.CompactTextString(m) }
func (*BTCBlockHeader) ProtoMessage()    {}
func (*BTCBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{3}
}
func (m *BTCBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCBlockHeader.Merge(m, src)
}
func (m *BTCBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BTCBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BTCBlockHeader proto.InternalMessageInfo

func (m *BTCBlockHeader) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BTCBlockHeader) GetPrevBlock() string {
	if m != nil {
		return m.PrevBlock
	}
	return ""
}

func (m *BTCBlockHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BTCBlockHeader) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *BTCBlockHeader) GetBits() int64 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *BTCBlockHeader) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BTCBlockHeader) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type Redemption struct {
	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DestinationAddress []byte `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Amount             uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Redemption) Reset()         { *m = Redemption{} }
func (m *Redemption) String() string { return proto.CompactTextString(m) }
func (*Redemption) ProtoMessage()    {}
func (*Redemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{4}
}
func (m *Redemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redemption.Merge(m, src)
}
func (m *Redemption) XXX_Size() int {
	return m.Size()
}
func (m *Redemption) XXX_DiscardUnknown() {
	xxx_messageInfo_Redemption.DiscardUnknown(m)
}

var xxx_messageInfo_Redemption proto.InternalMessageInfo

func (m *Redemption) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Redemption) GetDestinationAddress() []byte {
	if m != nil {
		return m.DestinationAddress
	}
	return nil
}

func (m *Redemption) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SidecarStateRequest struct {
}

func (m *SidecarStateRequest) Reset()         { *m = SidecarStateRequest{} }
func (m *SidecarStateRequest) String() string { return proto.CompactTextString(m) }
func (*SidecarStateRequest) ProtoMessage()    {}
func (*SidecarStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{5}
}
func (m *SidecarStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidecarStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidecarStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SidecarStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarStateRequest.Merge(m, src)
}
func (m *SidecarStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SidecarStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarStateRequest proto.InternalMessageInfo

type SidecarStateResponse struct {
	EigenDelegations           []byte       `protobuf:"bytes,1,opt,name=EigenDelegations,proto3" json:"EigenDelegations,omitempty"`
	EthBlockHeight             uint64       `protobuf:"varint,2,opt,name=EthBlockHeight,proto3" json:"EthBlockHeight,omitempty"`
	EthBaseFee                 uint64       `protobuf:"varint,3,opt,name=EthBaseFee,proto3" json:"EthBaseFee,omitempty"`
	EthTipCap                  uint64       `protobuf:"varint,4,opt,name=EthTipCap,proto3" json:"EthTipCap,omitempty"`
	EthWrapGasLimit            uint64       `protobuf:"varint,5,opt,name=EthWrapGasLimit,proto3" json:"EthWrapGasLimit,omitempty"`
	EthUnstakeGasLimit         uint64       `protobuf:"varint,6,opt,name=EthUnstakeGasLimit,proto3" json:"EthUnstakeGasLimit,omitempty"`
	SolanaLamportsPerSignature uint64       `protobuf:"varint,7,opt,name=SolanaLamportsPerSignature,proto3" json:"SolanaLamportsPerSignature,omitempty"`
	RedemptionsEthereum        []Redemption `protobuf:"bytes,8,rep,name=RedemptionsEthereum,proto3" json:"RedemptionsEthereum"`
	RedemptionsSolana          []Redemption `protobuf:"bytes,9,rep,name=RedemptionsSolana,proto3" json:"RedemptionsSolana"`
	ROCKUSDPrice               string       `protobuf:"bytes,10,opt,name=ROCKUSDPrice,proto3" json:"ROCKUSDPrice,omitempty"`
	BTCUSDPrice                string       `protobuf:"bytes,11,opt,name=BTCUSDPrice,proto3" json:"BTCUSDPrice,omitempty"`
	ETHUSDPrice                string       `protobuf:"bytes,12,opt,name=ETHUSDPrice,proto3" json:"ETHUSDPrice,omitempty"`
}

func (m *SidecarStateResponse) Reset()         { *m = SidecarStateResponse{} }
func (m *SidecarStateResponse) String() string { return proto.CompactTextString(m) }
func (*SidecarStateResponse) ProtoMessage()    {}
func (*SidecarStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{6}
}
func (m *SidecarStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidecarStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidecarStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SidecarStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarStateResponse.Merge(m, src)
}
func (m *SidecarStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *SidecarStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarStateResponse proto.InternalMessageInfo

func (m *SidecarStateResponse) GetEigenDelegations() []byte {
	if m != nil {
		return m.EigenDelegations
	}
	return nil
}

func (m *SidecarStateResponse) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *SidecarStateResponse) GetEthBaseFee() uint64 {
	if m != nil {
		return m.EthBaseFee
	}
	return 0
}

func (m *SidecarStateResponse) GetEthTipCap() uint64 {
	if m != nil {
		return m.EthTipCap
	}
	return 0
}

func (m *SidecarStateResponse) GetEthWrapGasLimit() uint64 {
	if m != nil {
		return m.EthWrapGasLimit
	}
	return 0
}

func (m *SidecarStateResponse) GetEthUnstakeGasLimit() uint64 {
	if m != nil {
		return m.EthUnstakeGasLimit
	}
	return 0
}

func (m *SidecarStateResponse) GetSolanaLamportsPerSignature() uint64 {
	if m != nil {
		return m.SolanaLamportsPerSignature
	}
	return 0
}

func (m *SidecarStateResponse) GetRedemptionsEthereum() []Redemption {
	if m != nil {
		return m.RedemptionsEthereum
	}
	return nil
}

func (m *SidecarStateResponse) GetRedemptionsSolana() []Redemption {
	if m != nil {
		return m.RedemptionsSolana
	}
	return nil
}

func (m *SidecarStateResponse) GetROCKUSDPrice() string {
	if m != nil {
		return m.ROCKUSDPrice
	}
	return ""
}

func (m *SidecarStateResponse) GetBTCUSDPrice() string {
	if m != nil {
		return m.BTCUSDPrice
	}
	return ""
}

func (m *SidecarStateResponse) GetETHUSDPrice() string {
	if m != nil {
		return m.ETHUSDPrice
	}
	return ""
}

type SidecarStateByEthHeightRequest struct {
	EthBlockHeight uint64 `protobuf:"varint,1,opt,name=EthBlockHeight,proto3" json:"EthBlockHeight,omitempty"`
}

func (m *SidecarStateByEthHeightRequest) Reset()         { *m = SidecarStateByEthHeightRequest{} }
func (m *SidecarStateByEthHeightRequest) String() string { return proto.CompactTextString(m) }
func (*SidecarStateByEthHeightRequest) ProtoMessage()    {}
func (*SidecarStateByEthHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{7}
}
func (m *SidecarStateByEthHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidecarStateByEthHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidecarStateByEthHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SidecarStateByEthHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarStateByEthHeightRequest.Merge(m, src)
}
func (m *SidecarStateByEthHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *SidecarStateByEthHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarStateByEthHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarStateByEthHeightRequest proto.InternalMessageInfo

func (m *SidecarStateByEthHeightRequest) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

type LatestEthereumNonceForAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *LatestEthereumNonceForAccountRequest) Reset()         { *m = LatestEthereumNonceForAccountRequest{} }
func (m *LatestEthereumNonceForAccountRequest) String() string { return proto.CompactTextString(m) }
func (*LatestEthereumNonceForAccountRequest) ProtoMessage()    {}
func (*LatestEthereumNonceForAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{8}
}
func (m *LatestEthereumNonceForAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestEthereumNonceForAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestEthereumNonceForAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestEthereumNonceForAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestEthereumNonceForAccountRequest.Merge(m, src)
}
func (m *LatestEthereumNonceForAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *LatestEthereumNonceForAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestEthereumNonceForAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LatestEthereumNonceForAccountRequest proto.InternalMessageInfo

func (m *LatestEthereumNonceForAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LatestEthereumNonceForAccountResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
}

func (m *LatestEthereumNonceForAccountResponse) Reset()         { *m = LatestEthereumNonceForAccountResponse{} }
func (m *LatestEthereumNonceForAccountResponse) String() string { return proto.CompactTextString(m) }
func (*LatestEthereumNonceForAccountResponse) ProtoMessage()    {}
func (*LatestEthereumNonceForAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f890d7da2148de8, []int{9}
}
func (m *LatestEthereumNonceForAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestEthereumNonceForAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestEthereumNonceForAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestEthereumNonceForAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestEthereumNonceForAccountResponse.Merge(m, src)
}
func (m *LatestEthereumNonceForAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *LatestEthereumNonceForAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestEthereumNonceForAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LatestEthereumNonceForAccountResponse proto.InternalMessageInfo

func (m *LatestEthereumNonceForAccountResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*LatestBitcoinBlockHeaderRequest)(nil), "api.LatestBitcoinBlockHeaderRequest")
	proto.RegisterType((*BitcoinBlockHeaderByHeightRequest)(nil), "api.BitcoinBlockHeaderByHeightRequest")
	proto.RegisterType((*BitcoinBlockHeaderResponse)(nil), "api.BitcoinBlockHeaderResponse")
	proto.RegisterType((*BTCBlockHeader)(nil), "api.BTCBlockHeader")
	proto.RegisterType((*Redemption)(nil), "api.Redemption")
	proto.RegisterType((*SidecarStateRequest)(nil), "api.SidecarStateRequest")
	proto.RegisterType((*SidecarStateResponse)(nil), "api.SidecarStateResponse")
	proto.RegisterType((*SidecarStateByEthHeightRequest)(nil), "api.SidecarStateByEthHeightRequest")
	proto.RegisterType((*LatestEthereumNonceForAccountRequest)(nil), "api.LatestEthereumNonceForAccountRequest")
	proto.RegisterType((*LatestEthereumNonceForAccountResponse)(nil), "api.LatestEthereumNonceForAccountResponse")
}

func init() { proto.RegisterFile("api/sidecar_service.proto", fileDescriptor_9f890d7da2148de8) }

var fileDescriptor_9f890d7da2148de8 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x4e, 0x5a, 0x6f, 0x4b, 0x4f, 0xaa, 0x16, 0xa6, 0x05, 0xb9, 0x01, 0xd2, 0x62, 0x96, 0x55,
	0x59, 0x89, 0x44, 0x2a, 0xda, 0x1b, 0x24, 0x7e, 0x36, 0x59, 0x37, 0x91, 0x28, 0x4b, 0x35, 0xc9,
	0x82, 0xb4, 0x17, 0x54, 0x53, 0xfb, 0x10, 0x0f, 0xad, 0x3d, 0x66, 0x66, 0x52, 0x69, 0xe1, 0x11,
	0xb8, 0x41, 0xe2, 0x65, 0x78, 0x84, 0xbd, 0x42, 0x7b, 0xc9, 0x15, 0x42, 0xed, 0x8b, 0xac, 0x3c,
	0x63, 0x27, 0xce, 0x4f, 0xd3, 0xbd, 0xf3, 0x7c, 0xe7, 0x9b, 0xef, 0xfc, 0xcc, 0x99, 0x39, 0x86,
	0x3d, 0x96, 0xf2, 0x96, 0xe2, 0x21, 0x06, 0x4c, 0x9e, 0x29, 0x94, 0x57, 0x3c, 0xc0, 0x66, 0x2a,
	0x85, 0x16, 0x64, 0x95, 0xa5, 0xbc, 0xbe, 0x17, 0x08, 0x15, 0x0b, 0x75, 0x66, 0xa0, 0x96, 0x5d,
	0x58, 0x7b, 0x7d, 0x77, 0x28, 0x86, 0xc2, 0xe2, 0xd9, 0x97, 0x45, 0xbd, 0xaf, 0x61, 0xff, 0x84,
	0x69, 0x54, 0xba, 0xcd, 0x75, 0x20, 0x78, 0xd2, 0xbe, 0x14, 0xc1, 0x45, 0x0f, 0x59, 0x88, 0x92,
	0xe2, 0xaf, 0x23, 0x54, 0x9a, 0x7c, 0x00, 0x1b, 0x9d, 0x88, 0xf1, 0xe4, 0x29, 0x8b, 0xd1, 0xad,
	0x1e, 0x54, 0x0f, 0x37, 0xe8, 0x04, 0xf0, 0x02, 0xf8, 0x68, 0x7e, 0x6b, 0xfb, 0x45, 0x0f, 0xf9,
	0x30, 0xd2, 0x85, 0xc4, 0x01, 0xd4, 0x72, 0x6b, 0x86, 0x1a, 0x91, 0x55, 0x5a, 0x86, 0xa6, 0x9d,
	0xac, 0xcc, 0x3a, 0xf9, 0xab, 0x0a, 0xf5, 0x45, 0x01, 0xaa, 0x54, 0x24, 0x0a, 0xc9, 0x23, 0xa8,
	0x9d, 0x4f, 0x60, 0x23, 0x5f, 0x3b, 0xda, 0x69, 0xb2, 0x94, 0x37, 0xdb, 0x83, 0x4e, 0x79, 0x47,
	0x99, 0x37, 0x1b, 0xd5, 0xca, 0xc2, 0xa8, 0x06, 0x3c, 0xcd, 0xed, 0xab, 0xc6, 0x3e, 0x01, 0xbc,
	0x7f, 0xaa, 0xb0, 0x35, 0xad, 0x4f, 0x5c, 0x58, 0xff, 0x01, 0xa5, 0xe2, 0x22, 0xc9, 0x93, 0x2c,
	0x96, 0x99, 0xd4, 0xa9, 0xc4, 0x2b, 0x43, 0x2e, 0x12, 0x1c, 0x03, 0xa4, 0x01, 0xf0, 0x1d, 0xca,
	0x8b, 0x4b, 0xa4, 0x42, 0x58, 0x4f, 0x1b, 0xb4, 0x84, 0xd8, 0x40, 0x62, 0xec, 0x6b, 0x16, 0xa7,
	0xae, 0x53, 0x04, 0x92, 0x03, 0x84, 0x80, 0xd3, 0xe6, 0x5a, 0xb9, 0xf7, 0x8c, 0xc1, 0x7c, 0x93,
	0x5d, 0xb8, 0xf7, 0x54, 0x24, 0x01, 0xba, 0x6b, 0x06, 0xb4, 0x8b, 0x4c, 0xc7, 0x86, 0xcb, 0x54,
	0xe4, 0xae, 0xdb, 0x28, 0xc6, 0x80, 0x87, 0x00, 0x14, 0x43, 0x8c, 0x53, 0x9d, 0x45, 0xbc, 0x05,
	0x2b, 0x3c, 0x34, 0x69, 0x38, 0x74, 0x85, 0x87, 0xa4, 0x05, 0x3b, 0x21, 0x2a, 0xcd, 0x13, 0x96,
	0x99, 0xcf, 0x58, 0x18, 0x4a, 0x54, 0xca, 0xe4, 0xb2, 0x49, 0x49, 0xc9, 0xf4, 0xd8, 0x5a, 0xc8,
	0x7b, 0xb0, 0xc6, 0x62, 0x31, 0x4a, 0x6c, 0x42, 0x0e, 0xcd, 0x57, 0xde, 0xbb, 0xb0, 0xd3, 0xb7,
	0x2d, 0xdc, 0xd7, 0x4c, 0x63, 0xde, 0x24, 0xde, 0xdf, 0x0e, 0xec, 0x4e, 0xe3, 0xf9, 0xf1, 0x3e,
	0x84, 0xb7, 0x7d, 0x3e, 0xc4, 0xe4, 0x09, 0x5e, 0xe2, 0xd0, 0x78, 0x50, 0x26, 0xac, 0x4d, 0x3a,
	0x87, 0x93, 0x07, 0xb0, 0xe5, 0xeb, 0x68, 0xf6, 0x58, 0x1d, 0x3a, 0x83, 0x66, 0x05, 0xcf, 0x10,
	0xa6, 0xf0, 0x18, 0x31, 0x8f, 0xaf, 0x84, 0x64, 0x85, 0xf2, 0x75, 0x34, 0xe0, 0x69, 0x87, 0xd9,
	0x82, 0x3b, 0x74, 0x02, 0x90, 0x43, 0xd8, 0xf6, 0x75, 0xf4, 0xa3, 0x64, 0x69, 0x97, 0xa9, 0x13,
	0x1e, 0x73, 0x6d, 0x6a, 0xef, 0xd0, 0x59, 0x98, 0x34, 0x81, 0xf8, 0x3a, 0x7a, 0x96, 0x28, 0xcd,
	0x2e, 0x70, 0x4c, 0x5e, 0x33, 0xe4, 0x05, 0x16, 0xf2, 0x15, 0xd4, 0xfb, 0xe2, 0x92, 0x25, 0xec,
	0x84, 0xc5, 0xa9, 0x90, 0x5a, 0x9d, 0xa2, 0xec, 0xf3, 0x61, 0xc2, 0xf4, 0x48, 0xa2, 0x39, 0x31,
	0x87, 0x2e, 0x61, 0x90, 0x2e, 0xec, 0x4c, 0x8e, 0x50, 0xf9, 0x3a, 0x42, 0x89, 0xa3, 0xd8, 0x7d,
	0xeb, 0x60, 0xf5, 0xb0, 0x76, 0xb4, 0x6d, 0xae, 0xc4, 0xc4, 0xde, 0x76, 0x5e, 0xfe, 0xb7, 0x5f,
	0xa1, 0x8b, 0x76, 0x90, 0x0e, 0xbc, 0x53, 0x82, 0xad, 0x47, 0x77, 0x63, 0x99, 0xcc, 0x3c, 0x9f,
	0x78, 0xb0, 0x49, 0xbf, 0xef, 0x7c, 0xfb, 0xac, 0xff, 0xe4, 0x54, 0xf2, 0x00, 0x5d, 0x30, 0x1d,
	0x37, 0x85, 0x99, 0x5b, 0x38, 0xe8, 0x8c, 0x29, 0x35, 0x43, 0x29, 0x43, 0x19, 0xc3, 0x1f, 0xf4,
	0xc6, 0x8c, 0x4d, 0xcb, 0x28, 0x41, 0x5e, 0x0f, 0x1a, 0xe5, 0xce, 0x69, 0xbf, 0xf0, 0x75, 0x34,
	0xfd, 0x02, 0xcd, 0xf7, 0x45, 0x75, 0x51, 0x5f, 0x78, 0xdf, 0xc0, 0x7d, 0xfb, 0x1e, 0x16, 0x85,
	0x30, 0xf7, 0xe6, 0x58, 0xc8, 0xc7, 0x41, 0x90, 0x35, 0x6f, 0xa1, 0xe7, 0xc2, 0x7a, 0xde, 0xe6,
	0xf9, 0x93, 0x58, 0x2c, 0xbd, 0x2f, 0xe1, 0x93, 0x3b, 0x14, 0xf2, 0xb6, 0x1e, 0xdf, 0x50, 0x1b,
	0x89, 0x5d, 0x1c, 0xfd, 0xe1, 0xc0, 0x56, 0x91, 0x8b, 0x7d, 0xdf, 0x49, 0x0f, 0xb6, 0xbb, 0xa8,
	0xcb, 0x09, 0x12, 0xd7, 0x1c, 0xc1, 0x82, 0x5b, 0x54, 0xdf, 0x5b, 0x60, 0xb1, 0x0e, 0xbd, 0x0a,
	0xf9, 0x09, 0xea, 0x33, 0x4a, 0xa5, 0x52, 0x91, 0x8f, 0xe7, 0xb6, 0xce, 0x17, 0x72, 0xb9, 0xfe,
	0x2f, 0xf0, 0x61, 0x17, 0xf5, 0xed, 0xf3, 0x80, 0x3c, 0xb0, 0x8f, 0xf2, 0x5d, 0x03, 0xa3, 0xbe,
	0x7f, 0x0b, 0xaf, 0xe4, 0xeb, 0x67, 0x78, 0xbf, 0x8b, 0xfa, 0xb6, 0xe1, 0x45, 0xee, 0x1b, 0x85,
	0x3b, 0x66, 0xdb, 0x9b, 0xf8, 0xf9, 0x1d, 0x0e, 0xc6, 0x7e, 0x6e, 0x39, 0x52, 0xf2, 0x69, 0xc9,
	0xd9, 0xf2, 0xc6, 0xa9, 0x3f, 0x7c, 0x13, 0x6a, 0xe1, 0xbc, 0x3d, 0x78, 0x79, 0xdd, 0xa8, 0xbe,
	0xba, 0x6e, 0x54, 0xff, 0xbf, 0x6e, 0x54, 0xff, 0xbc, 0x69, 0x54, 0x5e, 0xdd, 0x34, 0x2a, 0xff,
	0xde, 0x34, 0x2a, 0xcf, 0xbf, 0x18, 0x72, 0x1d, 0x8d, 0xce, 0x9b, 0x81, 0x88, 0x5b, 0xcf, 0x31,
	0x91, 0x22, 0xb8, 0xf8, 0xec, 0x58, 0x8c, 0x92, 0xd0, 0x3c, 0x84, 0xad, 0xdf, 0x64, 0x90, 0x4d,
	0xcf, 0xd6, 0xd5, 0xa3, 0xe2, 0x77, 0xa1, 0x65, 0x67, 0x3f, 0x4b, 0xf9, 0xf9, 0x9a, 0xf9, 0xfc,
	0xfc, 0x75, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xb1, 0x56, 0x22, 0x4e, 0x08, 0x00, 0x00,
}

func (m *LatestBitcoinBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestBitcoinBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestBitcoinBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BitcoinBlockHeaderByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinBlockHeaderByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BitcoinBlockHeaderByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BitcoinBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BitcoinBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TipHeight != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.TipHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSidecarService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Nonce != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x30
	}
	if m.Bits != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.Bits))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeStamp != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrevBlock) > 0 {
		i -= len(m.PrevBlock)
		copy(dAtA[i:], m.PrevBlock)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.PrevBlock)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Redemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SidecarStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidecarStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SidecarStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SidecarStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidecarStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SidecarStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ETHUSDPrice) > 0 {
		i -= len(m.ETHUSDPrice)
		copy(dAtA[i:], m.ETHUSDPrice)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.ETHUSDPrice)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BTCUSDPrice) > 0 {
		i -= len(m.BTCUSDPrice)
		copy(dAtA[i:], m.BTCUSDPrice)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.BTCUSDPrice)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ROCKUSDPrice) > 0 {
		i -= len(m.ROCKUSDPrice)
		copy(dAtA[i:], m.ROCKUSDPrice)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.ROCKUSDPrice)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RedemptionsSolana) > 0 {
		for iNdEx := len(m.RedemptionsSolana) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedemptionsSolana[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSidecarService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RedemptionsEthereum) > 0 {
		for iNdEx := len(m.RedemptionsEthereum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedemptionsEthereum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSidecarService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SolanaLamportsPerSignature != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.SolanaLamportsPerSignature))
		i--
		dAtA[i] = 0x38
	}
	if m.EthUnstakeGasLimit != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.EthUnstakeGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.EthWrapGasLimit != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.EthWrapGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.EthTipCap != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.EthTipCap))
		i--
		dAtA[i] = 0x20
	}
	if m.EthBaseFee != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.EthBaseFee))
		i--
		dAtA[i] = 0x18
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EigenDelegations) > 0 {
		i -= len(m.EigenDelegations)
		copy(dAtA[i:], m.EigenDelegations)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.EigenDelegations)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SidecarStateByEthHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidecarStateByEthHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SidecarStateByEthHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthBlockHeight != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LatestEthereumNonceForAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestEthereumNonceForAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestEthereumNonceForAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSidecarService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestEthereumNonceForAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestEthereumNonceForAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestEthereumNonceForAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintSidecarService(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSidecarService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSidecarService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LatestBitcoinBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	return n
}

func (m *BitcoinBlockHeaderByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovSidecarService(uint64(m.BlockHeight))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	return n
}

func (m *BitcoinBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovSidecarService(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovSidecarService(uint64(m.BlockHeight))
	}
	if m.TipHeight != 0 {
		n += 1 + sovSidecarService(uint64(m.TipHeight))
	}
	return n
}

func (m *BTCBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSidecarService(uint64(m.Version))
	}
	l = len(m.PrevBlock)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovSidecarService(uint64(m.TimeStamp))
	}
	if m.Bits != 0 {
		n += 1 + sovSidecarService(uint64(m.Bits))
	}
	if m.Nonce != 0 {
		n += 1 + sovSidecarService(uint64(m.Nonce))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	return n
}

func (m *Redemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSidecarService(uint64(m.Id))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovSidecarService(uint64(m.Amount))
	}
	return n
}

func (m *SidecarStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SidecarStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EigenDelegations)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovSidecarService(uint64(m.EthBlockHeight))
	}
	if m.EthBaseFee != 0 {
		n += 1 + sovSidecarService(uint64(m.EthBaseFee))
	}
	if m.EthTipCap != 0 {
		n += 1 + sovSidecarService(uint64(m.EthTipCap))
	}
	if m.EthWrapGasLimit != 0 {
		n += 1 + sovSidecarService(uint64(m.EthWrapGasLimit))
	}
	if m.EthUnstakeGasLimit != 0 {
		n += 1 + sovSidecarService(uint64(m.EthUnstakeGasLimit))
	}
	if m.SolanaLamportsPerSignature != 0 {
		n += 1 + sovSidecarService(uint64(m.SolanaLamportsPerSignature))
	}
	if len(m.RedemptionsEthereum) > 0 {
		for _, e := range m.RedemptionsEthereum {
			l = e.Size()
			n += 1 + l + sovSidecarService(uint64(l))
		}
	}
	if len(m.RedemptionsSolana) > 0 {
		for _, e := range m.RedemptionsSolana {
			l = e.Size()
			n += 1 + l + sovSidecarService(uint64(l))
		}
	}
	l = len(m.ROCKUSDPrice)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	l = len(m.BTCUSDPrice)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	l = len(m.ETHUSDPrice)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	return n
}

func (m *SidecarStateByEthHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthBlockHeight != 0 {
		n += 1 + sovSidecarService(uint64(m.EthBlockHeight))
	}
	return n
}

func (m *LatestEthereumNonceForAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSidecarService(uint64(l))
	}
	return n
}

func (m *LatestEthereumNonceForAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovSidecarService(uint64(m.Nonce))
	}
	return n
}

func sovSidecarService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSidecarService(x uint64) (n int) {
	return sovSidecarService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LatestBitcoinBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestBitcoinBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestBitcoinBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinBlockHeaderByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinBlockHeaderByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinBlockHeaderByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BTCBlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipHeight", wireType)
			}
			m.TipHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TipHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			m.Bits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Redemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = append(m.DestinationAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationAddress == nil {
				m.DestinationAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SidecarStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidecarStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidecarStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SidecarStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidecarStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidecarStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EigenDelegations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EigenDelegations = append(m.EigenDelegations[:0], dAtA[iNdEx:postIndex]...)
			if m.EigenDelegations == nil {
				m.EigenDelegations = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBaseFee", wireType)
			}
			m.EthBaseFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBaseFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthTipCap", wireType)
			}
			m.EthTipCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthTipCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthWrapGasLimit", wireType)
			}
			m.EthWrapGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthWrapGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthUnstakeGasLimit", wireType)
			}
			m.EthUnstakeGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthUnstakeGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaLamportsPerSignature", wireType)
			}
			m.SolanaLamportsPerSignature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SolanaLamportsPerSignature |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionsEthereum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionsEthereum = append(m.RedemptionsEthereum, Redemption{})
			if err := m.RedemptionsEthereum[len(m.RedemptionsEthereum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionsSolana", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionsSolana = append(m.RedemptionsSolana, Redemption{})
			if err := m.RedemptionsSolana[len(m.RedemptionsSolana)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ROCKUSDPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ROCKUSDPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BTCUSDPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BTCUSDPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETHUSDPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETHUSDPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SidecarStateByEthHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidecarStateByEthHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidecarStateByEthHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestEthereumNonceForAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestEthereumNonceForAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestEthereumNonceForAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecarService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidecarService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestEthereumNonceForAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestEthereumNonceForAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestEthereumNonceForAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSidecarService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidecarService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSidecarService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSidecarService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSidecarService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSidecarService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSidecarService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSidecarService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSidecarService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSidecarService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSidecarService = fmt.Errorf("proto: unexpected end of group")
)
