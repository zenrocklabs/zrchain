// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IDelegationManagerWithdrawal is an auto generated low-level Go binding around an user-defined struct.
type IDelegationManagerWithdrawal struct {
	Staker      common.Address
	DelegatedTo common.Address
	Withdrawer  common.Address
	Nonce       *big.Int
	StartBlock  uint32
	Strategies  []common.Address
	Shares      []*big.Int
}

// ISignatureUtilsSignatureWithExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithExpiry struct {
	Signature []byte
	Expiry    *big.Int
}

// IZenBTControllerUnstakeInfo is an auto generated low-level Go binding around an user-defined struct.
type IZenBTControllerUnstakeInfo struct {
	DestinationAddress []byte
	ZenBTCValue        *big.Int
	Shares             *big.Int
	StartBlock         uint32
	Nonce              *big.Int
	Pending            bool
}

// ZenBTControllerMetaData contains all meta data concerning the ZenBTController contract.
var ZenBTControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"RockBTCStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contractIStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"structIDelegationManager.Withdrawal\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAsTokens\",\"type\":\"bool\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"withdrawalIds\",\"type\":\"bytes32[]\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zenBTCValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structIZenBTController.UnstakeInfo\",\"name\":\"unstakeInfo\",\"type\":\"tuple\"}],\"name\":\"WithdrawalZenBTCInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"fee\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ZenBTCWrapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEGLDelegationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEGLStrategyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCompleatedNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueuedWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contractIStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"structIDelegationManager.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"shares\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReadyForComplete\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zenBTCValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"internalType\":\"structIZenBTController.UnstakeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getReadyForCompleteFromTo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zenBTCValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"internalType\":\"structIZenBTController.UnstakeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRockBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRockBTCStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUnstakeAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zenBTCValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"internalType\":\"structIZenBTController.UnstakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getUnstakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zenBTCValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"internalType\":\"structIZenBTController.UnstakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rockBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eglStrategyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eglDelegationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rockBTCStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initializeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"stakeRockBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"destAddr\",\"type\":\"bytes\"}],\"name\":\"unstakeRockBTCInit\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"withdrawalIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"unstakeRockBTComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000d6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000735760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d35780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b612a0380620000e66000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637cb5eae4116100de578063a7cafd4511610097578063d539139311610071578063d5391393146103f7578063d547741f1461040c578063e6f8c1911461041f578063e7f43c681461043257600080fd5b8063a7cafd451461039d578063cbff33e6146103bd578063d087d288146103d057600080fd5b80637cb5eae414610305578063905c2de31461031857806391b50c091461032b57806391d1485414610352578063931432ab14610365578063a217fddf1461039557600080fd5b80632f2ff15d116101305780632f2ff15d146102655780633114aa6b1461027a57806336568abe1461028f5780633725d2fc146102a25780635bed39c8146102d25780636296ae27146102f257600080fd5b806301ffc9a71461017857806304611b06146101a05780631626ba7e146101d25780631f05b551146101fe578063248a9ca31461022e57806324dcd7ac1461024f575b600080fd5b61018b610186366004611c64565b610462565b60405190151581526020015b60405180910390f35b60008051602061296e833981519152546001600160a01b03165b6040516001600160a01b039091168152602001610197565b6101e56101e0366004611d6b565b610499565b6040516001600160e01b03199091168152602001610197565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b502546001600160a01b03166101ba565b61024161023c366004611db1565b6104ee565b604051908152602001610197565b610257610510565b604051610197929190611ebd565b610278610273366004611f8a565b6105a0565b005b6102826105c2565b6040516101979190612055565b61027861029d366004611f8a565b610635565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b503546001600160a01b03166101ba565b6102e56102e0366004611d6b565b61066d565b60405161019791906120b9565b6102786103003660046120fd565b610779565b610278610313366004611db1565b61079c565b610282610326366004612164565b610b9e565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50554610241565b61018b610360366004611f8a565b610bb1565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b504546001600160a01b03166101ba565b610241600081565b6103b06103ab366004611db1565b610be9565b6040516101979190612186565b6102786103cb366004612199565b610d11565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50654610241565b6102416000805160206129ae83398151915281565b61027861041a366004611f8a565b610e2f565b6103b061042d366004611db1565b610e4b565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b501546001600160a01b03166101ba565b60006001600160e01b03198216637965db0b60e01b148061049357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806104a68484610e5c565b90506104c06000805160206129ae83398151915282610bb1565b156104d55750630b135d3f60e11b9050610493565b604051638baa579f60e01b815260040160405180910390fd5b600090815260008051602061298e833981519152602052604090206001015490565b606080600060008051602061296e8339815191526003810154604051635dd6857960e01b81523060048201529192506001600160a01b031690635dd6857990602401600060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059791908101906123a7565b92509250509091565b6105a9826104ee565b6105b281610e86565b6105bc8383610e93565b50505050565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b5055460609060008051602061296e8339815191529060006106217f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b5065490565b905061062d8282610f38565b935050505090565b6001600160a01b038116331461065e5760405163334bd91960e11b815260040160405180910390fd5b6106688282611246565b505050565b60606000805160206129ae83398151915261068781610e86565b60008051602061296e83398151915260006106a286866112c2565b60408051600180825281830190925291925060009190816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816106bd57505060408051606081019091526004850154919250908190610713906001600160a01b0316611452565b815260200161072584604001516114aa565b8152602001306001600160a01b03168152508160008151811061074a5761074a61251c565b6020908102919091010152600383015461076e9082906001600160a01b03166114f5565b979650505050505050565b6000805160206129ae83398151915261079181610e86565b6105bc8484846115aa565b6000805160206129ae8339815191526107b481610e86565b60008281527f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b5076020526040808220815160c08101909252805460008051602061296e833981519152939291908290829061080d90612532565b80601f016020809104026020016040519081016040528092919081815260200182805461083990612532565b80156108865780601f1061085b57610100808354040283529160200191610886565b820191906000526020600020905b81548152906001019060200180831161086957829003601f168201915b50505091835250506001828101546020808401919091526002840154604080850191909152600385015463ffffffff1660608501526004850154608085015260059485015460ff908116151560a09095019490945260008a815260078901909252902090920154929350919091161515146109485760405162461bcd60e51b815260206004820152601960248201527f756e7374616b6520616c726561647920636f6d706c657465640000000000000060448201526064015b60405180910390fd5b60048083015460408051632495a59960e01b815290516000936109be936001600160a01b031692632495a59992818301926020928290030181865afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b9919061256c565b611452565b6040805160e0810182523080825260018701546001600160a01b0390811660208401529282015260808086015160608084019190915286015163ffffffff16908201526004860154929350600092909160a0830191610a1d9116611452565b8152602001610a2f85604001516114aa565b90526003850154604051630e4cc3f960e41b81529192506001600160a01b03169063e4cc3f9090610a699084908690600190600401612589565b600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050855460c084015180516001600160a01b0390921693506342966c68925090600090610ac657610ac661251c565b60200260200101516040518263ffffffff1660e01b8152600401610aec91815260200190565b600060405180830381600087803b158015610b0657600080fd5b505af1158015610b1a573d6000803e3d6000fd5b50505050836005015481606001511115610b3957606081015160058501555b6080830151600090815260078501602052604090819020600501805460ff19169055517fadd5e0a5a1ec72776e3a7800fa2aec5ca0f7865cf68592ff037e468cb272a0a290610b8e9083908590600190612589565b60405180910390a1505050505050565b6060610baa8383610f38565b9392505050565b600091825260008051602061298e833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610bf1611c26565b60008281527f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b507602052604090819020815160c08101909252805460008051602061296e83398151915292919082908290610c4a90612532565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7690612532565b8015610cc35780601f10610c9857610100808354040283529160200191610cc3565b820191906000526020600020905b815481529060010190602001808311610ca657829003601f168201915b50505091835250506001820154602082015260028201546040820152600382015463ffffffff1660608201526004820154608082015260059091015460ff16151560a0909101529392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610d565750825b90506000826001600160401b03166001148015610d725750303b155b905081158015610d80575080155b15610d9e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610dc857845460ff60401b1916600160401b1785555b610dd0611871565b610ddd8a8a8a8a8a61188b565b8315610e2357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b610e38826104ee565b610e4181610e86565b6105bc8383611246565b610e53611c26565b61049382610be9565b600080600080610e6c86866118af565b925092509250610e7c82826118fc565b5090949350505050565b610e9081336119b9565b50565b600060008051602061298e833981519152610eae8484610bb1565b610f2e576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610ee43390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610493565b6000915050610493565b7f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50354604080516318891fd760e31b8152905160609260008051602061296e833981519152926000926001600160a01b039092169163c448feb8916004808201926020929091908290030181865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb91906125f4565b63ffffffff1690506000855b85811015611052576000818152600785016020526040902060030154439061101690859063ffffffff16612625565b111580156110375750600081815260078501602052604090206005015460ff165b1561104a578161104681612638565b9250505b600101610fe7565b506000816001600160401b0381111561106d5761106d611c8e565b6040519080825280602002602001820160405280156110a657816020015b611093611c26565b81526020019060019003908161108b5790505b5090506000875b8781101561123957600081815260078701602052604090206003015443906110dc90879063ffffffff16612625565b111580156110fd5750600081815260078701602052604090206005015460ff165b15611231576040805160c081018252600083815260078901602052918220805482919061112990612532565b80601f016020809104026020016040519081016040528092919081815260200182805461115590612532565b80156111a25780601f10611177576101008083540402835291602001916111a2565b820191906000526020600020905b81548152906001019060200180831161118557829003601f168201915b5050509183525050600084815260078a0160208181526040808420600181015483870152600281015491860191909152600381015463ffffffff1660608601526080850188905292879052526005015460ff16151560a090910152845190915081908590859081106112165761121661251c565b6020026020010181905250828061122c90612638565b935050505b6001016110ad565b5090979650505050505050565b600060008051602061298e8339815191526112618484610bb1565b15610f2e576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610493565b6112ca611c26565b60008051602061296e83398151915260006113037f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b5065490565b600483810154604051638c87101960e01b81529182018890529192506000916001600160a01b031690638c871019906024016020604051808303816000875af1158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190612651565b6040805160c08101825287815260208082018a905281830184905263ffffffff4316606083015260808201869052600160a0830152600086815260078801909152919091208151929350909182919081906113d390826126ba565b50602082015160018281019190915560408301516002830155606083015160038301805463ffffffff191663ffffffff9092169190911790556080830151600483015560a0909201516005909101805460ff1916911515919091179055600685015461143e91612625565b600690940193909355509091505092915050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061148c5761148c61251c565b6001600160a01b039092166020928302919091019091015292915050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106114e4576114e461251c565b602090810291909101015292915050565b6040516306ec6e8160e11b81526060906001600160a01b03831690630dd8dd0290611524908690600401612779565b6000604051808303816000875af1158015611543573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261156b9190810190612815565b90507f3ca8ee7ddc9cba27865c2837ec26df7a102ce7b8f538096db5b5d42e863502af8160405161159c91906120b9565b60405180910390a192915050565b600060008051602061296e83398151915280546040516340c10f1960e01b81523060048201526001600160401b03871660248201529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561160f57600080fd5b505af1158015611623573d6000803e3d6000fd5b50508254600284015460405163095ea7b360e01b81526001600160a01b0391821660048201526001600160401b03891660248201529116925063095ea7b391506044016020604051808303816000875af1158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a9919061289a565b50600281015460048083015483546040516373d0285560e11b81526001600160a01b0392831693810193909352811660248301526001600160401b03871660448301529091169063e7a050aa906064016020604051808303816000875af1158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612651565b506003810154604051633e28391d60e01b81523060048201526001600160a01b0390911690633e28391d90602401602060405180830381865afa158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab919061289a565b61181e576003810154600182015460405163eea9064b60e01b81526001600160a01b039283169263eea9064b926117eb92911690879087906004016128bc565b600060405180830381600087803b15801561180557600080fd5b505af1158015611819573d6000803e3d6000fd5b505050505b60018101546040516001600160401b03861681526001600160a01b03909116907f79c412fdc602b15f36aa9b42405335e8dac8e322a516e71a0a3881d5ed41e3bc9060200160405180910390a250505050565b6118796119f2565b611881611a3b565b611889611a4b565b565b6118936119f2565b61189b611871565b6118a88585858585611a53565b5050505050565b600080600083516041036118e95760208401516040850151606086015160001a6118db88828585611b44565b9550955095505050506118f5565b50508151600091506002905b9250925092565b600082600381111561191057611910612957565b03611919575050565b600182600381111561192d5761192d612957565b0361194b5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561195f5761195f612957565b036119805760405163fce698f760e01b81526004810182905260240161093f565b600382600381111561199457611994612957565b036119b5576040516335e2f38360e21b81526004810182905260240161093f565b5050565b6119c38282610bb1565b6119b55760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161093f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661188957604051631afcd79f60e31b815260040160405180910390fd5b611a436119f2565b611889611c13565b6118896119f2565b611a5b6119f2565b60008051602061296e83398151915280546001600160a01b03199081166001600160a01b03978816179091557f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50180548216928716929092179091557f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50280548216948616949094179093557f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50380548416928516929092179091557f1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50480549092169216919091179055565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611b7f5750600091506003905082611c09565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611bd3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611bff57506000925060019150829050611c09565b9250600091508190505b9450945094915050565b611c1b6119f2565b610e90600033610e93565b6040518060c00160405280606081526020016000815260200160008152602001600063ffffffff168152602001600081526020016000151581525090565b600060208284031215611c7657600080fd5b81356001600160e01b031981168114610baa57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715611cc657611cc6611c8e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611cf457611cf4611c8e565b604052919050565b600082601f830112611d0d57600080fd5b81356001600160401b03811115611d2657611d26611c8e565b611d39601f8201601f1916602001611ccc565b818152846020838601011115611d4e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611d7e57600080fd5b8235915060208301356001600160401b03811115611d9b57600080fd5b611da785828601611cfc565b9150509250929050565b600060208284031215611dc357600080fd5b5035919050565b60008151808452602080850194506020840160005b83811015611e045781516001600160a01b031687529582019590820190600101611ddf565b509495945050505050565b60008151808452602080850194506020840160005b83811015611e0457815187529582019590820190600101611e24565b600060018060a01b03808351168452806020840151166020850152806040840151166040850152506060820151606084015263ffffffff608083015116608084015260a082015160e060a0850152611e9b60e0850182611dca565b905060c083015184820360c0860152611eb48282611e0f565b95945050505050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015611f1457605f19888703018552611f02868351611e40565b95509382019390820190600101611ee6565b505085840381870152865180855281850193509150600582901b8401810187820160005b84811015611f6657601f19878403018652611f54838351611e0f565b95840195925090830190600101611f38565b50909998505050505050505050565b6001600160a01b0381168114610e9057600080fd5b60008060408385031215611f9d57600080fd5b823591506020830135611faf81611f75565b809150509250929050565b6000815160c0845280518060c086015260005b81811015611fea57602081840181015160e0888401015201611fcd565b50600060e08287010152602084015160208601526040840151604086015260608401519150612021606086018363ffffffff169052565b6080840151608086015260a0840151915061204060a086018315159052565b601f01601f19169390930160e0019392505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156120ac57603f1988860301845261209a858351611fba565b9450928501929085019060010161207e565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156120f1578351835292840192918401916001016120d5565b50909695505050505050565b60008060006060848603121561211257600080fd5b83356001600160401b03808216821461212a57600080fd5b9093506020850135908082111561214057600080fd5b5084016040818703121561215357600080fd5b929592945050506040919091013590565b6000806040838503121561217757600080fd5b50508035926020909101359150565b602081526000610baa6020830184611fba565b600080600080600060a086880312156121b157600080fd5b85356121bc81611f75565b945060208601356121cc81611f75565b935060408601356121dc81611f75565b925060608601356121ec81611f75565b915060808601356121fc81611f75565b809150509295509295909350565b60006001600160401b0382111561222357612223611c8e565b5060051b60200190565b805161223881611f75565b919050565b805163ffffffff8116811461223857600080fd5b600082601f83011261226257600080fd5b815160206122776122728361220a565b611ccc565b8083825260208201915060208460051b87010193508684111561229957600080fd5b602086015b848110156122be5780516122b181611f75565b835291830191830161229e565b509695505050505050565b600082601f8301126122da57600080fd5b815160206122ea6122728361220a565b8083825260208201915060208460051b87010193508684111561230c57600080fd5b602086015b848110156122be5780518352918301918301612311565b600082601f83011261233957600080fd5b815160206123496122728361220a565b82815260059290921b8401810191818101908684111561236857600080fd5b8286015b848110156122be5780516001600160401b0381111561238b5760008081fd5b6123998986838b01016122c9565b84525091830191830161236c565b600080604083850312156123ba57600080fd5b82516001600160401b03808211156123d157600080fd5b818501915085601f8301126123e557600080fd5b815160206123f56122728361220a565b82815260059290921b8401810191818101908984111561241457600080fd5b8286015b848110156124f55780518681111561242f57600080fd5b870160e0818d03601f1901121561244557600080fd5b61244d611ca4565b61245886830161222d565b81526124666040830161222d565b868201526124766060830161222d565b60408201526080820151606082015261249160a0830161223d565b608082015260c080830151898111156124aa5760008081fd5b6124b88f8983870101612251565b60a08401525060e0830151898111156124d15760008081fd5b6124df8f89838701016122c9565b9183019190915250845250918301918301612418565b509188015191965090935050508082111561250f57600080fd5b50611da785828601612328565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061254657607f821691505b60208210810361256657634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561257e57600080fd5b8151610baa81611f75565b60608152600061259c6060830186611e40565b82810360208481019190915285518083528682019282019060005b818110156125dc5784516001600160a01b0316835293830193918301916001016125b7565b50508093505050508215156040830152949350505050565b60006020828403121561260657600080fd5b610baa8261223d565b634e487b7160e01b600052601160045260246000fd5b808201808211156104935761049361260f565b60006001820161264a5761264a61260f565b5060010190565b60006020828403121561266357600080fd5b5051919050565b601f821115610668576000816000526020600020601f850160051c810160208610156126935750805b601f850160051c820191505b818110156126b25782815560010161269f565b505050505050565b81516001600160401b038111156126d3576126d3611c8e565b6126e7816126e18454612532565b8461266a565b602080601f83116001811461271c57600084156127045750858301515b600019600386901b1c1916600185901b1785556126b2565b600085815260208120601f198616915b8281101561274b5788860151825594840194600190910190840161272c565b50858210156127695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561280757603f198984030185528151606081518186526127c882870182611dca565b915050888201518582038a8701526127e08282611e0f565b928901516001600160a01b03169589019590955250948701949250908601906001016127a2565b509098975050505050505050565b6000602080838503121561282857600080fd5b82516001600160401b0381111561283e57600080fd5b8301601f8101851361284f57600080fd5b805161285d6122728261220a565b81815260059190911b8201830190838101908783111561287c57600080fd5b928401925b8284101561076e57835182529284019290840190612881565b6000602082840312156128ac57600080fd5b81518015158114610baa57600080fd5b6001600160a01b0384168152606060208201526000833536859003601e190181126128e657600080fd5b84016020810190356001600160401b0381111561290257600080fd5b80360382131561291157600080fd5b604060608501528060a0850152808260c0860137600060c082860101526020860135608085015260c0601f19601f83011685010192505050826040830152949350505050565b634e487b7160e01b600052602160045260246000fdfe1f7056f62fdbe84d13291834ab6e74f080827e3f8f77bb615d9db2295a18b50002dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800b458d13b0f4ce9e6aa65d297a27b10f75fdc6d0957bb29e1f2a30c8766b35415a2646970667358221220025fe8e55997ceb9b0a1700f596fc27ccc18faf73f9420e5646077a87cde76ab64736f6c63430008180033",
}

// ZenBTControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ZenBTControllerMetaData.ABI instead.
var ZenBTControllerABI = ZenBTControllerMetaData.ABI

// ZenBTControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZenBTControllerMetaData.Bin instead.
var ZenBTControllerBin = ZenBTControllerMetaData.Bin

// DeployZenBTController deploys a new Ethereum contract, binding an instance of ZenBTController to it.
func DeployZenBTController(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ZenBTController, error) {
	parsed, err := ZenBTControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZenBTControllerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZenBTController{ZenBTControllerCaller: ZenBTControllerCaller{contract: contract}, ZenBTControllerTransactor: ZenBTControllerTransactor{contract: contract}, ZenBTControllerFilterer: ZenBTControllerFilterer{contract: contract}}, nil
}

// ZenBTController is an auto generated Go binding around an Ethereum contract.
type ZenBTController struct {
	ZenBTControllerCaller     // Read-only binding to the contract
	ZenBTControllerTransactor // Write-only binding to the contract
	ZenBTControllerFilterer   // Log filterer for contract events
}

// ZenBTControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZenBTControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZenBTControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZenBTControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZenBTControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZenBTControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZenBTControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZenBTControllerSession struct {
	Contract     *ZenBTController  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZenBTControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZenBTControllerCallerSession struct {
	Contract *ZenBTControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ZenBTControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZenBTControllerTransactorSession struct {
	Contract     *ZenBTControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ZenBTControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZenBTControllerRaw struct {
	Contract *ZenBTController // Generic contract binding to access the raw methods on
}

// ZenBTControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZenBTControllerCallerRaw struct {
	Contract *ZenBTControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ZenBTControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZenBTControllerTransactorRaw struct {
	Contract *ZenBTControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZenBTController creates a new instance of ZenBTController, bound to a specific deployed contract.
func NewZenBTController(address common.Address, backend bind.ContractBackend) (*ZenBTController, error) {
	contract, err := bindZenBTController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZenBTController{ZenBTControllerCaller: ZenBTControllerCaller{contract: contract}, ZenBTControllerTransactor: ZenBTControllerTransactor{contract: contract}, ZenBTControllerFilterer: ZenBTControllerFilterer{contract: contract}}, nil
}

// NewZenBTControllerCaller creates a new read-only instance of ZenBTController, bound to a specific deployed contract.
func NewZenBTControllerCaller(address common.Address, caller bind.ContractCaller) (*ZenBTControllerCaller, error) {
	contract, err := bindZenBTController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerCaller{contract: contract}, nil
}

// NewZenBTControllerTransactor creates a new write-only instance of ZenBTController, bound to a specific deployed contract.
func NewZenBTControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ZenBTControllerTransactor, error) {
	contract, err := bindZenBTController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerTransactor{contract: contract}, nil
}

// NewZenBTControllerFilterer creates a new log filterer instance of ZenBTController, bound to a specific deployed contract.
func NewZenBTControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ZenBTControllerFilterer, error) {
	contract, err := bindZenBTController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerFilterer{contract: contract}, nil
}

// bindZenBTController binds a generic wrapper to an already deployed contract.
func bindZenBTController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZenBTControllerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZenBTController *ZenBTControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZenBTController.Contract.ZenBTControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZenBTController *ZenBTControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZenBTController.Contract.ZenBTControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZenBTController *ZenBTControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZenBTController.Contract.ZenBTControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZenBTController *ZenBTControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZenBTController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZenBTController *ZenBTControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZenBTController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZenBTController *ZenBTControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZenBTController.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ZenBTController *ZenBTControllerCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ZenBTController *ZenBTControllerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ZenBTController.Contract.DEFAULTADMINROLE(&_ZenBTController.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ZenBTController *ZenBTControllerCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ZenBTController.Contract.DEFAULTADMINROLE(&_ZenBTController.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ZenBTController *ZenBTControllerCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ZenBTController *ZenBTControllerSession) MINTERROLE() ([32]byte, error) {
	return _ZenBTController.Contract.MINTERROLE(&_ZenBTController.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_ZenBTController *ZenBTControllerCallerSession) MINTERROLE() ([32]byte, error) {
	return _ZenBTController.Contract.MINTERROLE(&_ZenBTController.CallOpts)
}

// GetEGLDelegationManager is a free data retrieval call binding the contract method 0x3725d2fc.
//
// Solidity: function getEGLDelegationManager() view returns(address)
func (_ZenBTController *ZenBTControllerCaller) GetEGLDelegationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getEGLDelegationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetEGLDelegationManager is a free data retrieval call binding the contract method 0x3725d2fc.
//
// Solidity: function getEGLDelegationManager() view returns(address)
func (_ZenBTController *ZenBTControllerSession) GetEGLDelegationManager() (common.Address, error) {
	return _ZenBTController.Contract.GetEGLDelegationManager(&_ZenBTController.CallOpts)
}

// GetEGLDelegationManager is a free data retrieval call binding the contract method 0x3725d2fc.
//
// Solidity: function getEGLDelegationManager() view returns(address)
func (_ZenBTController *ZenBTControllerCallerSession) GetEGLDelegationManager() (common.Address, error) {
	return _ZenBTController.Contract.GetEGLDelegationManager(&_ZenBTController.CallOpts)
}

// GetEGLStrategyManager is a free data retrieval call binding the contract method 0x1f05b551.
//
// Solidity: function getEGLStrategyManager() view returns(address)
func (_ZenBTController *ZenBTControllerCaller) GetEGLStrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getEGLStrategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetEGLStrategyManager is a free data retrieval call binding the contract method 0x1f05b551.
//
// Solidity: function getEGLStrategyManager() view returns(address)
func (_ZenBTController *ZenBTControllerSession) GetEGLStrategyManager() (common.Address, error) {
	return _ZenBTController.Contract.GetEGLStrategyManager(&_ZenBTController.CallOpts)
}

// GetEGLStrategyManager is a free data retrieval call binding the contract method 0x1f05b551.
//
// Solidity: function getEGLStrategyManager() view returns(address)
func (_ZenBTController *ZenBTControllerCallerSession) GetEGLStrategyManager() (common.Address, error) {
	return _ZenBTController.Contract.GetEGLStrategyManager(&_ZenBTController.CallOpts)
}

// GetLastCompleatedNonce is a free data retrieval call binding the contract method 0x91b50c09.
//
// Solidity: function getLastCompleatedNonce() view returns(uint256)
func (_ZenBTController *ZenBTControllerCaller) GetLastCompleatedNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getLastCompleatedNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastCompleatedNonce is a free data retrieval call binding the contract method 0x91b50c09.
//
// Solidity: function getLastCompleatedNonce() view returns(uint256)
func (_ZenBTController *ZenBTControllerSession) GetLastCompleatedNonce() (*big.Int, error) {
	return _ZenBTController.Contract.GetLastCompleatedNonce(&_ZenBTController.CallOpts)
}

// GetLastCompleatedNonce is a free data retrieval call binding the contract method 0x91b50c09.
//
// Solidity: function getLastCompleatedNonce() view returns(uint256)
func (_ZenBTController *ZenBTControllerCallerSession) GetLastCompleatedNonce() (*big.Int, error) {
	return _ZenBTController.Contract.GetLastCompleatedNonce(&_ZenBTController.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ZenBTController *ZenBTControllerCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ZenBTController *ZenBTControllerSession) GetNonce() (*big.Int, error) {
	return _ZenBTController.Contract.GetNonce(&_ZenBTController.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ZenBTController *ZenBTControllerCallerSession) GetNonce() (*big.Int, error) {
	return _ZenBTController.Contract.GetNonce(&_ZenBTController.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_ZenBTController *ZenBTControllerCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_ZenBTController *ZenBTControllerSession) GetOperator() (common.Address, error) {
	return _ZenBTController.Contract.GetOperator(&_ZenBTController.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_ZenBTController *ZenBTControllerCallerSession) GetOperator() (common.Address, error) {
	return _ZenBTController.Contract.GetOperator(&_ZenBTController.CallOpts)
}

// GetQueuedWithdrawals is a free data retrieval call binding the contract method 0x24dcd7ac.
//
// Solidity: function getQueuedWithdrawals() view returns((address,address,address,uint256,uint32,address[],uint256[])[] withdrawals, uint256[][] shares)
func (_ZenBTController *ZenBTControllerCaller) GetQueuedWithdrawals(opts *bind.CallOpts) (struct {
	Withdrawals []IDelegationManagerWithdrawal
	Shares      [][]*big.Int
}, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getQueuedWithdrawals")

	outstruct := new(struct {
		Withdrawals []IDelegationManagerWithdrawal
		Shares      [][]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Withdrawals = *abi.ConvertType(out[0], new([]IDelegationManagerWithdrawal)).(*[]IDelegationManagerWithdrawal)
	outstruct.Shares = *abi.ConvertType(out[1], new([][]*big.Int)).(*[][]*big.Int)

	return *outstruct, err

}

// GetQueuedWithdrawals is a free data retrieval call binding the contract method 0x24dcd7ac.
//
// Solidity: function getQueuedWithdrawals() view returns((address,address,address,uint256,uint32,address[],uint256[])[] withdrawals, uint256[][] shares)
func (_ZenBTController *ZenBTControllerSession) GetQueuedWithdrawals() (struct {
	Withdrawals []IDelegationManagerWithdrawal
	Shares      [][]*big.Int
}, error) {
	return _ZenBTController.Contract.GetQueuedWithdrawals(&_ZenBTController.CallOpts)
}

// GetQueuedWithdrawals is a free data retrieval call binding the contract method 0x24dcd7ac.
//
// Solidity: function getQueuedWithdrawals() view returns((address,address,address,uint256,uint32,address[],uint256[])[] withdrawals, uint256[][] shares)
func (_ZenBTController *ZenBTControllerCallerSession) GetQueuedWithdrawals() (struct {
	Withdrawals []IDelegationManagerWithdrawal
	Shares      [][]*big.Int
}, error) {
	return _ZenBTController.Contract.GetQueuedWithdrawals(&_ZenBTController.CallOpts)
}

// GetReadyForComplete is a free data retrieval call binding the contract method 0x3114aa6b.
//
// Solidity: function getReadyForComplete() view returns((bytes,uint256,uint256,uint32,uint256,bool)[])
func (_ZenBTController *ZenBTControllerCaller) GetReadyForComplete(opts *bind.CallOpts) ([]IZenBTControllerUnstakeInfo, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getReadyForComplete")

	if err != nil {
		return *new([]IZenBTControllerUnstakeInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IZenBTControllerUnstakeInfo)).(*[]IZenBTControllerUnstakeInfo)

	return out0, err

}

// GetReadyForComplete is a free data retrieval call binding the contract method 0x3114aa6b.
//
// Solidity: function getReadyForComplete() view returns((bytes,uint256,uint256,uint32,uint256,bool)[])
func (_ZenBTController *ZenBTControllerSession) GetReadyForComplete() ([]IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetReadyForComplete(&_ZenBTController.CallOpts)
}

// GetReadyForComplete is a free data retrieval call binding the contract method 0x3114aa6b.
//
// Solidity: function getReadyForComplete() view returns((bytes,uint256,uint256,uint32,uint256,bool)[])
func (_ZenBTController *ZenBTControllerCallerSession) GetReadyForComplete() ([]IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetReadyForComplete(&_ZenBTController.CallOpts)
}

// GetReadyForCompleteFromTo is a free data retrieval call binding the contract method 0x905c2de3.
//
// Solidity: function getReadyForCompleteFromTo(uint256 start, uint256 end) view returns((bytes,uint256,uint256,uint32,uint256,bool)[])
func (_ZenBTController *ZenBTControllerCaller) GetReadyForCompleteFromTo(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IZenBTControllerUnstakeInfo, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getReadyForCompleteFromTo", start, end)

	if err != nil {
		return *new([]IZenBTControllerUnstakeInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IZenBTControllerUnstakeInfo)).(*[]IZenBTControllerUnstakeInfo)

	return out0, err

}

// GetReadyForCompleteFromTo is a free data retrieval call binding the contract method 0x905c2de3.
//
// Solidity: function getReadyForCompleteFromTo(uint256 start, uint256 end) view returns((bytes,uint256,uint256,uint32,uint256,bool)[])
func (_ZenBTController *ZenBTControllerSession) GetReadyForCompleteFromTo(start *big.Int, end *big.Int) ([]IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetReadyForCompleteFromTo(&_ZenBTController.CallOpts, start, end)
}

// GetReadyForCompleteFromTo is a free data retrieval call binding the contract method 0x905c2de3.
//
// Solidity: function getReadyForCompleteFromTo(uint256 start, uint256 end) view returns((bytes,uint256,uint256,uint32,uint256,bool)[])
func (_ZenBTController *ZenBTControllerCallerSession) GetReadyForCompleteFromTo(start *big.Int, end *big.Int) ([]IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetReadyForCompleteFromTo(&_ZenBTController.CallOpts, start, end)
}

// GetRockBTC is a free data retrieval call binding the contract method 0x04611b06.
//
// Solidity: function getRockBTC() view returns(address)
func (_ZenBTController *ZenBTControllerCaller) GetRockBTC(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getRockBTC")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRockBTC is a free data retrieval call binding the contract method 0x04611b06.
//
// Solidity: function getRockBTC() view returns(address)
func (_ZenBTController *ZenBTControllerSession) GetRockBTC() (common.Address, error) {
	return _ZenBTController.Contract.GetRockBTC(&_ZenBTController.CallOpts)
}

// GetRockBTC is a free data retrieval call binding the contract method 0x04611b06.
//
// Solidity: function getRockBTC() view returns(address)
func (_ZenBTController *ZenBTControllerCallerSession) GetRockBTC() (common.Address, error) {
	return _ZenBTController.Contract.GetRockBTC(&_ZenBTController.CallOpts)
}

// GetRockBTCStrategy is a free data retrieval call binding the contract method 0x931432ab.
//
// Solidity: function getRockBTCStrategy() view returns(address)
func (_ZenBTController *ZenBTControllerCaller) GetRockBTCStrategy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getRockBTCStrategy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRockBTCStrategy is a free data retrieval call binding the contract method 0x931432ab.
//
// Solidity: function getRockBTCStrategy() view returns(address)
func (_ZenBTController *ZenBTControllerSession) GetRockBTCStrategy() (common.Address, error) {
	return _ZenBTController.Contract.GetRockBTCStrategy(&_ZenBTController.CallOpts)
}

// GetRockBTCStrategy is a free data retrieval call binding the contract method 0x931432ab.
//
// Solidity: function getRockBTCStrategy() view returns(address)
func (_ZenBTController *ZenBTControllerCallerSession) GetRockBTCStrategy() (common.Address, error) {
	return _ZenBTController.Contract.GetRockBTCStrategy(&_ZenBTController.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ZenBTController *ZenBTControllerCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ZenBTController *ZenBTControllerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ZenBTController.Contract.GetRoleAdmin(&_ZenBTController.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ZenBTController *ZenBTControllerCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ZenBTController.Contract.GetRoleAdmin(&_ZenBTController.CallOpts, role)
}

// GetUnstakeAtIndex is a free data retrieval call binding the contract method 0xa7cafd45.
//
// Solidity: function getUnstakeAtIndex(uint256 index) view returns((bytes,uint256,uint256,uint32,uint256,bool))
func (_ZenBTController *ZenBTControllerCaller) GetUnstakeAtIndex(opts *bind.CallOpts, index *big.Int) (IZenBTControllerUnstakeInfo, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getUnstakeAtIndex", index)

	if err != nil {
		return *new(IZenBTControllerUnstakeInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IZenBTControllerUnstakeInfo)).(*IZenBTControllerUnstakeInfo)

	return out0, err

}

// GetUnstakeAtIndex is a free data retrieval call binding the contract method 0xa7cafd45.
//
// Solidity: function getUnstakeAtIndex(uint256 index) view returns((bytes,uint256,uint256,uint32,uint256,bool))
func (_ZenBTController *ZenBTControllerSession) GetUnstakeAtIndex(index *big.Int) (IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetUnstakeAtIndex(&_ZenBTController.CallOpts, index)
}

// GetUnstakeAtIndex is a free data retrieval call binding the contract method 0xa7cafd45.
//
// Solidity: function getUnstakeAtIndex(uint256 index) view returns((bytes,uint256,uint256,uint32,uint256,bool))
func (_ZenBTController *ZenBTControllerCallerSession) GetUnstakeAtIndex(index *big.Int) (IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetUnstakeAtIndex(&_ZenBTController.CallOpts, index)
}

// GetUnstakeInfo is a free data retrieval call binding the contract method 0xe6f8c191.
//
// Solidity: function getUnstakeInfo(uint256 nonce) view returns((bytes,uint256,uint256,uint32,uint256,bool))
func (_ZenBTController *ZenBTControllerCaller) GetUnstakeInfo(opts *bind.CallOpts, nonce *big.Int) (IZenBTControllerUnstakeInfo, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "getUnstakeInfo", nonce)

	if err != nil {
		return *new(IZenBTControllerUnstakeInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IZenBTControllerUnstakeInfo)).(*IZenBTControllerUnstakeInfo)

	return out0, err

}

// GetUnstakeInfo is a free data retrieval call binding the contract method 0xe6f8c191.
//
// Solidity: function getUnstakeInfo(uint256 nonce) view returns((bytes,uint256,uint256,uint32,uint256,bool))
func (_ZenBTController *ZenBTControllerSession) GetUnstakeInfo(nonce *big.Int) (IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetUnstakeInfo(&_ZenBTController.CallOpts, nonce)
}

// GetUnstakeInfo is a free data retrieval call binding the contract method 0xe6f8c191.
//
// Solidity: function getUnstakeInfo(uint256 nonce) view returns((bytes,uint256,uint256,uint32,uint256,bool))
func (_ZenBTController *ZenBTControllerCallerSession) GetUnstakeInfo(nonce *big.Int) (IZenBTControllerUnstakeInfo, error) {
	return _ZenBTController.Contract.GetUnstakeInfo(&_ZenBTController.CallOpts, nonce)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ZenBTController *ZenBTControllerCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ZenBTController *ZenBTControllerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ZenBTController.Contract.HasRole(&_ZenBTController.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ZenBTController *ZenBTControllerCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ZenBTController.Contract.HasRole(&_ZenBTController.CallOpts, role, account)
}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 _hash, bytes _signature) view returns(bytes4 magicValue)
func (_ZenBTController *ZenBTControllerCaller) IsValidSignature(opts *bind.CallOpts, _hash [32]byte, _signature []byte) ([4]byte, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "isValidSignature", _hash, _signature)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 _hash, bytes _signature) view returns(bytes4 magicValue)
func (_ZenBTController *ZenBTControllerSession) IsValidSignature(_hash [32]byte, _signature []byte) ([4]byte, error) {
	return _ZenBTController.Contract.IsValidSignature(&_ZenBTController.CallOpts, _hash, _signature)
}

// IsValidSignature is a free data retrieval call binding the contract method 0x1626ba7e.
//
// Solidity: function isValidSignature(bytes32 _hash, bytes _signature) view returns(bytes4 magicValue)
func (_ZenBTController *ZenBTControllerCallerSession) IsValidSignature(_hash [32]byte, _signature []byte) ([4]byte, error) {
	return _ZenBTController.Contract.IsValidSignature(&_ZenBTController.CallOpts, _hash, _signature)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ZenBTController *ZenBTControllerCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ZenBTController.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ZenBTController *ZenBTControllerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ZenBTController.Contract.SupportsInterface(&_ZenBTController.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ZenBTController *ZenBTControllerCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ZenBTController.Contract.SupportsInterface(&_ZenBTController.CallOpts, interfaceId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ZenBTController *ZenBTControllerTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ZenBTController *ZenBTControllerSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.GrantRole(&_ZenBTController.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ZenBTController *ZenBTControllerTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.GrantRole(&_ZenBTController.TransactOpts, role, account)
}

// InitializeV1 is a paid mutator transaction binding the contract method 0xcbff33e6.
//
// Solidity: function initializeV1(address _rockBTC, address _eglStrategyManager, address _eglDelegationManager, address _rockBTCStrategy, address _operator) returns()
func (_ZenBTController *ZenBTControllerTransactor) InitializeV1(opts *bind.TransactOpts, _rockBTC common.Address, _eglStrategyManager common.Address, _eglDelegationManager common.Address, _rockBTCStrategy common.Address, _operator common.Address) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "initializeV1", _rockBTC, _eglStrategyManager, _eglDelegationManager, _rockBTCStrategy, _operator)
}

// InitializeV1 is a paid mutator transaction binding the contract method 0xcbff33e6.
//
// Solidity: function initializeV1(address _rockBTC, address _eglStrategyManager, address _eglDelegationManager, address _rockBTCStrategy, address _operator) returns()
func (_ZenBTController *ZenBTControllerSession) InitializeV1(_rockBTC common.Address, _eglStrategyManager common.Address, _eglDelegationManager common.Address, _rockBTCStrategy common.Address, _operator common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.InitializeV1(&_ZenBTController.TransactOpts, _rockBTC, _eglStrategyManager, _eglDelegationManager, _rockBTCStrategy, _operator)
}

// InitializeV1 is a paid mutator transaction binding the contract method 0xcbff33e6.
//
// Solidity: function initializeV1(address _rockBTC, address _eglStrategyManager, address _eglDelegationManager, address _rockBTCStrategy, address _operator) returns()
func (_ZenBTController *ZenBTControllerTransactorSession) InitializeV1(_rockBTC common.Address, _eglStrategyManager common.Address, _eglDelegationManager common.Address, _rockBTCStrategy common.Address, _operator common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.InitializeV1(&_ZenBTController.TransactOpts, _rockBTC, _eglStrategyManager, _eglDelegationManager, _rockBTCStrategy, _operator)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_ZenBTController *ZenBTControllerTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_ZenBTController *ZenBTControllerSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.RenounceRole(&_ZenBTController.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_ZenBTController *ZenBTControllerTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.RenounceRole(&_ZenBTController.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ZenBTController *ZenBTControllerTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ZenBTController *ZenBTControllerSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.RevokeRole(&_ZenBTController.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ZenBTController *ZenBTControllerTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ZenBTController.Contract.RevokeRole(&_ZenBTController.TransactOpts, role, account)
}

// StakeRockBTC is a paid mutator transaction binding the contract method 0x6296ae27.
//
// Solidity: function stakeRockBTC(uint64 value, (bytes,uint256) approverSignatureAndExpiry, bytes32 approverSalt) returns()
func (_ZenBTController *ZenBTControllerTransactor) StakeRockBTC(opts *bind.TransactOpts, value uint64, approverSignatureAndExpiry ISignatureUtilsSignatureWithExpiry, approverSalt [32]byte) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "stakeRockBTC", value, approverSignatureAndExpiry, approverSalt)
}

// StakeRockBTC is a paid mutator transaction binding the contract method 0x6296ae27.
//
// Solidity: function stakeRockBTC(uint64 value, (bytes,uint256) approverSignatureAndExpiry, bytes32 approverSalt) returns()
func (_ZenBTController *ZenBTControllerSession) StakeRockBTC(value uint64, approverSignatureAndExpiry ISignatureUtilsSignatureWithExpiry, approverSalt [32]byte) (*types.Transaction, error) {
	return _ZenBTController.Contract.StakeRockBTC(&_ZenBTController.TransactOpts, value, approverSignatureAndExpiry, approverSalt)
}

// StakeRockBTC is a paid mutator transaction binding the contract method 0x6296ae27.
//
// Solidity: function stakeRockBTC(uint64 value, (bytes,uint256) approverSignatureAndExpiry, bytes32 approverSalt) returns()
func (_ZenBTController *ZenBTControllerTransactorSession) StakeRockBTC(value uint64, approverSignatureAndExpiry ISignatureUtilsSignatureWithExpiry, approverSalt [32]byte) (*types.Transaction, error) {
	return _ZenBTController.Contract.StakeRockBTC(&_ZenBTController.TransactOpts, value, approverSignatureAndExpiry, approverSalt)
}

// UnstakeRockBTCInit is a paid mutator transaction binding the contract method 0x5bed39c8.
//
// Solidity: function unstakeRockBTCInit(uint256 value, bytes destAddr) returns(bytes32[] withdrawalIds)
func (_ZenBTController *ZenBTControllerTransactor) UnstakeRockBTCInit(opts *bind.TransactOpts, value *big.Int, destAddr []byte) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "unstakeRockBTCInit", value, destAddr)
}

// UnstakeRockBTCInit is a paid mutator transaction binding the contract method 0x5bed39c8.
//
// Solidity: function unstakeRockBTCInit(uint256 value, bytes destAddr) returns(bytes32[] withdrawalIds)
func (_ZenBTController *ZenBTControllerSession) UnstakeRockBTCInit(value *big.Int, destAddr []byte) (*types.Transaction, error) {
	return _ZenBTController.Contract.UnstakeRockBTCInit(&_ZenBTController.TransactOpts, value, destAddr)
}

// UnstakeRockBTCInit is a paid mutator transaction binding the contract method 0x5bed39c8.
//
// Solidity: function unstakeRockBTCInit(uint256 value, bytes destAddr) returns(bytes32[] withdrawalIds)
func (_ZenBTController *ZenBTControllerTransactorSession) UnstakeRockBTCInit(value *big.Int, destAddr []byte) (*types.Transaction, error) {
	return _ZenBTController.Contract.UnstakeRockBTCInit(&_ZenBTController.TransactOpts, value, destAddr)
}

// UnstakeRockBTComplete is a paid mutator transaction binding the contract method 0x7cb5eae4.
//
// Solidity: function unstakeRockBTComplete(uint256 nonce) returns()
func (_ZenBTController *ZenBTControllerTransactor) UnstakeRockBTComplete(opts *bind.TransactOpts, nonce *big.Int) (*types.Transaction, error) {
	return _ZenBTController.contract.Transact(opts, "unstakeRockBTComplete", nonce)
}

// UnstakeRockBTComplete is a paid mutator transaction binding the contract method 0x7cb5eae4.
//
// Solidity: function unstakeRockBTComplete(uint256 nonce) returns()
func (_ZenBTController *ZenBTControllerSession) UnstakeRockBTComplete(nonce *big.Int) (*types.Transaction, error) {
	return _ZenBTController.Contract.UnstakeRockBTComplete(&_ZenBTController.TransactOpts, nonce)
}

// UnstakeRockBTComplete is a paid mutator transaction binding the contract method 0x7cb5eae4.
//
// Solidity: function unstakeRockBTComplete(uint256 nonce) returns()
func (_ZenBTController *ZenBTControllerTransactorSession) UnstakeRockBTComplete(nonce *big.Int) (*types.Transaction, error) {
	return _ZenBTController.Contract.UnstakeRockBTComplete(&_ZenBTController.TransactOpts, nonce)
}

// ZenBTControllerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ZenBTController contract.
type ZenBTControllerInitializedIterator struct {
	Event *ZenBTControllerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerInitialized represents a Initialized event raised by the ZenBTController contract.
type ZenBTControllerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ZenBTController *ZenBTControllerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ZenBTControllerInitializedIterator, error) {

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerInitializedIterator{contract: _ZenBTController.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ZenBTController *ZenBTControllerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ZenBTControllerInitialized) (event.Subscription, error) {

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerInitialized)
				if err := _ZenBTController.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ZenBTController *ZenBTControllerFilterer) ParseInitialized(log types.Log) (*ZenBTControllerInitialized, error) {
	event := new(ZenBTControllerInitialized)
	if err := _ZenBTController.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerRockBTCStakedIterator is returned from FilterRockBTCStaked and is used to iterate over the raw logs and unpacked data for RockBTCStaked events raised by the ZenBTController contract.
type ZenBTControllerRockBTCStakedIterator struct {
	Event *ZenBTControllerRockBTCStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerRockBTCStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerRockBTCStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerRockBTCStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerRockBTCStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerRockBTCStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerRockBTCStaked represents a RockBTCStaked event raised by the ZenBTController contract.
type ZenBTControllerRockBTCStaked struct {
	Operator common.Address
	Value    uint64
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRockBTCStaked is a free log retrieval operation binding the contract event 0x79c412fdc602b15f36aa9b42405335e8dac8e322a516e71a0a3881d5ed41e3bc.
//
// Solidity: event RockBTCStaked(address indexed operator, uint64 value)
func (_ZenBTController *ZenBTControllerFilterer) FilterRockBTCStaked(opts *bind.FilterOpts, operator []common.Address) (*ZenBTControllerRockBTCStakedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "RockBTCStaked", operatorRule)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerRockBTCStakedIterator{contract: _ZenBTController.contract, event: "RockBTCStaked", logs: logs, sub: sub}, nil
}

// WatchRockBTCStaked is a free log subscription operation binding the contract event 0x79c412fdc602b15f36aa9b42405335e8dac8e322a516e71a0a3881d5ed41e3bc.
//
// Solidity: event RockBTCStaked(address indexed operator, uint64 value)
func (_ZenBTController *ZenBTControllerFilterer) WatchRockBTCStaked(opts *bind.WatchOpts, sink chan<- *ZenBTControllerRockBTCStaked, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "RockBTCStaked", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerRockBTCStaked)
				if err := _ZenBTController.contract.UnpackLog(event, "RockBTCStaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRockBTCStaked is a log parse operation binding the contract event 0x79c412fdc602b15f36aa9b42405335e8dac8e322a516e71a0a3881d5ed41e3bc.
//
// Solidity: event RockBTCStaked(address indexed operator, uint64 value)
func (_ZenBTController *ZenBTControllerFilterer) ParseRockBTCStaked(log types.Log) (*ZenBTControllerRockBTCStaked, error) {
	event := new(ZenBTControllerRockBTCStaked)
	if err := _ZenBTController.contract.UnpackLog(event, "RockBTCStaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ZenBTController contract.
type ZenBTControllerRoleAdminChangedIterator struct {
	Event *ZenBTControllerRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerRoleAdminChanged represents a RoleAdminChanged event raised by the ZenBTController contract.
type ZenBTControllerRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ZenBTController *ZenBTControllerFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ZenBTControllerRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerRoleAdminChangedIterator{contract: _ZenBTController.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ZenBTController *ZenBTControllerFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ZenBTControllerRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerRoleAdminChanged)
				if err := _ZenBTController.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ZenBTController *ZenBTControllerFilterer) ParseRoleAdminChanged(log types.Log) (*ZenBTControllerRoleAdminChanged, error) {
	event := new(ZenBTControllerRoleAdminChanged)
	if err := _ZenBTController.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ZenBTController contract.
type ZenBTControllerRoleGrantedIterator struct {
	Event *ZenBTControllerRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerRoleGranted represents a RoleGranted event raised by the ZenBTController contract.
type ZenBTControllerRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ZenBTController *ZenBTControllerFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ZenBTControllerRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerRoleGrantedIterator{contract: _ZenBTController.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ZenBTController *ZenBTControllerFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ZenBTControllerRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerRoleGranted)
				if err := _ZenBTController.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ZenBTController *ZenBTControllerFilterer) ParseRoleGranted(log types.Log) (*ZenBTControllerRoleGranted, error) {
	event := new(ZenBTControllerRoleGranted)
	if err := _ZenBTController.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ZenBTController contract.
type ZenBTControllerRoleRevokedIterator struct {
	Event *ZenBTControllerRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerRoleRevoked represents a RoleRevoked event raised by the ZenBTController contract.
type ZenBTControllerRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ZenBTController *ZenBTControllerFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ZenBTControllerRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerRoleRevokedIterator{contract: _ZenBTController.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ZenBTController *ZenBTControllerFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ZenBTControllerRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerRoleRevoked)
				if err := _ZenBTController.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ZenBTController *ZenBTControllerFilterer) ParseRoleRevoked(log types.Log) (*ZenBTControllerRoleRevoked, error) {
	event := new(ZenBTControllerRoleRevoked)
	if err := _ZenBTController.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerWithdrawalCompletedIterator is returned from FilterWithdrawalCompleted and is used to iterate over the raw logs and unpacked data for WithdrawalCompleted events raised by the ZenBTController contract.
type ZenBTControllerWithdrawalCompletedIterator struct {
	Event *ZenBTControllerWithdrawalCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerWithdrawalCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerWithdrawalCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerWithdrawalCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerWithdrawalCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerWithdrawalCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerWithdrawalCompleted represents a WithdrawalCompleted event raised by the ZenBTController contract.
type ZenBTControllerWithdrawalCompleted struct {
	Arg0            IDelegationManagerWithdrawal
	Tokens          []common.Address
	ReceiveAsTokens bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalCompleted is a free log retrieval operation binding the contract event 0xadd5e0a5a1ec72776e3a7800fa2aec5ca0f7865cf68592ff037e468cb272a0a2.
//
// Solidity: event WithdrawalCompleted((address,address,address,uint256,uint32,address[],uint256[]) arg0, address[] tokens, bool receiveAsTokens)
func (_ZenBTController *ZenBTControllerFilterer) FilterWithdrawalCompleted(opts *bind.FilterOpts) (*ZenBTControllerWithdrawalCompletedIterator, error) {

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "WithdrawalCompleted")
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerWithdrawalCompletedIterator{contract: _ZenBTController.contract, event: "WithdrawalCompleted", logs: logs, sub: sub}, nil
}

// WatchWithdrawalCompleted is a free log subscription operation binding the contract event 0xadd5e0a5a1ec72776e3a7800fa2aec5ca0f7865cf68592ff037e468cb272a0a2.
//
// Solidity: event WithdrawalCompleted((address,address,address,uint256,uint32,address[],uint256[]) arg0, address[] tokens, bool receiveAsTokens)
func (_ZenBTController *ZenBTControllerFilterer) WatchWithdrawalCompleted(opts *bind.WatchOpts, sink chan<- *ZenBTControllerWithdrawalCompleted) (event.Subscription, error) {

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "WithdrawalCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerWithdrawalCompleted)
				if err := _ZenBTController.contract.UnpackLog(event, "WithdrawalCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalCompleted is a log parse operation binding the contract event 0xadd5e0a5a1ec72776e3a7800fa2aec5ca0f7865cf68592ff037e468cb272a0a2.
//
// Solidity: event WithdrawalCompleted((address,address,address,uint256,uint32,address[],uint256[]) arg0, address[] tokens, bool receiveAsTokens)
func (_ZenBTController *ZenBTControllerFilterer) ParseWithdrawalCompleted(log types.Log) (*ZenBTControllerWithdrawalCompleted, error) {
	event := new(ZenBTControllerWithdrawalCompleted)
	if err := _ZenBTController.contract.UnpackLog(event, "WithdrawalCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerWithdrawalInitiatedIterator is returned from FilterWithdrawalInitiated and is used to iterate over the raw logs and unpacked data for WithdrawalInitiated events raised by the ZenBTController contract.
type ZenBTControllerWithdrawalInitiatedIterator struct {
	Event *ZenBTControllerWithdrawalInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerWithdrawalInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerWithdrawalInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerWithdrawalInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerWithdrawalInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerWithdrawalInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerWithdrawalInitiated represents a WithdrawalInitiated event raised by the ZenBTController contract.
type ZenBTControllerWithdrawalInitiated struct {
	WithdrawalIds [][32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalInitiated is a free log retrieval operation binding the contract event 0x3ca8ee7ddc9cba27865c2837ec26df7a102ce7b8f538096db5b5d42e863502af.
//
// Solidity: event WithdrawalInitiated(bytes32[] withdrawalIds)
func (_ZenBTController *ZenBTControllerFilterer) FilterWithdrawalInitiated(opts *bind.FilterOpts) (*ZenBTControllerWithdrawalInitiatedIterator, error) {

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "WithdrawalInitiated")
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerWithdrawalInitiatedIterator{contract: _ZenBTController.contract, event: "WithdrawalInitiated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalInitiated is a free log subscription operation binding the contract event 0x3ca8ee7ddc9cba27865c2837ec26df7a102ce7b8f538096db5b5d42e863502af.
//
// Solidity: event WithdrawalInitiated(bytes32[] withdrawalIds)
func (_ZenBTController *ZenBTControllerFilterer) WatchWithdrawalInitiated(opts *bind.WatchOpts, sink chan<- *ZenBTControllerWithdrawalInitiated) (event.Subscription, error) {

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "WithdrawalInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerWithdrawalInitiated)
				if err := _ZenBTController.contract.UnpackLog(event, "WithdrawalInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalInitiated is a log parse operation binding the contract event 0x3ca8ee7ddc9cba27865c2837ec26df7a102ce7b8f538096db5b5d42e863502af.
//
// Solidity: event WithdrawalInitiated(bytes32[] withdrawalIds)
func (_ZenBTController *ZenBTControllerFilterer) ParseWithdrawalInitiated(log types.Log) (*ZenBTControllerWithdrawalInitiated, error) {
	event := new(ZenBTControllerWithdrawalInitiated)
	if err := _ZenBTController.contract.UnpackLog(event, "WithdrawalInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerWithdrawalZenBTCInitiatedIterator is returned from FilterWithdrawalZenBTCInitiated and is used to iterate over the raw logs and unpacked data for WithdrawalZenBTCInitiated events raised by the ZenBTController contract.
type ZenBTControllerWithdrawalZenBTCInitiatedIterator struct {
	Event *ZenBTControllerWithdrawalZenBTCInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerWithdrawalZenBTCInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerWithdrawalZenBTCInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerWithdrawalZenBTCInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerWithdrawalZenBTCInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerWithdrawalZenBTCInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerWithdrawalZenBTCInitiated represents a WithdrawalZenBTCInitiated event raised by the ZenBTController contract.
type ZenBTControllerWithdrawalZenBTCInitiated struct {
	Nonce       *big.Int
	UnstakeInfo IZenBTControllerUnstakeInfo
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalZenBTCInitiated is a free log retrieval operation binding the contract event 0x5f570bbeec9eb963bbd753fd720fef7235055723fb1863850ce074fcb5184a0f.
//
// Solidity: event WithdrawalZenBTCInitiated(uint256 indexed nonce, (bytes,uint256,uint256,uint32,uint256,bool) unstakeInfo)
func (_ZenBTController *ZenBTControllerFilterer) FilterWithdrawalZenBTCInitiated(opts *bind.FilterOpts, nonce []*big.Int) (*ZenBTControllerWithdrawalZenBTCInitiatedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "WithdrawalZenBTCInitiated", nonceRule)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerWithdrawalZenBTCInitiatedIterator{contract: _ZenBTController.contract, event: "WithdrawalZenBTCInitiated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalZenBTCInitiated is a free log subscription operation binding the contract event 0x5f570bbeec9eb963bbd753fd720fef7235055723fb1863850ce074fcb5184a0f.
//
// Solidity: event WithdrawalZenBTCInitiated(uint256 indexed nonce, (bytes,uint256,uint256,uint32,uint256,bool) unstakeInfo)
func (_ZenBTController *ZenBTControllerFilterer) WatchWithdrawalZenBTCInitiated(opts *bind.WatchOpts, sink chan<- *ZenBTControllerWithdrawalZenBTCInitiated, nonce []*big.Int) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "WithdrawalZenBTCInitiated", nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerWithdrawalZenBTCInitiated)
				if err := _ZenBTController.contract.UnpackLog(event, "WithdrawalZenBTCInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalZenBTCInitiated is a log parse operation binding the contract event 0x5f570bbeec9eb963bbd753fd720fef7235055723fb1863850ce074fcb5184a0f.
//
// Solidity: event WithdrawalZenBTCInitiated(uint256 indexed nonce, (bytes,uint256,uint256,uint32,uint256,bool) unstakeInfo)
func (_ZenBTController *ZenBTControllerFilterer) ParseWithdrawalZenBTCInitiated(log types.Log) (*ZenBTControllerWithdrawalZenBTCInitiated, error) {
	event := new(ZenBTControllerWithdrawalZenBTCInitiated)
	if err := _ZenBTController.contract.UnpackLog(event, "WithdrawalZenBTCInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZenBTControllerZenBTCWrappedIterator is returned from FilterZenBTCWrapped and is used to iterate over the raw logs and unpacked data for ZenBTCWrapped events raised by the ZenBTController contract.
type ZenBTControllerZenBTCWrappedIterator struct {
	Event *ZenBTControllerZenBTCWrapped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZenBTControllerZenBTCWrappedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZenBTControllerZenBTCWrapped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZenBTControllerZenBTCWrapped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZenBTControllerZenBTCWrappedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZenBTControllerZenBTCWrappedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZenBTControllerZenBTCWrapped represents a ZenBTCWrapped event raised by the ZenBTController contract.
type ZenBTControllerZenBTCWrapped struct {
	To       common.Address
	Value    uint64
	Fee      uint64
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterZenBTCWrapped is a free log retrieval operation binding the contract event 0xfd60f0aa3e690ac3a0ef44fb08201a6d258f27749c174539d4d1cf9c2ca0f8d7.
//
// Solidity: event ZenBTCWrapped(address indexed to, uint64 value, uint64 fee, address indexed operator)
func (_ZenBTController *ZenBTControllerFilterer) FilterZenBTCWrapped(opts *bind.FilterOpts, to []common.Address, operator []common.Address) (*ZenBTControllerZenBTCWrappedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ZenBTController.contract.FilterLogs(opts, "ZenBTCWrapped", toRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ZenBTControllerZenBTCWrappedIterator{contract: _ZenBTController.contract, event: "ZenBTCWrapped", logs: logs, sub: sub}, nil
}

// WatchZenBTCWrapped is a free log subscription operation binding the contract event 0xfd60f0aa3e690ac3a0ef44fb08201a6d258f27749c174539d4d1cf9c2ca0f8d7.
//
// Solidity: event ZenBTCWrapped(address indexed to, uint64 value, uint64 fee, address indexed operator)
func (_ZenBTController *ZenBTControllerFilterer) WatchZenBTCWrapped(opts *bind.WatchOpts, sink chan<- *ZenBTControllerZenBTCWrapped, to []common.Address, operator []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ZenBTController.contract.WatchLogs(opts, "ZenBTCWrapped", toRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZenBTControllerZenBTCWrapped)
				if err := _ZenBTController.contract.UnpackLog(event, "ZenBTCWrapped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZenBTCWrapped is a log parse operation binding the contract event 0xfd60f0aa3e690ac3a0ef44fb08201a6d258f27749c174539d4d1cf9c2ca0f8d7.
//
// Solidity: event ZenBTCWrapped(address indexed to, uint64 value, uint64 fee, address indexed operator)
func (_ZenBTController *ZenBTControllerFilterer) ParseZenBTCWrapped(log types.Log) (*ZenBTControllerZenBTCWrapped, error) {
	event := new(ZenBTControllerZenBTCWrapped)
	if err := _ZenBTController.contract.UnpackLog(event, "ZenBTCWrapped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}