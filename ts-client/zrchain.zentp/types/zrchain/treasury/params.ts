// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/treasury/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.treasury";

/** Params defines the parameters for the module. */
export interface Params {
  mpcKeyring: string;
  zrSignAddress: string;
  keyringCommission: number;
  keyringCommissionDestination: string;
  minGasFee: string;
  defaultBtl: number;
}

function createBaseParams(): Params {
  return {
    mpcKeyring: "",
    zrSignAddress: "",
    keyringCommission: 0,
    keyringCommissionDestination: "",
    minGasFee: "",
    defaultBtl: 0,
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mpcKeyring !== "") {
      writer.uint32(10).string(message.mpcKeyring);
    }
    if (message.zrSignAddress !== "") {
      writer.uint32(18).string(message.zrSignAddress);
    }
    if (message.keyringCommission !== 0) {
      writer.uint32(24).uint64(message.keyringCommission);
    }
    if (message.keyringCommissionDestination !== "") {
      writer.uint32(34).string(message.keyringCommissionDestination);
    }
    if (message.minGasFee !== "") {
      writer.uint32(42).string(message.minGasFee);
    }
    if (message.defaultBtl !== 0) {
      writer.uint32(48).uint64(message.defaultBtl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mpcKeyring = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.zrSignAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyringCommission = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyringCommissionDestination = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minGasFee = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.defaultBtl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      mpcKeyring: isSet(object.mpcKeyring) ? globalThis.String(object.mpcKeyring) : "",
      zrSignAddress: isSet(object.zrSignAddress) ? globalThis.String(object.zrSignAddress) : "",
      keyringCommission: isSet(object.keyringCommission) ? globalThis.Number(object.keyringCommission) : 0,
      keyringCommissionDestination: isSet(object.keyringCommissionDestination)
        ? globalThis.String(object.keyringCommissionDestination)
        : "",
      minGasFee: isSet(object.minGasFee) ? globalThis.String(object.minGasFee) : "",
      defaultBtl: isSet(object.defaultBtl) ? globalThis.Number(object.defaultBtl) : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.mpcKeyring !== "") {
      obj.mpcKeyring = message.mpcKeyring;
    }
    if (message.zrSignAddress !== "") {
      obj.zrSignAddress = message.zrSignAddress;
    }
    if (message.keyringCommission !== 0) {
      obj.keyringCommission = Math.round(message.keyringCommission);
    }
    if (message.keyringCommissionDestination !== "") {
      obj.keyringCommissionDestination = message.keyringCommissionDestination;
    }
    if (message.minGasFee !== "") {
      obj.minGasFee = message.minGasFee;
    }
    if (message.defaultBtl !== 0) {
      obj.defaultBtl = Math.round(message.defaultBtl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.mpcKeyring = object.mpcKeyring ?? "";
    message.zrSignAddress = object.zrSignAddress ?? "";
    message.keyringCommission = object.keyringCommission ?? 0;
    message.keyringCommissionDestination = object.keyringCommissionDestination ?? "";
    message.minGasFee = object.minGasFee ?? "";
    message.defaultBtl = object.defaultBtl ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
