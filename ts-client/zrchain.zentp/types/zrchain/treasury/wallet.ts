// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/treasury/wallet.proto

/* eslint-disable */

export const protobufPackage = "zrchain.treasury";

/**
 * WalletType specifies the Layer 1 blockchain that this wallet will be used
 * for.
 */
export enum WalletType {
  /** WALLET_TYPE_UNSPECIFIED - The wallet type is missing (all wallets will be derived) */
  WALLET_TYPE_UNSPECIFIED = 0,
  /** WALLET_TYPE_NATIVE - The wallet type for native cosmos accounts */
  WALLET_TYPE_NATIVE = 1,
  /** WALLET_TYPE_EVM - The wallet type for mainnet ETH and its ERC-20 tokens */
  WALLET_TYPE_EVM = 2,
  /** WALLET_TYPE_BTC_TESTNET - The Wallet type for Testnet BTC */
  WALLET_TYPE_BTC_TESTNET = 3,
  /** WALLET_TYPE_BTC_MAINNET - The Wallet type for Mainnet BTC */
  WALLET_TYPE_BTC_MAINNET = 4,
  /** WALLET_TYPE_BTC_REGNET - The Wallet type for RegNet - Local Test Network */
  WALLET_TYPE_BTC_REGNET = 5,
  /** WALLET_TYPE_SOLANA - Wallet type for Solana */
  WALLET_TYPE_SOLANA = 6,
  UNRECOGNIZED = -1,
}

export function walletTypeFromJSON(object: any): WalletType {
  switch (object) {
    case 0:
    case "WALLET_TYPE_UNSPECIFIED":
      return WalletType.WALLET_TYPE_UNSPECIFIED;
    case 1:
    case "WALLET_TYPE_NATIVE":
      return WalletType.WALLET_TYPE_NATIVE;
    case 2:
    case "WALLET_TYPE_EVM":
      return WalletType.WALLET_TYPE_EVM;
    case 3:
    case "WALLET_TYPE_BTC_TESTNET":
      return WalletType.WALLET_TYPE_BTC_TESTNET;
    case 4:
    case "WALLET_TYPE_BTC_MAINNET":
      return WalletType.WALLET_TYPE_BTC_MAINNET;
    case 5:
    case "WALLET_TYPE_BTC_REGNET":
      return WalletType.WALLET_TYPE_BTC_REGNET;
    case 6:
    case "WALLET_TYPE_SOLANA":
      return WalletType.WALLET_TYPE_SOLANA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WalletType.UNRECOGNIZED;
  }
}

export function walletTypeToJSON(object: WalletType): string {
  switch (object) {
    case WalletType.WALLET_TYPE_UNSPECIFIED:
      return "WALLET_TYPE_UNSPECIFIED";
    case WalletType.WALLET_TYPE_NATIVE:
      return "WALLET_TYPE_NATIVE";
    case WalletType.WALLET_TYPE_EVM:
      return "WALLET_TYPE_EVM";
    case WalletType.WALLET_TYPE_BTC_TESTNET:
      return "WALLET_TYPE_BTC_TESTNET";
    case WalletType.WALLET_TYPE_BTC_MAINNET:
      return "WALLET_TYPE_BTC_MAINNET";
    case WalletType.WALLET_TYPE_BTC_REGNET:
      return "WALLET_TYPE_BTC_REGNET";
    case WalletType.WALLET_TYPE_SOLANA:
      return "WALLET_TYPE_SOLANA";
    case WalletType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
