// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zenbtc/redemptions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.zenbtc";

export enum RedemptionStatus {
  UNSPECIFIED = 0,
  /** INITIATED - after BurnStatus.UNSTAKING phase is completed (7 days) */
  INITIATED = 1,
  /** UNSTAKED - after calling unstakeComplete */
  UNSTAKED = 2,
  /** @deprecated */
  BURNED = 3,
  COMPLETED = 4,
  AWAITING_SIGN = 5,
  UNRECOGNIZED = -1,
}

export function redemptionStatusFromJSON(object: any): RedemptionStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return RedemptionStatus.UNSPECIFIED;
    case 1:
    case "INITIATED":
      return RedemptionStatus.INITIATED;
    case 2:
    case "UNSTAKED":
      return RedemptionStatus.UNSTAKED;
    case 3:
    case "BURNED":
      return RedemptionStatus.BURNED;
    case 4:
    case "COMPLETED":
      return RedemptionStatus.COMPLETED;
    case 5:
    case "AWAITING_SIGN":
      return RedemptionStatus.AWAITING_SIGN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RedemptionStatus.UNRECOGNIZED;
  }
}

export function redemptionStatusToJSON(object: RedemptionStatus): string {
  switch (object) {
    case RedemptionStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case RedemptionStatus.INITIATED:
      return "INITIATED";
    case RedemptionStatus.UNSTAKED:
      return "UNSTAKED";
    case RedemptionStatus.BURNED:
      return "BURNED";
    case RedemptionStatus.COMPLETED:
      return "COMPLETED";
    case RedemptionStatus.AWAITING_SIGN:
      return "AWAITING_SIGN";
    case RedemptionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BurnStatus {
  BURN_STATUS_UNSPECIFIED = 0,
  BURN_STATUS_BURNED = 1,
  BURN_STATUS_UNSTAKING = 2,
  UNRECOGNIZED = -1,
}

export function burnStatusFromJSON(object: any): BurnStatus {
  switch (object) {
    case 0:
    case "BURN_STATUS_UNSPECIFIED":
      return BurnStatus.BURN_STATUS_UNSPECIFIED;
    case 1:
    case "BURN_STATUS_BURNED":
      return BurnStatus.BURN_STATUS_BURNED;
    case 2:
    case "BURN_STATUS_UNSTAKING":
      return BurnStatus.BURN_STATUS_UNSTAKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BurnStatus.UNRECOGNIZED;
  }
}

export function burnStatusToJSON(object: BurnStatus): string {
  switch (object) {
    case BurnStatus.BURN_STATUS_UNSPECIFIED:
      return "BURN_STATUS_UNSPECIFIED";
    case BurnStatus.BURN_STATUS_BURNED:
      return "BURN_STATUS_BURNED";
    case BurnStatus.BURN_STATUS_UNSTAKING:
      return "BURN_STATUS_UNSTAKING";
    case BurnStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Redemption contains the data for a redemption transaction. */
export interface Redemption {
  data: RedemptionData | undefined;
  status: RedemptionStatus;
}

export interface RedemptionData {
  id: number;
  destinationAddress: Uint8Array;
  amount: number;
  signReqId: number;
}

export interface BurnEvent {
  id: number;
  txID: string;
  logIndex: number;
  chainID: string;
  destinationAddr: Uint8Array;
  amount: number;
  status: BurnStatus;
}

function createBaseRedemption(): Redemption {
  return { data: undefined, status: 0 };
}

export const Redemption: MessageFns<Redemption> = {
  encode(message: Redemption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RedemptionData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Redemption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RedemptionData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Redemption {
    return {
      data: isSet(object.data) ? RedemptionData.fromJSON(object.data) : undefined,
      status: isSet(object.status) ? redemptionStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Redemption): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = RedemptionData.toJSON(message.data);
    }
    if (message.status !== 0) {
      obj.status = redemptionStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Redemption>, I>>(base?: I): Redemption {
    return Redemption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Redemption>, I>>(object: I): Redemption {
    const message = createBaseRedemption();
    message.data = (object.data !== undefined && object.data !== null)
      ? RedemptionData.fromPartial(object.data)
      : undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseRedemptionData(): RedemptionData {
  return { id: 0, destinationAddress: new Uint8Array(0), amount: 0, signReqId: 0 };
}

export const RedemptionData: MessageFns<RedemptionData> = {
  encode(message: RedemptionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.destinationAddress.length !== 0) {
      writer.uint32(18).bytes(message.destinationAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.signReqId !== 0) {
      writer.uint32(32).uint64(message.signReqId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedemptionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationAddress = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.signReqId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedemptionData {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      destinationAddress: isSet(object.destinationAddress)
        ? bytesFromBase64(object.destinationAddress)
        : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      signReqId: isSet(object.signReqId) ? globalThis.Number(object.signReqId) : 0,
    };
  },

  toJSON(message: RedemptionData): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.destinationAddress.length !== 0) {
      obj.destinationAddress = base64FromBytes(message.destinationAddress);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.signReqId !== 0) {
      obj.signReqId = Math.round(message.signReqId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedemptionData>, I>>(base?: I): RedemptionData {
    return RedemptionData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedemptionData>, I>>(object: I): RedemptionData {
    const message = createBaseRedemptionData();
    message.id = object.id ?? 0;
    message.destinationAddress = object.destinationAddress ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    message.signReqId = object.signReqId ?? 0;
    return message;
  },
};

function createBaseBurnEvent(): BurnEvent {
  return { id: 0, txID: "", logIndex: 0, chainID: "", destinationAddr: new Uint8Array(0), amount: 0, status: 0 };
}

export const BurnEvent: MessageFns<BurnEvent> = {
  encode(message: BurnEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.txID !== "") {
      writer.uint32(18).string(message.txID);
    }
    if (message.logIndex !== 0) {
      writer.uint32(24).uint64(message.logIndex);
    }
    if (message.chainID !== "") {
      writer.uint32(34).string(message.chainID);
    }
    if (message.destinationAddr.length !== 0) {
      writer.uint32(42).bytes(message.destinationAddr);
    }
    if (message.amount !== 0) {
      writer.uint32(48).uint64(message.amount);
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BurnEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBurnEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txID = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.logIndex = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chainID = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.destinationAddr = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BurnEvent {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      txID: isSet(object.txID) ? globalThis.String(object.txID) : "",
      logIndex: isSet(object.logIndex) ? globalThis.Number(object.logIndex) : 0,
      chainID: isSet(object.chainID) ? globalThis.String(object.chainID) : "",
      destinationAddr: isSet(object.destinationAddr) ? bytesFromBase64(object.destinationAddr) : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      status: isSet(object.status) ? burnStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: BurnEvent): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.txID !== "") {
      obj.txID = message.txID;
    }
    if (message.logIndex !== 0) {
      obj.logIndex = Math.round(message.logIndex);
    }
    if (message.chainID !== "") {
      obj.chainID = message.chainID;
    }
    if (message.destinationAddr.length !== 0) {
      obj.destinationAddr = base64FromBytes(message.destinationAddr);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.status !== 0) {
      obj.status = burnStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BurnEvent>, I>>(base?: I): BurnEvent {
    return BurnEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BurnEvent>, I>>(object: I): BurnEvent {
    const message = createBaseBurnEvent();
    message.id = object.id ?? 0;
    message.txID = object.txID ?? "";
    message.logIndex = object.logIndex ?? 0;
    message.chainID = object.chainID ?? "";
    message.destinationAddr = object.destinationAddr ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
