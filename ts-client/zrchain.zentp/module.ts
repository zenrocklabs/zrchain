// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgSetSolanaROCKSupplyResponse } from "./types/zrchain/zentp/tx";
import { Bridge } from "./types/zrchain/zentp/bridge";
import { Solana } from "./types/zrchain/zentp/params";
import { QueryMintsRequest } from "./types/zrchain/zentp/query";
import { QueryStatsResponse } from "./types/zrchain/zentp/query";
import { MsgBridgeResponse } from "./types/zrchain/zentp/tx";
import { MsgUpdateParams } from "./types/zrchain/zentp/tx";
import { Params } from "./types/zrchain/zentp/params";
import { MsgBridge } from "./types/zrchain/zentp/tx";
import { QueryParamsResponse } from "./types/zrchain/zentp/query";
import { QueryBurnsRequest } from "./types/zrchain/zentp/query";
import { MsgUpdateParamsResponse } from "./types/zrchain/zentp/tx";
import { QueryParamsRequest } from "./types/zrchain/zentp/query";
import { QueryStatsRequest } from "./types/zrchain/zentp/query";
import { QuerySolanaROCKSupplyRequest } from "./types/zrchain/zentp/query";
import { QuerySolanaROCKSupplyResponse } from "./types/zrchain/zentp/query";
import { MsgBurnResponse } from "./types/zrchain/zentp/tx";
import { MsgSetSolanaROCKSupply } from "./types/zrchain/zentp/tx";
import { GenesisState } from "./types/zrchain/zentp/genesis";
import { MsgBurn } from "./types/zrchain/zentp/tx";
import { QueryMintsResponse } from "./types/zrchain/zentp/query";
import { QueryBurnsResponse } from "./types/zrchain/zentp/query";

import { Bridge as typeBridge} from "./types"
import { Params as typeParams} from "./types"
import { Solana as typeSolana} from "./types"

export { MsgSetSolanaROCKSupplyResponse, Bridge, Solana, QueryMintsRequest, QueryStatsResponse, MsgBridgeResponse, MsgUpdateParams, Params, MsgBridge, QueryParamsResponse, QueryBurnsRequest, MsgUpdateParamsResponse, QueryParamsRequest, QueryStatsRequest, QuerySolanaROCKSupplyRequest, QuerySolanaROCKSupplyResponse, MsgBurnResponse, MsgSetSolanaROCKSupply, GenesisState, MsgBurn, QueryMintsResponse, QueryBurnsResponse };

type sendMsgSetSolanaROCKSupplyResponseParams = {
  value: MsgSetSolanaROCKSupplyResponse,
  fee?: StdFee,
  memo?: string
};

type sendBridgeParams = {
  value: Bridge,
  fee?: StdFee,
  memo?: string
};

type sendSolanaParams = {
  value: Solana,
  fee?: StdFee,
  memo?: string
};

type sendQueryMintsRequestParams = {
  value: QueryMintsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryStatsResponseParams = {
  value: QueryStatsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgBridgeResponseParams = {
  value: MsgBridgeResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgBridgeParams = {
  value: MsgBridge,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryBurnsRequestParams = {
  value: QueryBurnsRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryStatsRequestParams = {
  value: QueryStatsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQuerySolanaROCKSupplyRequestParams = {
  value: QuerySolanaROCKSupplyRequest,
  fee?: StdFee,
  memo?: string
};

type sendQuerySolanaROCKSupplyResponseParams = {
  value: QuerySolanaROCKSupplyResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgBurnResponseParams = {
  value: MsgBurnResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetSolanaROCKSupplyParams = {
  value: MsgSetSolanaROCKSupply,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgBurnParams = {
  value: MsgBurn,
  fee?: StdFee,
  memo?: string
};

type sendQueryMintsResponseParams = {
  value: QueryMintsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryBurnsResponseParams = {
  value: QueryBurnsResponse,
  fee?: StdFee,
  memo?: string
};


type msgSetSolanaRocksupplyResponseParams = {
  value: MsgSetSolanaROCKSupplyResponse,
};

type bridgeParams = {
  value: Bridge,
};

type solanaParams = {
  value: Solana,
};

type queryMintsRequestParams = {
  value: QueryMintsRequest,
};

type queryStatsResponseParams = {
  value: QueryStatsResponse,
};

type msgBridgeResponseParams = {
  value: MsgBridgeResponse,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type paramsParams = {
  value: Params,
};

type msgBridgeParams = {
  value: MsgBridge,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryBurnsRequestParams = {
  value: QueryBurnsRequest,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryStatsRequestParams = {
  value: QueryStatsRequest,
};

type querySolanaRocksupplyRequestParams = {
  value: QuerySolanaROCKSupplyRequest,
};

type querySolanaRocksupplyResponseParams = {
  value: QuerySolanaROCKSupplyResponse,
};

type msgBurnResponseParams = {
  value: MsgBurnResponse,
};

type msgSetSolanaRocksupplyParams = {
  value: MsgSetSolanaROCKSupply,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgBurnParams = {
  value: MsgBurn,
};

type queryMintsResponseParams = {
  value: QueryMintsResponse,
};

type queryBurnsResponseParams = {
  value: QueryBurnsResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgSetSolanaROCKSupplyResponse({ value, fee, memo }: sendMsgSetSolanaROCKSupplyResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetSolanaROCKSupplyResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSetSolanaRocksupplyResponse({ value: MsgSetSolanaROCKSupplyResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetSolanaROCKSupplyResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendBridge({ value, fee, memo }: sendBridgeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendBridge: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.bridge({ value: Bridge.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendBridge: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendSolana({ value, fee, memo }: sendSolanaParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendSolana: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.solana({ value: Solana.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendSolana: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryMintsRequest({ value, fee, memo }: sendQueryMintsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryMintsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryMintsRequest({ value: QueryMintsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryMintsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryStatsResponse({ value, fee, memo }: sendQueryStatsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryStatsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryStatsResponse({ value: QueryStatsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryStatsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBridgeResponse({ value, fee, memo }: sendMsgBridgeResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBridgeResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgBridgeResponse({ value: MsgBridgeResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBridgeResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBridge({ value, fee, memo }: sendMsgBridgeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBridge: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgBridge({ value: MsgBridge.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBridge: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryBurnsRequest({ value, fee, memo }: sendQueryBurnsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryBurnsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryBurnsRequest({ value: QueryBurnsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryBurnsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryStatsRequest({ value, fee, memo }: sendQueryStatsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryStatsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryStatsRequest({ value: QueryStatsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryStatsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQuerySolanaROCKSupplyRequest({ value, fee, memo }: sendQuerySolanaROCKSupplyRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQuerySolanaROCKSupplyRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.querySolanaRocksupplyRequest({ value: QuerySolanaROCKSupplyRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQuerySolanaROCKSupplyRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQuerySolanaROCKSupplyResponse({ value, fee, memo }: sendQuerySolanaROCKSupplyResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQuerySolanaROCKSupplyResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.querySolanaRocksupplyResponse({ value: QuerySolanaROCKSupplyResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQuerySolanaROCKSupplyResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBurnResponse({ value, fee, memo }: sendMsgBurnResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurnResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgBurnResponse({ value: MsgBurnResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurnResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetSolanaROCKSupply({ value, fee, memo }: sendMsgSetSolanaROCKSupplyParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetSolanaROCKSupply: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSetSolanaRocksupply({ value: MsgSetSolanaROCKSupply.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetSolanaROCKSupply: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBurn({ value, fee, memo }: sendMsgBurnParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurn: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgBurn({ value: MsgBurn.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurn: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryMintsResponse({ value, fee, memo }: sendQueryMintsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryMintsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryMintsResponse({ value: QueryMintsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryMintsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryBurnsResponse({ value, fee, memo }: sendQueryBurnsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryBurnsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryBurnsResponse({ value: QueryBurnsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryBurnsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgSetSolanaRocksupplyResponse({ value }: msgSetSolanaRocksupplyResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgSetSolanaROCKSupplyResponse", value: MsgSetSolanaROCKSupplyResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetSolanaROCKSupplyResponse: Could not create message: ' + e.message)
			}
		},
		
		bridge({ value }: bridgeParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.Bridge", value: Bridge.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Bridge: Could not create message: ' + e.message)
			}
		},
		
		solana({ value }: solanaParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.Solana", value: Solana.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Solana: Could not create message: ' + e.message)
			}
		},
		
		queryMintsRequest({ value }: queryMintsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryMintsRequest", value: QueryMintsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryMintsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryStatsResponse({ value }: queryStatsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryStatsResponse", value: QueryStatsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryStatsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgBridgeResponse({ value }: msgBridgeResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgBridgeResponse", value: MsgBridgeResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBridgeResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgBridge({ value }: msgBridgeParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgBridge", value: MsgBridge.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBridge: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryBurnsRequest({ value }: queryBurnsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryBurnsRequest", value: QueryBurnsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryBurnsRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryStatsRequest({ value }: queryStatsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryStatsRequest", value: QueryStatsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryStatsRequest: Could not create message: ' + e.message)
			}
		},
		
		querySolanaRocksupplyRequest({ value }: querySolanaRocksupplyRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QuerySolanaROCKSupplyRequest", value: QuerySolanaROCKSupplyRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QuerySolanaROCKSupplyRequest: Could not create message: ' + e.message)
			}
		},
		
		querySolanaRocksupplyResponse({ value }: querySolanaRocksupplyResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QuerySolanaROCKSupplyResponse", value: QuerySolanaROCKSupplyResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QuerySolanaROCKSupplyResponse: Could not create message: ' + e.message)
			}
		},
		
		msgBurnResponse({ value }: msgBurnResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgBurnResponse", value: MsgBurnResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurnResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSetSolanaRocksupply({ value }: msgSetSolanaRocksupplyParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgSetSolanaROCKSupply", value: MsgSetSolanaROCKSupply.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetSolanaROCKSupply: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgBurn({ value }: msgBurnParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.MsgBurn", value: MsgBurn.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurn: Could not create message: ' + e.message)
			}
		},
		
		queryMintsResponse({ value }: queryMintsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryMintsResponse", value: QueryMintsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryMintsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryBurnsResponse({ value }: queryBurnsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.zentp.QueryBurnsResponse", value: QueryBurnsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryBurnsResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Bridge: getStructure(typeBridge.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						Solana: getStructure(typeSolana.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			ZrchainZentp: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;