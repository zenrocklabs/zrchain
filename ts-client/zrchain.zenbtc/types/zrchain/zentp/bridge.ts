// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zentp/bridge.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.zentp";

/** MBStatus represents the different possible states of a mint/burn operation. */
export enum BridgeStatus {
  /** BRIDGE_STATUS_UNSPECIFIED - Undefined: The status of the operation is not specified. */
  BRIDGE_STATUS_UNSPECIFIED = 0,
  /** BRIDGE_STATUS_PENDING - Pending: The operation is currently being processed. */
  BRIDGE_STATUS_PENDING = 1,
  /** BRIDGE_STATUS_COMPLETED - Completed: The operation has been successfully finalized. */
  BRIDGE_STATUS_COMPLETED = 2,
  /** BRIDGE_STATUS_FAILED - Failed: The operation has failed. */
  BRIDGE_STATUS_FAILED = 4,
  UNRECOGNIZED = -1,
}

export function bridgeStatusFromJSON(object: any): BridgeStatus {
  switch (object) {
    case 0:
    case "BRIDGE_STATUS_UNSPECIFIED":
      return BridgeStatus.BRIDGE_STATUS_UNSPECIFIED;
    case 1:
    case "BRIDGE_STATUS_PENDING":
      return BridgeStatus.BRIDGE_STATUS_PENDING;
    case 2:
    case "BRIDGE_STATUS_COMPLETED":
      return BridgeStatus.BRIDGE_STATUS_COMPLETED;
    case 4:
    case "BRIDGE_STATUS_FAILED":
      return BridgeStatus.BRIDGE_STATUS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BridgeStatus.UNRECOGNIZED;
  }
}

export function bridgeStatusToJSON(object: BridgeStatus): string {
  switch (object) {
    case BridgeStatus.BRIDGE_STATUS_UNSPECIFIED:
      return "BRIDGE_STATUS_UNSPECIFIED";
    case BridgeStatus.BRIDGE_STATUS_PENDING:
      return "BRIDGE_STATUS_PENDING";
    case BridgeStatus.BRIDGE_STATUS_COMPLETED:
      return "BRIDGE_STATUS_COMPLETED";
    case BridgeStatus.BRIDGE_STATUS_FAILED:
      return "BRIDGE_STATUS_FAILED";
    case BridgeStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Bridge represents a mint and burn operation between two networks. */
export interface Bridge {
  id: number;
  denom: string;
  creator: string;
  sourceAddress: string;
  sourceChain: string;
  destinationChain: string;
  amount: number;
  recipientAddress: string;
  txId: number;
  txHash: string;
  state: BridgeStatus;
  blockHeight: number;
  awaitingEventSince: number;
}

function createBaseBridge(): Bridge {
  return {
    id: 0,
    denom: "",
    creator: "",
    sourceAddress: "",
    sourceChain: "",
    destinationChain: "",
    amount: 0,
    recipientAddress: "",
    txId: 0,
    txHash: "",
    state: 0,
    blockHeight: 0,
    awaitingEventSince: 0,
  };
}

export const Bridge: MessageFns<Bridge> = {
  encode(message: Bridge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.creator !== "") {
      writer.uint32(26).string(message.creator);
    }
    if (message.sourceAddress !== "") {
      writer.uint32(34).string(message.sourceAddress);
    }
    if (message.sourceChain !== "") {
      writer.uint32(42).string(message.sourceChain);
    }
    if (message.destinationChain !== "") {
      writer.uint32(50).string(message.destinationChain);
    }
    if (message.amount !== 0) {
      writer.uint32(56).uint64(message.amount);
    }
    if (message.recipientAddress !== "") {
      writer.uint32(66).string(message.recipientAddress);
    }
    if (message.txId !== 0) {
      writer.uint32(72).uint64(message.txId);
    }
    if (message.txHash !== "") {
      writer.uint32(82).string(message.txHash);
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(96).int64(message.blockHeight);
    }
    if (message.awaitingEventSince !== 0) {
      writer.uint32(104).int64(message.awaitingEventSince);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bridge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBridge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sourceChain = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.recipientAddress = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.txId = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.awaitingEventSince = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bridge {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      sourceAddress: isSet(object.sourceAddress) ? globalThis.String(object.sourceAddress) : "",
      sourceChain: isSet(object.sourceChain) ? globalThis.String(object.sourceChain) : "",
      destinationChain: isSet(object.destinationChain) ? globalThis.String(object.destinationChain) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "",
      txId: isSet(object.txId) ? globalThis.Number(object.txId) : 0,
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      state: isSet(object.state) ? bridgeStatusFromJSON(object.state) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      awaitingEventSince: isSet(object.awaitingEventSince) ? globalThis.Number(object.awaitingEventSince) : 0,
    };
  },

  toJSON(message: Bridge): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.sourceAddress !== "") {
      obj.sourceAddress = message.sourceAddress;
    }
    if (message.sourceChain !== "") {
      obj.sourceChain = message.sourceChain;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.recipientAddress !== "") {
      obj.recipientAddress = message.recipientAddress;
    }
    if (message.txId !== 0) {
      obj.txId = Math.round(message.txId);
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.state !== 0) {
      obj.state = bridgeStatusToJSON(message.state);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.awaitingEventSince !== 0) {
      obj.awaitingEventSince = Math.round(message.awaitingEventSince);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bridge>, I>>(base?: I): Bridge {
    return Bridge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bridge>, I>>(object: I): Bridge {
    const message = createBaseBridge();
    message.id = object.id ?? 0;
    message.denom = object.denom ?? "";
    message.creator = object.creator ?? "";
    message.sourceAddress = object.sourceAddress ?? "";
    message.sourceChain = object.sourceChain ?? "";
    message.destinationChain = object.destinationChain ?? "";
    message.amount = object.amount ?? 0;
    message.recipientAddress = object.recipientAddress ?? "";
    message.txId = object.txId ?? 0;
    message.txHash = object.txHash ?? "";
    message.state = object.state ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.awaitingEventSince = object.awaitingEventSince ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
