// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zentp/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.zentp";

/** Params defines the parameters for the module. */
export interface Params {
  solana: Solana | undefined;
  bridgeFee: string;
}

/** Solana represents the parameters for the Solana relayer configuration. */
export interface Solana {
  signerKeyId: number;
  programId: string;
  nonceAccountKey: number;
  nonceAuthorityKey: number;
  mintAddress: string;
  feeWallet: string;
  fee: number;
  btl: number;
}

function createBaseParams(): Params {
  return { solana: undefined, bridgeFee: "" };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.solana !== undefined) {
      Solana.encode(message.solana, writer.uint32(10).fork()).join();
    }
    if (message.bridgeFee !== "") {
      writer.uint32(18).string(message.bridgeFee);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.solana = Solana.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bridgeFee = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      solana: isSet(object.solana) ? Solana.fromJSON(object.solana) : undefined,
      bridgeFee: isSet(object.bridgeFee) ? globalThis.String(object.bridgeFee) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.solana !== undefined) {
      obj.solana = Solana.toJSON(message.solana);
    }
    if (message.bridgeFee !== "") {
      obj.bridgeFee = message.bridgeFee;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.solana = (object.solana !== undefined && object.solana !== null)
      ? Solana.fromPartial(object.solana)
      : undefined;
    message.bridgeFee = object.bridgeFee ?? "";
    return message;
  },
};

function createBaseSolana(): Solana {
  return {
    signerKeyId: 0,
    programId: "",
    nonceAccountKey: 0,
    nonceAuthorityKey: 0,
    mintAddress: "",
    feeWallet: "",
    fee: 0,
    btl: 0,
  };
}

export const Solana: MessageFns<Solana> = {
  encode(message: Solana, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signerKeyId !== 0) {
      writer.uint32(8).uint64(message.signerKeyId);
    }
    if (message.programId !== "") {
      writer.uint32(18).string(message.programId);
    }
    if (message.nonceAccountKey !== 0) {
      writer.uint32(24).uint64(message.nonceAccountKey);
    }
    if (message.nonceAuthorityKey !== 0) {
      writer.uint32(32).uint64(message.nonceAuthorityKey);
    }
    if (message.mintAddress !== "") {
      writer.uint32(42).string(message.mintAddress);
    }
    if (message.feeWallet !== "") {
      writer.uint32(50).string(message.feeWallet);
    }
    if (message.fee !== 0) {
      writer.uint32(56).uint64(message.fee);
    }
    if (message.btl !== 0) {
      writer.uint32(64).int64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Solana {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolana();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.signerKeyId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.programId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nonceAccountKey = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nonceAuthorityKey = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mintAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.feeWallet = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.fee = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.btl = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Solana {
    return {
      signerKeyId: isSet(object.signerKeyId) ? globalThis.Number(object.signerKeyId) : 0,
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      nonceAccountKey: isSet(object.nonceAccountKey) ? globalThis.Number(object.nonceAccountKey) : 0,
      nonceAuthorityKey: isSet(object.nonceAuthorityKey) ? globalThis.Number(object.nonceAuthorityKey) : 0,
      mintAddress: isSet(object.mintAddress) ? globalThis.String(object.mintAddress) : "",
      feeWallet: isSet(object.feeWallet) ? globalThis.String(object.feeWallet) : "",
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: Solana): unknown {
    const obj: any = {};
    if (message.signerKeyId !== 0) {
      obj.signerKeyId = Math.round(message.signerKeyId);
    }
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.nonceAccountKey !== 0) {
      obj.nonceAccountKey = Math.round(message.nonceAccountKey);
    }
    if (message.nonceAuthorityKey !== 0) {
      obj.nonceAuthorityKey = Math.round(message.nonceAuthorityKey);
    }
    if (message.mintAddress !== "") {
      obj.mintAddress = message.mintAddress;
    }
    if (message.feeWallet !== "") {
      obj.feeWallet = message.feeWallet;
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Solana>, I>>(base?: I): Solana {
    return Solana.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Solana>, I>>(object: I): Solana {
    const message = createBaseSolana();
    message.signerKeyId = object.signerKeyId ?? 0;
    message.programId = object.programId ?? "";
    message.nonceAccountKey = object.nonceAccountKey ?? 0;
    message.nonceAuthorityKey = object.nonceAuthorityKey ?? 0;
    message.mintAddress = object.mintAddress ?? "";
    message.feeWallet = object.feeWallet ?? "";
    message.fee = object.fee ?? 0;
    message.btl = object.btl ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
