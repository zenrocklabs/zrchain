// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/identity/keyring.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.identity";

/** defines the keyring format */
export interface Keyring {
  address: string;
  creator: string;
  description: string;
  admins: string[];
  parties: string[];
  /**
   * The MPC threshold, i.e. the number of parties required to submit signed txs
   * in order for a request to be fulfilled
   */
  partyThreshold: number;
  keyReqFee: number;
  sigReqFee: number;
  isActive: boolean;
  delegateFees: boolean;
}

function createBaseKeyring(): Keyring {
  return {
    address: "",
    creator: "",
    description: "",
    admins: [],
    parties: [],
    partyThreshold: 0,
    keyReqFee: 0,
    sigReqFee: 0,
    isActive: false,
    delegateFees: false,
  };
}

export const Keyring: MessageFns<Keyring> = {
  encode(message: Keyring, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.admins) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.parties) {
      writer.uint32(42).string(v!);
    }
    if (message.partyThreshold !== 0) {
      writer.uint32(48).uint32(message.partyThreshold);
    }
    if (message.keyReqFee !== 0) {
      writer.uint32(56).uint64(message.keyReqFee);
    }
    if (message.sigReqFee !== 0) {
      writer.uint32(64).uint64(message.sigReqFee);
    }
    if (message.isActive !== false) {
      writer.uint32(72).bool(message.isActive);
    }
    if (message.delegateFees !== false) {
      writer.uint32(80).bool(message.delegateFees);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Keyring {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyring();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.admins.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parties.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.partyThreshold = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.keyReqFee = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.sigReqFee = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.delegateFees = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Keyring {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      admins: globalThis.Array.isArray(object?.admins) ? object.admins.map((e: any) => globalThis.String(e)) : [],
      parties: globalThis.Array.isArray(object?.parties) ? object.parties.map((e: any) => globalThis.String(e)) : [],
      partyThreshold: isSet(object.partyThreshold) ? globalThis.Number(object.partyThreshold) : 0,
      keyReqFee: isSet(object.keyReqFee) ? globalThis.Number(object.keyReqFee) : 0,
      sigReqFee: isSet(object.sigReqFee) ? globalThis.Number(object.sigReqFee) : 0,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      delegateFees: isSet(object.delegateFees) ? globalThis.Boolean(object.delegateFees) : false,
    };
  },

  toJSON(message: Keyring): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.admins?.length) {
      obj.admins = message.admins;
    }
    if (message.parties?.length) {
      obj.parties = message.parties;
    }
    if (message.partyThreshold !== 0) {
      obj.partyThreshold = Math.round(message.partyThreshold);
    }
    if (message.keyReqFee !== 0) {
      obj.keyReqFee = Math.round(message.keyReqFee);
    }
    if (message.sigReqFee !== 0) {
      obj.sigReqFee = Math.round(message.sigReqFee);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.delegateFees !== false) {
      obj.delegateFees = message.delegateFees;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Keyring>, I>>(base?: I): Keyring {
    return Keyring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Keyring>, I>>(object: I): Keyring {
    const message = createBaseKeyring();
    message.address = object.address ?? "";
    message.creator = object.creator ?? "";
    message.description = object.description ?? "";
    message.admins = object.admins?.map((e) => e) || [];
    message.parties = object.parties?.map((e) => e) || [];
    message.partyThreshold = object.partyThreshold ?? 0;
    message.keyReqFee = object.keyReqFee ?? 0;
    message.sigReqFee = object.sigReqFee ?? 0;
    message.isActive = object.isActive ?? false;
    message.delegateFees = object.delegateFees ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
