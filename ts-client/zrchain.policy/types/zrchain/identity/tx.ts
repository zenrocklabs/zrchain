// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/identity/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "zrchain.identity";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgNewWorkspace is the Msg/NewWorkspace request type */
export interface MsgNewWorkspace {
  creator: string;
  adminPolicyId: number;
  signPolicyId: number;
  /** Optional */
  additionalOwners: string[];
}

/**
 * MsgNewWorkspaceResponse defines the response structure for executing a
 * MsgNewWorkspace message
 */
export interface MsgNewWorkspaceResponse {
  addr: string;
}

/** MsgAddWorkspaceOwner is the Msg/AddWorkspaceOwner request type */
export interface MsgAddWorkspaceOwner {
  creator: string;
  workspaceAddr: string;
  newOwner: string;
  btl: number;
}

/**
 * MsgAddWorkspaceOwnerResponse defines the response structure for executing a
 * MsgAddWorkspaceOwner message
 */
export interface MsgAddWorkspaceOwnerResponse {
}

/** MsgAppendChildWorkspace is the Msg/AppendChildWorkspace request type */
export interface MsgAppendChildWorkspace {
  creator: string;
  parentWorkspaceAddr: string;
  childWorkspaceAddr: string;
  btl: number;
}

/**
 * MsgAppendChildWorkspaceResponse defines the response structure for executing
 * a MsgAppendChildWorkspace message
 */
export interface MsgAppendChildWorkspaceResponse {
}

/** MsgNewChildWorkspace is the Msg/NewChildWorkspace request type */
export interface MsgNewChildWorkspace {
  creator: string;
  parentWorkspaceAddr: string;
  btl: number;
}

/**
 * MsgNewChildWorkspaceResponse defines the response structure for executing a
 * MsgNewChildWorkspaceResponse message
 */
export interface MsgNewChildWorkspaceResponse {
  address: string;
}

/** MsgRemoveWorkspaceOwner is the Msg/RemoveWorkspaceOwner request type */
export interface MsgRemoveWorkspaceOwner {
  creator: string;
  workspaceAddr: string;
  owner: string;
  btl: number;
}

/**
 * MsgRemoveWorkspaceOwnerResponse defines the response structure for executing
 * a MsgRemoveWorkspaceOwner message
 */
export interface MsgRemoveWorkspaceOwnerResponse {
}

/** MsgNewKeyring is the Msg/NewKeyring request type */
export interface MsgNewKeyring {
  creator: string;
  description: string;
  partyThreshold: number;
  keyReqFee: number;
  sigReqFee: number;
  delegateFees: boolean;
}

/** MsgNewKeyringResponse is the Msg/NewKeyringResponse response type */
export interface MsgNewKeyringResponse {
  addr: string;
}

/** MsgAddKeyringParty is the Msg/AddKeyringParty request type */
export interface MsgAddKeyringParty {
  creator: string;
  keyringAddr: string;
  party: string;
  /** Optional flag */
  increaseThreshold: boolean;
}

/** MsgAddKeyringPartyResponse is the Msg/AddKeyringPartyResponse response type */
export interface MsgAddKeyringPartyResponse {
}

/** MsgUpdateKeyring is the Msg/UpdateKeyring request type */
export interface MsgUpdateKeyring {
  creator: string;
  keyringAddr: string;
  partyThreshold: number;
  keyReqFee: number;
  sigReqFee: number;
  description: string;
  isActive: boolean;
}

/** MsgUpdateKeyringResponse is the Msg/UpdateKeyringResponse response type */
export interface MsgUpdateKeyringResponse {
}

/** MsgRemoveKeyringParty is the Msg/RemoveKeyringParty request type */
export interface MsgRemoveKeyringParty {
  creator: string;
  keyringAddr: string;
  party: string;
  /** Optional flag */
  decreaseThreshold: boolean;
}

/**
 * MsgRemoveKeyringPartyResponse is the Msg/RemoveKeyringPartyResponse response
 * type
 */
export interface MsgRemoveKeyringPartyResponse {
}

/** MsgAddKeyringAdmin is the Msg/AddKeyringAdmin request type */
export interface MsgAddKeyringAdmin {
  creator: string;
  keyringAddr: string;
  admin: string;
}

/** MsgAddKeyringAdminResponse is the Msg/AddKeyringAdminResponse response type */
export interface MsgAddKeyringAdminResponse {
}

/** MsgRemoveKeyringAdmin is the Msg/RemoveKeyringAdmin request type */
export interface MsgRemoveKeyringAdmin {
  creator: string;
  keyringAddr: string;
  admin: string;
}

/**
 * MsgRemoveKeyringAdminResponse is the Msg/RemoveKeyringAdminResponse response
 * type
 */
export interface MsgRemoveKeyringAdminResponse {
}

/** MsgUpdateWorkspace is the Msg/UpdateWorkspace request type */
export interface MsgUpdateWorkspace {
  creator: string;
  workspaceAddr: string;
  adminPolicyId: number;
  signPolicyId: number;
  btl: number;
}

/** MsgUpdateWorkspaceResponse is the Msg/UpdateWorkspaceResponse response type */
export interface MsgUpdateWorkspaceResponse {
}

/** MsgDeactivateKeyring is the Msg/DeactivateKeyring request type */
export interface MsgDeactivateKeyring {
  creator: string;
  keyringAddr: string;
}

/**
 * MsgDeactivateKeyringResponse is the Msg/DeactivateKeyringResponse response
 * type
 */
export interface MsgDeactivateKeyringResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgNewWorkspace(): MsgNewWorkspace {
  return { creator: "", adminPolicyId: 0, signPolicyId: 0, additionalOwners: [] };
}

export const MsgNewWorkspace: MessageFns<MsgNewWorkspace> = {
  encode(message: MsgNewWorkspace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.adminPolicyId !== 0) {
      writer.uint32(16).uint64(message.adminPolicyId);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(24).uint64(message.signPolicyId);
    }
    for (const v of message.additionalOwners) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewWorkspace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewWorkspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.adminPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.additionalOwners.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewWorkspace {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      adminPolicyId: isSet(object.adminPolicyId) ? globalThis.Number(object.adminPolicyId) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      additionalOwners: globalThis.Array.isArray(object?.additionalOwners)
        ? object.additionalOwners.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: MsgNewWorkspace): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.adminPolicyId !== 0) {
      obj.adminPolicyId = Math.round(message.adminPolicyId);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.additionalOwners?.length) {
      obj.additionalOwners = message.additionalOwners;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewWorkspace>, I>>(base?: I): MsgNewWorkspace {
    return MsgNewWorkspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewWorkspace>, I>>(object: I): MsgNewWorkspace {
    const message = createBaseMsgNewWorkspace();
    message.creator = object.creator ?? "";
    message.adminPolicyId = object.adminPolicyId ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.additionalOwners = object.additionalOwners?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgNewWorkspaceResponse(): MsgNewWorkspaceResponse {
  return { addr: "" };
}

export const MsgNewWorkspaceResponse: MessageFns<MsgNewWorkspaceResponse> = {
  encode(message: MsgNewWorkspaceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addr !== "") {
      writer.uint32(10).string(message.addr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewWorkspaceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewWorkspaceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewWorkspaceResponse {
    return { addr: isSet(object.addr) ? globalThis.String(object.addr) : "" };
  },

  toJSON(message: MsgNewWorkspaceResponse): unknown {
    const obj: any = {};
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewWorkspaceResponse>, I>>(base?: I): MsgNewWorkspaceResponse {
    return MsgNewWorkspaceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewWorkspaceResponse>, I>>(object: I): MsgNewWorkspaceResponse {
    const message = createBaseMsgNewWorkspaceResponse();
    message.addr = object.addr ?? "";
    return message;
  },
};

function createBaseMsgAddWorkspaceOwner(): MsgAddWorkspaceOwner {
  return { creator: "", workspaceAddr: "", newOwner: "", btl: 0 };
}

export const MsgAddWorkspaceOwner: MessageFns<MsgAddWorkspaceOwner> = {
  encode(message: MsgAddWorkspaceOwner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(18).string(message.workspaceAddr);
    }
    if (message.newOwner !== "") {
      writer.uint32(26).string(message.newOwner);
    }
    if (message.btl !== 0) {
      writer.uint32(32).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddWorkspaceOwner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddWorkspaceOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newOwner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddWorkspaceOwner {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      newOwner: isSet(object.newOwner) ? globalThis.String(object.newOwner) : "",
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: MsgAddWorkspaceOwner): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.newOwner !== "") {
      obj.newOwner = message.newOwner;
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddWorkspaceOwner>, I>>(base?: I): MsgAddWorkspaceOwner {
    return MsgAddWorkspaceOwner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddWorkspaceOwner>, I>>(object: I): MsgAddWorkspaceOwner {
    const message = createBaseMsgAddWorkspaceOwner();
    message.creator = object.creator ?? "";
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.newOwner = object.newOwner ?? "";
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseMsgAddWorkspaceOwnerResponse(): MsgAddWorkspaceOwnerResponse {
  return {};
}

export const MsgAddWorkspaceOwnerResponse: MessageFns<MsgAddWorkspaceOwnerResponse> = {
  encode(_: MsgAddWorkspaceOwnerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddWorkspaceOwnerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddWorkspaceOwnerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddWorkspaceOwnerResponse {
    return {};
  },

  toJSON(_: MsgAddWorkspaceOwnerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddWorkspaceOwnerResponse>, I>>(base?: I): MsgAddWorkspaceOwnerResponse {
    return MsgAddWorkspaceOwnerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddWorkspaceOwnerResponse>, I>>(_: I): MsgAddWorkspaceOwnerResponse {
    const message = createBaseMsgAddWorkspaceOwnerResponse();
    return message;
  },
};

function createBaseMsgAppendChildWorkspace(): MsgAppendChildWorkspace {
  return { creator: "", parentWorkspaceAddr: "", childWorkspaceAddr: "", btl: 0 };
}

export const MsgAppendChildWorkspace: MessageFns<MsgAppendChildWorkspace> = {
  encode(message: MsgAppendChildWorkspace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.parentWorkspaceAddr !== "") {
      writer.uint32(18).string(message.parentWorkspaceAddr);
    }
    if (message.childWorkspaceAddr !== "") {
      writer.uint32(26).string(message.childWorkspaceAddr);
    }
    if (message.btl !== 0) {
      writer.uint32(32).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAppendChildWorkspace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAppendChildWorkspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parentWorkspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.childWorkspaceAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAppendChildWorkspace {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      parentWorkspaceAddr: isSet(object.parentWorkspaceAddr) ? globalThis.String(object.parentWorkspaceAddr) : "",
      childWorkspaceAddr: isSet(object.childWorkspaceAddr) ? globalThis.String(object.childWorkspaceAddr) : "",
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: MsgAppendChildWorkspace): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.parentWorkspaceAddr !== "") {
      obj.parentWorkspaceAddr = message.parentWorkspaceAddr;
    }
    if (message.childWorkspaceAddr !== "") {
      obj.childWorkspaceAddr = message.childWorkspaceAddr;
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAppendChildWorkspace>, I>>(base?: I): MsgAppendChildWorkspace {
    return MsgAppendChildWorkspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAppendChildWorkspace>, I>>(object: I): MsgAppendChildWorkspace {
    const message = createBaseMsgAppendChildWorkspace();
    message.creator = object.creator ?? "";
    message.parentWorkspaceAddr = object.parentWorkspaceAddr ?? "";
    message.childWorkspaceAddr = object.childWorkspaceAddr ?? "";
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseMsgAppendChildWorkspaceResponse(): MsgAppendChildWorkspaceResponse {
  return {};
}

export const MsgAppendChildWorkspaceResponse: MessageFns<MsgAppendChildWorkspaceResponse> = {
  encode(_: MsgAppendChildWorkspaceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAppendChildWorkspaceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAppendChildWorkspaceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAppendChildWorkspaceResponse {
    return {};
  },

  toJSON(_: MsgAppendChildWorkspaceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAppendChildWorkspaceResponse>, I>>(base?: I): MsgAppendChildWorkspaceResponse {
    return MsgAppendChildWorkspaceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAppendChildWorkspaceResponse>, I>>(_: I): MsgAppendChildWorkspaceResponse {
    const message = createBaseMsgAppendChildWorkspaceResponse();
    return message;
  },
};

function createBaseMsgNewChildWorkspace(): MsgNewChildWorkspace {
  return { creator: "", parentWorkspaceAddr: "", btl: 0 };
}

export const MsgNewChildWorkspace: MessageFns<MsgNewChildWorkspace> = {
  encode(message: MsgNewChildWorkspace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.parentWorkspaceAddr !== "") {
      writer.uint32(18).string(message.parentWorkspaceAddr);
    }
    if (message.btl !== 0) {
      writer.uint32(24).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewChildWorkspace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewChildWorkspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parentWorkspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewChildWorkspace {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      parentWorkspaceAddr: isSet(object.parentWorkspaceAddr) ? globalThis.String(object.parentWorkspaceAddr) : "",
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: MsgNewChildWorkspace): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.parentWorkspaceAddr !== "") {
      obj.parentWorkspaceAddr = message.parentWorkspaceAddr;
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewChildWorkspace>, I>>(base?: I): MsgNewChildWorkspace {
    return MsgNewChildWorkspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewChildWorkspace>, I>>(object: I): MsgNewChildWorkspace {
    const message = createBaseMsgNewChildWorkspace();
    message.creator = object.creator ?? "";
    message.parentWorkspaceAddr = object.parentWorkspaceAddr ?? "";
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseMsgNewChildWorkspaceResponse(): MsgNewChildWorkspaceResponse {
  return { address: "" };
}

export const MsgNewChildWorkspaceResponse: MessageFns<MsgNewChildWorkspaceResponse> = {
  encode(message: MsgNewChildWorkspaceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewChildWorkspaceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewChildWorkspaceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewChildWorkspaceResponse {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: MsgNewChildWorkspaceResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewChildWorkspaceResponse>, I>>(base?: I): MsgNewChildWorkspaceResponse {
    return MsgNewChildWorkspaceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewChildWorkspaceResponse>, I>>(object: I): MsgNewChildWorkspaceResponse {
    const message = createBaseMsgNewChildWorkspaceResponse();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseMsgRemoveWorkspaceOwner(): MsgRemoveWorkspaceOwner {
  return { creator: "", workspaceAddr: "", owner: "", btl: 0 };
}

export const MsgRemoveWorkspaceOwner: MessageFns<MsgRemoveWorkspaceOwner> = {
  encode(message: MsgRemoveWorkspaceOwner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(18).string(message.workspaceAddr);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.btl !== 0) {
      writer.uint32(32).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveWorkspaceOwner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveWorkspaceOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveWorkspaceOwner {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: MsgRemoveWorkspaceOwner): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveWorkspaceOwner>, I>>(base?: I): MsgRemoveWorkspaceOwner {
    return MsgRemoveWorkspaceOwner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveWorkspaceOwner>, I>>(object: I): MsgRemoveWorkspaceOwner {
    const message = createBaseMsgRemoveWorkspaceOwner();
    message.creator = object.creator ?? "";
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.owner = object.owner ?? "";
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseMsgRemoveWorkspaceOwnerResponse(): MsgRemoveWorkspaceOwnerResponse {
  return {};
}

export const MsgRemoveWorkspaceOwnerResponse: MessageFns<MsgRemoveWorkspaceOwnerResponse> = {
  encode(_: MsgRemoveWorkspaceOwnerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveWorkspaceOwnerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveWorkspaceOwnerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveWorkspaceOwnerResponse {
    return {};
  },

  toJSON(_: MsgRemoveWorkspaceOwnerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveWorkspaceOwnerResponse>, I>>(base?: I): MsgRemoveWorkspaceOwnerResponse {
    return MsgRemoveWorkspaceOwnerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveWorkspaceOwnerResponse>, I>>(_: I): MsgRemoveWorkspaceOwnerResponse {
    const message = createBaseMsgRemoveWorkspaceOwnerResponse();
    return message;
  },
};

function createBaseMsgNewKeyring(): MsgNewKeyring {
  return { creator: "", description: "", partyThreshold: 0, keyReqFee: 0, sigReqFee: 0, delegateFees: false };
}

export const MsgNewKeyring: MessageFns<MsgNewKeyring> = {
  encode(message: MsgNewKeyring, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.partyThreshold !== 0) {
      writer.uint32(24).uint32(message.partyThreshold);
    }
    if (message.keyReqFee !== 0) {
      writer.uint32(32).uint64(message.keyReqFee);
    }
    if (message.sigReqFee !== 0) {
      writer.uint32(40).uint64(message.sigReqFee);
    }
    if (message.delegateFees !== false) {
      writer.uint32(48).bool(message.delegateFees);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewKeyring {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewKeyring();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.partyThreshold = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.keyReqFee = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sigReqFee = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.delegateFees = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewKeyring {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      partyThreshold: isSet(object.partyThreshold) ? globalThis.Number(object.partyThreshold) : 0,
      keyReqFee: isSet(object.keyReqFee) ? globalThis.Number(object.keyReqFee) : 0,
      sigReqFee: isSet(object.sigReqFee) ? globalThis.Number(object.sigReqFee) : 0,
      delegateFees: isSet(object.delegateFees) ? globalThis.Boolean(object.delegateFees) : false,
    };
  },

  toJSON(message: MsgNewKeyring): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.partyThreshold !== 0) {
      obj.partyThreshold = Math.round(message.partyThreshold);
    }
    if (message.keyReqFee !== 0) {
      obj.keyReqFee = Math.round(message.keyReqFee);
    }
    if (message.sigReqFee !== 0) {
      obj.sigReqFee = Math.round(message.sigReqFee);
    }
    if (message.delegateFees !== false) {
      obj.delegateFees = message.delegateFees;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewKeyring>, I>>(base?: I): MsgNewKeyring {
    return MsgNewKeyring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewKeyring>, I>>(object: I): MsgNewKeyring {
    const message = createBaseMsgNewKeyring();
    message.creator = object.creator ?? "";
    message.description = object.description ?? "";
    message.partyThreshold = object.partyThreshold ?? 0;
    message.keyReqFee = object.keyReqFee ?? 0;
    message.sigReqFee = object.sigReqFee ?? 0;
    message.delegateFees = object.delegateFees ?? false;
    return message;
  },
};

function createBaseMsgNewKeyringResponse(): MsgNewKeyringResponse {
  return { addr: "" };
}

export const MsgNewKeyringResponse: MessageFns<MsgNewKeyringResponse> = {
  encode(message: MsgNewKeyringResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addr !== "") {
      writer.uint32(10).string(message.addr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewKeyringResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewKeyringResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewKeyringResponse {
    return { addr: isSet(object.addr) ? globalThis.String(object.addr) : "" };
  },

  toJSON(message: MsgNewKeyringResponse): unknown {
    const obj: any = {};
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewKeyringResponse>, I>>(base?: I): MsgNewKeyringResponse {
    return MsgNewKeyringResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewKeyringResponse>, I>>(object: I): MsgNewKeyringResponse {
    const message = createBaseMsgNewKeyringResponse();
    message.addr = object.addr ?? "";
    return message;
  },
};

function createBaseMsgAddKeyringParty(): MsgAddKeyringParty {
  return { creator: "", keyringAddr: "", party: "", increaseThreshold: false };
}

export const MsgAddKeyringParty: MessageFns<MsgAddKeyringParty> = {
  encode(message: MsgAddKeyringParty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(18).string(message.keyringAddr);
    }
    if (message.party !== "") {
      writer.uint32(26).string(message.party);
    }
    if (message.increaseThreshold !== false) {
      writer.uint32(32).bool(message.increaseThreshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddKeyringParty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddKeyringParty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.party = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.increaseThreshold = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddKeyringParty {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      party: isSet(object.party) ? globalThis.String(object.party) : "",
      increaseThreshold: isSet(object.increaseThreshold) ? globalThis.Boolean(object.increaseThreshold) : false,
    };
  },

  toJSON(message: MsgAddKeyringParty): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.party !== "") {
      obj.party = message.party;
    }
    if (message.increaseThreshold !== false) {
      obj.increaseThreshold = message.increaseThreshold;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddKeyringParty>, I>>(base?: I): MsgAddKeyringParty {
    return MsgAddKeyringParty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddKeyringParty>, I>>(object: I): MsgAddKeyringParty {
    const message = createBaseMsgAddKeyringParty();
    message.creator = object.creator ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.party = object.party ?? "";
    message.increaseThreshold = object.increaseThreshold ?? false;
    return message;
  },
};

function createBaseMsgAddKeyringPartyResponse(): MsgAddKeyringPartyResponse {
  return {};
}

export const MsgAddKeyringPartyResponse: MessageFns<MsgAddKeyringPartyResponse> = {
  encode(_: MsgAddKeyringPartyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddKeyringPartyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddKeyringPartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddKeyringPartyResponse {
    return {};
  },

  toJSON(_: MsgAddKeyringPartyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddKeyringPartyResponse>, I>>(base?: I): MsgAddKeyringPartyResponse {
    return MsgAddKeyringPartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddKeyringPartyResponse>, I>>(_: I): MsgAddKeyringPartyResponse {
    const message = createBaseMsgAddKeyringPartyResponse();
    return message;
  },
};

function createBaseMsgUpdateKeyring(): MsgUpdateKeyring {
  return {
    creator: "",
    keyringAddr: "",
    partyThreshold: 0,
    keyReqFee: 0,
    sigReqFee: 0,
    description: "",
    isActive: false,
  };
}

export const MsgUpdateKeyring: MessageFns<MsgUpdateKeyring> = {
  encode(message: MsgUpdateKeyring, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(18).string(message.keyringAddr);
    }
    if (message.partyThreshold !== 0) {
      writer.uint32(24).uint32(message.partyThreshold);
    }
    if (message.keyReqFee !== 0) {
      writer.uint32(32).uint64(message.keyReqFee);
    }
    if (message.sigReqFee !== 0) {
      writer.uint32(40).uint64(message.sigReqFee);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(56).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateKeyring {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateKeyring();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.partyThreshold = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.keyReqFee = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sigReqFee = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateKeyring {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      partyThreshold: isSet(object.partyThreshold) ? globalThis.Number(object.partyThreshold) : 0,
      keyReqFee: isSet(object.keyReqFee) ? globalThis.Number(object.keyReqFee) : 0,
      sigReqFee: isSet(object.sigReqFee) ? globalThis.Number(object.sigReqFee) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
    };
  },

  toJSON(message: MsgUpdateKeyring): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.partyThreshold !== 0) {
      obj.partyThreshold = Math.round(message.partyThreshold);
    }
    if (message.keyReqFee !== 0) {
      obj.keyReqFee = Math.round(message.keyReqFee);
    }
    if (message.sigReqFee !== 0) {
      obj.sigReqFee = Math.round(message.sigReqFee);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateKeyring>, I>>(base?: I): MsgUpdateKeyring {
    return MsgUpdateKeyring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateKeyring>, I>>(object: I): MsgUpdateKeyring {
    const message = createBaseMsgUpdateKeyring();
    message.creator = object.creator ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.partyThreshold = object.partyThreshold ?? 0;
    message.keyReqFee = object.keyReqFee ?? 0;
    message.sigReqFee = object.sigReqFee ?? 0;
    message.description = object.description ?? "";
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseMsgUpdateKeyringResponse(): MsgUpdateKeyringResponse {
  return {};
}

export const MsgUpdateKeyringResponse: MessageFns<MsgUpdateKeyringResponse> = {
  encode(_: MsgUpdateKeyringResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateKeyringResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateKeyringResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateKeyringResponse {
    return {};
  },

  toJSON(_: MsgUpdateKeyringResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateKeyringResponse>, I>>(base?: I): MsgUpdateKeyringResponse {
    return MsgUpdateKeyringResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateKeyringResponse>, I>>(_: I): MsgUpdateKeyringResponse {
    const message = createBaseMsgUpdateKeyringResponse();
    return message;
  },
};

function createBaseMsgRemoveKeyringParty(): MsgRemoveKeyringParty {
  return { creator: "", keyringAddr: "", party: "", decreaseThreshold: false };
}

export const MsgRemoveKeyringParty: MessageFns<MsgRemoveKeyringParty> = {
  encode(message: MsgRemoveKeyringParty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(18).string(message.keyringAddr);
    }
    if (message.party !== "") {
      writer.uint32(26).string(message.party);
    }
    if (message.decreaseThreshold !== false) {
      writer.uint32(32).bool(message.decreaseThreshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveKeyringParty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveKeyringParty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.party = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.decreaseThreshold = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveKeyringParty {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      party: isSet(object.party) ? globalThis.String(object.party) : "",
      decreaseThreshold: isSet(object.decreaseThreshold) ? globalThis.Boolean(object.decreaseThreshold) : false,
    };
  },

  toJSON(message: MsgRemoveKeyringParty): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.party !== "") {
      obj.party = message.party;
    }
    if (message.decreaseThreshold !== false) {
      obj.decreaseThreshold = message.decreaseThreshold;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveKeyringParty>, I>>(base?: I): MsgRemoveKeyringParty {
    return MsgRemoveKeyringParty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveKeyringParty>, I>>(object: I): MsgRemoveKeyringParty {
    const message = createBaseMsgRemoveKeyringParty();
    message.creator = object.creator ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.party = object.party ?? "";
    message.decreaseThreshold = object.decreaseThreshold ?? false;
    return message;
  },
};

function createBaseMsgRemoveKeyringPartyResponse(): MsgRemoveKeyringPartyResponse {
  return {};
}

export const MsgRemoveKeyringPartyResponse: MessageFns<MsgRemoveKeyringPartyResponse> = {
  encode(_: MsgRemoveKeyringPartyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveKeyringPartyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveKeyringPartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveKeyringPartyResponse {
    return {};
  },

  toJSON(_: MsgRemoveKeyringPartyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveKeyringPartyResponse>, I>>(base?: I): MsgRemoveKeyringPartyResponse {
    return MsgRemoveKeyringPartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveKeyringPartyResponse>, I>>(_: I): MsgRemoveKeyringPartyResponse {
    const message = createBaseMsgRemoveKeyringPartyResponse();
    return message;
  },
};

function createBaseMsgAddKeyringAdmin(): MsgAddKeyringAdmin {
  return { creator: "", keyringAddr: "", admin: "" };
}

export const MsgAddKeyringAdmin: MessageFns<MsgAddKeyringAdmin> = {
  encode(message: MsgAddKeyringAdmin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(18).string(message.keyringAddr);
    }
    if (message.admin !== "") {
      writer.uint32(26).string(message.admin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddKeyringAdmin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddKeyringAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.admin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddKeyringAdmin {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
    };
  },

  toJSON(message: MsgAddKeyringAdmin): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddKeyringAdmin>, I>>(base?: I): MsgAddKeyringAdmin {
    return MsgAddKeyringAdmin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddKeyringAdmin>, I>>(object: I): MsgAddKeyringAdmin {
    const message = createBaseMsgAddKeyringAdmin();
    message.creator = object.creator ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.admin = object.admin ?? "";
    return message;
  },
};

function createBaseMsgAddKeyringAdminResponse(): MsgAddKeyringAdminResponse {
  return {};
}

export const MsgAddKeyringAdminResponse: MessageFns<MsgAddKeyringAdminResponse> = {
  encode(_: MsgAddKeyringAdminResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddKeyringAdminResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddKeyringAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddKeyringAdminResponse {
    return {};
  },

  toJSON(_: MsgAddKeyringAdminResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddKeyringAdminResponse>, I>>(base?: I): MsgAddKeyringAdminResponse {
    return MsgAddKeyringAdminResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddKeyringAdminResponse>, I>>(_: I): MsgAddKeyringAdminResponse {
    const message = createBaseMsgAddKeyringAdminResponse();
    return message;
  },
};

function createBaseMsgRemoveKeyringAdmin(): MsgRemoveKeyringAdmin {
  return { creator: "", keyringAddr: "", admin: "" };
}

export const MsgRemoveKeyringAdmin: MessageFns<MsgRemoveKeyringAdmin> = {
  encode(message: MsgRemoveKeyringAdmin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(18).string(message.keyringAddr);
    }
    if (message.admin !== "") {
      writer.uint32(26).string(message.admin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveKeyringAdmin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveKeyringAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.admin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveKeyringAdmin {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
    };
  },

  toJSON(message: MsgRemoveKeyringAdmin): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveKeyringAdmin>, I>>(base?: I): MsgRemoveKeyringAdmin {
    return MsgRemoveKeyringAdmin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveKeyringAdmin>, I>>(object: I): MsgRemoveKeyringAdmin {
    const message = createBaseMsgRemoveKeyringAdmin();
    message.creator = object.creator ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.admin = object.admin ?? "";
    return message;
  },
};

function createBaseMsgRemoveKeyringAdminResponse(): MsgRemoveKeyringAdminResponse {
  return {};
}

export const MsgRemoveKeyringAdminResponse: MessageFns<MsgRemoveKeyringAdminResponse> = {
  encode(_: MsgRemoveKeyringAdminResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveKeyringAdminResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveKeyringAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveKeyringAdminResponse {
    return {};
  },

  toJSON(_: MsgRemoveKeyringAdminResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveKeyringAdminResponse>, I>>(base?: I): MsgRemoveKeyringAdminResponse {
    return MsgRemoveKeyringAdminResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveKeyringAdminResponse>, I>>(_: I): MsgRemoveKeyringAdminResponse {
    const message = createBaseMsgRemoveKeyringAdminResponse();
    return message;
  },
};

function createBaseMsgUpdateWorkspace(): MsgUpdateWorkspace {
  return { creator: "", workspaceAddr: "", adminPolicyId: 0, signPolicyId: 0, btl: 0 };
}

export const MsgUpdateWorkspace: MessageFns<MsgUpdateWorkspace> = {
  encode(message: MsgUpdateWorkspace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(18).string(message.workspaceAddr);
    }
    if (message.adminPolicyId !== 0) {
      writer.uint32(24).uint64(message.adminPolicyId);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(32).uint64(message.signPolicyId);
    }
    if (message.btl !== 0) {
      writer.uint32(40).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateWorkspace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateWorkspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.adminPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateWorkspace {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      adminPolicyId: isSet(object.adminPolicyId) ? globalThis.Number(object.adminPolicyId) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: MsgUpdateWorkspace): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.adminPolicyId !== 0) {
      obj.adminPolicyId = Math.round(message.adminPolicyId);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateWorkspace>, I>>(base?: I): MsgUpdateWorkspace {
    return MsgUpdateWorkspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateWorkspace>, I>>(object: I): MsgUpdateWorkspace {
    const message = createBaseMsgUpdateWorkspace();
    message.creator = object.creator ?? "";
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.adminPolicyId = object.adminPolicyId ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseMsgUpdateWorkspaceResponse(): MsgUpdateWorkspaceResponse {
  return {};
}

export const MsgUpdateWorkspaceResponse: MessageFns<MsgUpdateWorkspaceResponse> = {
  encode(_: MsgUpdateWorkspaceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateWorkspaceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateWorkspaceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateWorkspaceResponse {
    return {};
  },

  toJSON(_: MsgUpdateWorkspaceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateWorkspaceResponse>, I>>(base?: I): MsgUpdateWorkspaceResponse {
    return MsgUpdateWorkspaceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateWorkspaceResponse>, I>>(_: I): MsgUpdateWorkspaceResponse {
    const message = createBaseMsgUpdateWorkspaceResponse();
    return message;
  },
};

function createBaseMsgDeactivateKeyring(): MsgDeactivateKeyring {
  return { creator: "", keyringAddr: "" };
}

export const MsgDeactivateKeyring: MessageFns<MsgDeactivateKeyring> = {
  encode(message: MsgDeactivateKeyring, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(18).string(message.keyringAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeactivateKeyring {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeactivateKeyring();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeactivateKeyring {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
    };
  },

  toJSON(message: MsgDeactivateKeyring): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeactivateKeyring>, I>>(base?: I): MsgDeactivateKeyring {
    return MsgDeactivateKeyring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeactivateKeyring>, I>>(object: I): MsgDeactivateKeyring {
    const message = createBaseMsgDeactivateKeyring();
    message.creator = object.creator ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    return message;
  },
};

function createBaseMsgDeactivateKeyringResponse(): MsgDeactivateKeyringResponse {
  return {};
}

export const MsgDeactivateKeyringResponse: MessageFns<MsgDeactivateKeyringResponse> = {
  encode(_: MsgDeactivateKeyringResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeactivateKeyringResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeactivateKeyringResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeactivateKeyringResponse {
    return {};
  },

  toJSON(_: MsgDeactivateKeyringResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeactivateKeyringResponse>, I>>(base?: I): MsgDeactivateKeyringResponse {
    return MsgDeactivateKeyringResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeactivateKeyringResponse>, I>>(_: I): MsgDeactivateKeyringResponse {
    const message = createBaseMsgDeactivateKeyringResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines the operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** NewWorkspace defines an operation for creating a new workspace */
  NewWorkspace(request: MsgNewWorkspace): Promise<MsgNewWorkspaceResponse>;
  /** AddWorkspaceOwner defines an operation for adding a workspace owner */
  AddWorkspaceOwner(request: MsgAddWorkspaceOwner): Promise<MsgAddWorkspaceOwnerResponse>;
  /** AppendChildWorkspace defines an operation for appending a child workspace */
  AppendChildWorkspace(request: MsgAppendChildWorkspace): Promise<MsgAppendChildWorkspaceResponse>;
  /** NewChildWorkspace defines an operation for creating a new child workspace */
  NewChildWorkspace(request: MsgNewChildWorkspace): Promise<MsgNewChildWorkspaceResponse>;
  /** RemoveWorkspaceOwner defines an operation for removing a workspace owner */
  RemoveWorkspaceOwner(request: MsgRemoveWorkspaceOwner): Promise<MsgRemoveWorkspaceOwnerResponse>;
  /** // NewKeyring defines an operation for creating a keyring */
  NewKeyring(request: MsgNewKeyring): Promise<MsgNewKeyringResponse>;
  /** AddKeyringParty defines an operation for adding a party to a keyring */
  AddKeyringParty(request: MsgAddKeyringParty): Promise<MsgAddKeyringPartyResponse>;
  /** UpdateKeyring defines an operation to update the keyring attributes */
  UpdateKeyring(request: MsgUpdateKeyring): Promise<MsgUpdateKeyringResponse>;
  /** RemoveKeyringParty defines an operation to remove a party from a keyring */
  RemoveKeyringParty(request: MsgRemoveKeyringParty): Promise<MsgRemoveKeyringPartyResponse>;
  /** AddKeyringAdmin defines an operation to add an admin to a keyring */
  AddKeyringAdmin(request: MsgAddKeyringAdmin): Promise<MsgAddKeyringAdminResponse>;
  /** RemoveKeyringAdmin defines an operation to remove an admin from a keyring */
  RemoveKeyringAdmin(request: MsgRemoveKeyringAdmin): Promise<MsgRemoveKeyringAdminResponse>;
  /** Update a workspace, e.g. changing the policies in use. */
  UpdateWorkspace(request: MsgUpdateWorkspace): Promise<MsgUpdateWorkspaceResponse>;
  /** Deactivate a keyring */
  DeactivateKeyring(request: MsgDeactivateKeyring): Promise<MsgDeactivateKeyringResponse>;
}

export const MsgServiceName = "zrchain.identity.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.NewWorkspace = this.NewWorkspace.bind(this);
    this.AddWorkspaceOwner = this.AddWorkspaceOwner.bind(this);
    this.AppendChildWorkspace = this.AppendChildWorkspace.bind(this);
    this.NewChildWorkspace = this.NewChildWorkspace.bind(this);
    this.RemoveWorkspaceOwner = this.RemoveWorkspaceOwner.bind(this);
    this.NewKeyring = this.NewKeyring.bind(this);
    this.AddKeyringParty = this.AddKeyringParty.bind(this);
    this.UpdateKeyring = this.UpdateKeyring.bind(this);
    this.RemoveKeyringParty = this.RemoveKeyringParty.bind(this);
    this.AddKeyringAdmin = this.AddKeyringAdmin.bind(this);
    this.RemoveKeyringAdmin = this.RemoveKeyringAdmin.bind(this);
    this.UpdateWorkspace = this.UpdateWorkspace.bind(this);
    this.DeactivateKeyring = this.DeactivateKeyring.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  NewWorkspace(request: MsgNewWorkspace): Promise<MsgNewWorkspaceResponse> {
    const data = MsgNewWorkspace.encode(request).finish();
    const promise = this.rpc.request(this.service, "NewWorkspace", data);
    return promise.then((data) => MsgNewWorkspaceResponse.decode(new BinaryReader(data)));
  }

  AddWorkspaceOwner(request: MsgAddWorkspaceOwner): Promise<MsgAddWorkspaceOwnerResponse> {
    const data = MsgAddWorkspaceOwner.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddWorkspaceOwner", data);
    return promise.then((data) => MsgAddWorkspaceOwnerResponse.decode(new BinaryReader(data)));
  }

  AppendChildWorkspace(request: MsgAppendChildWorkspace): Promise<MsgAppendChildWorkspaceResponse> {
    const data = MsgAppendChildWorkspace.encode(request).finish();
    const promise = this.rpc.request(this.service, "AppendChildWorkspace", data);
    return promise.then((data) => MsgAppendChildWorkspaceResponse.decode(new BinaryReader(data)));
  }

  NewChildWorkspace(request: MsgNewChildWorkspace): Promise<MsgNewChildWorkspaceResponse> {
    const data = MsgNewChildWorkspace.encode(request).finish();
    const promise = this.rpc.request(this.service, "NewChildWorkspace", data);
    return promise.then((data) => MsgNewChildWorkspaceResponse.decode(new BinaryReader(data)));
  }

  RemoveWorkspaceOwner(request: MsgRemoveWorkspaceOwner): Promise<MsgRemoveWorkspaceOwnerResponse> {
    const data = MsgRemoveWorkspaceOwner.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveWorkspaceOwner", data);
    return promise.then((data) => MsgRemoveWorkspaceOwnerResponse.decode(new BinaryReader(data)));
  }

  NewKeyring(request: MsgNewKeyring): Promise<MsgNewKeyringResponse> {
    const data = MsgNewKeyring.encode(request).finish();
    const promise = this.rpc.request(this.service, "NewKeyring", data);
    return promise.then((data) => MsgNewKeyringResponse.decode(new BinaryReader(data)));
  }

  AddKeyringParty(request: MsgAddKeyringParty): Promise<MsgAddKeyringPartyResponse> {
    const data = MsgAddKeyringParty.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddKeyringParty", data);
    return promise.then((data) => MsgAddKeyringPartyResponse.decode(new BinaryReader(data)));
  }

  UpdateKeyring(request: MsgUpdateKeyring): Promise<MsgUpdateKeyringResponse> {
    const data = MsgUpdateKeyring.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateKeyring", data);
    return promise.then((data) => MsgUpdateKeyringResponse.decode(new BinaryReader(data)));
  }

  RemoveKeyringParty(request: MsgRemoveKeyringParty): Promise<MsgRemoveKeyringPartyResponse> {
    const data = MsgRemoveKeyringParty.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveKeyringParty", data);
    return promise.then((data) => MsgRemoveKeyringPartyResponse.decode(new BinaryReader(data)));
  }

  AddKeyringAdmin(request: MsgAddKeyringAdmin): Promise<MsgAddKeyringAdminResponse> {
    const data = MsgAddKeyringAdmin.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddKeyringAdmin", data);
    return promise.then((data) => MsgAddKeyringAdminResponse.decode(new BinaryReader(data)));
  }

  RemoveKeyringAdmin(request: MsgRemoveKeyringAdmin): Promise<MsgRemoveKeyringAdminResponse> {
    const data = MsgRemoveKeyringAdmin.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveKeyringAdmin", data);
    return promise.then((data) => MsgRemoveKeyringAdminResponse.decode(new BinaryReader(data)));
  }

  UpdateWorkspace(request: MsgUpdateWorkspace): Promise<MsgUpdateWorkspaceResponse> {
    const data = MsgUpdateWorkspace.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateWorkspace", data);
    return promise.then((data) => MsgUpdateWorkspaceResponse.decode(new BinaryReader(data)));
  }

  DeactivateKeyring(request: MsgDeactivateKeyring): Promise<MsgDeactivateKeyringResponse> {
    const data = MsgDeactivateKeyring.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeactivateKeyring", data);
    return promise.then((data) => MsgDeactivateKeyringResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
