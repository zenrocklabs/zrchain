// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/identity/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Keyring } from "./keyring";
import { Params } from "./params";
import { Workspace } from "./workspace";

export const protobufPackage = "zrchain.identity";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/**
 * QueryWorkspacesRequest is request type for the Query/WorkspacesRequest RPC
 * Method
 */
export interface QueryWorkspacesRequest {
  pagination: PageRequest | undefined;
  owner: string;
  creator: string;
}

/**
 * QueryWorkspacesResponse is response type for the Query/WorkspacesRequest RPC
 * method
 */
export interface QueryWorkspacesResponse {
  workspaces: Workspace[];
  pagination: PageResponse | undefined;
}

/**
 * QueryWorkspaceByAddressRequest is request type for the
 * Query/WorkspaceByAddressRequest RPC method
 */
export interface QueryWorkspaceByAddressRequest {
  workspaceAddr: string;
}

/**
 * QueryWorkspaceByAddressResponse is the response type for
 * Query/WorkspaceByAddressResponse RPC method
 */
export interface QueryWorkspaceByAddressResponse {
  workspace: Workspace | undefined;
}

/**
 * QueryKeyringsRequest is request type for the
 * Query/KeyringsRequest RPC method
 */
export interface QueryKeyringsRequest {
  pagination: PageRequest | undefined;
}

/**
 * QueryKeyringsResponse is the response type for
 * Query/KeyringsResponse RPC method
 */
export interface QueryKeyringsResponse {
  keyrings: Keyring[];
  pagination: PageResponse | undefined;
}

/**
 * QueryKeyringByAddressRequest is request type for the
 * Query/KeyringByAddressRequest RPC method
 */
export interface QueryKeyringByAddressRequest {
  keyringAddr: string;
}

/**
 * QueryKeyringByAddressResponse is the response type for
 * Query/KeyringByAddressResponse RPC method
 */
export interface QueryKeyringByAddressResponse {
  keyring: Keyring | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryWorkspacesRequest(): QueryWorkspacesRequest {
  return { pagination: undefined, owner: "", creator: "" };
}

export const QueryWorkspacesRequest: MessageFns<QueryWorkspacesRequest> = {
  encode(message: QueryWorkspacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.creator !== "") {
      writer.uint32(26).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkspacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkspacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkspacesRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: QueryWorkspacesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWorkspacesRequest>, I>>(base?: I): QueryWorkspacesRequest {
    return QueryWorkspacesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWorkspacesRequest>, I>>(object: I): QueryWorkspacesRequest {
    const message = createBaseQueryWorkspacesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.owner = object.owner ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseQueryWorkspacesResponse(): QueryWorkspacesResponse {
  return { workspaces: [], pagination: undefined };
}

export const QueryWorkspacesResponse: MessageFns<QueryWorkspacesResponse> = {
  encode(message: QueryWorkspacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workspaces) {
      Workspace.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkspacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkspacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspaces.push(Workspace.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkspacesResponse {
    return {
      workspaces: globalThis.Array.isArray(object?.workspaces)
        ? object.workspaces.map((e: any) => Workspace.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryWorkspacesResponse): unknown {
    const obj: any = {};
    if (message.workspaces?.length) {
      obj.workspaces = message.workspaces.map((e) => Workspace.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWorkspacesResponse>, I>>(base?: I): QueryWorkspacesResponse {
    return QueryWorkspacesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWorkspacesResponse>, I>>(object: I): QueryWorkspacesResponse {
    const message = createBaseQueryWorkspacesResponse();
    message.workspaces = object.workspaces?.map((e) => Workspace.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryWorkspaceByAddressRequest(): QueryWorkspaceByAddressRequest {
  return { workspaceAddr: "" };
}

export const QueryWorkspaceByAddressRequest: MessageFns<QueryWorkspaceByAddressRequest> = {
  encode(message: QueryWorkspaceByAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspaceAddr !== "") {
      writer.uint32(10).string(message.workspaceAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkspaceByAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkspaceByAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkspaceByAddressRequest {
    return { workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "" };
  },

  toJSON(message: QueryWorkspaceByAddressRequest): unknown {
    const obj: any = {};
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWorkspaceByAddressRequest>, I>>(base?: I): QueryWorkspaceByAddressRequest {
    return QueryWorkspaceByAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWorkspaceByAddressRequest>, I>>(
    object: I,
  ): QueryWorkspaceByAddressRequest {
    const message = createBaseQueryWorkspaceByAddressRequest();
    message.workspaceAddr = object.workspaceAddr ?? "";
    return message;
  },
};

function createBaseQueryWorkspaceByAddressResponse(): QueryWorkspaceByAddressResponse {
  return { workspace: undefined };
}

export const QueryWorkspaceByAddressResponse: MessageFns<QueryWorkspaceByAddressResponse> = {
  encode(message: QueryWorkspaceByAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspace !== undefined) {
      Workspace.encode(message.workspace, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWorkspaceByAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWorkspaceByAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspace = Workspace.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWorkspaceByAddressResponse {
    return { workspace: isSet(object.workspace) ? Workspace.fromJSON(object.workspace) : undefined };
  },

  toJSON(message: QueryWorkspaceByAddressResponse): unknown {
    const obj: any = {};
    if (message.workspace !== undefined) {
      obj.workspace = Workspace.toJSON(message.workspace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryWorkspaceByAddressResponse>, I>>(base?: I): QueryWorkspaceByAddressResponse {
    return QueryWorkspaceByAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryWorkspaceByAddressResponse>, I>>(
    object: I,
  ): QueryWorkspaceByAddressResponse {
    const message = createBaseQueryWorkspaceByAddressResponse();
    message.workspace = (object.workspace !== undefined && object.workspace !== null)
      ? Workspace.fromPartial(object.workspace)
      : undefined;
    return message;
  },
};

function createBaseQueryKeyringsRequest(): QueryKeyringsRequest {
  return { pagination: undefined };
}

export const QueryKeyringsRequest: MessageFns<QueryKeyringsRequest> = {
  encode(message: QueryKeyringsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryKeyringsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeyringsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeyringsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryKeyringsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeyringsRequest>, I>>(base?: I): QueryKeyringsRequest {
    return QueryKeyringsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeyringsRequest>, I>>(object: I): QueryKeyringsRequest {
    const message = createBaseQueryKeyringsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryKeyringsResponse(): QueryKeyringsResponse {
  return { keyrings: [], pagination: undefined };
}

export const QueryKeyringsResponse: MessageFns<QueryKeyringsResponse> = {
  encode(message: QueryKeyringsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keyrings) {
      Keyring.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryKeyringsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeyringsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyrings.push(Keyring.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeyringsResponse {
    return {
      keyrings: globalThis.Array.isArray(object?.keyrings) ? object.keyrings.map((e: any) => Keyring.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryKeyringsResponse): unknown {
    const obj: any = {};
    if (message.keyrings?.length) {
      obj.keyrings = message.keyrings.map((e) => Keyring.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeyringsResponse>, I>>(base?: I): QueryKeyringsResponse {
    return QueryKeyringsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeyringsResponse>, I>>(object: I): QueryKeyringsResponse {
    const message = createBaseQueryKeyringsResponse();
    message.keyrings = object.keyrings?.map((e) => Keyring.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryKeyringByAddressRequest(): QueryKeyringByAddressRequest {
  return { keyringAddr: "" };
}

export const QueryKeyringByAddressRequest: MessageFns<QueryKeyringByAddressRequest> = {
  encode(message: QueryKeyringByAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyringAddr !== "") {
      writer.uint32(10).string(message.keyringAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryKeyringByAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeyringByAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeyringByAddressRequest {
    return { keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "" };
  },

  toJSON(message: QueryKeyringByAddressRequest): unknown {
    const obj: any = {};
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeyringByAddressRequest>, I>>(base?: I): QueryKeyringByAddressRequest {
    return QueryKeyringByAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeyringByAddressRequest>, I>>(object: I): QueryKeyringByAddressRequest {
    const message = createBaseQueryKeyringByAddressRequest();
    message.keyringAddr = object.keyringAddr ?? "";
    return message;
  },
};

function createBaseQueryKeyringByAddressResponse(): QueryKeyringByAddressResponse {
  return { keyring: undefined };
}

export const QueryKeyringByAddressResponse: MessageFns<QueryKeyringByAddressResponse> = {
  encode(message: QueryKeyringByAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyring !== undefined) {
      Keyring.encode(message.keyring, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryKeyringByAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeyringByAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyring = Keyring.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeyringByAddressResponse {
    return { keyring: isSet(object.keyring) ? Keyring.fromJSON(object.keyring) : undefined };
  },

  toJSON(message: QueryKeyringByAddressResponse): unknown {
    const obj: any = {};
    if (message.keyring !== undefined) {
      obj.keyring = Keyring.toJSON(message.keyring);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeyringByAddressResponse>, I>>(base?: I): QueryKeyringByAddressResponse {
    return QueryKeyringByAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeyringByAddressResponse>, I>>(
    object: I,
  ): QueryKeyringByAddressResponse {
    const message = createBaseQueryKeyringByAddressResponse();
    message.keyring = (object.keyring !== undefined && object.keyring !== null)
      ? Keyring.fromPartial(object.keyring)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Workspaces items. */
  Workspaces(request: QueryWorkspacesRequest): Promise<QueryWorkspacesResponse>;
  /** Queries a list of WorkspaceByAddress items. */
  WorkspaceByAddress(request: QueryWorkspaceByAddressRequest): Promise<QueryWorkspaceByAddressResponse>;
  /** Queries a list of Keyrings items. */
  Keyrings(request: QueryKeyringsRequest): Promise<QueryKeyringsResponse>;
  /** Queries a list of KeyringByAddress items. */
  KeyringByAddress(request: QueryKeyringByAddressRequest): Promise<QueryKeyringByAddressResponse>;
}

export const QueryServiceName = "zrchain.identity.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Workspaces = this.Workspaces.bind(this);
    this.WorkspaceByAddress = this.WorkspaceByAddress.bind(this);
    this.Keyrings = this.Keyrings.bind(this);
    this.KeyringByAddress = this.KeyringByAddress.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Workspaces(request: QueryWorkspacesRequest): Promise<QueryWorkspacesResponse> {
    const data = QueryWorkspacesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Workspaces", data);
    return promise.then((data) => QueryWorkspacesResponse.decode(new BinaryReader(data)));
  }

  WorkspaceByAddress(request: QueryWorkspaceByAddressRequest): Promise<QueryWorkspaceByAddressResponse> {
    const data = QueryWorkspaceByAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "WorkspaceByAddress", data);
    return promise.then((data) => QueryWorkspaceByAddressResponse.decode(new BinaryReader(data)));
  }

  Keyrings(request: QueryKeyringsRequest): Promise<QueryKeyringsResponse> {
    const data = QueryKeyringsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Keyrings", data);
    return promise.then((data) => QueryKeyringsResponse.decode(new BinaryReader(data)));
  }

  KeyringByAddress(request: QueryKeyringByAddressRequest): Promise<QueryKeyringByAddressResponse> {
    const data = QueryKeyringByAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "KeyringByAddress", data);
    return promise.then((data) => QueryKeyringByAddressResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
