// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryParamsRequest } from "./types/zrchain/identity/query";
import { QueryWorkspaceByAddressResponse } from "./types/zrchain/identity/query";
import { MsgAddKeyringParty } from "./types/zrchain/identity/tx";
import { MsgAddKeyringPartyResponse } from "./types/zrchain/identity/tx";
import { MsgRemoveKeyringPartyResponse } from "./types/zrchain/identity/tx";
import { MsgRemoveKeyringAdmin } from "./types/zrchain/identity/tx";
import { MsgUpdateWorkspaceResponse } from "./types/zrchain/identity/tx";
import { MsgDeactivateKeyringResponse } from "./types/zrchain/identity/tx";
import { GenesisState } from "./types/zrchain/identity/genesis";
import { QueryKeyringByAddressRequest } from "./types/zrchain/identity/query";
import { Workspace } from "./types/zrchain/identity/workspace";
import { NoData } from "./types/zrchain/identity/packet";
import { MsgNewChildWorkspaceResponse } from "./types/zrchain/identity/tx";
import { MsgNewKeyring } from "./types/zrchain/identity/tx";
import { MsgUpdateKeyringResponse } from "./types/zrchain/identity/tx";
import { QueryWorkspacesResponse } from "./types/zrchain/identity/query";
import { MsgDeactivateKeyring } from "./types/zrchain/identity/tx";
import { MsgNewChildWorkspace } from "./types/zrchain/identity/tx";
import { MsgRemoveWorkspaceOwnerResponse } from "./types/zrchain/identity/tx";
import { Keyring } from "./types/zrchain/identity/keyring";
import { MsgAddWorkspaceOwnerResponse } from "./types/zrchain/identity/tx";
import { MsgNewKeyringResponse } from "./types/zrchain/identity/tx";
import { Params } from "./types/zrchain/identity/params";
import { MsgAddWorkspaceOwner } from "./types/zrchain/identity/tx";
import { MsgNewWorkspaceResponse } from "./types/zrchain/identity/tx";
import { MsgAppendChildWorkspace } from "./types/zrchain/identity/tx";
import { MsgNewWorkspace } from "./types/zrchain/identity/tx";
import { MsgAppendChildWorkspaceResponse } from "./types/zrchain/identity/tx";
import { MsgUpdateKeyring } from "./types/zrchain/identity/tx";
import { MsgAddKeyringAdmin } from "./types/zrchain/identity/tx";
import { MsgRemoveKeyringAdminResponse } from "./types/zrchain/identity/tx";
import { MsgRemoveWorkspaceOwner } from "./types/zrchain/identity/tx";
import { QueryWorkspacesRequest } from "./types/zrchain/identity/query";
import { QueryWorkspaceByAddressRequest } from "./types/zrchain/identity/query";
import { MsgUpdateParamsResponse } from "./types/zrchain/identity/tx";
import { MsgAddKeyringAdminResponse } from "./types/zrchain/identity/tx";
import { QueryParamsResponse } from "./types/zrchain/identity/query";
import { QueryKeyringsRequest } from "./types/zrchain/identity/query";
import { QueryKeyringsResponse } from "./types/zrchain/identity/query";
import { QueryKeyringByAddressResponse } from "./types/zrchain/identity/query";
import { MsgUpdateWorkspace } from "./types/zrchain/identity/tx";
import { MsgRemoveKeyringParty } from "./types/zrchain/identity/tx";
import { IdentityPacketData } from "./types/zrchain/identity/packet";
import { MsgUpdateParams } from "./types/zrchain/identity/tx";

import { Keyring as typeKeyring} from "./types"
import { IdentityPacketData as typeIdentityPacketData} from "./types"
import { NoData as typeNoData} from "./types"
import { Params as typeParams} from "./types"
import { Workspace as typeWorkspace} from "./types"

export { QueryParamsRequest, QueryWorkspaceByAddressResponse, MsgAddKeyringParty, MsgAddKeyringPartyResponse, MsgRemoveKeyringPartyResponse, MsgRemoveKeyringAdmin, MsgUpdateWorkspaceResponse, MsgDeactivateKeyringResponse, GenesisState, QueryKeyringByAddressRequest, Workspace, NoData, MsgNewChildWorkspaceResponse, MsgNewKeyring, MsgUpdateKeyringResponse, QueryWorkspacesResponse, MsgDeactivateKeyring, MsgNewChildWorkspace, MsgRemoveWorkspaceOwnerResponse, Keyring, MsgAddWorkspaceOwnerResponse, MsgNewKeyringResponse, Params, MsgAddWorkspaceOwner, MsgNewWorkspaceResponse, MsgAppendChildWorkspace, MsgNewWorkspace, MsgAppendChildWorkspaceResponse, MsgUpdateKeyring, MsgAddKeyringAdmin, MsgRemoveKeyringAdminResponse, MsgRemoveWorkspaceOwner, QueryWorkspacesRequest, QueryWorkspaceByAddressRequest, MsgUpdateParamsResponse, MsgAddKeyringAdminResponse, QueryParamsResponse, QueryKeyringsRequest, QueryKeyringsResponse, QueryKeyringByAddressResponse, MsgUpdateWorkspace, MsgRemoveKeyringParty, IdentityPacketData, MsgUpdateParams };

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryWorkspaceByAddressResponseParams = {
  value: QueryWorkspaceByAddressResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddKeyringPartyParams = {
  value: MsgAddKeyringParty,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddKeyringPartyResponseParams = {
  value: MsgAddKeyringPartyResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveKeyringPartyResponseParams = {
  value: MsgRemoveKeyringPartyResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveKeyringAdminParams = {
  value: MsgRemoveKeyringAdmin,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateWorkspaceResponseParams = {
  value: MsgUpdateWorkspaceResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeactivateKeyringResponseParams = {
  value: MsgDeactivateKeyringResponse,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryKeyringByAddressRequestParams = {
  value: QueryKeyringByAddressRequest,
  fee?: StdFee,
  memo?: string
};

type sendWorkspaceParams = {
  value: Workspace,
  fee?: StdFee,
  memo?: string
};

type sendNoDataParams = {
  value: NoData,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewChildWorkspaceResponseParams = {
  value: MsgNewChildWorkspaceResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewKeyringParams = {
  value: MsgNewKeyring,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateKeyringResponseParams = {
  value: MsgUpdateKeyringResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryWorkspacesResponseParams = {
  value: QueryWorkspacesResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeactivateKeyringParams = {
  value: MsgDeactivateKeyring,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewChildWorkspaceParams = {
  value: MsgNewChildWorkspace,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveWorkspaceOwnerResponseParams = {
  value: MsgRemoveWorkspaceOwnerResponse,
  fee?: StdFee,
  memo?: string
};

type sendKeyringParams = {
  value: Keyring,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddWorkspaceOwnerResponseParams = {
  value: MsgAddWorkspaceOwnerResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewKeyringResponseParams = {
  value: MsgNewKeyringResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddWorkspaceOwnerParams = {
  value: MsgAddWorkspaceOwner,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewWorkspaceResponseParams = {
  value: MsgNewWorkspaceResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgAppendChildWorkspaceParams = {
  value: MsgAppendChildWorkspace,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewWorkspaceParams = {
  value: MsgNewWorkspace,
  fee?: StdFee,
  memo?: string
};

type sendMsgAppendChildWorkspaceResponseParams = {
  value: MsgAppendChildWorkspaceResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateKeyringParams = {
  value: MsgUpdateKeyring,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddKeyringAdminParams = {
  value: MsgAddKeyringAdmin,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveKeyringAdminResponseParams = {
  value: MsgRemoveKeyringAdminResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveWorkspaceOwnerParams = {
  value: MsgRemoveWorkspaceOwner,
  fee?: StdFee,
  memo?: string
};

type sendQueryWorkspacesRequestParams = {
  value: QueryWorkspacesRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryWorkspaceByAddressRequestParams = {
  value: QueryWorkspaceByAddressRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddKeyringAdminResponseParams = {
  value: MsgAddKeyringAdminResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryKeyringsRequestParams = {
  value: QueryKeyringsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryKeyringsResponseParams = {
  value: QueryKeyringsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryKeyringByAddressResponseParams = {
  value: QueryKeyringByAddressResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateWorkspaceParams = {
  value: MsgUpdateWorkspace,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveKeyringPartyParams = {
  value: MsgRemoveKeyringParty,
  fee?: StdFee,
  memo?: string
};

type sendIdentityPacketDataParams = {
  value: IdentityPacketData,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};


type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryWorkspaceByAddressResponseParams = {
  value: QueryWorkspaceByAddressResponse,
};

type msgAddKeyringPartyParams = {
  value: MsgAddKeyringParty,
};

type msgAddKeyringPartyResponseParams = {
  value: MsgAddKeyringPartyResponse,
};

type msgRemoveKeyringPartyResponseParams = {
  value: MsgRemoveKeyringPartyResponse,
};

type msgRemoveKeyringAdminParams = {
  value: MsgRemoveKeyringAdmin,
};

type msgUpdateWorkspaceResponseParams = {
  value: MsgUpdateWorkspaceResponse,
};

type msgDeactivateKeyringResponseParams = {
  value: MsgDeactivateKeyringResponse,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryKeyringByAddressRequestParams = {
  value: QueryKeyringByAddressRequest,
};

type workspaceParams = {
  value: Workspace,
};

type noDataParams = {
  value: NoData,
};

type msgNewChildWorkspaceResponseParams = {
  value: MsgNewChildWorkspaceResponse,
};

type msgNewKeyringParams = {
  value: MsgNewKeyring,
};

type msgUpdateKeyringResponseParams = {
  value: MsgUpdateKeyringResponse,
};

type queryWorkspacesResponseParams = {
  value: QueryWorkspacesResponse,
};

type msgDeactivateKeyringParams = {
  value: MsgDeactivateKeyring,
};

type msgNewChildWorkspaceParams = {
  value: MsgNewChildWorkspace,
};

type msgRemoveWorkspaceOwnerResponseParams = {
  value: MsgRemoveWorkspaceOwnerResponse,
};

type keyringParams = {
  value: Keyring,
};

type msgAddWorkspaceOwnerResponseParams = {
  value: MsgAddWorkspaceOwnerResponse,
};

type msgNewKeyringResponseParams = {
  value: MsgNewKeyringResponse,
};

type paramsParams = {
  value: Params,
};

type msgAddWorkspaceOwnerParams = {
  value: MsgAddWorkspaceOwner,
};

type msgNewWorkspaceResponseParams = {
  value: MsgNewWorkspaceResponse,
};

type msgAppendChildWorkspaceParams = {
  value: MsgAppendChildWorkspace,
};

type msgNewWorkspaceParams = {
  value: MsgNewWorkspace,
};

type msgAppendChildWorkspaceResponseParams = {
  value: MsgAppendChildWorkspaceResponse,
};

type msgUpdateKeyringParams = {
  value: MsgUpdateKeyring,
};

type msgAddKeyringAdminParams = {
  value: MsgAddKeyringAdmin,
};

type msgRemoveKeyringAdminResponseParams = {
  value: MsgRemoveKeyringAdminResponse,
};

type msgRemoveWorkspaceOwnerParams = {
  value: MsgRemoveWorkspaceOwner,
};

type queryWorkspacesRequestParams = {
  value: QueryWorkspacesRequest,
};

type queryWorkspaceByAddressRequestParams = {
  value: QueryWorkspaceByAddressRequest,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgAddKeyringAdminResponseParams = {
  value: MsgAddKeyringAdminResponse,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryKeyringsRequestParams = {
  value: QueryKeyringsRequest,
};

type queryKeyringsResponseParams = {
  value: QueryKeyringsResponse,
};

type queryKeyringByAddressResponseParams = {
  value: QueryKeyringByAddressResponse,
};

type msgUpdateWorkspaceParams = {
  value: MsgUpdateWorkspace,
};

type msgRemoveKeyringPartyParams = {
  value: MsgRemoveKeyringParty,
};

type identityPacketDataParams = {
  value: IdentityPacketData,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryWorkspaceByAddressResponse({ value, fee, memo }: sendQueryWorkspaceByAddressResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryWorkspaceByAddressResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryWorkspaceByAddressResponse({ value: QueryWorkspaceByAddressResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryWorkspaceByAddressResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddKeyringParty({ value, fee, memo }: sendMsgAddKeyringPartyParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddKeyringParty: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddKeyringParty({ value: MsgAddKeyringParty.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddKeyringParty: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddKeyringPartyResponse({ value, fee, memo }: sendMsgAddKeyringPartyResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddKeyringPartyResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddKeyringPartyResponse({ value: MsgAddKeyringPartyResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddKeyringPartyResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveKeyringPartyResponse({ value, fee, memo }: sendMsgRemoveKeyringPartyResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveKeyringPartyResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveKeyringPartyResponse({ value: MsgRemoveKeyringPartyResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveKeyringPartyResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveKeyringAdmin({ value, fee, memo }: sendMsgRemoveKeyringAdminParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveKeyringAdmin: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveKeyringAdmin({ value: MsgRemoveKeyringAdmin.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveKeyringAdmin: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateWorkspaceResponse({ value, fee, memo }: sendMsgUpdateWorkspaceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateWorkspaceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateWorkspaceResponse({ value: MsgUpdateWorkspaceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateWorkspaceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeactivateKeyringResponse({ value, fee, memo }: sendMsgDeactivateKeyringResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeactivateKeyringResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeactivateKeyringResponse({ value: MsgDeactivateKeyringResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeactivateKeyringResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryKeyringByAddressRequest({ value, fee, memo }: sendQueryKeyringByAddressRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryKeyringByAddressRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryKeyringByAddressRequest({ value: QueryKeyringByAddressRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryKeyringByAddressRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendWorkspace({ value, fee, memo }: sendWorkspaceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendWorkspace: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.workspace({ value: Workspace.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendWorkspace: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendNoData({ value, fee, memo }: sendNoDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendNoData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.noData({ value: NoData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendNoData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewChildWorkspaceResponse({ value, fee, memo }: sendMsgNewChildWorkspaceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewChildWorkspaceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgNewChildWorkspaceResponse({ value: MsgNewChildWorkspaceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewChildWorkspaceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewKeyring({ value, fee, memo }: sendMsgNewKeyringParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewKeyring: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgNewKeyring({ value: MsgNewKeyring.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewKeyring: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateKeyringResponse({ value, fee, memo }: sendMsgUpdateKeyringResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateKeyringResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateKeyringResponse({ value: MsgUpdateKeyringResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateKeyringResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryWorkspacesResponse({ value, fee, memo }: sendQueryWorkspacesResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryWorkspacesResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryWorkspacesResponse({ value: QueryWorkspacesResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryWorkspacesResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeactivateKeyring({ value, fee, memo }: sendMsgDeactivateKeyringParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeactivateKeyring: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeactivateKeyring({ value: MsgDeactivateKeyring.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeactivateKeyring: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewChildWorkspace({ value, fee, memo }: sendMsgNewChildWorkspaceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewChildWorkspace: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgNewChildWorkspace({ value: MsgNewChildWorkspace.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewChildWorkspace: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveWorkspaceOwnerResponse({ value, fee, memo }: sendMsgRemoveWorkspaceOwnerResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveWorkspaceOwnerResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveWorkspaceOwnerResponse({ value: MsgRemoveWorkspaceOwnerResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveWorkspaceOwnerResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendKeyring({ value, fee, memo }: sendKeyringParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendKeyring: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.keyring({ value: Keyring.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendKeyring: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddWorkspaceOwnerResponse({ value, fee, memo }: sendMsgAddWorkspaceOwnerResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddWorkspaceOwnerResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddWorkspaceOwnerResponse({ value: MsgAddWorkspaceOwnerResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddWorkspaceOwnerResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewKeyringResponse({ value, fee, memo }: sendMsgNewKeyringResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewKeyringResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgNewKeyringResponse({ value: MsgNewKeyringResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewKeyringResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddWorkspaceOwner({ value, fee, memo }: sendMsgAddWorkspaceOwnerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddWorkspaceOwner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddWorkspaceOwner({ value: MsgAddWorkspaceOwner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddWorkspaceOwner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewWorkspaceResponse({ value, fee, memo }: sendMsgNewWorkspaceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewWorkspaceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgNewWorkspaceResponse({ value: MsgNewWorkspaceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewWorkspaceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAppendChildWorkspace({ value, fee, memo }: sendMsgAppendChildWorkspaceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAppendChildWorkspace: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAppendChildWorkspace({ value: MsgAppendChildWorkspace.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAppendChildWorkspace: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewWorkspace({ value, fee, memo }: sendMsgNewWorkspaceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewWorkspace: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgNewWorkspace({ value: MsgNewWorkspace.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewWorkspace: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAppendChildWorkspaceResponse({ value, fee, memo }: sendMsgAppendChildWorkspaceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAppendChildWorkspaceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAppendChildWorkspaceResponse({ value: MsgAppendChildWorkspaceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAppendChildWorkspaceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateKeyring({ value, fee, memo }: sendMsgUpdateKeyringParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateKeyring: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateKeyring({ value: MsgUpdateKeyring.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateKeyring: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddKeyringAdmin({ value, fee, memo }: sendMsgAddKeyringAdminParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddKeyringAdmin: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddKeyringAdmin({ value: MsgAddKeyringAdmin.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddKeyringAdmin: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveKeyringAdminResponse({ value, fee, memo }: sendMsgRemoveKeyringAdminResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveKeyringAdminResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveKeyringAdminResponse({ value: MsgRemoveKeyringAdminResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveKeyringAdminResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveWorkspaceOwner({ value, fee, memo }: sendMsgRemoveWorkspaceOwnerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveWorkspaceOwner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveWorkspaceOwner({ value: MsgRemoveWorkspaceOwner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveWorkspaceOwner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryWorkspacesRequest({ value, fee, memo }: sendQueryWorkspacesRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryWorkspacesRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryWorkspacesRequest({ value: QueryWorkspacesRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryWorkspacesRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryWorkspaceByAddressRequest({ value, fee, memo }: sendQueryWorkspaceByAddressRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryWorkspaceByAddressRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryWorkspaceByAddressRequest({ value: QueryWorkspaceByAddressRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryWorkspaceByAddressRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddKeyringAdminResponse({ value, fee, memo }: sendMsgAddKeyringAdminResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddKeyringAdminResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddKeyringAdminResponse({ value: MsgAddKeyringAdminResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddKeyringAdminResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryKeyringsRequest({ value, fee, memo }: sendQueryKeyringsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryKeyringsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryKeyringsRequest({ value: QueryKeyringsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryKeyringsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryKeyringsResponse({ value, fee, memo }: sendQueryKeyringsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryKeyringsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryKeyringsResponse({ value: QueryKeyringsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryKeyringsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryKeyringByAddressResponse({ value, fee, memo }: sendQueryKeyringByAddressResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryKeyringByAddressResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryKeyringByAddressResponse({ value: QueryKeyringByAddressResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryKeyringByAddressResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateWorkspace({ value, fee, memo }: sendMsgUpdateWorkspaceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateWorkspace: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateWorkspace({ value: MsgUpdateWorkspace.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateWorkspace: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveKeyringParty({ value, fee, memo }: sendMsgRemoveKeyringPartyParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveKeyringParty: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveKeyringParty({ value: MsgRemoveKeyringParty.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveKeyringParty: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendIdentityPacketData({ value, fee, memo }: sendIdentityPacketDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendIdentityPacketData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.identityPacketData({ value: IdentityPacketData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendIdentityPacketData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryWorkspaceByAddressResponse({ value }: queryWorkspaceByAddressResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryWorkspaceByAddressResponse", value: QueryWorkspaceByAddressResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryWorkspaceByAddressResponse: Could not create message: ' + e.message)
			}
		},
		
		msgAddKeyringParty({ value }: msgAddKeyringPartyParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAddKeyringParty", value: MsgAddKeyringParty.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddKeyringParty: Could not create message: ' + e.message)
			}
		},
		
		msgAddKeyringPartyResponse({ value }: msgAddKeyringPartyResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAddKeyringPartyResponse", value: MsgAddKeyringPartyResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddKeyringPartyResponse: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveKeyringPartyResponse({ value }: msgRemoveKeyringPartyResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgRemoveKeyringPartyResponse", value: MsgRemoveKeyringPartyResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveKeyringPartyResponse: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveKeyringAdmin({ value }: msgRemoveKeyringAdminParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgRemoveKeyringAdmin", value: MsgRemoveKeyringAdmin.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveKeyringAdmin: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateWorkspaceResponse({ value }: msgUpdateWorkspaceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgUpdateWorkspaceResponse", value: MsgUpdateWorkspaceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateWorkspaceResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeactivateKeyringResponse({ value }: msgDeactivateKeyringResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgDeactivateKeyringResponse", value: MsgDeactivateKeyringResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeactivateKeyringResponse: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryKeyringByAddressRequest({ value }: queryKeyringByAddressRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryKeyringByAddressRequest", value: QueryKeyringByAddressRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryKeyringByAddressRequest: Could not create message: ' + e.message)
			}
		},
		
		workspace({ value }: workspaceParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.Workspace", value: Workspace.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Workspace: Could not create message: ' + e.message)
			}
		},
		
		noData({ value }: noDataParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.NoData", value: NoData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:NoData: Could not create message: ' + e.message)
			}
		},
		
		msgNewChildWorkspaceResponse({ value }: msgNewChildWorkspaceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgNewChildWorkspaceResponse", value: MsgNewChildWorkspaceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewChildWorkspaceResponse: Could not create message: ' + e.message)
			}
		},
		
		msgNewKeyring({ value }: msgNewKeyringParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgNewKeyring", value: MsgNewKeyring.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewKeyring: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateKeyringResponse({ value }: msgUpdateKeyringResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgUpdateKeyringResponse", value: MsgUpdateKeyringResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateKeyringResponse: Could not create message: ' + e.message)
			}
		},
		
		queryWorkspacesResponse({ value }: queryWorkspacesResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryWorkspacesResponse", value: QueryWorkspacesResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryWorkspacesResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeactivateKeyring({ value }: msgDeactivateKeyringParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgDeactivateKeyring", value: MsgDeactivateKeyring.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeactivateKeyring: Could not create message: ' + e.message)
			}
		},
		
		msgNewChildWorkspace({ value }: msgNewChildWorkspaceParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgNewChildWorkspace", value: MsgNewChildWorkspace.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewChildWorkspace: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveWorkspaceOwnerResponse({ value }: msgRemoveWorkspaceOwnerResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgRemoveWorkspaceOwnerResponse", value: MsgRemoveWorkspaceOwnerResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveWorkspaceOwnerResponse: Could not create message: ' + e.message)
			}
		},
		
		keyring({ value }: keyringParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.Keyring", value: Keyring.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Keyring: Could not create message: ' + e.message)
			}
		},
		
		msgAddWorkspaceOwnerResponse({ value }: msgAddWorkspaceOwnerResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAddWorkspaceOwnerResponse", value: MsgAddWorkspaceOwnerResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddWorkspaceOwnerResponse: Could not create message: ' + e.message)
			}
		},
		
		msgNewKeyringResponse({ value }: msgNewKeyringResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgNewKeyringResponse", value: MsgNewKeyringResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewKeyringResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgAddWorkspaceOwner({ value }: msgAddWorkspaceOwnerParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAddWorkspaceOwner", value: MsgAddWorkspaceOwner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddWorkspaceOwner: Could not create message: ' + e.message)
			}
		},
		
		msgNewWorkspaceResponse({ value }: msgNewWorkspaceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgNewWorkspaceResponse", value: MsgNewWorkspaceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewWorkspaceResponse: Could not create message: ' + e.message)
			}
		},
		
		msgAppendChildWorkspace({ value }: msgAppendChildWorkspaceParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAppendChildWorkspace", value: MsgAppendChildWorkspace.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAppendChildWorkspace: Could not create message: ' + e.message)
			}
		},
		
		msgNewWorkspace({ value }: msgNewWorkspaceParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgNewWorkspace", value: MsgNewWorkspace.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewWorkspace: Could not create message: ' + e.message)
			}
		},
		
		msgAppendChildWorkspaceResponse({ value }: msgAppendChildWorkspaceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAppendChildWorkspaceResponse", value: MsgAppendChildWorkspaceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAppendChildWorkspaceResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateKeyring({ value }: msgUpdateKeyringParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgUpdateKeyring", value: MsgUpdateKeyring.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateKeyring: Could not create message: ' + e.message)
			}
		},
		
		msgAddKeyringAdmin({ value }: msgAddKeyringAdminParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAddKeyringAdmin", value: MsgAddKeyringAdmin.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddKeyringAdmin: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveKeyringAdminResponse({ value }: msgRemoveKeyringAdminResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgRemoveKeyringAdminResponse", value: MsgRemoveKeyringAdminResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveKeyringAdminResponse: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveWorkspaceOwner({ value }: msgRemoveWorkspaceOwnerParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgRemoveWorkspaceOwner", value: MsgRemoveWorkspaceOwner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveWorkspaceOwner: Could not create message: ' + e.message)
			}
		},
		
		queryWorkspacesRequest({ value }: queryWorkspacesRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryWorkspacesRequest", value: QueryWorkspacesRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryWorkspacesRequest: Could not create message: ' + e.message)
			}
		},
		
		queryWorkspaceByAddressRequest({ value }: queryWorkspaceByAddressRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryWorkspaceByAddressRequest", value: QueryWorkspaceByAddressRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryWorkspaceByAddressRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgAddKeyringAdminResponse({ value }: msgAddKeyringAdminResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgAddKeyringAdminResponse", value: MsgAddKeyringAdminResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddKeyringAdminResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryKeyringsRequest({ value }: queryKeyringsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryKeyringsRequest", value: QueryKeyringsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryKeyringsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryKeyringsResponse({ value }: queryKeyringsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryKeyringsResponse", value: QueryKeyringsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryKeyringsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryKeyringByAddressResponse({ value }: queryKeyringByAddressResponseParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.QueryKeyringByAddressResponse", value: QueryKeyringByAddressResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryKeyringByAddressResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateWorkspace({ value }: msgUpdateWorkspaceParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgUpdateWorkspace", value: MsgUpdateWorkspace.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateWorkspace: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveKeyringParty({ value }: msgRemoveKeyringPartyParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgRemoveKeyringParty", value: MsgRemoveKeyringParty.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveKeyringParty: Could not create message: ' + e.message)
			}
		},
		
		identityPacketData({ value }: identityPacketDataParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.IdentityPacketData", value: IdentityPacketData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:IdentityPacketData: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/zrchain.identity.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Keyring: getStructure(typeKeyring.fromPartial({})),
						IdentityPacketData: getStructure(typeIdentityPacketData.fromPartial({})),
						NoData: getStructure(typeNoData.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						Workspace: getStructure(typeWorkspace.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			ZrchainIdentity: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;