// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/sidecar_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api";

export enum Coin {
  UNSPECIFIED = 0,
  ZENBTC = 1,
  ROCK = 2,
  UNRECOGNIZED = -1,
}

export function coinFromJSON(object: any): Coin {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return Coin.UNSPECIFIED;
    case 1:
    case "ZENBTC":
      return Coin.ZENBTC;
    case 2:
    case "ROCK":
      return Coin.ROCK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Coin.UNRECOGNIZED;
  }
}

export function coinToJSON(object: Coin): string {
  switch (object) {
    case Coin.UNSPECIFIED:
      return "UNSPECIFIED";
    case Coin.ZENBTC:
      return "ZENBTC";
    case Coin.ROCK:
      return "ROCK";
    case Coin.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LatestBitcoinBlockHeaderRequest {
  ChainName: string;
}

export interface BitcoinBlockHeaderByHeightRequest {
  BlockHeight: number;
  ChainName: string;
}

export interface BitcoinBlockHeaderResponse {
  blockHeader: BTCBlockHeader | undefined;
  BlockHeight: number;
  TipHeight: number;
}

export interface BTCBlockHeader {
  Version: number;
  PrevBlock: string;
  MerkleRoot: string;
  TimeStamp: number;
  Bits: number;
  Nonce: number;
  BlockHash: string;
  BlockHeight: number;
}

export interface Redemption {
  id: number;
  destinationAddress: Uint8Array;
  amount: number;
}

export interface BurnEvent {
  txID: string;
  logIndex: number;
  chainID: string;
  destinationAddr: Uint8Array;
  amount: number;
  IsZenBTC: boolean;
  height: number;
}

export interface SidecarStateRequest {
}

export interface SidecarStateResponse {
  EigenDelegations: Uint8Array;
  EthBlockHeight: number;
  EthGasLimit: number;
  EthBaseFee: number;
  EthTipCap: number;
  SolanaLamportsPerSignature: number;
  EthBurnEvents: BurnEvent[];
  Redemptions: Redemption[];
  ROCKUSDPrice: string;
  BTCUSDPrice: string;
  ETHUSDPrice: string;
  SolanaMintEvents: SolanaMintEvent[];
  SolanaBurnEvents: BurnEvent[];
  SidecarVersionName: string;
}

export interface SidecarStateByEthHeightRequest {
  EthBlockHeight: number;
}

export interface LatestEthereumNonceForAccountRequest {
  Address: string;
}

export interface LatestEthereumNonceForAccountResponse {
  Nonce: number;
}

export interface SolanaAccountInfoRequest {
  PubKey: string;
}

export interface SolanaAccountInfoResponse {
  Account: Uint8Array;
}

export interface SolanaMintEvent {
  Coint: Coin;
  SigHash: Uint8Array;
  Recipient: Uint8Array;
  Height: number;
  Value: number;
  Fee: number;
  Mint: Uint8Array;
  TxSig: string;
}

function createBaseLatestBitcoinBlockHeaderRequest(): LatestBitcoinBlockHeaderRequest {
  return { ChainName: "" };
}

export const LatestBitcoinBlockHeaderRequest: MessageFns<LatestBitcoinBlockHeaderRequest> = {
  encode(message: LatestBitcoinBlockHeaderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ChainName !== "") {
      writer.uint32(10).string(message.ChainName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatestBitcoinBlockHeaderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatestBitcoinBlockHeaderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ChainName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatestBitcoinBlockHeaderRequest {
    return { ChainName: isSet(object.ChainName) ? globalThis.String(object.ChainName) : "" };
  },

  toJSON(message: LatestBitcoinBlockHeaderRequest): unknown {
    const obj: any = {};
    if (message.ChainName !== "") {
      obj.ChainName = message.ChainName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatestBitcoinBlockHeaderRequest>, I>>(base?: I): LatestBitcoinBlockHeaderRequest {
    return LatestBitcoinBlockHeaderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatestBitcoinBlockHeaderRequest>, I>>(
    object: I,
  ): LatestBitcoinBlockHeaderRequest {
    const message = createBaseLatestBitcoinBlockHeaderRequest();
    message.ChainName = object.ChainName ?? "";
    return message;
  },
};

function createBaseBitcoinBlockHeaderByHeightRequest(): BitcoinBlockHeaderByHeightRequest {
  return { BlockHeight: 0, ChainName: "" };
}

export const BitcoinBlockHeaderByHeightRequest: MessageFns<BitcoinBlockHeaderByHeightRequest> = {
  encode(message: BitcoinBlockHeaderByHeightRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BlockHeight !== 0) {
      writer.uint32(8).int64(message.BlockHeight);
    }
    if (message.ChainName !== "") {
      writer.uint32(18).string(message.ChainName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BitcoinBlockHeaderByHeightRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBitcoinBlockHeaderByHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.BlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ChainName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BitcoinBlockHeaderByHeightRequest {
    return {
      BlockHeight: isSet(object.BlockHeight) ? globalThis.Number(object.BlockHeight) : 0,
      ChainName: isSet(object.ChainName) ? globalThis.String(object.ChainName) : "",
    };
  },

  toJSON(message: BitcoinBlockHeaderByHeightRequest): unknown {
    const obj: any = {};
    if (message.BlockHeight !== 0) {
      obj.BlockHeight = Math.round(message.BlockHeight);
    }
    if (message.ChainName !== "") {
      obj.ChainName = message.ChainName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BitcoinBlockHeaderByHeightRequest>, I>>(
    base?: I,
  ): BitcoinBlockHeaderByHeightRequest {
    return BitcoinBlockHeaderByHeightRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BitcoinBlockHeaderByHeightRequest>, I>>(
    object: I,
  ): BitcoinBlockHeaderByHeightRequest {
    const message = createBaseBitcoinBlockHeaderByHeightRequest();
    message.BlockHeight = object.BlockHeight ?? 0;
    message.ChainName = object.ChainName ?? "";
    return message;
  },
};

function createBaseBitcoinBlockHeaderResponse(): BitcoinBlockHeaderResponse {
  return { blockHeader: undefined, BlockHeight: 0, TipHeight: 0 };
}

export const BitcoinBlockHeaderResponse: MessageFns<BitcoinBlockHeaderResponse> = {
  encode(message: BitcoinBlockHeaderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeader !== undefined) {
      BTCBlockHeader.encode(message.blockHeader, writer.uint32(10).fork()).join();
    }
    if (message.BlockHeight !== 0) {
      writer.uint32(16).int64(message.BlockHeight);
    }
    if (message.TipHeight !== 0) {
      writer.uint32(24).int64(message.TipHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BitcoinBlockHeaderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBitcoinBlockHeaderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockHeader = BTCBlockHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.BlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.TipHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BitcoinBlockHeaderResponse {
    return {
      blockHeader: isSet(object.blockHeader) ? BTCBlockHeader.fromJSON(object.blockHeader) : undefined,
      BlockHeight: isSet(object.BlockHeight) ? globalThis.Number(object.BlockHeight) : 0,
      TipHeight: isSet(object.TipHeight) ? globalThis.Number(object.TipHeight) : 0,
    };
  },

  toJSON(message: BitcoinBlockHeaderResponse): unknown {
    const obj: any = {};
    if (message.blockHeader !== undefined) {
      obj.blockHeader = BTCBlockHeader.toJSON(message.blockHeader);
    }
    if (message.BlockHeight !== 0) {
      obj.BlockHeight = Math.round(message.BlockHeight);
    }
    if (message.TipHeight !== 0) {
      obj.TipHeight = Math.round(message.TipHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BitcoinBlockHeaderResponse>, I>>(base?: I): BitcoinBlockHeaderResponse {
    return BitcoinBlockHeaderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BitcoinBlockHeaderResponse>, I>>(object: I): BitcoinBlockHeaderResponse {
    const message = createBaseBitcoinBlockHeaderResponse();
    message.blockHeader = (object.blockHeader !== undefined && object.blockHeader !== null)
      ? BTCBlockHeader.fromPartial(object.blockHeader)
      : undefined;
    message.BlockHeight = object.BlockHeight ?? 0;
    message.TipHeight = object.TipHeight ?? 0;
    return message;
  },
};

function createBaseBTCBlockHeader(): BTCBlockHeader {
  return { Version: 0, PrevBlock: "", MerkleRoot: "", TimeStamp: 0, Bits: 0, Nonce: 0, BlockHash: "", BlockHeight: 0 };
}

export const BTCBlockHeader: MessageFns<BTCBlockHeader> = {
  encode(message: BTCBlockHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Version !== 0) {
      writer.uint32(8).int64(message.Version);
    }
    if (message.PrevBlock !== "") {
      writer.uint32(18).string(message.PrevBlock);
    }
    if (message.MerkleRoot !== "") {
      writer.uint32(26).string(message.MerkleRoot);
    }
    if (message.TimeStamp !== 0) {
      writer.uint32(32).int64(message.TimeStamp);
    }
    if (message.Bits !== 0) {
      writer.uint32(40).int64(message.Bits);
    }
    if (message.Nonce !== 0) {
      writer.uint32(48).int64(message.Nonce);
    }
    if (message.BlockHash !== "") {
      writer.uint32(58).string(message.BlockHash);
    }
    if (message.BlockHeight !== 0) {
      writer.uint32(64).int64(message.BlockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCBlockHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCBlockHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Version = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.PrevBlock = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.MerkleRoot = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.TimeStamp = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Bits = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.Nonce = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.BlockHash = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.BlockHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCBlockHeader {
    return {
      Version: isSet(object.Version) ? globalThis.Number(object.Version) : 0,
      PrevBlock: isSet(object.PrevBlock) ? globalThis.String(object.PrevBlock) : "",
      MerkleRoot: isSet(object.MerkleRoot) ? globalThis.String(object.MerkleRoot) : "",
      TimeStamp: isSet(object.TimeStamp) ? globalThis.Number(object.TimeStamp) : 0,
      Bits: isSet(object.Bits) ? globalThis.Number(object.Bits) : 0,
      Nonce: isSet(object.Nonce) ? globalThis.Number(object.Nonce) : 0,
      BlockHash: isSet(object.BlockHash) ? globalThis.String(object.BlockHash) : "",
      BlockHeight: isSet(object.BlockHeight) ? globalThis.Number(object.BlockHeight) : 0,
    };
  },

  toJSON(message: BTCBlockHeader): unknown {
    const obj: any = {};
    if (message.Version !== 0) {
      obj.Version = Math.round(message.Version);
    }
    if (message.PrevBlock !== "") {
      obj.PrevBlock = message.PrevBlock;
    }
    if (message.MerkleRoot !== "") {
      obj.MerkleRoot = message.MerkleRoot;
    }
    if (message.TimeStamp !== 0) {
      obj.TimeStamp = Math.round(message.TimeStamp);
    }
    if (message.Bits !== 0) {
      obj.Bits = Math.round(message.Bits);
    }
    if (message.Nonce !== 0) {
      obj.Nonce = Math.round(message.Nonce);
    }
    if (message.BlockHash !== "") {
      obj.BlockHash = message.BlockHash;
    }
    if (message.BlockHeight !== 0) {
      obj.BlockHeight = Math.round(message.BlockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCBlockHeader>, I>>(base?: I): BTCBlockHeader {
    return BTCBlockHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCBlockHeader>, I>>(object: I): BTCBlockHeader {
    const message = createBaseBTCBlockHeader();
    message.Version = object.Version ?? 0;
    message.PrevBlock = object.PrevBlock ?? "";
    message.MerkleRoot = object.MerkleRoot ?? "";
    message.TimeStamp = object.TimeStamp ?? 0;
    message.Bits = object.Bits ?? 0;
    message.Nonce = object.Nonce ?? 0;
    message.BlockHash = object.BlockHash ?? "";
    message.BlockHeight = object.BlockHeight ?? 0;
    return message;
  },
};

function createBaseRedemption(): Redemption {
  return { id: 0, destinationAddress: new Uint8Array(0), amount: 0 };
}

export const Redemption: MessageFns<Redemption> = {
  encode(message: Redemption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.destinationAddress.length !== 0) {
      writer.uint32(18).bytes(message.destinationAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Redemption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationAddress = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Redemption {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      destinationAddress: isSet(object.destinationAddress)
        ? bytesFromBase64(object.destinationAddress)
        : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: Redemption): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.destinationAddress.length !== 0) {
      obj.destinationAddress = base64FromBytes(message.destinationAddress);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Redemption>, I>>(base?: I): Redemption {
    return Redemption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Redemption>, I>>(object: I): Redemption {
    const message = createBaseRedemption();
    message.id = object.id ?? 0;
    message.destinationAddress = object.destinationAddress ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseBurnEvent(): BurnEvent {
  return {
    txID: "",
    logIndex: 0,
    chainID: "",
    destinationAddr: new Uint8Array(0),
    amount: 0,
    IsZenBTC: false,
    height: 0,
  };
}

export const BurnEvent: MessageFns<BurnEvent> = {
  encode(message: BurnEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txID !== "") {
      writer.uint32(10).string(message.txID);
    }
    if (message.logIndex !== 0) {
      writer.uint32(16).uint64(message.logIndex);
    }
    if (message.chainID !== "") {
      writer.uint32(26).string(message.chainID);
    }
    if (message.destinationAddr.length !== 0) {
      writer.uint32(34).bytes(message.destinationAddr);
    }
    if (message.amount !== 0) {
      writer.uint32(40).uint64(message.amount);
    }
    if (message.IsZenBTC !== false) {
      writer.uint32(48).bool(message.IsZenBTC);
    }
    if (message.height !== 0) {
      writer.uint32(56).uint64(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BurnEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBurnEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.logIndex = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chainID = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.destinationAddr = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.IsZenBTC = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BurnEvent {
    return {
      txID: isSet(object.txID) ? globalThis.String(object.txID) : "",
      logIndex: isSet(object.logIndex) ? globalThis.Number(object.logIndex) : 0,
      chainID: isSet(object.chainID) ? globalThis.String(object.chainID) : "",
      destinationAddr: isSet(object.destinationAddr) ? bytesFromBase64(object.destinationAddr) : new Uint8Array(0),
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      IsZenBTC: isSet(object.IsZenBTC) ? globalThis.Boolean(object.IsZenBTC) : false,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: BurnEvent): unknown {
    const obj: any = {};
    if (message.txID !== "") {
      obj.txID = message.txID;
    }
    if (message.logIndex !== 0) {
      obj.logIndex = Math.round(message.logIndex);
    }
    if (message.chainID !== "") {
      obj.chainID = message.chainID;
    }
    if (message.destinationAddr.length !== 0) {
      obj.destinationAddr = base64FromBytes(message.destinationAddr);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.IsZenBTC !== false) {
      obj.IsZenBTC = message.IsZenBTC;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BurnEvent>, I>>(base?: I): BurnEvent {
    return BurnEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BurnEvent>, I>>(object: I): BurnEvent {
    const message = createBaseBurnEvent();
    message.txID = object.txID ?? "";
    message.logIndex = object.logIndex ?? 0;
    message.chainID = object.chainID ?? "";
    message.destinationAddr = object.destinationAddr ?? new Uint8Array(0);
    message.amount = object.amount ?? 0;
    message.IsZenBTC = object.IsZenBTC ?? false;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseSidecarStateRequest(): SidecarStateRequest {
  return {};
}

export const SidecarStateRequest: MessageFns<SidecarStateRequest> = {
  encode(_: SidecarStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SidecarStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSidecarStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SidecarStateRequest {
    return {};
  },

  toJSON(_: SidecarStateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SidecarStateRequest>, I>>(base?: I): SidecarStateRequest {
    return SidecarStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SidecarStateRequest>, I>>(_: I): SidecarStateRequest {
    const message = createBaseSidecarStateRequest();
    return message;
  },
};

function createBaseSidecarStateResponse(): SidecarStateResponse {
  return {
    EigenDelegations: new Uint8Array(0),
    EthBlockHeight: 0,
    EthGasLimit: 0,
    EthBaseFee: 0,
    EthTipCap: 0,
    SolanaLamportsPerSignature: 0,
    EthBurnEvents: [],
    Redemptions: [],
    ROCKUSDPrice: "",
    BTCUSDPrice: "",
    ETHUSDPrice: "",
    SolanaMintEvents: [],
    SolanaBurnEvents: [],
    SidecarVersionName: "",
  };
}

export const SidecarStateResponse: MessageFns<SidecarStateResponse> = {
  encode(message: SidecarStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.EigenDelegations.length !== 0) {
      writer.uint32(10).bytes(message.EigenDelegations);
    }
    if (message.EthBlockHeight !== 0) {
      writer.uint32(16).uint64(message.EthBlockHeight);
    }
    if (message.EthGasLimit !== 0) {
      writer.uint32(24).uint64(message.EthGasLimit);
    }
    if (message.EthBaseFee !== 0) {
      writer.uint32(32).uint64(message.EthBaseFee);
    }
    if (message.EthTipCap !== 0) {
      writer.uint32(40).uint64(message.EthTipCap);
    }
    if (message.SolanaLamportsPerSignature !== 0) {
      writer.uint32(48).uint64(message.SolanaLamportsPerSignature);
    }
    for (const v of message.EthBurnEvents) {
      BurnEvent.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.Redemptions) {
      Redemption.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.ROCKUSDPrice !== "") {
      writer.uint32(74).string(message.ROCKUSDPrice);
    }
    if (message.BTCUSDPrice !== "") {
      writer.uint32(82).string(message.BTCUSDPrice);
    }
    if (message.ETHUSDPrice !== "") {
      writer.uint32(90).string(message.ETHUSDPrice);
    }
    for (const v of message.SolanaMintEvents) {
      SolanaMintEvent.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.SolanaBurnEvents) {
      BurnEvent.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.SidecarVersionName !== "") {
      writer.uint32(114).string(message.SidecarVersionName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SidecarStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSidecarStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.EigenDelegations = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.EthBlockHeight = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.EthGasLimit = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.EthBaseFee = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.EthTipCap = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.SolanaLamportsPerSignature = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.EthBurnEvents.push(BurnEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.Redemptions.push(Redemption.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.ROCKUSDPrice = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.BTCUSDPrice = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.ETHUSDPrice = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.SolanaMintEvents.push(SolanaMintEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.SolanaBurnEvents.push(BurnEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.SidecarVersionName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SidecarStateResponse {
    return {
      EigenDelegations: isSet(object.EigenDelegations) ? bytesFromBase64(object.EigenDelegations) : new Uint8Array(0),
      EthBlockHeight: isSet(object.EthBlockHeight) ? globalThis.Number(object.EthBlockHeight) : 0,
      EthGasLimit: isSet(object.EthGasLimit) ? globalThis.Number(object.EthGasLimit) : 0,
      EthBaseFee: isSet(object.EthBaseFee) ? globalThis.Number(object.EthBaseFee) : 0,
      EthTipCap: isSet(object.EthTipCap) ? globalThis.Number(object.EthTipCap) : 0,
      SolanaLamportsPerSignature: isSet(object.SolanaLamportsPerSignature)
        ? globalThis.Number(object.SolanaLamportsPerSignature)
        : 0,
      EthBurnEvents: globalThis.Array.isArray(object?.EthBurnEvents)
        ? object.EthBurnEvents.map((e: any) => BurnEvent.fromJSON(e))
        : [],
      Redemptions: globalThis.Array.isArray(object?.Redemptions)
        ? object.Redemptions.map((e: any) => Redemption.fromJSON(e))
        : [],
      ROCKUSDPrice: isSet(object.ROCKUSDPrice) ? globalThis.String(object.ROCKUSDPrice) : "",
      BTCUSDPrice: isSet(object.BTCUSDPrice) ? globalThis.String(object.BTCUSDPrice) : "",
      ETHUSDPrice: isSet(object.ETHUSDPrice) ? globalThis.String(object.ETHUSDPrice) : "",
      SolanaMintEvents: globalThis.Array.isArray(object?.SolanaMintEvents)
        ? object.SolanaMintEvents.map((e: any) => SolanaMintEvent.fromJSON(e))
        : [],
      SolanaBurnEvents: globalThis.Array.isArray(object?.SolanaBurnEvents)
        ? object.SolanaBurnEvents.map((e: any) => BurnEvent.fromJSON(e))
        : [],
      SidecarVersionName: isSet(object.SidecarVersionName) ? globalThis.String(object.SidecarVersionName) : "",
    };
  },

  toJSON(message: SidecarStateResponse): unknown {
    const obj: any = {};
    if (message.EigenDelegations.length !== 0) {
      obj.EigenDelegations = base64FromBytes(message.EigenDelegations);
    }
    if (message.EthBlockHeight !== 0) {
      obj.EthBlockHeight = Math.round(message.EthBlockHeight);
    }
    if (message.EthGasLimit !== 0) {
      obj.EthGasLimit = Math.round(message.EthGasLimit);
    }
    if (message.EthBaseFee !== 0) {
      obj.EthBaseFee = Math.round(message.EthBaseFee);
    }
    if (message.EthTipCap !== 0) {
      obj.EthTipCap = Math.round(message.EthTipCap);
    }
    if (message.SolanaLamportsPerSignature !== 0) {
      obj.SolanaLamportsPerSignature = Math.round(message.SolanaLamportsPerSignature);
    }
    if (message.EthBurnEvents?.length) {
      obj.EthBurnEvents = message.EthBurnEvents.map((e) => BurnEvent.toJSON(e));
    }
    if (message.Redemptions?.length) {
      obj.Redemptions = message.Redemptions.map((e) => Redemption.toJSON(e));
    }
    if (message.ROCKUSDPrice !== "") {
      obj.ROCKUSDPrice = message.ROCKUSDPrice;
    }
    if (message.BTCUSDPrice !== "") {
      obj.BTCUSDPrice = message.BTCUSDPrice;
    }
    if (message.ETHUSDPrice !== "") {
      obj.ETHUSDPrice = message.ETHUSDPrice;
    }
    if (message.SolanaMintEvents?.length) {
      obj.SolanaMintEvents = message.SolanaMintEvents.map((e) => SolanaMintEvent.toJSON(e));
    }
    if (message.SolanaBurnEvents?.length) {
      obj.SolanaBurnEvents = message.SolanaBurnEvents.map((e) => BurnEvent.toJSON(e));
    }
    if (message.SidecarVersionName !== "") {
      obj.SidecarVersionName = message.SidecarVersionName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SidecarStateResponse>, I>>(base?: I): SidecarStateResponse {
    return SidecarStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SidecarStateResponse>, I>>(object: I): SidecarStateResponse {
    const message = createBaseSidecarStateResponse();
    message.EigenDelegations = object.EigenDelegations ?? new Uint8Array(0);
    message.EthBlockHeight = object.EthBlockHeight ?? 0;
    message.EthGasLimit = object.EthGasLimit ?? 0;
    message.EthBaseFee = object.EthBaseFee ?? 0;
    message.EthTipCap = object.EthTipCap ?? 0;
    message.SolanaLamportsPerSignature = object.SolanaLamportsPerSignature ?? 0;
    message.EthBurnEvents = object.EthBurnEvents?.map((e) => BurnEvent.fromPartial(e)) || [];
    message.Redemptions = object.Redemptions?.map((e) => Redemption.fromPartial(e)) || [];
    message.ROCKUSDPrice = object.ROCKUSDPrice ?? "";
    message.BTCUSDPrice = object.BTCUSDPrice ?? "";
    message.ETHUSDPrice = object.ETHUSDPrice ?? "";
    message.SolanaMintEvents = object.SolanaMintEvents?.map((e) => SolanaMintEvent.fromPartial(e)) || [];
    message.SolanaBurnEvents = object.SolanaBurnEvents?.map((e) => BurnEvent.fromPartial(e)) || [];
    message.SidecarVersionName = object.SidecarVersionName ?? "";
    return message;
  },
};

function createBaseSidecarStateByEthHeightRequest(): SidecarStateByEthHeightRequest {
  return { EthBlockHeight: 0 };
}

export const SidecarStateByEthHeightRequest: MessageFns<SidecarStateByEthHeightRequest> = {
  encode(message: SidecarStateByEthHeightRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.EthBlockHeight !== 0) {
      writer.uint32(8).uint64(message.EthBlockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SidecarStateByEthHeightRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSidecarStateByEthHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.EthBlockHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SidecarStateByEthHeightRequest {
    return { EthBlockHeight: isSet(object.EthBlockHeight) ? globalThis.Number(object.EthBlockHeight) : 0 };
  },

  toJSON(message: SidecarStateByEthHeightRequest): unknown {
    const obj: any = {};
    if (message.EthBlockHeight !== 0) {
      obj.EthBlockHeight = Math.round(message.EthBlockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SidecarStateByEthHeightRequest>, I>>(base?: I): SidecarStateByEthHeightRequest {
    return SidecarStateByEthHeightRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SidecarStateByEthHeightRequest>, I>>(
    object: I,
  ): SidecarStateByEthHeightRequest {
    const message = createBaseSidecarStateByEthHeightRequest();
    message.EthBlockHeight = object.EthBlockHeight ?? 0;
    return message;
  },
};

function createBaseLatestEthereumNonceForAccountRequest(): LatestEthereumNonceForAccountRequest {
  return { Address: "" };
}

export const LatestEthereumNonceForAccountRequest: MessageFns<LatestEthereumNonceForAccountRequest> = {
  encode(message: LatestEthereumNonceForAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Address !== "") {
      writer.uint32(10).string(message.Address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatestEthereumNonceForAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatestEthereumNonceForAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatestEthereumNonceForAccountRequest {
    return { Address: isSet(object.Address) ? globalThis.String(object.Address) : "" };
  },

  toJSON(message: LatestEthereumNonceForAccountRequest): unknown {
    const obj: any = {};
    if (message.Address !== "") {
      obj.Address = message.Address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatestEthereumNonceForAccountRequest>, I>>(
    base?: I,
  ): LatestEthereumNonceForAccountRequest {
    return LatestEthereumNonceForAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatestEthereumNonceForAccountRequest>, I>>(
    object: I,
  ): LatestEthereumNonceForAccountRequest {
    const message = createBaseLatestEthereumNonceForAccountRequest();
    message.Address = object.Address ?? "";
    return message;
  },
};

function createBaseLatestEthereumNonceForAccountResponse(): LatestEthereumNonceForAccountResponse {
  return { Nonce: 0 };
}

export const LatestEthereumNonceForAccountResponse: MessageFns<LatestEthereumNonceForAccountResponse> = {
  encode(message: LatestEthereumNonceForAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Nonce !== 0) {
      writer.uint32(8).uint64(message.Nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatestEthereumNonceForAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatestEthereumNonceForAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Nonce = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatestEthereumNonceForAccountResponse {
    return { Nonce: isSet(object.Nonce) ? globalThis.Number(object.Nonce) : 0 };
  },

  toJSON(message: LatestEthereumNonceForAccountResponse): unknown {
    const obj: any = {};
    if (message.Nonce !== 0) {
      obj.Nonce = Math.round(message.Nonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatestEthereumNonceForAccountResponse>, I>>(
    base?: I,
  ): LatestEthereumNonceForAccountResponse {
    return LatestEthereumNonceForAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatestEthereumNonceForAccountResponse>, I>>(
    object: I,
  ): LatestEthereumNonceForAccountResponse {
    const message = createBaseLatestEthereumNonceForAccountResponse();
    message.Nonce = object.Nonce ?? 0;
    return message;
  },
};

function createBaseSolanaAccountInfoRequest(): SolanaAccountInfoRequest {
  return { PubKey: "" };
}

export const SolanaAccountInfoRequest: MessageFns<SolanaAccountInfoRequest> = {
  encode(message: SolanaAccountInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.PubKey !== "") {
      writer.uint32(10).string(message.PubKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolanaAccountInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolanaAccountInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.PubKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolanaAccountInfoRequest {
    return { PubKey: isSet(object.PubKey) ? globalThis.String(object.PubKey) : "" };
  },

  toJSON(message: SolanaAccountInfoRequest): unknown {
    const obj: any = {};
    if (message.PubKey !== "") {
      obj.PubKey = message.PubKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolanaAccountInfoRequest>, I>>(base?: I): SolanaAccountInfoRequest {
    return SolanaAccountInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolanaAccountInfoRequest>, I>>(object: I): SolanaAccountInfoRequest {
    const message = createBaseSolanaAccountInfoRequest();
    message.PubKey = object.PubKey ?? "";
    return message;
  },
};

function createBaseSolanaAccountInfoResponse(): SolanaAccountInfoResponse {
  return { Account: new Uint8Array(0) };
}

export const SolanaAccountInfoResponse: MessageFns<SolanaAccountInfoResponse> = {
  encode(message: SolanaAccountInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Account.length !== 0) {
      writer.uint32(10).bytes(message.Account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolanaAccountInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolanaAccountInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Account = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolanaAccountInfoResponse {
    return { Account: isSet(object.Account) ? bytesFromBase64(object.Account) : new Uint8Array(0) };
  },

  toJSON(message: SolanaAccountInfoResponse): unknown {
    const obj: any = {};
    if (message.Account.length !== 0) {
      obj.Account = base64FromBytes(message.Account);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolanaAccountInfoResponse>, I>>(base?: I): SolanaAccountInfoResponse {
    return SolanaAccountInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolanaAccountInfoResponse>, I>>(object: I): SolanaAccountInfoResponse {
    const message = createBaseSolanaAccountInfoResponse();
    message.Account = object.Account ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSolanaMintEvent(): SolanaMintEvent {
  return {
    Coint: 0,
    SigHash: new Uint8Array(0),
    Recipient: new Uint8Array(0),
    Height: 0,
    Value: 0,
    Fee: 0,
    Mint: new Uint8Array(0),
    TxSig: "",
  };
}

export const SolanaMintEvent: MessageFns<SolanaMintEvent> = {
  encode(message: SolanaMintEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Coint !== 0) {
      writer.uint32(8).int32(message.Coint);
    }
    if (message.SigHash.length !== 0) {
      writer.uint32(18).bytes(message.SigHash);
    }
    if (message.Recipient.length !== 0) {
      writer.uint32(26).bytes(message.Recipient);
    }
    if (message.Height !== 0) {
      writer.uint32(32).uint64(message.Height);
    }
    if (message.Value !== 0) {
      writer.uint32(40).uint64(message.Value);
    }
    if (message.Fee !== 0) {
      writer.uint32(48).uint64(message.Fee);
    }
    if (message.Mint.length !== 0) {
      writer.uint32(58).bytes(message.Mint);
    }
    if (message.TxSig !== "") {
      writer.uint32(66).string(message.TxSig);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolanaMintEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolanaMintEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Coint = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.SigHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Recipient = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Height = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Value = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.Fee = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.Mint = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.TxSig = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolanaMintEvent {
    return {
      Coint: isSet(object.Coint) ? coinFromJSON(object.Coint) : 0,
      SigHash: isSet(object.SigHash) ? bytesFromBase64(object.SigHash) : new Uint8Array(0),
      Recipient: isSet(object.Recipient) ? bytesFromBase64(object.Recipient) : new Uint8Array(0),
      Height: isSet(object.Height) ? globalThis.Number(object.Height) : 0,
      Value: isSet(object.Value) ? globalThis.Number(object.Value) : 0,
      Fee: isSet(object.Fee) ? globalThis.Number(object.Fee) : 0,
      Mint: isSet(object.Mint) ? bytesFromBase64(object.Mint) : new Uint8Array(0),
      TxSig: isSet(object.TxSig) ? globalThis.String(object.TxSig) : "",
    };
  },

  toJSON(message: SolanaMintEvent): unknown {
    const obj: any = {};
    if (message.Coint !== 0) {
      obj.Coint = coinToJSON(message.Coint);
    }
    if (message.SigHash.length !== 0) {
      obj.SigHash = base64FromBytes(message.SigHash);
    }
    if (message.Recipient.length !== 0) {
      obj.Recipient = base64FromBytes(message.Recipient);
    }
    if (message.Height !== 0) {
      obj.Height = Math.round(message.Height);
    }
    if (message.Value !== 0) {
      obj.Value = Math.round(message.Value);
    }
    if (message.Fee !== 0) {
      obj.Fee = Math.round(message.Fee);
    }
    if (message.Mint.length !== 0) {
      obj.Mint = base64FromBytes(message.Mint);
    }
    if (message.TxSig !== "") {
      obj.TxSig = message.TxSig;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolanaMintEvent>, I>>(base?: I): SolanaMintEvent {
    return SolanaMintEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolanaMintEvent>, I>>(object: I): SolanaMintEvent {
    const message = createBaseSolanaMintEvent();
    message.Coint = object.Coint ?? 0;
    message.SigHash = object.SigHash ?? new Uint8Array(0);
    message.Recipient = object.Recipient ?? new Uint8Array(0);
    message.Height = object.Height ?? 0;
    message.Value = object.Value ?? 0;
    message.Fee = object.Fee ?? 0;
    message.Mint = object.Mint ?? new Uint8Array(0);
    message.TxSig = object.TxSig ?? "";
    return message;
  },
};

export interface SidecarService {
  GetSidecarState(request: SidecarStateRequest): Promise<SidecarStateResponse>;
  GetSidecarStateByEthHeight(request: SidecarStateByEthHeightRequest): Promise<SidecarStateResponse>;
  GetBitcoinBlockHeaderByHeight(request: BitcoinBlockHeaderByHeightRequest): Promise<BitcoinBlockHeaderResponse>;
  GetLatestBitcoinBlockHeader(request: LatestBitcoinBlockHeaderRequest): Promise<BitcoinBlockHeaderResponse>;
  GetLatestEthereumNonceForAccount(
    request: LatestEthereumNonceForAccountRequest,
  ): Promise<LatestEthereumNonceForAccountResponse>;
  GetSolanaAccountInfo(request: SolanaAccountInfoRequest): Promise<SolanaAccountInfoResponse>;
}

export const SidecarServiceServiceName = "api.SidecarService";
export class SidecarServiceClientImpl implements SidecarService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SidecarServiceServiceName;
    this.rpc = rpc;
    this.GetSidecarState = this.GetSidecarState.bind(this);
    this.GetSidecarStateByEthHeight = this.GetSidecarStateByEthHeight.bind(this);
    this.GetBitcoinBlockHeaderByHeight = this.GetBitcoinBlockHeaderByHeight.bind(this);
    this.GetLatestBitcoinBlockHeader = this.GetLatestBitcoinBlockHeader.bind(this);
    this.GetLatestEthereumNonceForAccount = this.GetLatestEthereumNonceForAccount.bind(this);
    this.GetSolanaAccountInfo = this.GetSolanaAccountInfo.bind(this);
  }
  GetSidecarState(request: SidecarStateRequest): Promise<SidecarStateResponse> {
    const data = SidecarStateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSidecarState", data);
    return promise.then((data) => SidecarStateResponse.decode(new BinaryReader(data)));
  }

  GetSidecarStateByEthHeight(request: SidecarStateByEthHeightRequest): Promise<SidecarStateResponse> {
    const data = SidecarStateByEthHeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSidecarStateByEthHeight", data);
    return promise.then((data) => SidecarStateResponse.decode(new BinaryReader(data)));
  }

  GetBitcoinBlockHeaderByHeight(request: BitcoinBlockHeaderByHeightRequest): Promise<BitcoinBlockHeaderResponse> {
    const data = BitcoinBlockHeaderByHeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBitcoinBlockHeaderByHeight", data);
    return promise.then((data) => BitcoinBlockHeaderResponse.decode(new BinaryReader(data)));
  }

  GetLatestBitcoinBlockHeader(request: LatestBitcoinBlockHeaderRequest): Promise<BitcoinBlockHeaderResponse> {
    const data = LatestBitcoinBlockHeaderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestBitcoinBlockHeader", data);
    return promise.then((data) => BitcoinBlockHeaderResponse.decode(new BinaryReader(data)));
  }

  GetLatestEthereumNonceForAccount(
    request: LatestEthereumNonceForAccountRequest,
  ): Promise<LatestEthereumNonceForAccountResponse> {
    const data = LatestEthereumNonceForAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLatestEthereumNonceForAccount", data);
    return promise.then((data) => LatestEthereumNonceForAccountResponse.decode(new BinaryReader(data)));
  }

  GetSolanaAccountInfo(request: SolanaAccountInfoRequest): Promise<SolanaAccountInfoResponse> {
    const data = SolanaAccountInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSolanaAccountInfo", data);
    return promise.then((data) => SolanaAccountInfoResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
