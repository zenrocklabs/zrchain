// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/treasury/mpcsign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";
import { KeyType, keyTypeFromJSON, keyTypeToJSON, PartySignature } from "./key";
import { WalletType, walletTypeFromJSON, walletTypeToJSON } from "./wallet";

export const protobufPackage = "zrchain.treasury";

/**
 * SignRequestStatus indicates the status of an MPC signature request.
 * A request starts as "pending", waiting to be picked up. Then it can move to
 * either "approved" or "rejected", depending on the decision of the MPC nodes.
 */
export enum SignRequestStatus {
  /** SIGN_REQUEST_STATUS_UNSPECIFIED - The request is missing the status field. */
  SIGN_REQUEST_STATUS_UNSPECIFIED = 0,
  /**
   * SIGN_REQUEST_STATUS_PENDING - The request is waiting to be fulfilled. This is the initial state of a
   * request.
   */
  SIGN_REQUEST_STATUS_PENDING = 1,
  /**
   * SIGN_REQUEST_STATUS_PARTIAL - The request is partially fulfilled - at least one more response from
   * a different MPC party is needed to confirm it.
   */
  SIGN_REQUEST_STATUS_PARTIAL = 2,
  /** SIGN_REQUEST_STATUS_FULFILLED - The request was fulfilled. This is a final state for a request. */
  SIGN_REQUEST_STATUS_FULFILLED = 3,
  /** SIGN_REQUEST_STATUS_REJECTED - The request was rejected. This is a final state for a request. */
  SIGN_REQUEST_STATUS_REJECTED = 4,
  UNRECOGNIZED = -1,
}

export function signRequestStatusFromJSON(object: any): SignRequestStatus {
  switch (object) {
    case 0:
    case "SIGN_REQUEST_STATUS_UNSPECIFIED":
      return SignRequestStatus.SIGN_REQUEST_STATUS_UNSPECIFIED;
    case 1:
    case "SIGN_REQUEST_STATUS_PENDING":
      return SignRequestStatus.SIGN_REQUEST_STATUS_PENDING;
    case 2:
    case "SIGN_REQUEST_STATUS_PARTIAL":
      return SignRequestStatus.SIGN_REQUEST_STATUS_PARTIAL;
    case 3:
    case "SIGN_REQUEST_STATUS_FULFILLED":
      return SignRequestStatus.SIGN_REQUEST_STATUS_FULFILLED;
    case 4:
    case "SIGN_REQUEST_STATUS_REJECTED":
      return SignRequestStatus.SIGN_REQUEST_STATUS_REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SignRequestStatus.UNRECOGNIZED;
  }
}

export function signRequestStatusToJSON(object: SignRequestStatus): string {
  switch (object) {
    case SignRequestStatus.SIGN_REQUEST_STATUS_UNSPECIFIED:
      return "SIGN_REQUEST_STATUS_UNSPECIFIED";
    case SignRequestStatus.SIGN_REQUEST_STATUS_PENDING:
      return "SIGN_REQUEST_STATUS_PENDING";
    case SignRequestStatus.SIGN_REQUEST_STATUS_PARTIAL:
      return "SIGN_REQUEST_STATUS_PARTIAL";
    case SignRequestStatus.SIGN_REQUEST_STATUS_FULFILLED:
      return "SIGN_REQUEST_STATUS_FULFILLED";
    case SignRequestStatus.SIGN_REQUEST_STATUS_REJECTED:
      return "SIGN_REQUEST_STATUS_REJECTED";
    case SignRequestStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** format of a sign request */
export interface SignRequest {
  id: number;
  creator: string;
  /** @deprecated */
  keyId: number;
  keyType: KeyType;
  dataForSigning: Uint8Array[];
  status: SignRequestStatus;
  signedData: SignedDataWithID[];
  /** @deprecated */
  keyringPartySignatures: Uint8Array[];
  rejectReason: string;
  metadata: Any | undefined;
  parentReqId: number;
  childReqIds: number[];
  cacheId: Uint8Array;
  keyIds: number[];
  mpcBtl: number;
  fee: number;
  /** Optional */
  zenbtcTxBytes: Uint8Array;
  keyringPartySigs: PartySignature[];
}

/** format of a signed data with an id value used to sort the signed data */
export interface SignedDataWithID {
  signRequestId: number;
  signedData: Uint8Array;
}

/** format of a sign transaction request */
export interface SignTransactionRequest {
  id: number;
  creator: string;
  /** Deprecated */
  keyId: number;
  walletType: WalletType;
  unsignedTransaction: Uint8Array;
  signRequestId: number;
  noBroadcast: boolean;
  keyIds: number[];
}

/** format of a sign request response */
export interface SignReqResponse {
  id: number;
  creator: string;
  keyIds: number[];
  keyType: string;
  dataForSigning: Uint8Array[];
  status: string;
  signedData: SignedDataWithID[];
  keyringPartySigs: PartySignature[];
  rejectReason: string;
  metadata: Any | undefined;
  parentReqId: number;
  childReqIds: number[];
  cacheId: Uint8Array;
  mpcBtl: number;
  fee: number;
  /** Optional */
  zenbtcTxBytes: Uint8Array;
}

/** format of a sign transaction request response */
export interface SignTxReqResponse {
  id: number;
  creator: string;
  /** Deprecated */
  keyId: number;
  walletType: string;
  unsignedTransaction: Uint8Array;
  signRequestId: number;
  noBroadcast: boolean;
  mpcBtl: number;
  keyIds: number[];
}

/** format of a sign transaction request for an InterChain Account transaction */
export interface ICATransactionRequest {
  id: number;
  creator: string;
  keyId: number;
  keyType: KeyType;
  inputMsg: Uint8Array;
  /** ibc.applications.interchain_accounts.v1.MsgSendTx input_msg = 5; */
  status: SignRequestStatus;
  signedData: Uint8Array[];
  keyringPartySignatures: PartySignature[];
  rejectReason: string;
}

function createBaseSignRequest(): SignRequest {
  return {
    id: 0,
    creator: "",
    keyId: 0,
    keyType: 0,
    dataForSigning: [],
    status: 0,
    signedData: [],
    keyringPartySignatures: [],
    rejectReason: "",
    metadata: undefined,
    parentReqId: 0,
    childReqIds: [],
    cacheId: new Uint8Array(0),
    keyIds: [],
    mpcBtl: 0,
    fee: 0,
    zenbtcTxBytes: new Uint8Array(0),
    keyringPartySigs: [],
  };
}

export const SignRequest: MessageFns<SignRequest> = {
  encode(message: SignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.keyId !== 0) {
      writer.uint32(24).uint64(message.keyId);
    }
    if (message.keyType !== 0) {
      writer.uint32(32).int32(message.keyType);
    }
    for (const v of message.dataForSigning) {
      writer.uint32(42).bytes(v!);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    for (const v of message.signedData) {
      SignedDataWithID.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.keyringPartySignatures) {
      writer.uint32(66).bytes(v!);
    }
    if (message.rejectReason !== "") {
      writer.uint32(74).string(message.rejectReason);
    }
    if (message.metadata !== undefined) {
      Any.encode(message.metadata, writer.uint32(82).fork()).join();
    }
    if (message.parentReqId !== 0) {
      writer.uint32(88).uint64(message.parentReqId);
    }
    writer.uint32(98).fork();
    for (const v of message.childReqIds) {
      writer.uint64(v);
    }
    writer.join();
    if (message.cacheId.length !== 0) {
      writer.uint32(106).bytes(message.cacheId);
    }
    writer.uint32(114).fork();
    for (const v of message.keyIds) {
      writer.uint64(v);
    }
    writer.join();
    if (message.mpcBtl !== 0) {
      writer.uint32(120).uint64(message.mpcBtl);
    }
    if (message.fee !== 0) {
      writer.uint32(128).uint64(message.fee);
    }
    if (message.zenbtcTxBytes.length !== 0) {
      writer.uint32(138).bytes(message.zenbtcTxBytes);
    }
    for (const v of message.keyringPartySigs) {
      PartySignature.encode(v!, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.keyType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.dataForSigning.push(reader.bytes());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signedData.push(SignedDataWithID.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.keyringPartySignatures.push(reader.bytes());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rejectReason = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = Any.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.parentReqId = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag === 96) {
            message.childReqIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.childReqIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.cacheId = reader.bytes();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.keyIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.keyIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.mpcBtl = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.fee = longToNumber(reader.uint64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.zenbtcTxBytes = reader.bytes();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.keyringPartySigs.push(PartySignature.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyId: isSet(object.keyId) ? globalThis.Number(object.keyId) : 0,
      keyType: isSet(object.keyType) ? keyTypeFromJSON(object.keyType) : 0,
      dataForSigning: globalThis.Array.isArray(object?.dataForSigning)
        ? object.dataForSigning.map((e: any) => bytesFromBase64(e))
        : [],
      status: isSet(object.status) ? signRequestStatusFromJSON(object.status) : 0,
      signedData: globalThis.Array.isArray(object?.signedData)
        ? object.signedData.map((e: any) => SignedDataWithID.fromJSON(e))
        : [],
      keyringPartySignatures: globalThis.Array.isArray(object?.keyringPartySignatures)
        ? object.keyringPartySignatures.map((e: any) => bytesFromBase64(e))
        : [],
      rejectReason: isSet(object.rejectReason) ? globalThis.String(object.rejectReason) : "",
      metadata: isSet(object.metadata) ? Any.fromJSON(object.metadata) : undefined,
      parentReqId: isSet(object.parentReqId) ? globalThis.Number(object.parentReqId) : 0,
      childReqIds: globalThis.Array.isArray(object?.childReqIds)
        ? object.childReqIds.map((e: any) => globalThis.Number(e))
        : [],
      cacheId: isSet(object.cacheId) ? bytesFromBase64(object.cacheId) : new Uint8Array(0),
      keyIds: globalThis.Array.isArray(object?.keyIds)
        ? object.keyIds.map((e: any) => globalThis.Number(e))
        : [],
      mpcBtl: isSet(object.mpcBtl) ? globalThis.Number(object.mpcBtl) : 0,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      zenbtcTxBytes: isSet(object.zenbtcTxBytes) ? bytesFromBase64(object.zenbtcTxBytes) : new Uint8Array(0),
      keyringPartySigs: globalThis.Array.isArray(object?.keyringPartySigs)
        ? object.keyringPartySigs.map((e: any) => PartySignature.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SignRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyId !== 0) {
      obj.keyId = Math.round(message.keyId);
    }
    if (message.keyType !== 0) {
      obj.keyType = keyTypeToJSON(message.keyType);
    }
    if (message.dataForSigning?.length) {
      obj.dataForSigning = message.dataForSigning.map((e) => base64FromBytes(e));
    }
    if (message.status !== 0) {
      obj.status = signRequestStatusToJSON(message.status);
    }
    if (message.signedData?.length) {
      obj.signedData = message.signedData.map((e) => SignedDataWithID.toJSON(e));
    }
    if (message.keyringPartySignatures?.length) {
      obj.keyringPartySignatures = message.keyringPartySignatures.map((e) => base64FromBytes(e));
    }
    if (message.rejectReason !== "") {
      obj.rejectReason = message.rejectReason;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Any.toJSON(message.metadata);
    }
    if (message.parentReqId !== 0) {
      obj.parentReqId = Math.round(message.parentReqId);
    }
    if (message.childReqIds?.length) {
      obj.childReqIds = message.childReqIds.map((e) => Math.round(e));
    }
    if (message.cacheId.length !== 0) {
      obj.cacheId = base64FromBytes(message.cacheId);
    }
    if (message.keyIds?.length) {
      obj.keyIds = message.keyIds.map((e) => Math.round(e));
    }
    if (message.mpcBtl !== 0) {
      obj.mpcBtl = Math.round(message.mpcBtl);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.zenbtcTxBytes.length !== 0) {
      obj.zenbtcTxBytes = base64FromBytes(message.zenbtcTxBytes);
    }
    if (message.keyringPartySigs?.length) {
      obj.keyringPartySigs = message.keyringPartySigs.map((e) => PartySignature.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignRequest>, I>>(base?: I): SignRequest {
    return SignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignRequest>, I>>(object: I): SignRequest {
    const message = createBaseSignRequest();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.keyId = object.keyId ?? 0;
    message.keyType = object.keyType ?? 0;
    message.dataForSigning = object.dataForSigning?.map((e) => e) || [];
    message.status = object.status ?? 0;
    message.signedData = object.signedData?.map((e) => SignedDataWithID.fromPartial(e)) || [];
    message.keyringPartySignatures = object.keyringPartySignatures?.map((e) => e) || [];
    message.rejectReason = object.rejectReason ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Any.fromPartial(object.metadata)
      : undefined;
    message.parentReqId = object.parentReqId ?? 0;
    message.childReqIds = object.childReqIds?.map((e) => e) || [];
    message.cacheId = object.cacheId ?? new Uint8Array(0);
    message.keyIds = object.keyIds?.map((e) => e) || [];
    message.mpcBtl = object.mpcBtl ?? 0;
    message.fee = object.fee ?? 0;
    message.zenbtcTxBytes = object.zenbtcTxBytes ?? new Uint8Array(0);
    message.keyringPartySigs = object.keyringPartySigs?.map((e) => PartySignature.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSignedDataWithID(): SignedDataWithID {
  return { signRequestId: 0, signedData: new Uint8Array(0) };
}

export const SignedDataWithID: MessageFns<SignedDataWithID> = {
  encode(message: SignedDataWithID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signRequestId !== 0) {
      writer.uint32(8).uint64(message.signRequestId);
    }
    if (message.signedData.length !== 0) {
      writer.uint32(18).bytes(message.signedData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignedDataWithID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedDataWithID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.signRequestId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signedData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignedDataWithID {
    return {
      signRequestId: isSet(object.signRequestId) ? globalThis.Number(object.signRequestId) : 0,
      signedData: isSet(object.signedData) ? bytesFromBase64(object.signedData) : new Uint8Array(0),
    };
  },

  toJSON(message: SignedDataWithID): unknown {
    const obj: any = {};
    if (message.signRequestId !== 0) {
      obj.signRequestId = Math.round(message.signRequestId);
    }
    if (message.signedData.length !== 0) {
      obj.signedData = base64FromBytes(message.signedData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignedDataWithID>, I>>(base?: I): SignedDataWithID {
    return SignedDataWithID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignedDataWithID>, I>>(object: I): SignedDataWithID {
    const message = createBaseSignedDataWithID();
    message.signRequestId = object.signRequestId ?? 0;
    message.signedData = object.signedData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSignTransactionRequest(): SignTransactionRequest {
  return {
    id: 0,
    creator: "",
    keyId: 0,
    walletType: 0,
    unsignedTransaction: new Uint8Array(0),
    signRequestId: 0,
    noBroadcast: false,
    keyIds: [],
  };
}

export const SignTransactionRequest: MessageFns<SignTransactionRequest> = {
  encode(message: SignTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.keyId !== 0) {
      writer.uint32(24).uint64(message.keyId);
    }
    if (message.walletType !== 0) {
      writer.uint32(32).int32(message.walletType);
    }
    if (message.unsignedTransaction.length !== 0) {
      writer.uint32(42).bytes(message.unsignedTransaction);
    }
    if (message.signRequestId !== 0) {
      writer.uint32(48).uint64(message.signRequestId);
    }
    if (message.noBroadcast !== false) {
      writer.uint32(56).bool(message.noBroadcast);
    }
    writer.uint32(66).fork();
    for (const v of message.keyIds) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.walletType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unsignedTransaction = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signRequestId = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.noBroadcast = reader.bool();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.keyIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.keyIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignTransactionRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyId: isSet(object.keyId) ? globalThis.Number(object.keyId) : 0,
      walletType: isSet(object.walletType) ? walletTypeFromJSON(object.walletType) : 0,
      unsignedTransaction: isSet(object.unsignedTransaction)
        ? bytesFromBase64(object.unsignedTransaction)
        : new Uint8Array(0),
      signRequestId: isSet(object.signRequestId) ? globalThis.Number(object.signRequestId) : 0,
      noBroadcast: isSet(object.noBroadcast) ? globalThis.Boolean(object.noBroadcast) : false,
      keyIds: globalThis.Array.isArray(object?.keyIds) ? object.keyIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: SignTransactionRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyId !== 0) {
      obj.keyId = Math.round(message.keyId);
    }
    if (message.walletType !== 0) {
      obj.walletType = walletTypeToJSON(message.walletType);
    }
    if (message.unsignedTransaction.length !== 0) {
      obj.unsignedTransaction = base64FromBytes(message.unsignedTransaction);
    }
    if (message.signRequestId !== 0) {
      obj.signRequestId = Math.round(message.signRequestId);
    }
    if (message.noBroadcast !== false) {
      obj.noBroadcast = message.noBroadcast;
    }
    if (message.keyIds?.length) {
      obj.keyIds = message.keyIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignTransactionRequest>, I>>(base?: I): SignTransactionRequest {
    return SignTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignTransactionRequest>, I>>(object: I): SignTransactionRequest {
    const message = createBaseSignTransactionRequest();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.keyId = object.keyId ?? 0;
    message.walletType = object.walletType ?? 0;
    message.unsignedTransaction = object.unsignedTransaction ?? new Uint8Array(0);
    message.signRequestId = object.signRequestId ?? 0;
    message.noBroadcast = object.noBroadcast ?? false;
    message.keyIds = object.keyIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseSignReqResponse(): SignReqResponse {
  return {
    id: 0,
    creator: "",
    keyIds: [],
    keyType: "",
    dataForSigning: [],
    status: "",
    signedData: [],
    keyringPartySigs: [],
    rejectReason: "",
    metadata: undefined,
    parentReqId: 0,
    childReqIds: [],
    cacheId: new Uint8Array(0),
    mpcBtl: 0,
    fee: 0,
    zenbtcTxBytes: new Uint8Array(0),
  };
}

export const SignReqResponse: MessageFns<SignReqResponse> = {
  encode(message: SignReqResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    writer.uint32(26).fork();
    for (const v of message.keyIds) {
      writer.uint64(v);
    }
    writer.join();
    if (message.keyType !== "") {
      writer.uint32(34).string(message.keyType);
    }
    for (const v of message.dataForSigning) {
      writer.uint32(42).bytes(v!);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    for (const v of message.signedData) {
      SignedDataWithID.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.keyringPartySigs) {
      PartySignature.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.rejectReason !== "") {
      writer.uint32(74).string(message.rejectReason);
    }
    if (message.metadata !== undefined) {
      Any.encode(message.metadata, writer.uint32(82).fork()).join();
    }
    if (message.parentReqId !== 0) {
      writer.uint32(88).uint64(message.parentReqId);
    }
    writer.uint32(98).fork();
    for (const v of message.childReqIds) {
      writer.uint64(v);
    }
    writer.join();
    if (message.cacheId.length !== 0) {
      writer.uint32(106).bytes(message.cacheId);
    }
    if (message.mpcBtl !== 0) {
      writer.uint32(112).uint64(message.mpcBtl);
    }
    if (message.fee !== 0) {
      writer.uint32(120).uint64(message.fee);
    }
    if (message.zenbtcTxBytes.length !== 0) {
      writer.uint32(130).bytes(message.zenbtcTxBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignReqResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignReqResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.keyIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.keyIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.dataForSigning.push(reader.bytes());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signedData.push(SignedDataWithID.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.keyringPartySigs.push(PartySignature.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rejectReason = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = Any.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.parentReqId = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag === 96) {
            message.childReqIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.childReqIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.cacheId = reader.bytes();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.mpcBtl = longToNumber(reader.uint64());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.fee = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.zenbtcTxBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignReqResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyIds: globalThis.Array.isArray(object?.keyIds) ? object.keyIds.map((e: any) => globalThis.Number(e)) : [],
      keyType: isSet(object.keyType) ? globalThis.String(object.keyType) : "",
      dataForSigning: globalThis.Array.isArray(object?.dataForSigning)
        ? object.dataForSigning.map((e: any) => bytesFromBase64(e))
        : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      signedData: globalThis.Array.isArray(object?.signedData)
        ? object.signedData.map((e: any) => SignedDataWithID.fromJSON(e))
        : [],
      keyringPartySigs: globalThis.Array.isArray(object?.keyringPartySigs)
        ? object.keyringPartySigs.map((e: any) => PartySignature.fromJSON(e))
        : [],
      rejectReason: isSet(object.rejectReason) ? globalThis.String(object.rejectReason) : "",
      metadata: isSet(object.metadata) ? Any.fromJSON(object.metadata) : undefined,
      parentReqId: isSet(object.parentReqId) ? globalThis.Number(object.parentReqId) : 0,
      childReqIds: globalThis.Array.isArray(object?.childReqIds)
        ? object.childReqIds.map((e: any) => globalThis.Number(e))
        : [],
      cacheId: isSet(object.cacheId) ? bytesFromBase64(object.cacheId) : new Uint8Array(0),
      mpcBtl: isSet(object.mpcBtl) ? globalThis.Number(object.mpcBtl) : 0,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      zenbtcTxBytes: isSet(object.zenbtcTxBytes) ? bytesFromBase64(object.zenbtcTxBytes) : new Uint8Array(0),
    };
  },

  toJSON(message: SignReqResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyIds?.length) {
      obj.keyIds = message.keyIds.map((e) => Math.round(e));
    }
    if (message.keyType !== "") {
      obj.keyType = message.keyType;
    }
    if (message.dataForSigning?.length) {
      obj.dataForSigning = message.dataForSigning.map((e) => base64FromBytes(e));
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.signedData?.length) {
      obj.signedData = message.signedData.map((e) => SignedDataWithID.toJSON(e));
    }
    if (message.keyringPartySigs?.length) {
      obj.keyringPartySigs = message.keyringPartySigs.map((e) => PartySignature.toJSON(e));
    }
    if (message.rejectReason !== "") {
      obj.rejectReason = message.rejectReason;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Any.toJSON(message.metadata);
    }
    if (message.parentReqId !== 0) {
      obj.parentReqId = Math.round(message.parentReqId);
    }
    if (message.childReqIds?.length) {
      obj.childReqIds = message.childReqIds.map((e) => Math.round(e));
    }
    if (message.cacheId.length !== 0) {
      obj.cacheId = base64FromBytes(message.cacheId);
    }
    if (message.mpcBtl !== 0) {
      obj.mpcBtl = Math.round(message.mpcBtl);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.zenbtcTxBytes.length !== 0) {
      obj.zenbtcTxBytes = base64FromBytes(message.zenbtcTxBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignReqResponse>, I>>(base?: I): SignReqResponse {
    return SignReqResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignReqResponse>, I>>(object: I): SignReqResponse {
    const message = createBaseSignReqResponse();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.keyIds = object.keyIds?.map((e) => e) || [];
    message.keyType = object.keyType ?? "";
    message.dataForSigning = object.dataForSigning?.map((e) => e) || [];
    message.status = object.status ?? "";
    message.signedData = object.signedData?.map((e) => SignedDataWithID.fromPartial(e)) || [];
    message.keyringPartySigs = object.keyringPartySigs?.map((e) => PartySignature.fromPartial(e)) || [];
    message.rejectReason = object.rejectReason ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Any.fromPartial(object.metadata)
      : undefined;
    message.parentReqId = object.parentReqId ?? 0;
    message.childReqIds = object.childReqIds?.map((e) => e) || [];
    message.cacheId = object.cacheId ?? new Uint8Array(0);
    message.mpcBtl = object.mpcBtl ?? 0;
    message.fee = object.fee ?? 0;
    message.zenbtcTxBytes = object.zenbtcTxBytes ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSignTxReqResponse(): SignTxReqResponse {
  return {
    id: 0,
    creator: "",
    keyId: 0,
    walletType: "",
    unsignedTransaction: new Uint8Array(0),
    signRequestId: 0,
    noBroadcast: false,
    mpcBtl: 0,
    keyIds: [],
  };
}

export const SignTxReqResponse: MessageFns<SignTxReqResponse> = {
  encode(message: SignTxReqResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.keyId !== 0) {
      writer.uint32(24).uint64(message.keyId);
    }
    if (message.walletType !== "") {
      writer.uint32(34).string(message.walletType);
    }
    if (message.unsignedTransaction.length !== 0) {
      writer.uint32(42).bytes(message.unsignedTransaction);
    }
    if (message.signRequestId !== 0) {
      writer.uint32(48).uint64(message.signRequestId);
    }
    if (message.noBroadcast !== false) {
      writer.uint32(56).bool(message.noBroadcast);
    }
    if (message.mpcBtl !== 0) {
      writer.uint32(64).uint64(message.mpcBtl);
    }
    writer.uint32(74).fork();
    for (const v of message.keyIds) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignTxReqResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignTxReqResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.walletType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unsignedTransaction = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signRequestId = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.noBroadcast = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.mpcBtl = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.keyIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.keyIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignTxReqResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyId: isSet(object.keyId) ? globalThis.Number(object.keyId) : 0,
      walletType: isSet(object.walletType) ? globalThis.String(object.walletType) : "",
      unsignedTransaction: isSet(object.unsignedTransaction)
        ? bytesFromBase64(object.unsignedTransaction)
        : new Uint8Array(0),
      signRequestId: isSet(object.signRequestId) ? globalThis.Number(object.signRequestId) : 0,
      noBroadcast: isSet(object.noBroadcast) ? globalThis.Boolean(object.noBroadcast) : false,
      mpcBtl: isSet(object.mpcBtl) ? globalThis.Number(object.mpcBtl) : 0,
      keyIds: globalThis.Array.isArray(object?.keyIds) ? object.keyIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: SignTxReqResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyId !== 0) {
      obj.keyId = Math.round(message.keyId);
    }
    if (message.walletType !== "") {
      obj.walletType = message.walletType;
    }
    if (message.unsignedTransaction.length !== 0) {
      obj.unsignedTransaction = base64FromBytes(message.unsignedTransaction);
    }
    if (message.signRequestId !== 0) {
      obj.signRequestId = Math.round(message.signRequestId);
    }
    if (message.noBroadcast !== false) {
      obj.noBroadcast = message.noBroadcast;
    }
    if (message.mpcBtl !== 0) {
      obj.mpcBtl = Math.round(message.mpcBtl);
    }
    if (message.keyIds?.length) {
      obj.keyIds = message.keyIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignTxReqResponse>, I>>(base?: I): SignTxReqResponse {
    return SignTxReqResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignTxReqResponse>, I>>(object: I): SignTxReqResponse {
    const message = createBaseSignTxReqResponse();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.keyId = object.keyId ?? 0;
    message.walletType = object.walletType ?? "";
    message.unsignedTransaction = object.unsignedTransaction ?? new Uint8Array(0);
    message.signRequestId = object.signRequestId ?? 0;
    message.noBroadcast = object.noBroadcast ?? false;
    message.mpcBtl = object.mpcBtl ?? 0;
    message.keyIds = object.keyIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseICATransactionRequest(): ICATransactionRequest {
  return {
    id: 0,
    creator: "",
    keyId: 0,
    keyType: 0,
    inputMsg: new Uint8Array(0),
    status: 0,
    signedData: [],
    keyringPartySignatures: [],
    rejectReason: "",
  };
}

export const ICATransactionRequest: MessageFns<ICATransactionRequest> = {
  encode(message: ICATransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.keyId !== 0) {
      writer.uint32(24).uint64(message.keyId);
    }
    if (message.keyType !== 0) {
      writer.uint32(32).int32(message.keyType);
    }
    if (message.inputMsg.length !== 0) {
      writer.uint32(42).bytes(message.inputMsg);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    for (const v of message.signedData) {
      writer.uint32(58).bytes(v!);
    }
    for (const v of message.keyringPartySignatures) {
      PartySignature.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.rejectReason !== "") {
      writer.uint32(74).string(message.rejectReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ICATransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseICATransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.keyType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inputMsg = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signedData.push(reader.bytes());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.keyringPartySignatures.push(PartySignature.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rejectReason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ICATransactionRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyId: isSet(object.keyId) ? globalThis.Number(object.keyId) : 0,
      keyType: isSet(object.keyType) ? keyTypeFromJSON(object.keyType) : 0,
      inputMsg: isSet(object.inputMsg) ? bytesFromBase64(object.inputMsg) : new Uint8Array(0),
      status: isSet(object.status) ? signRequestStatusFromJSON(object.status) : 0,
      signedData: globalThis.Array.isArray(object?.signedData)
        ? object.signedData.map((e: any) => bytesFromBase64(e))
        : [],
      keyringPartySignatures: globalThis.Array.isArray(object?.keyringPartySignatures)
        ? object.keyringPartySignatures.map((e: any) => PartySignature.fromJSON(e))
        : [],
      rejectReason: isSet(object.rejectReason) ? globalThis.String(object.rejectReason) : "",
    };
  },

  toJSON(message: ICATransactionRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyId !== 0) {
      obj.keyId = Math.round(message.keyId);
    }
    if (message.keyType !== 0) {
      obj.keyType = keyTypeToJSON(message.keyType);
    }
    if (message.inputMsg.length !== 0) {
      obj.inputMsg = base64FromBytes(message.inputMsg);
    }
    if (message.status !== 0) {
      obj.status = signRequestStatusToJSON(message.status);
    }
    if (message.signedData?.length) {
      obj.signedData = message.signedData.map((e) => base64FromBytes(e));
    }
    if (message.keyringPartySignatures?.length) {
      obj.keyringPartySignatures = message.keyringPartySignatures.map((e) => PartySignature.toJSON(e));
    }
    if (message.rejectReason !== "") {
      obj.rejectReason = message.rejectReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ICATransactionRequest>, I>>(base?: I): ICATransactionRequest {
    return ICATransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ICATransactionRequest>, I>>(object: I): ICATransactionRequest {
    const message = createBaseICATransactionRequest();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.keyId = object.keyId ?? 0;
    message.keyType = object.keyType ?? 0;
    message.inputMsg = object.inputMsg ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.signedData = object.signedData?.map((e) => e) || [];
    message.keyringPartySignatures = object.keyringPartySignatures?.map((e) => PartySignature.fromPartial(e)) || [];
    message.rejectReason = object.rejectReason ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
