// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zentp/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Bridge, BridgeStatus, bridgeStatusFromJSON, bridgeStatusToJSON } from "./bridge";
import { Params } from "./params";

export const protobufPackage = "zrchain.zentp";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/** QueryMintsRequest is request type for the Query/Mints RPC method. */
export interface QueryMintsRequest {
  id: number;
  creator: string;
  status: BridgeStatus;
  denom: string;
  pagination: PageRequest | undefined;
  txId: number;
}

/** QueryMintsResponse is response type for the Query/Mints RPC method. */
export interface QueryMintsResponse {
  mints: Bridge[];
  pagination: PageResponse | undefined;
}

/** QueryBurnsRequest is request type for the Query/Burns RPC method. */
export interface QueryBurnsRequest {
  id: number;
  denom: string;
  status: BridgeStatus;
  pagination: PageRequest | undefined;
  txId: number;
}

/** QueryBurnsResponse is response type for the Query/Burns RPC method. */
export interface QueryBurnsResponse {
  burns: Bridge[];
  pagination: PageResponse | undefined;
}

/** QueryStatsRequest is request type for the Query/Stats RPC method. */
export interface QueryStatsRequest {
  /** Optional */
  address: string;
  /** Optional */
  denom: string;
}

/** QueryStatsResponse is response type for the Query/Stats RPC method. */
export interface QueryStatsResponse {
  totalMinted: number;
  totalBurned: number;
  mintsCount: number;
  burnsCount: number;
}

export interface QuerySolanaROCKSupplyRequest {
}

export interface QuerySolanaROCKSupplyResponse {
  amount: number;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryMintsRequest(): QueryMintsRequest {
  return { id: 0, creator: "", status: 0, denom: "", pagination: undefined, txId: 0 };
}

export const QueryMintsRequest: MessageFns<QueryMintsRequest> = {
  encode(message: QueryMintsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(42).fork()).join();
    }
    if (message.txId !== 0) {
      writer.uint32(48).uint64(message.txId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMintsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMintsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.txId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMintsRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      status: isSet(object.status) ? bridgeStatusFromJSON(object.status) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      txId: isSet(object.txId) ? globalThis.Number(object.txId) : 0,
    };
  },

  toJSON(message: QueryMintsRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.status !== 0) {
      obj.status = bridgeStatusToJSON(message.status);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.txId !== 0) {
      obj.txId = Math.round(message.txId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMintsRequest>, I>>(base?: I): QueryMintsRequest {
    return QueryMintsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMintsRequest>, I>>(object: I): QueryMintsRequest {
    const message = createBaseQueryMintsRequest();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.status = object.status ?? 0;
    message.denom = object.denom ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.txId = object.txId ?? 0;
    return message;
  },
};

function createBaseQueryMintsResponse(): QueryMintsResponse {
  return { mints: [], pagination: undefined };
}

export const QueryMintsResponse: MessageFns<QueryMintsResponse> = {
  encode(message: QueryMintsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.mints) {
      Bridge.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMintsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMintsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mints.push(Bridge.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMintsResponse {
    return {
      mints: globalThis.Array.isArray(object?.mints) ? object.mints.map((e: any) => Bridge.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryMintsResponse): unknown {
    const obj: any = {};
    if (message.mints?.length) {
      obj.mints = message.mints.map((e) => Bridge.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMintsResponse>, I>>(base?: I): QueryMintsResponse {
    return QueryMintsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMintsResponse>, I>>(object: I): QueryMintsResponse {
    const message = createBaseQueryMintsResponse();
    message.mints = object.mints?.map((e) => Bridge.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBurnsRequest(): QueryBurnsRequest {
  return { id: 0, denom: "", status: 0, pagination: undefined, txId: 0 };
}

export const QueryBurnsRequest: MessageFns<QueryBurnsRequest> = {
  encode(message: QueryBurnsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    if (message.txId !== 0) {
      writer.uint32(40).uint64(message.txId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBurnsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBurnsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.txId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBurnsRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      status: isSet(object.status) ? bridgeStatusFromJSON(object.status) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      txId: isSet(object.txId) ? globalThis.Number(object.txId) : 0,
    };
  },

  toJSON(message: QueryBurnsRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.status !== 0) {
      obj.status = bridgeStatusToJSON(message.status);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.txId !== 0) {
      obj.txId = Math.round(message.txId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBurnsRequest>, I>>(base?: I): QueryBurnsRequest {
    return QueryBurnsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBurnsRequest>, I>>(object: I): QueryBurnsRequest {
    const message = createBaseQueryBurnsRequest();
    message.id = object.id ?? 0;
    message.denom = object.denom ?? "";
    message.status = object.status ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.txId = object.txId ?? 0;
    return message;
  },
};

function createBaseQueryBurnsResponse(): QueryBurnsResponse {
  return { burns: [], pagination: undefined };
}

export const QueryBurnsResponse: MessageFns<QueryBurnsResponse> = {
  encode(message: QueryBurnsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.burns) {
      Bridge.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBurnsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBurnsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.burns.push(Bridge.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBurnsResponse {
    return {
      burns: globalThis.Array.isArray(object?.burns) ? object.burns.map((e: any) => Bridge.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryBurnsResponse): unknown {
    const obj: any = {};
    if (message.burns?.length) {
      obj.burns = message.burns.map((e) => Bridge.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBurnsResponse>, I>>(base?: I): QueryBurnsResponse {
    return QueryBurnsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBurnsResponse>, I>>(object: I): QueryBurnsResponse {
    const message = createBaseQueryBurnsResponse();
    message.burns = object.burns?.map((e) => Bridge.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryStatsRequest(): QueryStatsRequest {
  return { address: "", denom: "" };
}

export const QueryStatsRequest: MessageFns<QueryStatsRequest> = {
  encode(message: QueryStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStatsRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
    };
  },

  toJSON(message: QueryStatsRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStatsRequest>, I>>(base?: I): QueryStatsRequest {
    return QueryStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStatsRequest>, I>>(object: I): QueryStatsRequest {
    const message = createBaseQueryStatsRequest();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseQueryStatsResponse(): QueryStatsResponse {
  return { totalMinted: 0, totalBurned: 0, mintsCount: 0, burnsCount: 0 };
}

export const QueryStatsResponse: MessageFns<QueryStatsResponse> = {
  encode(message: QueryStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalMinted !== 0) {
      writer.uint32(8).uint64(message.totalMinted);
    }
    if (message.totalBurned !== 0) {
      writer.uint32(16).uint64(message.totalBurned);
    }
    if (message.mintsCount !== 0) {
      writer.uint32(24).uint64(message.mintsCount);
    }
    if (message.burnsCount !== 0) {
      writer.uint32(32).uint64(message.burnsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalMinted = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalBurned = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mintsCount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.burnsCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStatsResponse {
    return {
      totalMinted: isSet(object.totalMinted) ? globalThis.Number(object.totalMinted) : 0,
      totalBurned: isSet(object.totalBurned) ? globalThis.Number(object.totalBurned) : 0,
      mintsCount: isSet(object.mintsCount) ? globalThis.Number(object.mintsCount) : 0,
      burnsCount: isSet(object.burnsCount) ? globalThis.Number(object.burnsCount) : 0,
    };
  },

  toJSON(message: QueryStatsResponse): unknown {
    const obj: any = {};
    if (message.totalMinted !== 0) {
      obj.totalMinted = Math.round(message.totalMinted);
    }
    if (message.totalBurned !== 0) {
      obj.totalBurned = Math.round(message.totalBurned);
    }
    if (message.mintsCount !== 0) {
      obj.mintsCount = Math.round(message.mintsCount);
    }
    if (message.burnsCount !== 0) {
      obj.burnsCount = Math.round(message.burnsCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStatsResponse>, I>>(base?: I): QueryStatsResponse {
    return QueryStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStatsResponse>, I>>(object: I): QueryStatsResponse {
    const message = createBaseQueryStatsResponse();
    message.totalMinted = object.totalMinted ?? 0;
    message.totalBurned = object.totalBurned ?? 0;
    message.mintsCount = object.mintsCount ?? 0;
    message.burnsCount = object.burnsCount ?? 0;
    return message;
  },
};

function createBaseQuerySolanaROCKSupplyRequest(): QuerySolanaROCKSupplyRequest {
  return {};
}

export const QuerySolanaROCKSupplyRequest: MessageFns<QuerySolanaROCKSupplyRequest> = {
  encode(_: QuerySolanaROCKSupplyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuerySolanaROCKSupplyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySolanaROCKSupplyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QuerySolanaROCKSupplyRequest {
    return {};
  },

  toJSON(_: QuerySolanaROCKSupplyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySolanaROCKSupplyRequest>, I>>(base?: I): QuerySolanaROCKSupplyRequest {
    return QuerySolanaROCKSupplyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySolanaROCKSupplyRequest>, I>>(_: I): QuerySolanaROCKSupplyRequest {
    const message = createBaseQuerySolanaROCKSupplyRequest();
    return message;
  },
};

function createBaseQuerySolanaROCKSupplyResponse(): QuerySolanaROCKSupplyResponse {
  return { amount: 0 };
}

export const QuerySolanaROCKSupplyResponse: MessageFns<QuerySolanaROCKSupplyResponse> = {
  encode(message: QuerySolanaROCKSupplyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuerySolanaROCKSupplyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySolanaROCKSupplyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySolanaROCKSupplyResponse {
    return { amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0 };
  },

  toJSON(message: QuerySolanaROCKSupplyResponse): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySolanaROCKSupplyResponse>, I>>(base?: I): QuerySolanaROCKSupplyResponse {
    return QuerySolanaROCKSupplyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySolanaROCKSupplyResponse>, I>>(
    object: I,
  ): QuerySolanaROCKSupplyResponse {
    const message = createBaseQuerySolanaROCKSupplyResponse();
    message.amount = object.amount ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Mints. */
  Mints(request: QueryMintsRequest): Promise<QueryMintsResponse>;
  /** Queries a list of Burns items. */
  Burns(request: QueryBurnsRequest): Promise<QueryBurnsResponse>;
  /** Stats queries the total amounts of mints and burns for an address */
  Stats(request: QueryStatsRequest): Promise<QueryStatsResponse>;
  /** QuerySolanaROCKSupply queries the amount of ROCK on Solana. */
  QuerySolanaROCKSupply(request: QuerySolanaROCKSupplyRequest): Promise<QuerySolanaROCKSupplyResponse>;
}

export const QueryServiceName = "zrchain.zentp.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Mints = this.Mints.bind(this);
    this.Burns = this.Burns.bind(this);
    this.Stats = this.Stats.bind(this);
    this.QuerySolanaROCKSupply = this.QuerySolanaROCKSupply.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Mints(request: QueryMintsRequest): Promise<QueryMintsResponse> {
    const data = QueryMintsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Mints", data);
    return promise.then((data) => QueryMintsResponse.decode(new BinaryReader(data)));
  }

  Burns(request: QueryBurnsRequest): Promise<QueryBurnsResponse> {
    const data = QueryBurnsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Burns", data);
    return promise.then((data) => QueryBurnsResponse.decode(new BinaryReader(data)));
  }

  Stats(request: QueryStatsRequest): Promise<QueryStatsResponse> {
    const data = QueryStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Stats", data);
    return promise.then((data) => QueryStatsResponse.decode(new BinaryReader(data)));
  }

  QuerySolanaROCKSupply(request: QuerySolanaROCKSupplyRequest): Promise<QuerySolanaROCKSupplyResponse> {
    const data = QuerySolanaROCKSupplyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuerySolanaROCKSupply", data);
    return promise.then((data) => QuerySolanaROCKSupplyResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
