// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/policy/policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";

export const protobufPackage = "zrchain.policy";

/** Policy defines a policy that can be used to validate a transaction */
export interface Policy {
  creator: string;
  id: number;
  name: string;
  policy: Any | undefined;
  btl: number;
}

/** BoolparserPolicy defines a policy that can be used to validate a transaction */
export interface BoolparserPolicy {
  /**
   * Definition of the policy, eg.
   * "t1 + t2 + t3 > 1"
   */
  definition: string;
  participants: PolicyParticipant[];
}

/** PolicyParticipant defines a participant in a policy */
export interface PolicyParticipant {
  /** @deprecated */
  abbreviation: string;
  address: string;
}

function createBasePolicy(): Policy {
  return { creator: "", id: 0, name: "", policy: undefined, btl: 0 };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.policy !== undefined) {
      Any.encode(message.policy, writer.uint32(34).fork()).join();
    }
    if (message.btl !== 0) {
      writer.uint32(40).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.policy = Any.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      policy: isSet(object.policy) ? Any.fromJSON(object.policy) : undefined,
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.policy !== undefined) {
      obj.policy = Any.toJSON(message.policy);
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy>, I>>(base?: I): Policy {
    return Policy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy>, I>>(object: I): Policy {
    const message = createBasePolicy();
    message.creator = object.creator ?? "";
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Any.fromPartial(object.policy)
      : undefined;
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseBoolparserPolicy(): BoolparserPolicy {
  return { definition: "", participants: [] };
}

export const BoolparserPolicy: MessageFns<BoolparserPolicy> = {
  encode(message: BoolparserPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.definition !== "") {
      writer.uint32(10).string(message.definition);
    }
    for (const v of message.participants) {
      PolicyParticipant.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BoolparserPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoolparserPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participants.push(PolicyParticipant.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoolparserPolicy {
    return {
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => PolicyParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BoolparserPolicy): unknown {
    const obj: any = {};
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => PolicyParticipant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BoolparserPolicy>, I>>(base?: I): BoolparserPolicy {
    return BoolparserPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BoolparserPolicy>, I>>(object: I): BoolparserPolicy {
    const message = createBaseBoolparserPolicy();
    message.definition = object.definition ?? "";
    message.participants = object.participants?.map((e) => PolicyParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBasePolicyParticipant(): PolicyParticipant {
  return { abbreviation: "", address: "" };
}

export const PolicyParticipant: MessageFns<PolicyParticipant> = {
  encode(message: PolicyParticipant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.abbreviation !== "") {
      writer.uint32(10).string(message.abbreviation);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyParticipant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.abbreviation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyParticipant {
    return {
      abbreviation: isSet(object.abbreviation) ? globalThis.String(object.abbreviation) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: PolicyParticipant): unknown {
    const obj: any = {};
    if (message.abbreviation !== "") {
      obj.abbreviation = message.abbreviation;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PolicyParticipant>, I>>(base?: I): PolicyParticipant {
    return PolicyParticipant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PolicyParticipant>, I>>(object: I): PolicyParticipant {
    const message = createBasePolicyParticipant();
    message.abbreviation = object.abbreviation ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
