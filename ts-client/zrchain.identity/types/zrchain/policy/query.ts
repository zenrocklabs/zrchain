// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/policy/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Any } from "../../google/protobuf/any";
import { Action, ActionResponse, ActionStatus, actionStatusFromJSON, actionStatusToJSON } from "./action";
import { Params } from "./params";
import { Policy } from "./policy";

export const protobufPackage = "zrchain.policy";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/** QueryActionsRequest is request type for the Query/Actions RPC method. */
export interface QueryActionsRequest {
  pagination: PageRequest | undefined;
  address: string;
  status: ActionStatus;
}

/** QueryActionsResponse is response type for the Query/Actions RPC method. */
export interface QueryActionsResponse {
  pagination: PageResponse | undefined;
  actions: ActionResponse[];
}

/** QueryPoliciesRequest is request type for the Query/Policies RPC method. */
export interface QueryPoliciesRequest {
  pagination: PageRequest | undefined;
}

/** PolicyResponse defines the properties of a policy. */
export interface PolicyResponse {
  policy: Policy | undefined;
  metadata: Any | undefined;
}

/** QueryPoliciesResponse is response type for the Query/Policies RPC method. */
export interface QueryPoliciesResponse {
  pagination: PageResponse | undefined;
  policies: PolicyResponse[];
}

/** QueryPolicyByIdRequest is request type for the Query/PolicyById RPC method. */
export interface QueryPolicyByIdRequest {
  id: number;
}

/** QueryPolicyByIdResponse is response type for the Query/PolicyById RPC method. */
export interface QueryPolicyByIdResponse {
  policy: PolicyResponse | undefined;
}

/**
 * QuerySignMethodsByAddressRequest is request type for the
 * Query/SignMethodsByAddress RPC method.
 */
export interface QuerySignMethodsByAddressRequest {
  pagination: PageRequest | undefined;
  address: string;
}

/**
 * QuerySignMethodsByAddressResponse is response type for the
 * Query/SignMethodsByAddress RPC method.
 */
export interface QuerySignMethodsByAddressResponse {
  pagination: PageResponse | undefined;
  config: Any[];
}

/**
 * QueryPoliciesByCreatorRequest is request type for the
 * Query/PoliciesByCreatorRequest RPC method.
 */
export interface QueryPoliciesByCreatorRequest {
  creators: string[];
  pagination: PageRequest | undefined;
}

/**
 * QueryPoliciesByCreatorResponse is response type for the
 * Query/PoliciesByCreatorRequest RPC method.
 */
export interface QueryPoliciesByCreatorResponse {
  policies: Policy[];
  pagination: PageResponse | undefined;
}

/**
 * QueryActionDetailsByIdRequest is request type for the
 * Query/ActionDetailsById RPC method.
 */
export interface QueryActionDetailsByIdRequest {
  id: number;
}

/**
 * QueryActionDetailsByIdResponse is response type for the
 * Query/ActionDetailsById RPC method.
 */
export interface QueryActionDetailsByIdResponse {
  id: number;
  action: Action | undefined;
  policy: Policy | undefined;
  approvers: string[];
  pendingApprovers: string[];
  currentHeight: number;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryActionsRequest(): QueryActionsRequest {
  return { pagination: undefined, address: "", status: 0 };
}

export const QueryActionsRequest: MessageFns<QueryActionsRequest> = {
  encode(message: QueryActionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryActionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryActionsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      status: isSet(object.status) ? actionStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: QueryActionsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.status !== 0) {
      obj.status = actionStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryActionsRequest>, I>>(base?: I): QueryActionsRequest {
    return QueryActionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryActionsRequest>, I>>(object: I): QueryActionsRequest {
    const message = createBaseQueryActionsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.address = object.address ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseQueryActionsResponse(): QueryActionsResponse {
  return { pagination: undefined, actions: [] };
}

export const QueryActionsResponse: MessageFns<QueryActionsResponse> = {
  encode(message: QueryActionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.actions) {
      ActionResponse.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryActionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actions.push(ActionResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryActionsResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => ActionResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryActionsResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => ActionResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryActionsResponse>, I>>(base?: I): QueryActionsResponse {
    return QueryActionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryActionsResponse>, I>>(object: I): QueryActionsResponse {
    const message = createBaseQueryActionsResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.actions = object.actions?.map((e) => ActionResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryPoliciesRequest(): QueryPoliciesRequest {
  return { pagination: undefined };
}

export const QueryPoliciesRequest: MessageFns<QueryPoliciesRequest> = {
  encode(message: QueryPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoliciesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryPoliciesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoliciesRequest>, I>>(base?: I): QueryPoliciesRequest {
    return QueryPoliciesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoliciesRequest>, I>>(object: I): QueryPoliciesRequest {
    const message = createBaseQueryPoliciesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBasePolicyResponse(): PolicyResponse {
  return { policy: undefined, metadata: undefined };
}

export const PolicyResponse: MessageFns<PolicyResponse> = {
  encode(message: PolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      Any.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyResponse {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      metadata: isSet(object.metadata) ? Any.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: PolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Any.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PolicyResponse>, I>>(base?: I): PolicyResponse {
    return PolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PolicyResponse>, I>>(object: I): PolicyResponse {
    const message = createBasePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Any.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseQueryPoliciesResponse(): QueryPoliciesResponse {
  return { pagination: undefined, policies: [] };
}

export const QueryPoliciesResponse: MessageFns<QueryPoliciesResponse> = {
  encode(message: QueryPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.policies) {
      PolicyResponse.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.policies.push(PolicyResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoliciesResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      policies: globalThis.Array.isArray(object?.policies)
        ? object.policies.map((e: any) => PolicyResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryPoliciesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => PolicyResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoliciesResponse>, I>>(base?: I): QueryPoliciesResponse {
    return QueryPoliciesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoliciesResponse>, I>>(object: I): QueryPoliciesResponse {
    const message = createBaseQueryPoliciesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.policies = object.policies?.map((e) => PolicyResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryPolicyByIdRequest(): QueryPolicyByIdRequest {
  return { id: 0 };
}

export const QueryPolicyByIdRequest: MessageFns<QueryPolicyByIdRequest> = {
  encode(message: QueryPolicyByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPolicyByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPolicyByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPolicyByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryPolicyByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPolicyByIdRequest>, I>>(base?: I): QueryPolicyByIdRequest {
    return QueryPolicyByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPolicyByIdRequest>, I>>(object: I): QueryPolicyByIdRequest {
    const message = createBaseQueryPolicyByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryPolicyByIdResponse(): QueryPolicyByIdResponse {
  return { policy: undefined };
}

export const QueryPolicyByIdResponse: MessageFns<QueryPolicyByIdResponse> = {
  encode(message: QueryPolicyByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      PolicyResponse.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPolicyByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPolicyByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policy = PolicyResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPolicyByIdResponse {
    return { policy: isSet(object.policy) ? PolicyResponse.fromJSON(object.policy) : undefined };
  },

  toJSON(message: QueryPolicyByIdResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PolicyResponse.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPolicyByIdResponse>, I>>(base?: I): QueryPolicyByIdResponse {
    return QueryPolicyByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPolicyByIdResponse>, I>>(object: I): QueryPolicyByIdResponse {
    const message = createBaseQueryPolicyByIdResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PolicyResponse.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseQuerySignMethodsByAddressRequest(): QuerySignMethodsByAddressRequest {
  return { pagination: undefined, address: "" };
}

export const QuerySignMethodsByAddressRequest: MessageFns<QuerySignMethodsByAddressRequest> = {
  encode(message: QuerySignMethodsByAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuerySignMethodsByAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySignMethodsByAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySignMethodsByAddressRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QuerySignMethodsByAddressRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySignMethodsByAddressRequest>, I>>(
    base?: I,
  ): QuerySignMethodsByAddressRequest {
    return QuerySignMethodsByAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySignMethodsByAddressRequest>, I>>(
    object: I,
  ): QuerySignMethodsByAddressRequest {
    const message = createBaseQuerySignMethodsByAddressRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQuerySignMethodsByAddressResponse(): QuerySignMethodsByAddressResponse {
  return { pagination: undefined, config: [] };
}

export const QuerySignMethodsByAddressResponse: MessageFns<QuerySignMethodsByAddressResponse> = {
  encode(message: QuerySignMethodsByAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.config) {
      Any.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuerySignMethodsByAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySignMethodsByAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySignMethodsByAddressResponse {
    return {
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      config: globalThis.Array.isArray(object?.config) ? object.config.map((e: any) => Any.fromJSON(e)) : [],
    };
  },

  toJSON(message: QuerySignMethodsByAddressResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.config?.length) {
      obj.config = message.config.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySignMethodsByAddressResponse>, I>>(
    base?: I,
  ): QuerySignMethodsByAddressResponse {
    return QuerySignMethodsByAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySignMethodsByAddressResponse>, I>>(
    object: I,
  ): QuerySignMethodsByAddressResponse {
    const message = createBaseQuerySignMethodsByAddressResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.config = object.config?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryPoliciesByCreatorRequest(): QueryPoliciesByCreatorRequest {
  return { creators: [], pagination: undefined };
}

export const QueryPoliciesByCreatorRequest: MessageFns<QueryPoliciesByCreatorRequest> = {
  encode(message: QueryPoliciesByCreatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.creators) {
      writer.uint32(10).string(v!);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoliciesByCreatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoliciesByCreatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creators.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoliciesByCreatorRequest {
    return {
      creators: globalThis.Array.isArray(object?.creators) ? object.creators.map((e: any) => globalThis.String(e)) : [],
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPoliciesByCreatorRequest): unknown {
    const obj: any = {};
    if (message.creators?.length) {
      obj.creators = message.creators;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoliciesByCreatorRequest>, I>>(base?: I): QueryPoliciesByCreatorRequest {
    return QueryPoliciesByCreatorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoliciesByCreatorRequest>, I>>(
    object: I,
  ): QueryPoliciesByCreatorRequest {
    const message = createBaseQueryPoliciesByCreatorRequest();
    message.creators = object.creators?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPoliciesByCreatorResponse(): QueryPoliciesByCreatorResponse {
  return { policies: [], pagination: undefined };
}

export const QueryPoliciesByCreatorResponse: MessageFns<QueryPoliciesByCreatorResponse> = {
  encode(message: QueryPoliciesByCreatorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policies) {
      Policy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoliciesByCreatorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoliciesByCreatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policies.push(Policy.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoliciesByCreatorResponse {
    return {
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => Policy.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPoliciesByCreatorResponse): unknown {
    const obj: any = {};
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => Policy.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoliciesByCreatorResponse>, I>>(base?: I): QueryPoliciesByCreatorResponse {
    return QueryPoliciesByCreatorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoliciesByCreatorResponse>, I>>(
    object: I,
  ): QueryPoliciesByCreatorResponse {
    const message = createBaseQueryPoliciesByCreatorResponse();
    message.policies = object.policies?.map((e) => Policy.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryActionDetailsByIdRequest(): QueryActionDetailsByIdRequest {
  return { id: 0 };
}

export const QueryActionDetailsByIdRequest: MessageFns<QueryActionDetailsByIdRequest> = {
  encode(message: QueryActionDetailsByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryActionDetailsByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryActionDetailsByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryActionDetailsByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryActionDetailsByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryActionDetailsByIdRequest>, I>>(base?: I): QueryActionDetailsByIdRequest {
    return QueryActionDetailsByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryActionDetailsByIdRequest>, I>>(
    object: I,
  ): QueryActionDetailsByIdRequest {
    const message = createBaseQueryActionDetailsByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryActionDetailsByIdResponse(): QueryActionDetailsByIdResponse {
  return { id: 0, action: undefined, policy: undefined, approvers: [], pendingApprovers: [], currentHeight: 0 };
}

export const QueryActionDetailsByIdResponse: MessageFns<QueryActionDetailsByIdResponse> = {
  encode(message: QueryActionDetailsByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.action !== undefined) {
      Action.encode(message.action, writer.uint32(18).fork()).join();
    }
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(26).fork()).join();
    }
    for (const v of message.approvers) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.pendingApprovers) {
      writer.uint32(42).string(v!);
    }
    if (message.currentHeight !== 0) {
      writer.uint32(48).uint64(message.currentHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryActionDetailsByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryActionDetailsByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.action = Action.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.approvers.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pendingApprovers.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.currentHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryActionDetailsByIdResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      action: isSet(object.action) ? Action.fromJSON(object.action) : undefined,
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      approvers: globalThis.Array.isArray(object?.approvers)
        ? object.approvers.map((e: any) => globalThis.String(e))
        : [],
      pendingApprovers: globalThis.Array.isArray(object?.pendingApprovers)
        ? object.pendingApprovers.map((e: any) => globalThis.String(e))
        : [],
      currentHeight: isSet(object.currentHeight) ? globalThis.Number(object.currentHeight) : 0,
    };
  },

  toJSON(message: QueryActionDetailsByIdResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.action !== undefined) {
      obj.action = Action.toJSON(message.action);
    }
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.approvers?.length) {
      obj.approvers = message.approvers;
    }
    if (message.pendingApprovers?.length) {
      obj.pendingApprovers = message.pendingApprovers;
    }
    if (message.currentHeight !== 0) {
      obj.currentHeight = Math.round(message.currentHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryActionDetailsByIdResponse>, I>>(base?: I): QueryActionDetailsByIdResponse {
    return QueryActionDetailsByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryActionDetailsByIdResponse>, I>>(
    object: I,
  ): QueryActionDetailsByIdResponse {
    const message = createBaseQueryActionDetailsByIdResponse();
    message.id = object.id ?? 0;
    message.action = (object.action !== undefined && object.action !== null)
      ? Action.fromPartial(object.action)
      : undefined;
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.approvers = object.approvers?.map((e) => e) || [];
    message.pendingApprovers = object.pendingApprovers?.map((e) => e) || [];
    message.currentHeight = object.currentHeight ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Actions items. */
  Actions(request: QueryActionsRequest): Promise<QueryActionsResponse>;
  /** Queries a list of Policies items. */
  Policies(request: QueryPoliciesRequest): Promise<QueryPoliciesResponse>;
  /** Queries a list of PolicyById items. */
  PolicyById(request: QueryPolicyByIdRequest): Promise<QueryPolicyByIdResponse>;
  /** Queries a list of SignMethodsByAddress items. */
  SignMethodsByAddress(request: QuerySignMethodsByAddressRequest): Promise<QuerySignMethodsByAddressResponse>;
  /** Queries a list of PoliciesByCreator items. */
  PoliciesByCreator(request: QueryPoliciesByCreatorRequest): Promise<QueryPoliciesByCreatorResponse>;
  /** Queries a list of ActionDetailsById items. */
  ActionDetailsById(request: QueryActionDetailsByIdRequest): Promise<QueryActionDetailsByIdResponse>;
}

export const QueryServiceName = "zrchain.policy.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Actions = this.Actions.bind(this);
    this.Policies = this.Policies.bind(this);
    this.PolicyById = this.PolicyById.bind(this);
    this.SignMethodsByAddress = this.SignMethodsByAddress.bind(this);
    this.PoliciesByCreator = this.PoliciesByCreator.bind(this);
    this.ActionDetailsById = this.ActionDetailsById.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Actions(request: QueryActionsRequest): Promise<QueryActionsResponse> {
    const data = QueryActionsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Actions", data);
    return promise.then((data) => QueryActionsResponse.decode(new BinaryReader(data)));
  }

  Policies(request: QueryPoliciesRequest): Promise<QueryPoliciesResponse> {
    const data = QueryPoliciesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Policies", data);
    return promise.then((data) => QueryPoliciesResponse.decode(new BinaryReader(data)));
  }

  PolicyById(request: QueryPolicyByIdRequest): Promise<QueryPolicyByIdResponse> {
    const data = QueryPolicyByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PolicyById", data);
    return promise.then((data) => QueryPolicyByIdResponse.decode(new BinaryReader(data)));
  }

  SignMethodsByAddress(request: QuerySignMethodsByAddressRequest): Promise<QuerySignMethodsByAddressResponse> {
    const data = QuerySignMethodsByAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignMethodsByAddress", data);
    return promise.then((data) => QuerySignMethodsByAddressResponse.decode(new BinaryReader(data)));
  }

  PoliciesByCreator(request: QueryPoliciesByCreatorRequest): Promise<QueryPoliciesByCreatorResponse> {
    const data = QueryPoliciesByCreatorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoliciesByCreator", data);
    return promise.then((data) => QueryPoliciesByCreatorResponse.decode(new BinaryReader(data)));
  }

  ActionDetailsById(request: QueryActionDetailsByIdRequest): Promise<QueryActionDetailsByIdResponse> {
    const data = QueryActionDetailsByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionDetailsById", data);
    return promise.then((data) => QueryActionDetailsByIdResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
