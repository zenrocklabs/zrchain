// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/policy/sign_method_passkey.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.policy";

/** SignMethodPasskey defines a structure containing passkey related data */
export interface SignMethodPasskey {
  rawId: Uint8Array;
  attestationObject: Uint8Array;
  clientDataJson: Uint8Array;
  active: boolean;
}

function createBaseSignMethodPasskey(): SignMethodPasskey {
  return {
    rawId: new Uint8Array(0),
    attestationObject: new Uint8Array(0),
    clientDataJson: new Uint8Array(0),
    active: false,
  };
}

export const SignMethodPasskey: MessageFns<SignMethodPasskey> = {
  encode(message: SignMethodPasskey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawId.length !== 0) {
      writer.uint32(10).bytes(message.rawId);
    }
    if (message.attestationObject.length !== 0) {
      writer.uint32(18).bytes(message.attestationObject);
    }
    if (message.clientDataJson.length !== 0) {
      writer.uint32(26).bytes(message.clientDataJson);
    }
    if (message.active !== false) {
      writer.uint32(32).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignMethodPasskey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignMethodPasskey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawId = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attestationObject = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientDataJson = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignMethodPasskey {
    return {
      rawId: isSet(object.rawId) ? bytesFromBase64(object.rawId) : new Uint8Array(0),
      attestationObject: isSet(object.attestationObject)
        ? bytesFromBase64(object.attestationObject)
        : new Uint8Array(0),
      clientDataJson: isSet(object.clientDataJson) ? bytesFromBase64(object.clientDataJson) : new Uint8Array(0),
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: SignMethodPasskey): unknown {
    const obj: any = {};
    if (message.rawId.length !== 0) {
      obj.rawId = base64FromBytes(message.rawId);
    }
    if (message.attestationObject.length !== 0) {
      obj.attestationObject = base64FromBytes(message.attestationObject);
    }
    if (message.clientDataJson.length !== 0) {
      obj.clientDataJson = base64FromBytes(message.clientDataJson);
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignMethodPasskey>, I>>(base?: I): SignMethodPasskey {
    return SignMethodPasskey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignMethodPasskey>, I>>(object: I): SignMethodPasskey {
    const message = createBaseSignMethodPasskey();
    message.rawId = object.rawId ?? new Uint8Array(0);
    message.attestationObject = object.attestationObject ?? new Uint8Array(0);
    message.clientDataJson = object.clientDataJson ?? new Uint8Array(0);
    message.active = object.active ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
