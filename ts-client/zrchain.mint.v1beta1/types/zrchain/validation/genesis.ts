// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/validation/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BTCBlockHeader } from "../../api/sidecar_service";
import { NonceData, RequestedBitcoinHeaders } from "../zenbtc/mint";
import { AssetData } from "./asset_data";
import { HVParams, SlashEvent, ValidationInfo, ValidatorHV } from "./hybrid_validation";
import { SolanaNonce } from "./solana";
import { Delegation, Params, Redelegation, UnbondingDelegation } from "./staking";
import { BackfillRequests } from "./tx";

export const protobufPackage = "zrchain.validation";

/** GenesisState defines the staking module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of related to deposit. */
  params:
    | Params
    | undefined;
  /**
   * last_total_power tracks the total amounts of bonded tokens recorded during
   * the previous end block.
   */
  lastTotalPower: Uint8Array;
  /**
   * last_validator_powers is a special index that provides a historical list
   * of the last-block's bonded validators.
   */
  lastValidatorPowers: LastValidatorPower[];
  /** validators defines the validator set at genesis. */
  validators: ValidatorHV[];
  /** delegations defines the delegations active at genesis. */
  delegations: Delegation[];
  /** unbonding_delegations defines the unbonding delegations active at genesis. */
  unbondingDelegations: UnbondingDelegation[];
  /** redelegations defines the redelegations active at genesis. */
  redelegations: Redelegation[];
  /**
   * exported defines a bool to identify whether the chain dealing with exported
   * or initialized genesis.
   */
  exported: boolean;
  /** hv_params defines the hybrid validation parameters at genesis. */
  hvParams: HVParams | undefined;
  assetPrices: AssetData[];
  /** last_valid_ve_height defines the last valid ve height at genesis. */
  lastValidVeHeight: number;
  /** slash_events defines the slash events at genesis. */
  slashEvents: SlashEvent[];
  /** slash_event_count defines the slash event count at genesis. */
  slashEventCount: number;
  /** validation_infos defines the validation infos at genesis. */
  validationInfos: ValidationInfo[];
  /** btc_block_headers defines the Bitcoin block headers at genesis. */
  btcBlockHeaders: BTCBlockHeader[];
  /** last_used_solana_nonce defines the last used Solana nonce at genesis. */
  lastUsedSolanaNonce: SolanaNonce[];
  /** backfill_requests defines the backfill requests at genesis. */
  backfillRequest:
    | BackfillRequests
    | undefined;
  /** last_used_ethereum_nonce defines the last used Ethereum nonce at genesis. */
  lastUsedEthereumNonce: NonceData[];
  /** requested_historical_bitcoin_headers defines the requested historical Bitcoin headers at genesis. */
  requestedHistoricalBitcoinHeaders: RequestedBitcoinHeaders[];
  /** avs_rewards_pool defines the AVS rewards pool at genesis. */
  avsRewardsPool: string[];
  /** ethereum_nonce_requested defines the Ethereum nonce requested at genesis. */
  ethereumNonceRequested: number[];
  /** solana_nonce_requested defines the Solana nonce requested at genesis. */
  solanaNonceRequested: number[];
  /** solana_zentp_accounts_requested defines the Solana Zentp accounts requested at genesis. */
  solanaZentpAccountsRequested: string[];
  /** solana_accounts_requested defines the Solana accounts requested at genesis. */
  solanaAccountsRequested: string[];
}

/** LastValidatorPower required for validator set update logic. */
export interface LastValidatorPower {
  /** address is the address of the validator. */
  address: string;
  /** power defines the power of the validator. */
  power: number;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    lastTotalPower: new Uint8Array(0),
    lastValidatorPowers: [],
    validators: [],
    delegations: [],
    unbondingDelegations: [],
    redelegations: [],
    exported: false,
    hvParams: undefined,
    assetPrices: [],
    lastValidVeHeight: 0,
    slashEvents: [],
    slashEventCount: 0,
    validationInfos: [],
    btcBlockHeaders: [],
    lastUsedSolanaNonce: [],
    backfillRequest: undefined,
    lastUsedEthereumNonce: [],
    requestedHistoricalBitcoinHeaders: [],
    avsRewardsPool: [],
    ethereumNonceRequested: [],
    solanaNonceRequested: [],
    solanaZentpAccountsRequested: [],
    solanaAccountsRequested: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.lastTotalPower.length !== 0) {
      writer.uint32(18).bytes(message.lastTotalPower);
    }
    for (const v of message.lastValidatorPowers) {
      LastValidatorPower.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.validators) {
      ValidatorHV.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.delegations) {
      Delegation.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.redelegations) {
      Redelegation.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.exported !== false) {
      writer.uint32(64).bool(message.exported);
    }
    if (message.hvParams !== undefined) {
      HVParams.encode(message.hvParams, writer.uint32(74).fork()).join();
    }
    for (const v of message.assetPrices) {
      AssetData.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.lastValidVeHeight !== 0) {
      writer.uint32(88).int64(message.lastValidVeHeight);
    }
    for (const v of message.slashEvents) {
      SlashEvent.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.slashEventCount !== 0) {
      writer.uint32(104).uint64(message.slashEventCount);
    }
    for (const v of message.validationInfos) {
      ValidationInfo.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.btcBlockHeaders) {
      BTCBlockHeader.encode(v!, writer.uint32(122).fork()).join();
    }
    for (const v of message.lastUsedSolanaNonce) {
      SolanaNonce.encode(v!, writer.uint32(130).fork()).join();
    }
    if (message.backfillRequest !== undefined) {
      BackfillRequests.encode(message.backfillRequest, writer.uint32(138).fork()).join();
    }
    for (const v of message.lastUsedEthereumNonce) {
      NonceData.encode(v!, writer.uint32(146).fork()).join();
    }
    for (const v of message.requestedHistoricalBitcoinHeaders) {
      RequestedBitcoinHeaders.encode(v!, writer.uint32(154).fork()).join();
    }
    for (const v of message.avsRewardsPool) {
      writer.uint32(162).string(v!);
    }
    writer.uint32(170).fork();
    for (const v of message.ethereumNonceRequested) {
      writer.uint64(v);
    }
    writer.join();
    writer.uint32(178).fork();
    for (const v of message.solanaNonceRequested) {
      writer.uint64(v);
    }
    writer.join();
    for (const v of message.solanaZentpAccountsRequested) {
      writer.uint32(186).string(v!);
    }
    for (const v of message.solanaAccountsRequested) {
      writer.uint32(194).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastTotalPower = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastValidatorPowers.push(LastValidatorPower.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.validators.push(ValidatorHV.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.delegations.push(Delegation.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.redelegations.push(Redelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.exported = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.hvParams = HVParams.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.assetPrices.push(AssetData.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.lastValidVeHeight = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.slashEvents.push(SlashEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.slashEventCount = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.validationInfos.push(ValidationInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.btcBlockHeaders.push(BTCBlockHeader.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.lastUsedSolanaNonce.push(SolanaNonce.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.backfillRequest = BackfillRequests.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.lastUsedEthereumNonce.push(NonceData.decode(reader, reader.uint32()));
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.requestedHistoricalBitcoinHeaders.push(RequestedBitcoinHeaders.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.avsRewardsPool.push(reader.string());
          continue;
        }
        case 21: {
          if (tag === 168) {
            message.ethereumNonceRequested.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 170) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ethereumNonceRequested.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 22: {
          if (tag === 176) {
            message.solanaNonceRequested.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 178) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.solanaNonceRequested.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.solanaZentpAccountsRequested.push(reader.string());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.solanaAccountsRequested.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      lastTotalPower: isSet(object.lastTotalPower) ? bytesFromBase64(object.lastTotalPower) : new Uint8Array(0),
      lastValidatorPowers: globalThis.Array.isArray(object?.lastValidatorPowers)
        ? object.lastValidatorPowers.map((e: any) => LastValidatorPower.fromJSON(e))
        : [],
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => ValidatorHV.fromJSON(e))
        : [],
      delegations: globalThis.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => Delegation.fromJSON(e))
        : [],
      unbondingDelegations: globalThis.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      redelegations: globalThis.Array.isArray(object?.redelegations)
        ? object.redelegations.map((e: any) => Redelegation.fromJSON(e))
        : [],
      exported: isSet(object.exported) ? globalThis.Boolean(object.exported) : false,
      hvParams: isSet(object.hvParams) ? HVParams.fromJSON(object.hvParams) : undefined,
      assetPrices: globalThis.Array.isArray(object?.assetPrices)
        ? object.assetPrices.map((e: any) => AssetData.fromJSON(e))
        : [],
      lastValidVeHeight: isSet(object.lastValidVeHeight) ? globalThis.Number(object.lastValidVeHeight) : 0,
      slashEvents: globalThis.Array.isArray(object?.slashEvents)
        ? object.slashEvents.map((e: any) => SlashEvent.fromJSON(e))
        : [],
      slashEventCount: isSet(object.slashEventCount) ? globalThis.Number(object.slashEventCount) : 0,
      validationInfos: globalThis.Array.isArray(object?.validationInfos)
        ? object.validationInfos.map((e: any) => ValidationInfo.fromJSON(e))
        : [],
      btcBlockHeaders: globalThis.Array.isArray(object?.btcBlockHeaders)
        ? object.btcBlockHeaders.map((e: any) => BTCBlockHeader.fromJSON(e))
        : [],
      lastUsedSolanaNonce: globalThis.Array.isArray(object?.lastUsedSolanaNonce)
        ? object.lastUsedSolanaNonce.map((e: any) => SolanaNonce.fromJSON(e))
        : [],
      backfillRequest: isSet(object.backfillRequest) ? BackfillRequests.fromJSON(object.backfillRequest) : undefined,
      lastUsedEthereumNonce: globalThis.Array.isArray(object?.lastUsedEthereumNonce)
        ? object.lastUsedEthereumNonce.map((e: any) => NonceData.fromJSON(e))
        : [],
      requestedHistoricalBitcoinHeaders: globalThis.Array.isArray(object?.requestedHistoricalBitcoinHeaders)
        ? object.requestedHistoricalBitcoinHeaders.map((e: any) => RequestedBitcoinHeaders.fromJSON(e))
        : [],
      avsRewardsPool: globalThis.Array.isArray(object?.avsRewardsPool)
        ? object.avsRewardsPool.map((e: any) => globalThis.String(e))
        : [],
      ethereumNonceRequested: globalThis.Array.isArray(object?.ethereumNonceRequested)
        ? object.ethereumNonceRequested.map((e: any) => globalThis.Number(e))
        : [],
      solanaNonceRequested: globalThis.Array.isArray(object?.solanaNonceRequested)
        ? object.solanaNonceRequested.map((e: any) => globalThis.Number(e))
        : [],
      solanaZentpAccountsRequested: globalThis.Array.isArray(object?.solanaZentpAccountsRequested)
        ? object.solanaZentpAccountsRequested.map((e: any) => globalThis.String(e))
        : [],
      solanaAccountsRequested: globalThis.Array.isArray(object?.solanaAccountsRequested)
        ? object.solanaAccountsRequested.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.lastTotalPower.length !== 0) {
      obj.lastTotalPower = base64FromBytes(message.lastTotalPower);
    }
    if (message.lastValidatorPowers?.length) {
      obj.lastValidatorPowers = message.lastValidatorPowers.map((e) => LastValidatorPower.toJSON(e));
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => ValidatorHV.toJSON(e));
    }
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => Delegation.toJSON(e));
    }
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.redelegations?.length) {
      obj.redelegations = message.redelegations.map((e) => Redelegation.toJSON(e));
    }
    if (message.exported !== false) {
      obj.exported = message.exported;
    }
    if (message.hvParams !== undefined) {
      obj.hvParams = HVParams.toJSON(message.hvParams);
    }
    if (message.assetPrices?.length) {
      obj.assetPrices = message.assetPrices.map((e) => AssetData.toJSON(e));
    }
    if (message.lastValidVeHeight !== 0) {
      obj.lastValidVeHeight = Math.round(message.lastValidVeHeight);
    }
    if (message.slashEvents?.length) {
      obj.slashEvents = message.slashEvents.map((e) => SlashEvent.toJSON(e));
    }
    if (message.slashEventCount !== 0) {
      obj.slashEventCount = Math.round(message.slashEventCount);
    }
    if (message.validationInfos?.length) {
      obj.validationInfos = message.validationInfos.map((e) => ValidationInfo.toJSON(e));
    }
    if (message.btcBlockHeaders?.length) {
      obj.btcBlockHeaders = message.btcBlockHeaders.map((e) => BTCBlockHeader.toJSON(e));
    }
    if (message.lastUsedSolanaNonce?.length) {
      obj.lastUsedSolanaNonce = message.lastUsedSolanaNonce.map((e) => SolanaNonce.toJSON(e));
    }
    if (message.backfillRequest !== undefined) {
      obj.backfillRequest = BackfillRequests.toJSON(message.backfillRequest);
    }
    if (message.lastUsedEthereumNonce?.length) {
      obj.lastUsedEthereumNonce = message.lastUsedEthereumNonce.map((e) => NonceData.toJSON(e));
    }
    if (message.requestedHistoricalBitcoinHeaders?.length) {
      obj.requestedHistoricalBitcoinHeaders = message.requestedHistoricalBitcoinHeaders.map((e) =>
        RequestedBitcoinHeaders.toJSON(e)
      );
    }
    if (message.avsRewardsPool?.length) {
      obj.avsRewardsPool = message.avsRewardsPool;
    }
    if (message.ethereumNonceRequested?.length) {
      obj.ethereumNonceRequested = message.ethereumNonceRequested.map((e) => Math.round(e));
    }
    if (message.solanaNonceRequested?.length) {
      obj.solanaNonceRequested = message.solanaNonceRequested.map((e) => Math.round(e));
    }
    if (message.solanaZentpAccountsRequested?.length) {
      obj.solanaZentpAccountsRequested = message.solanaZentpAccountsRequested;
    }
    if (message.solanaAccountsRequested?.length) {
      obj.solanaAccountsRequested = message.solanaAccountsRequested;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.lastTotalPower = object.lastTotalPower ?? new Uint8Array(0);
    message.lastValidatorPowers = object.lastValidatorPowers?.map((e) => LastValidatorPower.fromPartial(e)) || [];
    message.validators = object.validators?.map((e) => ValidatorHV.fromPartial(e)) || [];
    message.delegations = object.delegations?.map((e) => Delegation.fromPartial(e)) || [];
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.redelegations = object.redelegations?.map((e) => Redelegation.fromPartial(e)) || [];
    message.exported = object.exported ?? false;
    message.hvParams = (object.hvParams !== undefined && object.hvParams !== null)
      ? HVParams.fromPartial(object.hvParams)
      : undefined;
    message.assetPrices = object.assetPrices?.map((e) => AssetData.fromPartial(e)) || [];
    message.lastValidVeHeight = object.lastValidVeHeight ?? 0;
    message.slashEvents = object.slashEvents?.map((e) => SlashEvent.fromPartial(e)) || [];
    message.slashEventCount = object.slashEventCount ?? 0;
    message.validationInfos = object.validationInfos?.map((e) => ValidationInfo.fromPartial(e)) || [];
    message.btcBlockHeaders = object.btcBlockHeaders?.map((e) => BTCBlockHeader.fromPartial(e)) || [];
    message.lastUsedSolanaNonce = object.lastUsedSolanaNonce?.map((e) => SolanaNonce.fromPartial(e)) || [];
    message.backfillRequest = (object.backfillRequest !== undefined && object.backfillRequest !== null)
      ? BackfillRequests.fromPartial(object.backfillRequest)
      : undefined;
    message.lastUsedEthereumNonce = object.lastUsedEthereumNonce?.map((e) => NonceData.fromPartial(e)) || [];
    message.requestedHistoricalBitcoinHeaders =
      object.requestedHistoricalBitcoinHeaders?.map((e) => RequestedBitcoinHeaders.fromPartial(e)) || [];
    message.avsRewardsPool = object.avsRewardsPool?.map((e) => e) || [];
    message.ethereumNonceRequested = object.ethereumNonceRequested?.map((e) => e) || [];
    message.solanaNonceRequested = object.solanaNonceRequested?.map((e) => e) || [];
    message.solanaZentpAccountsRequested = object.solanaZentpAccountsRequested?.map((e) => e) || [];
    message.solanaAccountsRequested = object.solanaAccountsRequested?.map((e) => e) || [];
    return message;
  },
};

function createBaseLastValidatorPower(): LastValidatorPower {
  return { address: "", power: 0 };
}

export const LastValidatorPower: MessageFns<LastValidatorPower> = {
  encode(message: LastValidatorPower, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.power !== 0) {
      writer.uint32(16).int64(message.power);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LastValidatorPower {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLastValidatorPower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.power = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LastValidatorPower {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
    };
  },

  toJSON(message: LastValidatorPower): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LastValidatorPower>, I>>(base?: I): LastValidatorPower {
    return LastValidatorPower.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LastValidatorPower>, I>>(object: I): LastValidatorPower {
    const message = createBaseLastValidatorPower();
    message.address = object.address ?? "";
    message.power = object.power ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
