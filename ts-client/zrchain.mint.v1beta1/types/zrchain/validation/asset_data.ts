// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/validation/asset_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.validation";

/** Asset is an enum that represents the assets we store pricing for */
export enum Asset {
  UNSPECIFIED = 0,
  ROCK = 1,
  BTC = 2,
  ETH = 3,
  UNRECOGNIZED = -1,
}

export function assetFromJSON(object: any): Asset {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return Asset.UNSPECIFIED;
    case 1:
    case "ROCK":
      return Asset.ROCK;
    case 2:
    case "BTC":
      return Asset.BTC;
    case 3:
    case "ETH":
      return Asset.ETH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Asset.UNRECOGNIZED;
  }
}

export function assetToJSON(object: Asset): string {
  switch (object) {
    case Asset.UNSPECIFIED:
      return "UNSPECIFIED";
    case Asset.ROCK:
      return "ROCK";
    case Asset.BTC:
      return "BTC";
    case Asset.ETH:
      return "ETH";
    case Asset.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * AssetData is a struct that contains the price in USD + decimals of precision
 * of an asset
 */
export interface AssetData {
  asset: Asset;
  priceUSD: string;
  precision: number;
}

function createBaseAssetData(): AssetData {
  return { asset: 0, priceUSD: "", precision: 0 };
}

export const AssetData: MessageFns<AssetData> = {
  encode(message: AssetData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== 0) {
      writer.uint32(8).int32(message.asset);
    }
    if (message.priceUSD !== "") {
      writer.uint32(18).string(message.priceUSD);
    }
    if (message.precision !== 0) {
      writer.uint32(24).uint32(message.precision);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.asset = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.priceUSD = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.precision = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetData {
    return {
      asset: isSet(object.asset) ? assetFromJSON(object.asset) : 0,
      priceUSD: isSet(object.priceUSD) ? globalThis.String(object.priceUSD) : "",
      precision: isSet(object.precision) ? globalThis.Number(object.precision) : 0,
    };
  },

  toJSON(message: AssetData): unknown {
    const obj: any = {};
    if (message.asset !== 0) {
      obj.asset = assetToJSON(message.asset);
    }
    if (message.priceUSD !== "") {
      obj.priceUSD = message.priceUSD;
    }
    if (message.precision !== 0) {
      obj.precision = Math.round(message.precision);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetData>, I>>(base?: I): AssetData {
    return AssetData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetData>, I>>(object: I): AssetData {
    const message = createBaseAssetData();
    message.asset = object.asset ?? 0;
    message.priceUSD = object.priceUSD ?? "";
    message.precision = object.precision ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
