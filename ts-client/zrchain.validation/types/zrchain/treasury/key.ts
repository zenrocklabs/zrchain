// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/treasury/key.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { WalletType, walletTypeFromJSON, walletTypeToJSON } from "./wallet";

export const protobufPackage = "zrchain.treasury";

/**
 * KeyRequestStatus indicates the status of a key request.
 * A request starts as "pending", waiting to be picked up. Then it can move to
 * either "approved" or "rejected", depending on the decision of the MPC nodes.
 */
export enum KeyRequestStatus {
  /** KEY_REQUEST_STATUS_UNSPECIFIED - The request is missing the status field. */
  KEY_REQUEST_STATUS_UNSPECIFIED = 0,
  /**
   * KEY_REQUEST_STATUS_PENDING - The request is waiting to be fulfilled. This is the initial state of a
   * request.
   */
  KEY_REQUEST_STATUS_PENDING = 1,
  /**
   * KEY_REQUEST_STATUS_PARTIAL - The request is partially fulfilled - at least one more response from
   * a different MPC party is needed to confirm it.
   */
  KEY_REQUEST_STATUS_PARTIAL = 2,
  /** KEY_REQUEST_STATUS_FULFILLED - The request was fulfilled. This is a final state for a request. */
  KEY_REQUEST_STATUS_FULFILLED = 3,
  /** KEY_REQUEST_STATUS_REJECTED - The request was rejected. This is a final state for a request. */
  KEY_REQUEST_STATUS_REJECTED = 4,
  UNRECOGNIZED = -1,
}

export function keyRequestStatusFromJSON(object: any): KeyRequestStatus {
  switch (object) {
    case 0:
    case "KEY_REQUEST_STATUS_UNSPECIFIED":
      return KeyRequestStatus.KEY_REQUEST_STATUS_UNSPECIFIED;
    case 1:
    case "KEY_REQUEST_STATUS_PENDING":
      return KeyRequestStatus.KEY_REQUEST_STATUS_PENDING;
    case 2:
    case "KEY_REQUEST_STATUS_PARTIAL":
      return KeyRequestStatus.KEY_REQUEST_STATUS_PARTIAL;
    case 3:
    case "KEY_REQUEST_STATUS_FULFILLED":
      return KeyRequestStatus.KEY_REQUEST_STATUS_FULFILLED;
    case 4:
    case "KEY_REQUEST_STATUS_REJECTED":
      return KeyRequestStatus.KEY_REQUEST_STATUS_REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeyRequestStatus.UNRECOGNIZED;
  }
}

export function keyRequestStatusToJSON(object: KeyRequestStatus): string {
  switch (object) {
    case KeyRequestStatus.KEY_REQUEST_STATUS_UNSPECIFIED:
      return "KEY_REQUEST_STATUS_UNSPECIFIED";
    case KeyRequestStatus.KEY_REQUEST_STATUS_PENDING:
      return "KEY_REQUEST_STATUS_PENDING";
    case KeyRequestStatus.KEY_REQUEST_STATUS_PARTIAL:
      return "KEY_REQUEST_STATUS_PARTIAL";
    case KeyRequestStatus.KEY_REQUEST_STATUS_FULFILLED:
      return "KEY_REQUEST_STATUS_FULFILLED";
    case KeyRequestStatus.KEY_REQUEST_STATUS_REJECTED:
      return "KEY_REQUEST_STATUS_REJECTED";
    case KeyRequestStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * KeyType indicates what crypto key algo will be used by this key (e.g. ECDSA
 * with secp256k1 curve). Its public key will be one of the specified type.
 */
export enum KeyType {
  /** KEY_TYPE_UNSPECIFIED - The key type is missing. */
  KEY_TYPE_UNSPECIFIED = 0,
  /** KEY_TYPE_ECDSA_SECP256K1 - The key is an ECDSA secp256k1 key. */
  KEY_TYPE_ECDSA_SECP256K1 = 1,
  /** KEY_TYPE_EDDSA_ED25519 - The key is an EdDSA Ed25519 key. */
  KEY_TYPE_EDDSA_ED25519 = 2,
  /** KEY_TYPE_BITCOIN_SECP256K1 - Standard Bitcoin Keys */
  KEY_TYPE_BITCOIN_SECP256K1 = 3,
  UNRECOGNIZED = -1,
}

export function keyTypeFromJSON(object: any): KeyType {
  switch (object) {
    case 0:
    case "KEY_TYPE_UNSPECIFIED":
      return KeyType.KEY_TYPE_UNSPECIFIED;
    case 1:
    case "KEY_TYPE_ECDSA_SECP256K1":
      return KeyType.KEY_TYPE_ECDSA_SECP256K1;
    case 2:
    case "KEY_TYPE_EDDSA_ED25519":
      return KeyType.KEY_TYPE_EDDSA_ED25519;
    case 3:
    case "KEY_TYPE_BITCOIN_SECP256K1":
      return KeyType.KEY_TYPE_BITCOIN_SECP256K1;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeyType.UNRECOGNIZED;
  }
}

export function keyTypeToJSON(object: KeyType): string {
  switch (object) {
    case KeyType.KEY_TYPE_UNSPECIFIED:
      return "KEY_TYPE_UNSPECIFIED";
    case KeyType.KEY_TYPE_ECDSA_SECP256K1:
      return "KEY_TYPE_ECDSA_SECP256K1";
    case KeyType.KEY_TYPE_EDDSA_ED25519:
      return "KEY_TYPE_EDDSA_ED25519";
    case KeyType.KEY_TYPE_BITCOIN_SECP256K1:
      return "KEY_TYPE_BITCOIN_SECP256K1";
    case KeyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PartySignature {
  creator: string;
  signature: Uint8Array;
}

/** format of a key request */
export interface KeyRequest {
  id: number;
  creator: string;
  workspaceAddr: string;
  keyringAddr: string;
  keyType: KeyType;
  status: KeyRequestStatus;
  /** @deprecated */
  keyringPartySignatures: Uint8Array[];
  rejectReason: string;
  index: number;
  signPolicyId: number;
  /** Optional */
  zenbtcMetadata: ZenBTCMetadata | undefined;
  mpcBtl: number;
  fee: number;
  publicKey: Uint8Array;
  keyringPartySigs: PartySignature[];
}

/** format of a key request response */
export interface KeyReqResponse {
  id: number;
  creator: string;
  workspaceAddr: string;
  keyringAddr: string;
  keyType: string;
  status: string;
  keyringPartySignatures: PartySignature[];
  rejectReason: string;
  index: number;
  signPolicyId: number;
  /** Optional */
  zenbtcMetadata: ZenBTCMetadata | undefined;
  mpcBtl: number;
  fee: number;
  publicKey: Uint8Array;
}

/** format of a key */
export interface Key {
  id: number;
  workspaceAddr: string;
  keyringAddr: string;
  type: KeyType;
  publicKey: Uint8Array;
  index: number;
  signPolicyId: number;
  /** Optional */
  zenbtcMetadata: ZenBTCMetadata | undefined;
}

/** format of a key response */
export interface KeyResponse {
  id: number;
  workspaceAddr: string;
  keyringAddr: string;
  type: string;
  publicKey: Uint8Array;
  index: number;
  signPolicyId: number;
  /** Optional */
  zenbtcMetadata: ZenBTCMetadata | undefined;
}

/** ZenBTCMetadata is the metadata for a key on the zenBTC keyring. */
export interface ZenBTCMetadata {
  /** Optional */
  recipientAddr: string;
  /** Optional */
  chainType: WalletType;
  /**
   * Optional
   *
   * @deprecated
   */
  chainId: number;
  /**
   * Optional
   *
   * @deprecated
   */
  returnAddress: string;
  caip2ChainId: string;
}

function createBasePartySignature(): PartySignature {
  return { creator: "", signature: new Uint8Array(0) };
}

export const PartySignature: MessageFns<PartySignature> = {
  encode(message: PartySignature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartySignature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartySignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartySignature {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
    };
  },

  toJSON(message: PartySignature): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PartySignature>, I>>(base?: I): PartySignature {
    return PartySignature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PartySignature>, I>>(object: I): PartySignature {
    const message = createBasePartySignature();
    message.creator = object.creator ?? "";
    message.signature = object.signature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseKeyRequest(): KeyRequest {
  return {
    id: 0,
    creator: "",
    workspaceAddr: "",
    keyringAddr: "",
    keyType: 0,
    status: 0,
    keyringPartySignatures: [],
    rejectReason: "",
    index: 0,
    signPolicyId: 0,
    zenbtcMetadata: undefined,
    mpcBtl: 0,
    fee: 0,
    publicKey: new Uint8Array(0),
    keyringPartySigs: [],
  };
}

export const KeyRequest: MessageFns<KeyRequest> = {
  encode(message: KeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(26).string(message.workspaceAddr);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(34).string(message.keyringAddr);
    }
    if (message.keyType !== 0) {
      writer.uint32(40).int32(message.keyType);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    for (const v of message.keyringPartySignatures) {
      writer.uint32(58).bytes(v!);
    }
    if (message.rejectReason !== "") {
      writer.uint32(66).string(message.rejectReason);
    }
    if (message.index !== 0) {
      writer.uint32(72).uint64(message.index);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(80).uint64(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      ZenBTCMetadata.encode(message.zenbtcMetadata, writer.uint32(90).fork()).join();
    }
    if (message.mpcBtl !== 0) {
      writer.uint32(96).uint64(message.mpcBtl);
    }
    if (message.fee !== 0) {
      writer.uint32(104).uint64(message.fee);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(114).bytes(message.publicKey);
    }
    for (const v of message.keyringPartySigs) {
      PartySignature.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.keyType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.keyringPartySignatures.push(reader.bytes());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rejectReason = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.zenbtcMetadata = ZenBTCMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.mpcBtl = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.fee = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.keyringPartySigs.push(PartySignature.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      keyType: isSet(object.keyType) ? keyTypeFromJSON(object.keyType) : 0,
      status: isSet(object.status) ? keyRequestStatusFromJSON(object.status) : 0,
      keyringPartySignatures: globalThis.Array.isArray(object?.keyringPartySignatures)
        ? object.keyringPartySignatures.map((e: any) => bytesFromBase64(e))
        : [],
      rejectReason: isSet(object.rejectReason) ? globalThis.String(object.rejectReason) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      zenbtcMetadata: isSet(object.zenbtcMetadata) ? ZenBTCMetadata.fromJSON(object.zenbtcMetadata) : undefined,
      mpcBtl: isSet(object.mpcBtl) ? globalThis.Number(object.mpcBtl) : 0,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
      keyringPartySigs: globalThis.Array.isArray(object?.keyringPartySigs)
        ? object.keyringPartySigs.map((e: any) => PartySignature.fromJSON(e))
        : [],
    };
  },

  toJSON(message: KeyRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.keyType !== 0) {
      obj.keyType = keyTypeToJSON(message.keyType);
    }
    if (message.status !== 0) {
      obj.status = keyRequestStatusToJSON(message.status);
    }
    if (message.keyringPartySignatures?.length) {
      obj.keyringPartySignatures = message.keyringPartySignatures.map((e) => base64FromBytes(e));
    }
    if (message.rejectReason !== "") {
      obj.rejectReason = message.rejectReason;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      obj.zenbtcMetadata = ZenBTCMetadata.toJSON(message.zenbtcMetadata);
    }
    if (message.mpcBtl !== 0) {
      obj.mpcBtl = Math.round(message.mpcBtl);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.keyringPartySigs?.length) {
      obj.keyringPartySigs = message.keyringPartySigs.map((e) => PartySignature.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyRequest>, I>>(base?: I): KeyRequest {
    return KeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyRequest>, I>>(object: I): KeyRequest {
    const message = createBaseKeyRequest();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.keyType = object.keyType ?? 0;
    message.status = object.status ?? 0;
    message.keyringPartySignatures = object.keyringPartySignatures?.map((e) => e) || [];
    message.rejectReason = object.rejectReason ?? "";
    message.index = object.index ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.zenbtcMetadata = (object.zenbtcMetadata !== undefined && object.zenbtcMetadata !== null)
      ? ZenBTCMetadata.fromPartial(object.zenbtcMetadata)
      : undefined;
    message.mpcBtl = object.mpcBtl ?? 0;
    message.fee = object.fee ?? 0;
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    message.keyringPartySigs = object.keyringPartySigs?.map((e) => PartySignature.fromPartial(e)) || [];
    return message;
  },
};

function createBaseKeyReqResponse(): KeyReqResponse {
  return {
    id: 0,
    creator: "",
    workspaceAddr: "",
    keyringAddr: "",
    keyType: "",
    status: "",
    keyringPartySignatures: [],
    rejectReason: "",
    index: 0,
    signPolicyId: 0,
    zenbtcMetadata: undefined,
    mpcBtl: 0,
    fee: 0,
    publicKey: new Uint8Array(0),
  };
}

export const KeyReqResponse: MessageFns<KeyReqResponse> = {
  encode(message: KeyReqResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(26).string(message.workspaceAddr);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(34).string(message.keyringAddr);
    }
    if (message.keyType !== "") {
      writer.uint32(42).string(message.keyType);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    for (const v of message.keyringPartySignatures) {
      PartySignature.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.rejectReason !== "") {
      writer.uint32(66).string(message.rejectReason);
    }
    if (message.index !== 0) {
      writer.uint32(72).uint64(message.index);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(80).uint64(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      ZenBTCMetadata.encode(message.zenbtcMetadata, writer.uint32(90).fork()).join();
    }
    if (message.mpcBtl !== 0) {
      writer.uint32(96).uint64(message.mpcBtl);
    }
    if (message.fee !== 0) {
      writer.uint32(104).uint64(message.fee);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(114).bytes(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyReqResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyReqResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.keyType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.keyringPartySignatures.push(PartySignature.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rejectReason = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.zenbtcMetadata = ZenBTCMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.mpcBtl = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.fee = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyReqResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      keyType: isSet(object.keyType) ? globalThis.String(object.keyType) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      keyringPartySignatures: globalThis.Array.isArray(object?.keyringPartySignatures)
        ? object.keyringPartySignatures.map((e: any) => PartySignature.fromJSON(e))
        : [],
      rejectReason: isSet(object.rejectReason) ? globalThis.String(object.rejectReason) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      zenbtcMetadata: isSet(object.zenbtcMetadata) ? ZenBTCMetadata.fromJSON(object.zenbtcMetadata) : undefined,
      mpcBtl: isSet(object.mpcBtl) ? globalThis.Number(object.mpcBtl) : 0,
      fee: isSet(object.fee) ? globalThis.Number(object.fee) : 0,
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
    };
  },

  toJSON(message: KeyReqResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.keyType !== "") {
      obj.keyType = message.keyType;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.keyringPartySignatures?.length) {
      obj.keyringPartySignatures = message.keyringPartySignatures.map((e) => PartySignature.toJSON(e));
    }
    if (message.rejectReason !== "") {
      obj.rejectReason = message.rejectReason;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      obj.zenbtcMetadata = ZenBTCMetadata.toJSON(message.zenbtcMetadata);
    }
    if (message.mpcBtl !== 0) {
      obj.mpcBtl = Math.round(message.mpcBtl);
    }
    if (message.fee !== 0) {
      obj.fee = Math.round(message.fee);
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyReqResponse>, I>>(base?: I): KeyReqResponse {
    return KeyReqResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyReqResponse>, I>>(object: I): KeyReqResponse {
    const message = createBaseKeyReqResponse();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.keyType = object.keyType ?? "";
    message.status = object.status ?? "";
    message.keyringPartySignatures = object.keyringPartySignatures?.map((e) => PartySignature.fromPartial(e)) || [];
    message.rejectReason = object.rejectReason ?? "";
    message.index = object.index ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.zenbtcMetadata = (object.zenbtcMetadata !== undefined && object.zenbtcMetadata !== null)
      ? ZenBTCMetadata.fromPartial(object.zenbtcMetadata)
      : undefined;
    message.mpcBtl = object.mpcBtl ?? 0;
    message.fee = object.fee ?? 0;
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseKey(): Key {
  return {
    id: 0,
    workspaceAddr: "",
    keyringAddr: "",
    type: 0,
    publicKey: new Uint8Array(0),
    index: 0,
    signPolicyId: 0,
    zenbtcMetadata: undefined,
  };
}

export const Key: MessageFns<Key> = {
  encode(message: Key, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(18).string(message.workspaceAddr);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(26).string(message.keyringAddr);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(42).bytes(message.publicKey);
    }
    if (message.index !== 0) {
      writer.uint32(72).uint64(message.index);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(80).uint64(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      ZenBTCMetadata.encode(message.zenbtcMetadata, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Key {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.zenbtcMetadata = ZenBTCMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Key {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      type: isSet(object.type) ? keyTypeFromJSON(object.type) : 0,
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      zenbtcMetadata: isSet(object.zenbtcMetadata) ? ZenBTCMetadata.fromJSON(object.zenbtcMetadata) : undefined,
    };
  },

  toJSON(message: Key): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.type !== 0) {
      obj.type = keyTypeToJSON(message.type);
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      obj.zenbtcMetadata = ZenBTCMetadata.toJSON(message.zenbtcMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Key>, I>>(base?: I): Key {
    return Key.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Key>, I>>(object: I): Key {
    const message = createBaseKey();
    message.id = object.id ?? 0;
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.type = object.type ?? 0;
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    message.index = object.index ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.zenbtcMetadata = (object.zenbtcMetadata !== undefined && object.zenbtcMetadata !== null)
      ? ZenBTCMetadata.fromPartial(object.zenbtcMetadata)
      : undefined;
    return message;
  },
};

function createBaseKeyResponse(): KeyResponse {
  return {
    id: 0,
    workspaceAddr: "",
    keyringAddr: "",
    type: "",
    publicKey: new Uint8Array(0),
    index: 0,
    signPolicyId: 0,
    zenbtcMetadata: undefined,
  };
}

export const KeyResponse: MessageFns<KeyResponse> = {
  encode(message: KeyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.workspaceAddr !== "") {
      writer.uint32(18).string(message.workspaceAddr);
    }
    if (message.keyringAddr !== "") {
      writer.uint32(26).string(message.keyringAddr);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(42).bytes(message.publicKey);
    }
    if (message.index !== 0) {
      writer.uint32(72).uint64(message.index);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(80).uint64(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      ZenBTCMetadata.encode(message.zenbtcMetadata, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspaceAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keyringAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.zenbtcMetadata = ZenBTCMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      workspaceAddr: isSet(object.workspaceAddr) ? globalThis.String(object.workspaceAddr) : "",
      keyringAddr: isSet(object.keyringAddr) ? globalThis.String(object.keyringAddr) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      zenbtcMetadata: isSet(object.zenbtcMetadata) ? ZenBTCMetadata.fromJSON(object.zenbtcMetadata) : undefined,
    };
  },

  toJSON(message: KeyResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.workspaceAddr !== "") {
      obj.workspaceAddr = message.workspaceAddr;
    }
    if (message.keyringAddr !== "") {
      obj.keyringAddr = message.keyringAddr;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.zenbtcMetadata !== undefined) {
      obj.zenbtcMetadata = ZenBTCMetadata.toJSON(message.zenbtcMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyResponse>, I>>(base?: I): KeyResponse {
    return KeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyResponse>, I>>(object: I): KeyResponse {
    const message = createBaseKeyResponse();
    message.id = object.id ?? 0;
    message.workspaceAddr = object.workspaceAddr ?? "";
    message.keyringAddr = object.keyringAddr ?? "";
    message.type = object.type ?? "";
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    message.index = object.index ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.zenbtcMetadata = (object.zenbtcMetadata !== undefined && object.zenbtcMetadata !== null)
      ? ZenBTCMetadata.fromPartial(object.zenbtcMetadata)
      : undefined;
    return message;
  },
};

function createBaseZenBTCMetadata(): ZenBTCMetadata {
  return { recipientAddr: "", chainType: 0, chainId: 0, returnAddress: "", caip2ChainId: "" };
}

export const ZenBTCMetadata: MessageFns<ZenBTCMetadata> = {
  encode(message: ZenBTCMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recipientAddr !== "") {
      writer.uint32(10).string(message.recipientAddr);
    }
    if (message.chainType !== 0) {
      writer.uint32(16).int32(message.chainType);
    }
    if (message.chainId !== 0) {
      writer.uint32(24).uint64(message.chainId);
    }
    if (message.returnAddress !== "") {
      writer.uint32(34).string(message.returnAddress);
    }
    if (message.caip2ChainId !== "") {
      writer.uint32(42).string(message.caip2ChainId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZenBTCMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZenBTCMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recipientAddr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chainType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chainId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.returnAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.caip2ChainId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZenBTCMetadata {
    return {
      recipientAddr: isSet(object.recipientAddr) ? globalThis.String(object.recipientAddr) : "",
      chainType: isSet(object.chainType) ? walletTypeFromJSON(object.chainType) : 0,
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
      returnAddress: isSet(object.returnAddress) ? globalThis.String(object.returnAddress) : "",
      caip2ChainId: isSet(object.caip2ChainId) ? globalThis.String(object.caip2ChainId) : "",
    };
  },

  toJSON(message: ZenBTCMetadata): unknown {
    const obj: any = {};
    if (message.recipientAddr !== "") {
      obj.recipientAddr = message.recipientAddr;
    }
    if (message.chainType !== 0) {
      obj.chainType = walletTypeToJSON(message.chainType);
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    if (message.returnAddress !== "") {
      obj.returnAddress = message.returnAddress;
    }
    if (message.caip2ChainId !== "") {
      obj.caip2ChainId = message.caip2ChainId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZenBTCMetadata>, I>>(base?: I): ZenBTCMetadata {
    return ZenBTCMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZenBTCMetadata>, I>>(object: I): ZenBTCMetadata {
    const message = createBaseZenBTCMetadata();
    message.recipientAddr = object.recipientAddr ?? "";
    message.chainType = object.chainType ?? 0;
    message.chainId = object.chainId ?? 0;
    message.returnAddress = object.returnAddress ?? "";
    message.caip2ChainId = object.caip2ChainId ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
