// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/treasury/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Key, KeyRequest } from "./key";
import { ICATransactionRequest, SignRequest, SignTransactionRequest } from "./mpcsign";
import { Params } from "./params";

export const protobufPackage = "zrchain.treasury";

/** GenesisState defines the treasury module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params: Params | undefined;
  portId: string;
  keys: Key[];
  keyRequests: KeyRequest[];
  signRequests: SignRequest[];
  signTxRequests: SignTransactionRequest[];
  icaTxRequests: ICATransactionRequest[];
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    portId: "",
    keys: [],
    keyRequests: [],
    signRequests: [],
    signTxRequests: [],
    icaTxRequests: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.portId !== "") {
      writer.uint32(18).string(message.portId);
    }
    for (const v of message.keys) {
      Key.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.keyRequests) {
      KeyRequest.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.signRequests) {
      SignRequest.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.signTxRequests) {
      SignTransactionRequest.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.icaTxRequests) {
      ICATransactionRequest.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.portId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keys.push(Key.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyRequests.push(KeyRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signRequests.push(SignRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.signTxRequests.push(SignTransactionRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icaTxRequests.push(ICATransactionRequest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      portId: isSet(object.portId) ? globalThis.String(object.portId) : "",
      keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e: any) => Key.fromJSON(e)) : [],
      keyRequests: globalThis.Array.isArray(object?.keyRequests)
        ? object.keyRequests.map((e: any) => KeyRequest.fromJSON(e))
        : [],
      signRequests: globalThis.Array.isArray(object?.signRequests)
        ? object.signRequests.map((e: any) => SignRequest.fromJSON(e))
        : [],
      signTxRequests: globalThis.Array.isArray(object?.signTxRequests)
        ? object.signTxRequests.map((e: any) => SignTransactionRequest.fromJSON(e))
        : [],
      icaTxRequests: globalThis.Array.isArray(object?.icaTxRequests)
        ? object.icaTxRequests.map((e: any) => ICATransactionRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.portId !== "") {
      obj.portId = message.portId;
    }
    if (message.keys?.length) {
      obj.keys = message.keys.map((e) => Key.toJSON(e));
    }
    if (message.keyRequests?.length) {
      obj.keyRequests = message.keyRequests.map((e) => KeyRequest.toJSON(e));
    }
    if (message.signRequests?.length) {
      obj.signRequests = message.signRequests.map((e) => SignRequest.toJSON(e));
    }
    if (message.signTxRequests?.length) {
      obj.signTxRequests = message.signTxRequests.map((e) => SignTransactionRequest.toJSON(e));
    }
    if (message.icaTxRequests?.length) {
      obj.icaTxRequests = message.icaTxRequests.map((e) => ICATransactionRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.portId = object.portId ?? "";
    message.keys = object.keys?.map((e) => Key.fromPartial(e)) || [];
    message.keyRequests = object.keyRequests?.map((e) => KeyRequest.fromPartial(e)) || [];
    message.signRequests = object.signRequests?.map((e) => SignRequest.fromPartial(e)) || [];
    message.signTxRequests = object.signTxRequests?.map((e) => SignTransactionRequest.fromPartial(e)) || [];
    message.icaTxRequests = object.icaTxRequests?.map((e) => ICATransactionRequest.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
