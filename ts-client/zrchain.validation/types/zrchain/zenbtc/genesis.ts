// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zenbtc/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { LockTransaction, PendingMintTransaction } from "./mint";
import { Params } from "./params";
import { BurnEvent, Redemption } from "./redemptions";
import { Supply } from "./supply";

export const protobufPackage = "zrchain.zenbtc";

/** GenesisState defines the zenbtc module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params:
    | Params
    | undefined;
  /** lock_transactions defines the lock transactions of the module. */
  lockTransactions: LockTransaction[];
  /** pending_mint_transactions defines the pending mint transactions of the module. */
  pendingMintTransactions: PendingMintTransaction[];
  /** first_pending_eth_mint_transaction defines the first pending Ethereum mint transaction of the module. */
  firstPendingEthMintTransaction: number;
  /** first_pending_sol_mint_transaction defines the first pending Solana mint transaction of the module. */
  firstPendingSolMintTransaction: number;
  /** pending_mint_transaction_count defines the count of pending mint transactions of the module. */
  pendingMintTransactionCount: number;
  /** burn_events defines the burn events of the module. */
  burnEvents: BurnEvent[];
  /** first_pending_burn_event defines the first pending burn event of the module. */
  firstPendingBurnEvent: number;
  /** burn_event_count defines the count of burn events of the module. */
  burnEventCount: number;
  /** redemptions defines the redemptions of the module. */
  redemptions: Redemption[];
  /** first_pending_redemption defines the first pending redemption of the module. */
  firstPendingRedemption: number;
  /** first_redemption_awaiting_sign defines the first redemption awaiting sign of the module. */
  firstRedemptionAwaitingSign: number;
  /** supply defines the supply of the module. */
  supply:
    | Supply
    | undefined;
  /** first_pending_stake_transaction defines the first pending stake transaction of the module. */
  firstPendingStakeTransaction: number;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    lockTransactions: [],
    pendingMintTransactions: [],
    firstPendingEthMintTransaction: 0,
    firstPendingSolMintTransaction: 0,
    pendingMintTransactionCount: 0,
    burnEvents: [],
    firstPendingBurnEvent: 0,
    burnEventCount: 0,
    redemptions: [],
    firstPendingRedemption: 0,
    firstRedemptionAwaitingSign: 0,
    supply: undefined,
    firstPendingStakeTransaction: 0,
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.lockTransactions) {
      LockTransaction.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.pendingMintTransactions) {
      PendingMintTransaction.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.firstPendingEthMintTransaction !== 0) {
      writer.uint32(32).uint64(message.firstPendingEthMintTransaction);
    }
    if (message.firstPendingSolMintTransaction !== 0) {
      writer.uint32(40).uint64(message.firstPendingSolMintTransaction);
    }
    if (message.pendingMintTransactionCount !== 0) {
      writer.uint32(48).uint64(message.pendingMintTransactionCount);
    }
    for (const v of message.burnEvents) {
      BurnEvent.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.firstPendingBurnEvent !== 0) {
      writer.uint32(64).uint64(message.firstPendingBurnEvent);
    }
    if (message.burnEventCount !== 0) {
      writer.uint32(72).uint64(message.burnEventCount);
    }
    for (const v of message.redemptions) {
      Redemption.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.firstPendingRedemption !== 0) {
      writer.uint32(88).uint64(message.firstPendingRedemption);
    }
    if (message.firstRedemptionAwaitingSign !== 0) {
      writer.uint32(96).uint64(message.firstRedemptionAwaitingSign);
    }
    if (message.supply !== undefined) {
      Supply.encode(message.supply, writer.uint32(106).fork()).join();
    }
    if (message.firstPendingStakeTransaction !== 0) {
      writer.uint32(112).uint64(message.firstPendingStakeTransaction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lockTransactions.push(LockTransaction.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pendingMintTransactions.push(PendingMintTransaction.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.firstPendingEthMintTransaction = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.firstPendingSolMintTransaction = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.pendingMintTransactionCount = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.burnEvents.push(BurnEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.firstPendingBurnEvent = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.burnEventCount = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.redemptions.push(Redemption.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.firstPendingRedemption = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.firstRedemptionAwaitingSign = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.supply = Supply.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.firstPendingStakeTransaction = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      lockTransactions: globalThis.Array.isArray(object?.lockTransactions)
        ? object.lockTransactions.map((e: any) => LockTransaction.fromJSON(e))
        : [],
      pendingMintTransactions: globalThis.Array.isArray(object?.pendingMintTransactions)
        ? object.pendingMintTransactions.map((e: any) => PendingMintTransaction.fromJSON(e))
        : [],
      firstPendingEthMintTransaction: isSet(object.firstPendingEthMintTransaction)
        ? globalThis.Number(object.firstPendingEthMintTransaction)
        : 0,
      firstPendingSolMintTransaction: isSet(object.firstPendingSolMintTransaction)
        ? globalThis.Number(object.firstPendingSolMintTransaction)
        : 0,
      pendingMintTransactionCount: isSet(object.pendingMintTransactionCount)
        ? globalThis.Number(object.pendingMintTransactionCount)
        : 0,
      burnEvents: globalThis.Array.isArray(object?.burnEvents)
        ? object.burnEvents.map((e: any) => BurnEvent.fromJSON(e))
        : [],
      firstPendingBurnEvent: isSet(object.firstPendingBurnEvent) ? globalThis.Number(object.firstPendingBurnEvent) : 0,
      burnEventCount: isSet(object.burnEventCount) ? globalThis.Number(object.burnEventCount) : 0,
      redemptions: globalThis.Array.isArray(object?.redemptions)
        ? object.redemptions.map((e: any) => Redemption.fromJSON(e))
        : [],
      firstPendingRedemption: isSet(object.firstPendingRedemption)
        ? globalThis.Number(object.firstPendingRedemption)
        : 0,
      firstRedemptionAwaitingSign: isSet(object.firstRedemptionAwaitingSign)
        ? globalThis.Number(object.firstRedemptionAwaitingSign)
        : 0,
      supply: isSet(object.supply) ? Supply.fromJSON(object.supply) : undefined,
      firstPendingStakeTransaction: isSet(object.firstPendingStakeTransaction)
        ? globalThis.Number(object.firstPendingStakeTransaction)
        : 0,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.lockTransactions?.length) {
      obj.lockTransactions = message.lockTransactions.map((e) => LockTransaction.toJSON(e));
    }
    if (message.pendingMintTransactions?.length) {
      obj.pendingMintTransactions = message.pendingMintTransactions.map((e) => PendingMintTransaction.toJSON(e));
    }
    if (message.firstPendingEthMintTransaction !== 0) {
      obj.firstPendingEthMintTransaction = Math.round(message.firstPendingEthMintTransaction);
    }
    if (message.firstPendingSolMintTransaction !== 0) {
      obj.firstPendingSolMintTransaction = Math.round(message.firstPendingSolMintTransaction);
    }
    if (message.pendingMintTransactionCount !== 0) {
      obj.pendingMintTransactionCount = Math.round(message.pendingMintTransactionCount);
    }
    if (message.burnEvents?.length) {
      obj.burnEvents = message.burnEvents.map((e) => BurnEvent.toJSON(e));
    }
    if (message.firstPendingBurnEvent !== 0) {
      obj.firstPendingBurnEvent = Math.round(message.firstPendingBurnEvent);
    }
    if (message.burnEventCount !== 0) {
      obj.burnEventCount = Math.round(message.burnEventCount);
    }
    if (message.redemptions?.length) {
      obj.redemptions = message.redemptions.map((e) => Redemption.toJSON(e));
    }
    if (message.firstPendingRedemption !== 0) {
      obj.firstPendingRedemption = Math.round(message.firstPendingRedemption);
    }
    if (message.firstRedemptionAwaitingSign !== 0) {
      obj.firstRedemptionAwaitingSign = Math.round(message.firstRedemptionAwaitingSign);
    }
    if (message.supply !== undefined) {
      obj.supply = Supply.toJSON(message.supply);
    }
    if (message.firstPendingStakeTransaction !== 0) {
      obj.firstPendingStakeTransaction = Math.round(message.firstPendingStakeTransaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.lockTransactions = object.lockTransactions?.map((e) => LockTransaction.fromPartial(e)) || [];
    message.pendingMintTransactions =
      object.pendingMintTransactions?.map((e) => PendingMintTransaction.fromPartial(e)) || [];
    message.firstPendingEthMintTransaction = object.firstPendingEthMintTransaction ?? 0;
    message.firstPendingSolMintTransaction = object.firstPendingSolMintTransaction ?? 0;
    message.pendingMintTransactionCount = object.pendingMintTransactionCount ?? 0;
    message.burnEvents = object.burnEvents?.map((e) => BurnEvent.fromPartial(e)) || [];
    message.firstPendingBurnEvent = object.firstPendingBurnEvent ?? 0;
    message.burnEventCount = object.burnEventCount ?? 0;
    message.redemptions = object.redemptions?.map((e) => Redemption.fromPartial(e)) || [];
    message.firstPendingRedemption = object.firstPendingRedemption ?? 0;
    message.firstRedemptionAwaitingSign = object.firstRedemptionAwaitingSign ?? 0;
    message.supply = (object.supply !== undefined && object.supply !== null)
      ? Supply.fromPartial(object.supply)
      : undefined;
    message.firstPendingStakeTransaction = object.firstPendingStakeTransaction ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
