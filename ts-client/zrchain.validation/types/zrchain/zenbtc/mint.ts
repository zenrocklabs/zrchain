// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zenbtc/mint.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.zenbtc";

export enum MintTransactionStatus {
  MINT_TRANSACTION_STATUS_UNSPECIFIED = 0,
  MINT_TRANSACTION_STATUS_DEPOSITED = 1,
  MINT_TRANSACTION_STATUS_STAKED = 2,
  MINT_TRANSACTION_STATUS_MINTED = 3,
  UNRECOGNIZED = -1,
}

export function mintTransactionStatusFromJSON(object: any): MintTransactionStatus {
  switch (object) {
    case 0:
    case "MINT_TRANSACTION_STATUS_UNSPECIFIED":
      return MintTransactionStatus.MINT_TRANSACTION_STATUS_UNSPECIFIED;
    case 1:
    case "MINT_TRANSACTION_STATUS_DEPOSITED":
      return MintTransactionStatus.MINT_TRANSACTION_STATUS_DEPOSITED;
    case 2:
    case "MINT_TRANSACTION_STATUS_STAKED":
      return MintTransactionStatus.MINT_TRANSACTION_STATUS_STAKED;
    case 3:
    case "MINT_TRANSACTION_STATUS_MINTED":
      return MintTransactionStatus.MINT_TRANSACTION_STATUS_MINTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MintTransactionStatus.UNRECOGNIZED;
  }
}

export function mintTransactionStatusToJSON(object: MintTransactionStatus): string {
  switch (object) {
    case MintTransactionStatus.MINT_TRANSACTION_STATUS_UNSPECIFIED:
      return "MINT_TRANSACTION_STATUS_UNSPECIFIED";
    case MintTransactionStatus.MINT_TRANSACTION_STATUS_DEPOSITED:
      return "MINT_TRANSACTION_STATUS_DEPOSITED";
    case MintTransactionStatus.MINT_TRANSACTION_STATUS_STAKED:
      return "MINT_TRANSACTION_STATUS_STAKED";
    case MintTransactionStatus.MINT_TRANSACTION_STATUS_MINTED:
      return "MINT_TRANSACTION_STATUS_MINTED";
    case MintTransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * WalletType specifies the Layer 1 blockchain that this wallet will be used
 * for.
 */
export enum WalletType {
  /** WALLET_TYPE_UNSPECIFIED - The wallet type is missing (all wallets will be derived) */
  WALLET_TYPE_UNSPECIFIED = 0,
  /** WALLET_TYPE_NATIVE - The wallet type for native cosmos accounts */
  WALLET_TYPE_NATIVE = 1,
  /** WALLET_TYPE_EVM - The wallet type for mainnet ETH and its ERC-20 tokens */
  WALLET_TYPE_EVM = 2,
  /** WALLET_TYPE_BTC_TESTNET - The Wallet type for Testnet BTC */
  WALLET_TYPE_BTC_TESTNET = 3,
  /** WALLET_TYPE_BTC_MAINNET - The Wallet type for Mainnet BTC */
  WALLET_TYPE_BTC_MAINNET = 4,
  /** WALLET_TYPE_BTC_REGNET - The Wallet type for RegNet - Local Test Network */
  WALLET_TYPE_BTC_REGNET = 5,
  /** WALLET_TYPE_SOLANA - Wallet type for Solana */
  WALLET_TYPE_SOLANA = 6,
  UNRECOGNIZED = -1,
}

export function walletTypeFromJSON(object: any): WalletType {
  switch (object) {
    case 0:
    case "WALLET_TYPE_UNSPECIFIED":
      return WalletType.WALLET_TYPE_UNSPECIFIED;
    case 1:
    case "WALLET_TYPE_NATIVE":
      return WalletType.WALLET_TYPE_NATIVE;
    case 2:
    case "WALLET_TYPE_EVM":
      return WalletType.WALLET_TYPE_EVM;
    case 3:
    case "WALLET_TYPE_BTC_TESTNET":
      return WalletType.WALLET_TYPE_BTC_TESTNET;
    case 4:
    case "WALLET_TYPE_BTC_MAINNET":
      return WalletType.WALLET_TYPE_BTC_MAINNET;
    case 5:
    case "WALLET_TYPE_BTC_REGNET":
      return WalletType.WALLET_TYPE_BTC_REGNET;
    case 6:
    case "WALLET_TYPE_SOLANA":
      return WalletType.WALLET_TYPE_SOLANA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WalletType.UNRECOGNIZED;
  }
}

export function walletTypeToJSON(object: WalletType): string {
  switch (object) {
    case WalletType.WALLET_TYPE_UNSPECIFIED:
      return "WALLET_TYPE_UNSPECIFIED";
    case WalletType.WALLET_TYPE_NATIVE:
      return "WALLET_TYPE_NATIVE";
    case WalletType.WALLET_TYPE_EVM:
      return "WALLET_TYPE_EVM";
    case WalletType.WALLET_TYPE_BTC_TESTNET:
      return "WALLET_TYPE_BTC_TESTNET";
    case WalletType.WALLET_TYPE_BTC_MAINNET:
      return "WALLET_TYPE_BTC_MAINNET";
    case WalletType.WALLET_TYPE_BTC_REGNET:
      return "WALLET_TYPE_BTC_REGNET";
    case WalletType.WALLET_TYPE_SOLANA:
      return "WALLET_TYPE_SOLANA";
    case WalletType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NonceData {
  nonce: number;
  counter: number;
  skip: boolean;
  prevNonce: number;
}

export interface RequestedBitcoinHeaders {
  heights: number[];
}

export interface LockTransaction {
  rawTx: string;
  vout: number;
  sender: string;
  mintRecipient: string;
  amount: number;
  blockHeight: number;
}

/** PendingMintTransaction is the metadata for a pending zenBTC mint transaction. */
export interface PendingMintTransaction {
  /** @deprecated */
  chainId: number;
  chainType: WalletType;
  recipientAddress: string;
  amount: number;
  creator: string;
  /** @deprecated */
  keyId: number;
  caip2ChainId: string;
  id: number;
  status: MintTransactionStatus;
  zrchainTxId: number;
  blockHeight: number;
  awaitingEventSince: number;
}

/**
 * Deprecated: This message is deprecated and should no longer be used.
 *
 * @deprecated
 */
export interface PendingMintTransactions {
  txs: PendingMintTransaction[];
}

function createBaseNonceData(): NonceData {
  return { nonce: 0, counter: 0, skip: false, prevNonce: 0 };
}

export const NonceData: MessageFns<NonceData> = {
  encode(message: NonceData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nonce !== 0) {
      writer.uint32(8).uint64(message.nonce);
    }
    if (message.counter !== 0) {
      writer.uint32(16).uint64(message.counter);
    }
    if (message.skip !== false) {
      writer.uint32(24).bool(message.skip);
    }
    if (message.prevNonce !== 0) {
      writer.uint32(32).uint64(message.prevNonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonceData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonceData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nonce = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.counter = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.skip = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.prevNonce = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonceData {
    return {
      nonce: isSet(object.nonce) ? globalThis.Number(object.nonce) : 0,
      counter: isSet(object.counter) ? globalThis.Number(object.counter) : 0,
      skip: isSet(object.skip) ? globalThis.Boolean(object.skip) : false,
      prevNonce: isSet(object.prevNonce) ? globalThis.Number(object.prevNonce) : 0,
    };
  },

  toJSON(message: NonceData): unknown {
    const obj: any = {};
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.counter !== 0) {
      obj.counter = Math.round(message.counter);
    }
    if (message.skip !== false) {
      obj.skip = message.skip;
    }
    if (message.prevNonce !== 0) {
      obj.prevNonce = Math.round(message.prevNonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NonceData>, I>>(base?: I): NonceData {
    return NonceData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NonceData>, I>>(object: I): NonceData {
    const message = createBaseNonceData();
    message.nonce = object.nonce ?? 0;
    message.counter = object.counter ?? 0;
    message.skip = object.skip ?? false;
    message.prevNonce = object.prevNonce ?? 0;
    return message;
  },
};

function createBaseRequestedBitcoinHeaders(): RequestedBitcoinHeaders {
  return { heights: [] };
}

export const RequestedBitcoinHeaders: MessageFns<RequestedBitcoinHeaders> = {
  encode(message: RequestedBitcoinHeaders, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.heights) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestedBitcoinHeaders {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestedBitcoinHeaders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.heights.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.heights.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestedBitcoinHeaders {
    return {
      heights: globalThis.Array.isArray(object?.heights) ? object.heights.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: RequestedBitcoinHeaders): unknown {
    const obj: any = {};
    if (message.heights?.length) {
      obj.heights = message.heights.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestedBitcoinHeaders>, I>>(base?: I): RequestedBitcoinHeaders {
    return RequestedBitcoinHeaders.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestedBitcoinHeaders>, I>>(object: I): RequestedBitcoinHeaders {
    const message = createBaseRequestedBitcoinHeaders();
    message.heights = object.heights?.map((e) => e) || [];
    return message;
  },
};

function createBaseLockTransaction(): LockTransaction {
  return { rawTx: "", vout: 0, sender: "", mintRecipient: "", amount: 0, blockHeight: 0 };
}

export const LockTransaction: MessageFns<LockTransaction> = {
  encode(message: LockTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawTx !== "") {
      writer.uint32(10).string(message.rawTx);
    }
    if (message.vout !== 0) {
      writer.uint32(16).uint64(message.vout);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    if (message.mintRecipient !== "") {
      writer.uint32(34).string(message.mintRecipient);
    }
    if (message.amount !== 0) {
      writer.uint32(40).uint64(message.amount);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(48).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LockTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawTx = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.vout = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mintRecipient = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockTransaction {
    return {
      rawTx: isSet(object.rawTx) ? globalThis.String(object.rawTx) : "",
      vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      mintRecipient: isSet(object.mintRecipient) ? globalThis.String(object.mintRecipient) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
    };
  },

  toJSON(message: LockTransaction): unknown {
    const obj: any = {};
    if (message.rawTx !== "") {
      obj.rawTx = message.rawTx;
    }
    if (message.vout !== 0) {
      obj.vout = Math.round(message.vout);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.mintRecipient !== "") {
      obj.mintRecipient = message.mintRecipient;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LockTransaction>, I>>(base?: I): LockTransaction {
    return LockTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LockTransaction>, I>>(object: I): LockTransaction {
    const message = createBaseLockTransaction();
    message.rawTx = object.rawTx ?? "";
    message.vout = object.vout ?? 0;
    message.sender = object.sender ?? "";
    message.mintRecipient = object.mintRecipient ?? "";
    message.amount = object.amount ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    return message;
  },
};

function createBasePendingMintTransaction(): PendingMintTransaction {
  return {
    chainId: 0,
    chainType: 0,
    recipientAddress: "",
    amount: 0,
    creator: "",
    keyId: 0,
    caip2ChainId: "",
    id: 0,
    status: 0,
    zrchainTxId: 0,
    blockHeight: 0,
    awaitingEventSince: 0,
  };
}

export const PendingMintTransaction: MessageFns<PendingMintTransaction> = {
  encode(message: PendingMintTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainId !== 0) {
      writer.uint32(8).uint64(message.chainId);
    }
    if (message.chainType !== 0) {
      writer.uint32(16).int32(message.chainType);
    }
    if (message.recipientAddress !== "") {
      writer.uint32(26).string(message.recipientAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    if (message.keyId !== 0) {
      writer.uint32(48).uint64(message.keyId);
    }
    if (message.caip2ChainId !== "") {
      writer.uint32(58).string(message.caip2ChainId);
    }
    if (message.id !== 0) {
      writer.uint32(64).uint64(message.id);
    }
    if (message.status !== 0) {
      writer.uint32(72).int32(message.status);
    }
    if (message.zrchainTxId !== 0) {
      writer.uint32(80).uint64(message.zrchainTxId);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(88).int64(message.blockHeight);
    }
    if (message.awaitingEventSince !== 0) {
      writer.uint32(96).int64(message.awaitingEventSince);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PendingMintTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePendingMintTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chainId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chainType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recipientAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.keyId = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.caip2ChainId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.zrchainTxId = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.awaitingEventSince = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PendingMintTransaction {
    return {
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
      chainType: isSet(object.chainType) ? walletTypeFromJSON(object.chainType) : 0,
      recipientAddress: isSet(object.recipientAddress) ? globalThis.String(object.recipientAddress) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      keyId: isSet(object.keyId) ? globalThis.Number(object.keyId) : 0,
      caip2ChainId: isSet(object.caip2ChainId) ? globalThis.String(object.caip2ChainId) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      status: isSet(object.status) ? mintTransactionStatusFromJSON(object.status) : 0,
      zrchainTxId: isSet(object.zrchainTxId) ? globalThis.Number(object.zrchainTxId) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      awaitingEventSince: isSet(object.awaitingEventSince) ? globalThis.Number(object.awaitingEventSince) : 0,
    };
  },

  toJSON(message: PendingMintTransaction): unknown {
    const obj: any = {};
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    if (message.chainType !== 0) {
      obj.chainType = walletTypeToJSON(message.chainType);
    }
    if (message.recipientAddress !== "") {
      obj.recipientAddress = message.recipientAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.keyId !== 0) {
      obj.keyId = Math.round(message.keyId);
    }
    if (message.caip2ChainId !== "") {
      obj.caip2ChainId = message.caip2ChainId;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.status !== 0) {
      obj.status = mintTransactionStatusToJSON(message.status);
    }
    if (message.zrchainTxId !== 0) {
      obj.zrchainTxId = Math.round(message.zrchainTxId);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.awaitingEventSince !== 0) {
      obj.awaitingEventSince = Math.round(message.awaitingEventSince);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PendingMintTransaction>, I>>(base?: I): PendingMintTransaction {
    return PendingMintTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PendingMintTransaction>, I>>(object: I): PendingMintTransaction {
    const message = createBasePendingMintTransaction();
    message.chainId = object.chainId ?? 0;
    message.chainType = object.chainType ?? 0;
    message.recipientAddress = object.recipientAddress ?? "";
    message.amount = object.amount ?? 0;
    message.creator = object.creator ?? "";
    message.keyId = object.keyId ?? 0;
    message.caip2ChainId = object.caip2ChainId ?? "";
    message.id = object.id ?? 0;
    message.status = object.status ?? 0;
    message.zrchainTxId = object.zrchainTxId ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.awaitingEventSince = object.awaitingEventSince ?? 0;
    return message;
  },
};

function createBasePendingMintTransactions(): PendingMintTransactions {
  return { txs: [] };
}

export const PendingMintTransactions: MessageFns<PendingMintTransactions> = {
  encode(message: PendingMintTransactions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.txs) {
      PendingMintTransaction.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PendingMintTransactions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePendingMintTransactions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txs.push(PendingMintTransaction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PendingMintTransactions {
    return {
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => PendingMintTransaction.fromJSON(e)) : [],
    };
  },

  toJSON(message: PendingMintTransactions): unknown {
    const obj: any = {};
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => PendingMintTransaction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PendingMintTransactions>, I>>(base?: I): PendingMintTransactions {
    return PendingMintTransactions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PendingMintTransactions>, I>>(object: I): PendingMintTransactions {
    const message = createBasePendingMintTransactions();
    message.txs = object.txs?.map((e) => PendingMintTransaction.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
