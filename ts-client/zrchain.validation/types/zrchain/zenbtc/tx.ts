// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/zenbtc/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "zrchain.zenbtc";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgVerifyDepositBlockInclusion {
  creator: string;
  chainName: string;
  blockHeight: number;
  rawTx: string;
  index: number;
  proof: string[];
  depositAddr: string;
  amount: number;
  vout: number;
}

export interface MsgVerifyDepositBlockInclusionResponse {
}

export interface MsgSubmitUnsignedRedemptionTx {
  creator: string;
  inputs: InputHashes[];
  txbytes: Uint8Array;
  cacheId: Uint8Array;
  chainName: string;
  redemptionIndexes: number[];
}

export interface InputHashes {
  hash: string;
  keyid: number;
}

export interface MsgSubmitUnsignedRedemptionTxResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgVerifyDepositBlockInclusion(): MsgVerifyDepositBlockInclusion {
  return {
    creator: "",
    chainName: "",
    blockHeight: 0,
    rawTx: "",
    index: 0,
    proof: [],
    depositAddr: "",
    amount: 0,
    vout: 0,
  };
}

export const MsgVerifyDepositBlockInclusion: MessageFns<MsgVerifyDepositBlockInclusion> = {
  encode(message: MsgVerifyDepositBlockInclusion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainName !== "") {
      writer.uint32(18).string(message.chainName);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(24).int64(message.blockHeight);
    }
    if (message.rawTx !== "") {
      writer.uint32(34).string(message.rawTx);
    }
    if (message.index !== 0) {
      writer.uint32(40).int32(message.index);
    }
    for (const v of message.proof) {
      writer.uint32(50).string(v!);
    }
    if (message.depositAddr !== "") {
      writer.uint32(58).string(message.depositAddr);
    }
    if (message.amount !== 0) {
      writer.uint32(64).uint64(message.amount);
    }
    if (message.vout !== 0) {
      writer.uint32(72).uint64(message.vout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVerifyDepositBlockInclusion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVerifyDepositBlockInclusion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chainName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rawTx = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proof.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.depositAddr = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.vout = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgVerifyDepositBlockInclusion {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      chainName: isSet(object.chainName) ? globalThis.String(object.chainName) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      rawTx: isSet(object.rawTx) ? globalThis.String(object.rawTx) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      proof: globalThis.Array.isArray(object?.proof) ? object.proof.map((e: any) => globalThis.String(e)) : [],
      depositAddr: isSet(object.depositAddr) ? globalThis.String(object.depositAddr) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
    };
  },

  toJSON(message: MsgVerifyDepositBlockInclusion): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainName !== "") {
      obj.chainName = message.chainName;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.rawTx !== "") {
      obj.rawTx = message.rawTx;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.proof?.length) {
      obj.proof = message.proof;
    }
    if (message.depositAddr !== "") {
      obj.depositAddr = message.depositAddr;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.vout !== 0) {
      obj.vout = Math.round(message.vout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgVerifyDepositBlockInclusion>, I>>(base?: I): MsgVerifyDepositBlockInclusion {
    return MsgVerifyDepositBlockInclusion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgVerifyDepositBlockInclusion>, I>>(
    object: I,
  ): MsgVerifyDepositBlockInclusion {
    const message = createBaseMsgVerifyDepositBlockInclusion();
    message.creator = object.creator ?? "";
    message.chainName = object.chainName ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.rawTx = object.rawTx ?? "";
    message.index = object.index ?? 0;
    message.proof = object.proof?.map((e) => e) || [];
    message.depositAddr = object.depositAddr ?? "";
    message.amount = object.amount ?? 0;
    message.vout = object.vout ?? 0;
    return message;
  },
};

function createBaseMsgVerifyDepositBlockInclusionResponse(): MsgVerifyDepositBlockInclusionResponse {
  return {};
}

export const MsgVerifyDepositBlockInclusionResponse: MessageFns<MsgVerifyDepositBlockInclusionResponse> = {
  encode(_: MsgVerifyDepositBlockInclusionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVerifyDepositBlockInclusionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVerifyDepositBlockInclusionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgVerifyDepositBlockInclusionResponse {
    return {};
  },

  toJSON(_: MsgVerifyDepositBlockInclusionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgVerifyDepositBlockInclusionResponse>, I>>(
    base?: I,
  ): MsgVerifyDepositBlockInclusionResponse {
    return MsgVerifyDepositBlockInclusionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgVerifyDepositBlockInclusionResponse>, I>>(
    _: I,
  ): MsgVerifyDepositBlockInclusionResponse {
    const message = createBaseMsgVerifyDepositBlockInclusionResponse();
    return message;
  },
};

function createBaseMsgSubmitUnsignedRedemptionTx(): MsgSubmitUnsignedRedemptionTx {
  return {
    creator: "",
    inputs: [],
    txbytes: new Uint8Array(0),
    cacheId: new Uint8Array(0),
    chainName: "",
    redemptionIndexes: [],
  };
}

export const MsgSubmitUnsignedRedemptionTx: MessageFns<MsgSubmitUnsignedRedemptionTx> = {
  encode(message: MsgSubmitUnsignedRedemptionTx, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.inputs) {
      InputHashes.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.txbytes.length !== 0) {
      writer.uint32(26).bytes(message.txbytes);
    }
    if (message.cacheId.length !== 0) {
      writer.uint32(34).bytes(message.cacheId);
    }
    if (message.chainName !== "") {
      writer.uint32(42).string(message.chainName);
    }
    writer.uint32(50).fork();
    for (const v of message.redemptionIndexes) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSubmitUnsignedRedemptionTx {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitUnsignedRedemptionTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inputs.push(InputHashes.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txbytes = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cacheId = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chainName = reader.string();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.redemptionIndexes.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.redemptionIndexes.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitUnsignedRedemptionTx {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      inputs: globalThis.Array.isArray(object?.inputs) ? object.inputs.map((e: any) => InputHashes.fromJSON(e)) : [],
      txbytes: isSet(object.txbytes) ? bytesFromBase64(object.txbytes) : new Uint8Array(0),
      cacheId: isSet(object.cacheId) ? bytesFromBase64(object.cacheId) : new Uint8Array(0),
      chainName: isSet(object.chainName) ? globalThis.String(object.chainName) : "",
      redemptionIndexes: globalThis.Array.isArray(object?.redemptionIndexes)
        ? object.redemptionIndexes.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: MsgSubmitUnsignedRedemptionTx): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.inputs?.length) {
      obj.inputs = message.inputs.map((e) => InputHashes.toJSON(e));
    }
    if (message.txbytes.length !== 0) {
      obj.txbytes = base64FromBytes(message.txbytes);
    }
    if (message.cacheId.length !== 0) {
      obj.cacheId = base64FromBytes(message.cacheId);
    }
    if (message.chainName !== "") {
      obj.chainName = message.chainName;
    }
    if (message.redemptionIndexes?.length) {
      obj.redemptionIndexes = message.redemptionIndexes.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitUnsignedRedemptionTx>, I>>(base?: I): MsgSubmitUnsignedRedemptionTx {
    return MsgSubmitUnsignedRedemptionTx.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitUnsignedRedemptionTx>, I>>(
    object: I,
  ): MsgSubmitUnsignedRedemptionTx {
    const message = createBaseMsgSubmitUnsignedRedemptionTx();
    message.creator = object.creator ?? "";
    message.inputs = object.inputs?.map((e) => InputHashes.fromPartial(e)) || [];
    message.txbytes = object.txbytes ?? new Uint8Array(0);
    message.cacheId = object.cacheId ?? new Uint8Array(0);
    message.chainName = object.chainName ?? "";
    message.redemptionIndexes = object.redemptionIndexes?.map((e) => e) || [];
    return message;
  },
};

function createBaseInputHashes(): InputHashes {
  return { hash: "", keyid: 0 };
}

export const InputHashes: MessageFns<InputHashes> = {
  encode(message: InputHashes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    if (message.keyid !== 0) {
      writer.uint32(16).uint64(message.keyid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputHashes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputHashes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.keyid = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputHashes {
    return {
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      keyid: isSet(object.keyid) ? globalThis.Number(object.keyid) : 0,
    };
  },

  toJSON(message: InputHashes): unknown {
    const obj: any = {};
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.keyid !== 0) {
      obj.keyid = Math.round(message.keyid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InputHashes>, I>>(base?: I): InputHashes {
    return InputHashes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InputHashes>, I>>(object: I): InputHashes {
    const message = createBaseInputHashes();
    message.hash = object.hash ?? "";
    message.keyid = object.keyid ?? 0;
    return message;
  },
};

function createBaseMsgSubmitUnsignedRedemptionTxResponse(): MsgSubmitUnsignedRedemptionTxResponse {
  return {};
}

export const MsgSubmitUnsignedRedemptionTxResponse: MessageFns<MsgSubmitUnsignedRedemptionTxResponse> = {
  encode(_: MsgSubmitUnsignedRedemptionTxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSubmitUnsignedRedemptionTxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitUnsignedRedemptionTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSubmitUnsignedRedemptionTxResponse {
    return {};
  },

  toJSON(_: MsgSubmitUnsignedRedemptionTxResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitUnsignedRedemptionTxResponse>, I>>(
    base?: I,
  ): MsgSubmitUnsignedRedemptionTxResponse {
    return MsgSubmitUnsignedRedemptionTxResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitUnsignedRedemptionTxResponse>, I>>(
    _: I,
  ): MsgSubmitUnsignedRedemptionTxResponse {
    const message = createBaseMsgSubmitUnsignedRedemptionTxResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  VerifyDepositBlockInclusion(request: MsgVerifyDepositBlockInclusion): Promise<MsgVerifyDepositBlockInclusionResponse>;
  SubmitUnsignedRedemptionTx(request: MsgSubmitUnsignedRedemptionTx): Promise<MsgSubmitUnsignedRedemptionTxResponse>;
}

export const MsgServiceName = "zrchain.zenbtc.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.VerifyDepositBlockInclusion = this.VerifyDepositBlockInclusion.bind(this);
    this.SubmitUnsignedRedemptionTx = this.SubmitUnsignedRedemptionTx.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  VerifyDepositBlockInclusion(
    request: MsgVerifyDepositBlockInclusion,
  ): Promise<MsgVerifyDepositBlockInclusionResponse> {
    const data = MsgVerifyDepositBlockInclusion.encode(request).finish();
    const promise = this.rpc.request(this.service, "VerifyDepositBlockInclusion", data);
    return promise.then((data) => MsgVerifyDepositBlockInclusionResponse.decode(new BinaryReader(data)));
  }

  SubmitUnsignedRedemptionTx(request: MsgSubmitUnsignedRedemptionTx): Promise<MsgSubmitUnsignedRedemptionTxResponse> {
    const data = MsgSubmitUnsignedRedemptionTx.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitUnsignedRedemptionTx", data);
    return promise.then((data) => MsgSubmitUnsignedRedemptionTxResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
