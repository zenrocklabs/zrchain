// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/identity/workspace.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zrchain.identity";

/** defines workspace attributes */
export interface Workspace {
  address: string;
  creator: string;
  owners: string[];
  childWorkspaces: string[];
  /**
   * Optional ID of the policy to be applied to every *admin* operation.
   * If not specified, the default policy is used.
   *
   * Admin operations are:
   * - zrchain.identity.Msg.AddWorkspaceOwner
   * - zrchain.identity.Msg.RemoveWorkspaceOwner
   * - zrchain.identity.Msg.AppendChildWorkspace
   * - zrchain.identity.Msg.NewChildWorkspace
   *
   * The default policy is to allow any operation when at least one of its
   * owner approves it.
   */
  adminPolicyId: number;
  /**
   * Optional ID of the policy to be applied to every *sign* operation.
   * If not specified, the default policy is used.
   *
   * Sign operations are:
   * - zrchain.treasury.Msg.NewKeyRequest
   * - zrchain.treasury.Msg.NewSignatureRequest
   * - zrchain.treasury.Msg.NewWalletRequest
   * - zrchain.treasury.Msg.NewSignTransactionRequest
   *
   * The default policy is to allow any operation when at least one of its
   * owner approves it.
   */
  signPolicyId: number;
  /**
   * Optional alias field to be used in various situations
   * e.g. wallet type for zr sign workspaces
   */
  alias: string;
}

function createBaseWorkspace(): Workspace {
  return { address: "", creator: "", owners: [], childWorkspaces: [], adminPolicyId: 0, signPolicyId: 0, alias: "" };
}

export const Workspace: MessageFns<Workspace> = {
  encode(message: Workspace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    for (const v of message.owners) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.childWorkspaces) {
      writer.uint32(34).string(v!);
    }
    if (message.adminPolicyId !== 0) {
      writer.uint32(40).uint64(message.adminPolicyId);
    }
    if (message.signPolicyId !== 0) {
      writer.uint32(48).uint64(message.signPolicyId);
    }
    if (message.alias !== "") {
      writer.uint32(58).string(message.alias);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workspace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owners.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.childWorkspaces.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.adminPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signPolicyId = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.alias = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workspace {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      owners: globalThis.Array.isArray(object?.owners) ? object.owners.map((e: any) => globalThis.String(e)) : [],
      childWorkspaces: globalThis.Array.isArray(object?.childWorkspaces)
        ? object.childWorkspaces.map((e: any) => globalThis.String(e))
        : [],
      adminPolicyId: isSet(object.adminPolicyId) ? globalThis.Number(object.adminPolicyId) : 0,
      signPolicyId: isSet(object.signPolicyId) ? globalThis.Number(object.signPolicyId) : 0,
      alias: isSet(object.alias) ? globalThis.String(object.alias) : "",
    };
  },

  toJSON(message: Workspace): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.owners?.length) {
      obj.owners = message.owners;
    }
    if (message.childWorkspaces?.length) {
      obj.childWorkspaces = message.childWorkspaces;
    }
    if (message.adminPolicyId !== 0) {
      obj.adminPolicyId = Math.round(message.adminPolicyId);
    }
    if (message.signPolicyId !== 0) {
      obj.signPolicyId = Math.round(message.signPolicyId);
    }
    if (message.alias !== "") {
      obj.alias = message.alias;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Workspace>, I>>(base?: I): Workspace {
    return Workspace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Workspace>, I>>(object: I): Workspace {
    const message = createBaseWorkspace();
    message.address = object.address ?? "";
    message.creator = object.creator ?? "";
    message.owners = object.owners?.map((e) => e) || [];
    message.childWorkspaces = object.childWorkspaces?.map((e) => e) || [];
    message.adminPolicyId = object.adminPolicyId ?? 0;
    message.signPolicyId = object.signPolicyId ?? 0;
    message.alias = object.alias ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
