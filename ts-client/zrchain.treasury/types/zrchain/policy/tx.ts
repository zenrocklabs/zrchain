// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/policy/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";
import { Params } from "./params";

export const protobufPackage = "zrchain.policy";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgNewPolicy defines the Msg/NewPolicy request type. */
export interface MsgNewPolicy {
  creator: string;
  name: string;
  policy: Any | undefined;
  btl: number;
}

/**
 * MsgNewPolicyResponse defines the response structure for executing a
 * MsgNewPolicy message.
 */
export interface MsgNewPolicyResponse {
  id: number;
}

/** MsgRevokeAction defines the Msg/RevokeAction request type. */
export interface MsgRevokeAction {
  creator: string;
  actionId: number;
}

/**
 * MsgRevokeActionResponse defines the response structure for executing a
 * MsgRevokeAction message.
 */
export interface MsgRevokeActionResponse {
}

/** MsgApproveAction defines the Msg/ApproveAction request type. */
export interface MsgApproveAction {
  creator: string;
  actionType: string;
  actionId: number;
  additionalSignatures: Any[];
}

/**
 * MsgApproveActionResponse defines the response structure for executing a
 * MsgApproveAction message.
 */
export interface MsgApproveActionResponse {
  status: string;
}

/** MsgAddSignMethod defines the Msg/AddSignMethod request type. */
export interface MsgAddSignMethod {
  creator: string;
  config: Any | undefined;
}

/**
 * MsgAddSignMethodResponse defines the response structure for executing a
 * MsgAddSignMethod message.
 */
export interface MsgAddSignMethodResponse {
}

/** MsgRemoveSignMethod defines the Msg/RemoveSignMethod request type. */
export interface MsgRemoveSignMethod {
  creator: string;
  id: string;
}

/**
 * MsgRemoveSignMethodResponse defines the response structure for executing a
 * MsgRemoveSignMethod message.
 */
export interface MsgRemoveSignMethodResponse {
}

/** MsgAddMultiGrant defines the Msg/AddMultiGrant request type. */
export interface MsgAddMultiGrant {
  creator: string;
  grantee: string;
  msgs: string[];
}

/**
 * MsgAddMultiGrantResponse defines the response structure for executing a
 * MsgAddMultiGrant message.
 */
export interface MsgAddMultiGrantResponse {
}

/** MsgRemoveMultiGrant defines the Msg/RemoveMultiGrant request type. */
export interface MsgRemoveMultiGrant {
  creator: string;
  grantee: string;
  msgs: string[];
}

/**
 * MsgRemoveMultiGrantResponse defines the response structure for executing a
 * MsgRemoveMultiGrant message.
 */
export interface MsgRemoveMultiGrantResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgNewPolicy(): MsgNewPolicy {
  return { creator: "", name: "", policy: undefined, btl: 0 };
}

export const MsgNewPolicy: MessageFns<MsgNewPolicy> = {
  encode(message: MsgNewPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.policy !== undefined) {
      Any.encode(message.policy, writer.uint32(26).fork()).join();
    }
    if (message.btl !== 0) {
      writer.uint32(32).uint64(message.btl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.policy = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.btl = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewPolicy {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      policy: isSet(object.policy) ? Any.fromJSON(object.policy) : undefined,
      btl: isSet(object.btl) ? globalThis.Number(object.btl) : 0,
    };
  },

  toJSON(message: MsgNewPolicy): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.policy !== undefined) {
      obj.policy = Any.toJSON(message.policy);
    }
    if (message.btl !== 0) {
      obj.btl = Math.round(message.btl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewPolicy>, I>>(base?: I): MsgNewPolicy {
    return MsgNewPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewPolicy>, I>>(object: I): MsgNewPolicy {
    const message = createBaseMsgNewPolicy();
    message.creator = object.creator ?? "";
    message.name = object.name ?? "";
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Any.fromPartial(object.policy)
      : undefined;
    message.btl = object.btl ?? 0;
    return message;
  },
};

function createBaseMsgNewPolicyResponse(): MsgNewPolicyResponse {
  return { id: 0 };
}

export const MsgNewPolicyResponse: MessageFns<MsgNewPolicyResponse> = {
  encode(message: MsgNewPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNewPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewPolicyResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: MsgNewPolicyResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNewPolicyResponse>, I>>(base?: I): MsgNewPolicyResponse {
    return MsgNewPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNewPolicyResponse>, I>>(object: I): MsgNewPolicyResponse {
    const message = createBaseMsgNewPolicyResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseMsgRevokeAction(): MsgRevokeAction {
  return { creator: "", actionId: 0 };
}

export const MsgRevokeAction: MessageFns<MsgRevokeAction> = {
  encode(message: MsgRevokeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.actionId !== 0) {
      writer.uint32(16).uint64(message.actionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRevokeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.actionId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevokeAction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
    };
  },

  toJSON(message: MsgRevokeAction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.actionId !== 0) {
      obj.actionId = Math.round(message.actionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevokeAction>, I>>(base?: I): MsgRevokeAction {
    return MsgRevokeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevokeAction>, I>>(object: I): MsgRevokeAction {
    const message = createBaseMsgRevokeAction();
    message.creator = object.creator ?? "";
    message.actionId = object.actionId ?? 0;
    return message;
  },
};

function createBaseMsgRevokeActionResponse(): MsgRevokeActionResponse {
  return {};
}

export const MsgRevokeActionResponse: MessageFns<MsgRevokeActionResponse> = {
  encode(_: MsgRevokeActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRevokeActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRevokeActionResponse {
    return {};
  },

  toJSON(_: MsgRevokeActionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevokeActionResponse>, I>>(base?: I): MsgRevokeActionResponse {
    return MsgRevokeActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevokeActionResponse>, I>>(_: I): MsgRevokeActionResponse {
    const message = createBaseMsgRevokeActionResponse();
    return message;
  },
};

function createBaseMsgApproveAction(): MsgApproveAction {
  return { creator: "", actionType: "", actionId: 0, additionalSignatures: [] };
}

export const MsgApproveAction: MessageFns<MsgApproveAction> = {
  encode(message: MsgApproveAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.actionType !== "") {
      writer.uint32(18).string(message.actionType);
    }
    if (message.actionId !== 0) {
      writer.uint32(24).uint64(message.actionId);
    }
    for (const v of message.additionalSignatures) {
      Any.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgApproveAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgApproveAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actionType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.actionId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.additionalSignatures.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgApproveAction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      actionType: isSet(object.actionType) ? globalThis.String(object.actionType) : "",
      actionId: isSet(object.actionId) ? globalThis.Number(object.actionId) : 0,
      additionalSignatures: globalThis.Array.isArray(object?.additionalSignatures)
        ? object.additionalSignatures.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgApproveAction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.actionType !== "") {
      obj.actionType = message.actionType;
    }
    if (message.actionId !== 0) {
      obj.actionId = Math.round(message.actionId);
    }
    if (message.additionalSignatures?.length) {
      obj.additionalSignatures = message.additionalSignatures.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgApproveAction>, I>>(base?: I): MsgApproveAction {
    return MsgApproveAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgApproveAction>, I>>(object: I): MsgApproveAction {
    const message = createBaseMsgApproveAction();
    message.creator = object.creator ?? "";
    message.actionType = object.actionType ?? "";
    message.actionId = object.actionId ?? 0;
    message.additionalSignatures = object.additionalSignatures?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgApproveActionResponse(): MsgApproveActionResponse {
  return { status: "" };
}

export const MsgApproveActionResponse: MessageFns<MsgApproveActionResponse> = {
  encode(message: MsgApproveActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgApproveActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgApproveActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgApproveActionResponse {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: MsgApproveActionResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgApproveActionResponse>, I>>(base?: I): MsgApproveActionResponse {
    return MsgApproveActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgApproveActionResponse>, I>>(object: I): MsgApproveActionResponse {
    const message = createBaseMsgApproveActionResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseMsgAddSignMethod(): MsgAddSignMethod {
  return { creator: "", config: undefined };
}

export const MsgAddSignMethod: MessageFns<MsgAddSignMethod> = {
  encode(message: MsgAddSignMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.config !== undefined) {
      Any.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddSignMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddSignMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddSignMethod {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      config: isSet(object.config) ? Any.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: MsgAddSignMethod): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.config !== undefined) {
      obj.config = Any.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddSignMethod>, I>>(base?: I): MsgAddSignMethod {
    return MsgAddSignMethod.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddSignMethod>, I>>(object: I): MsgAddSignMethod {
    const message = createBaseMsgAddSignMethod();
    message.creator = object.creator ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? Any.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseMsgAddSignMethodResponse(): MsgAddSignMethodResponse {
  return {};
}

export const MsgAddSignMethodResponse: MessageFns<MsgAddSignMethodResponse> = {
  encode(_: MsgAddSignMethodResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddSignMethodResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddSignMethodResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddSignMethodResponse {
    return {};
  },

  toJSON(_: MsgAddSignMethodResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddSignMethodResponse>, I>>(base?: I): MsgAddSignMethodResponse {
    return MsgAddSignMethodResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddSignMethodResponse>, I>>(_: I): MsgAddSignMethodResponse {
    const message = createBaseMsgAddSignMethodResponse();
    return message;
  },
};

function createBaseMsgRemoveSignMethod(): MsgRemoveSignMethod {
  return { creator: "", id: "" };
}

export const MsgRemoveSignMethod: MessageFns<MsgRemoveSignMethod> = {
  encode(message: MsgRemoveSignMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveSignMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveSignMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveSignMethod {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: MsgRemoveSignMethod): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveSignMethod>, I>>(base?: I): MsgRemoveSignMethod {
    return MsgRemoveSignMethod.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveSignMethod>, I>>(object: I): MsgRemoveSignMethod {
    const message = createBaseMsgRemoveSignMethod();
    message.creator = object.creator ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseMsgRemoveSignMethodResponse(): MsgRemoveSignMethodResponse {
  return {};
}

export const MsgRemoveSignMethodResponse: MessageFns<MsgRemoveSignMethodResponse> = {
  encode(_: MsgRemoveSignMethodResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveSignMethodResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveSignMethodResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveSignMethodResponse {
    return {};
  },

  toJSON(_: MsgRemoveSignMethodResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveSignMethodResponse>, I>>(base?: I): MsgRemoveSignMethodResponse {
    return MsgRemoveSignMethodResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveSignMethodResponse>, I>>(_: I): MsgRemoveSignMethodResponse {
    const message = createBaseMsgRemoveSignMethodResponse();
    return message;
  },
};

function createBaseMsgAddMultiGrant(): MsgAddMultiGrant {
  return { creator: "", grantee: "", msgs: [] };
}

export const MsgAddMultiGrant: MessageFns<MsgAddMultiGrant> = {
  encode(message: MsgAddMultiGrant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    for (const v of message.msgs) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddMultiGrant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddMultiGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grantee = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msgs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddMultiGrant {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      grantee: isSet(object.grantee) ? globalThis.String(object.grantee) : "",
      msgs: globalThis.Array.isArray(object?.msgs) ? object.msgs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MsgAddMultiGrant): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.msgs?.length) {
      obj.msgs = message.msgs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddMultiGrant>, I>>(base?: I): MsgAddMultiGrant {
    return MsgAddMultiGrant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddMultiGrant>, I>>(object: I): MsgAddMultiGrant {
    const message = createBaseMsgAddMultiGrant();
    message.creator = object.creator ?? "";
    message.grantee = object.grantee ?? "";
    message.msgs = object.msgs?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgAddMultiGrantResponse(): MsgAddMultiGrantResponse {
  return {};
}

export const MsgAddMultiGrantResponse: MessageFns<MsgAddMultiGrantResponse> = {
  encode(_: MsgAddMultiGrantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddMultiGrantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddMultiGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddMultiGrantResponse {
    return {};
  },

  toJSON(_: MsgAddMultiGrantResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddMultiGrantResponse>, I>>(base?: I): MsgAddMultiGrantResponse {
    return MsgAddMultiGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddMultiGrantResponse>, I>>(_: I): MsgAddMultiGrantResponse {
    const message = createBaseMsgAddMultiGrantResponse();
    return message;
  },
};

function createBaseMsgRemoveMultiGrant(): MsgRemoveMultiGrant {
  return { creator: "", grantee: "", msgs: [] };
}

export const MsgRemoveMultiGrant: MessageFns<MsgRemoveMultiGrant> = {
  encode(message: MsgRemoveMultiGrant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    for (const v of message.msgs) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveMultiGrant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMultiGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grantee = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msgs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveMultiGrant {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      grantee: isSet(object.grantee) ? globalThis.String(object.grantee) : "",
      msgs: globalThis.Array.isArray(object?.msgs) ? object.msgs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MsgRemoveMultiGrant): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.msgs?.length) {
      obj.msgs = message.msgs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMultiGrant>, I>>(base?: I): MsgRemoveMultiGrant {
    return MsgRemoveMultiGrant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMultiGrant>, I>>(object: I): MsgRemoveMultiGrant {
    const message = createBaseMsgRemoveMultiGrant();
    message.creator = object.creator ?? "";
    message.grantee = object.grantee ?? "";
    message.msgs = object.msgs?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgRemoveMultiGrantResponse(): MsgRemoveMultiGrantResponse {
  return {};
}

export const MsgRemoveMultiGrantResponse: MessageFns<MsgRemoveMultiGrantResponse> = {
  encode(_: MsgRemoveMultiGrantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveMultiGrantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMultiGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveMultiGrantResponse {
    return {};
  },

  toJSON(_: MsgRemoveMultiGrantResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMultiGrantResponse>, I>>(base?: I): MsgRemoveMultiGrantResponse {
    return MsgRemoveMultiGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMultiGrantResponse>, I>>(_: I): MsgRemoveMultiGrantResponse {
    const message = createBaseMsgRemoveMultiGrantResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines the operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** NewPolicy defines the operation for creating a new policy. */
  NewPolicy(request: MsgNewPolicy): Promise<MsgNewPolicyResponse>;
  /** RevokeAction defines the operation for revoking an action. */
  RevokeAction(request: MsgRevokeAction): Promise<MsgRevokeActionResponse>;
  /** ApproveAction defines the operation for approving an action. */
  ApproveAction(request: MsgApproveAction): Promise<MsgApproveActionResponse>;
  /** AddSignMethod defines the operation for adding a sign method. */
  AddSignMethod(request: MsgAddSignMethod): Promise<MsgAddSignMethodResponse>;
  /** RemoveSignMethod defines the operation for removing a sign method. */
  RemoveSignMethod(request: MsgRemoveSignMethod): Promise<MsgRemoveSignMethodResponse>;
  /** AddMultiGrant defines the operation for adding multiple grants */
  AddMultiGrant(request: MsgAddMultiGrant): Promise<MsgAddMultiGrantResponse>;
  /** RemoveMultiGrant defines the operation for removing multiple grants */
  RemoveMultiGrant(request: MsgRemoveMultiGrant): Promise<MsgRemoveMultiGrantResponse>;
}

export const MsgServiceName = "zrchain.policy.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.NewPolicy = this.NewPolicy.bind(this);
    this.RevokeAction = this.RevokeAction.bind(this);
    this.ApproveAction = this.ApproveAction.bind(this);
    this.AddSignMethod = this.AddSignMethod.bind(this);
    this.RemoveSignMethod = this.RemoveSignMethod.bind(this);
    this.AddMultiGrant = this.AddMultiGrant.bind(this);
    this.RemoveMultiGrant = this.RemoveMultiGrant.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  NewPolicy(request: MsgNewPolicy): Promise<MsgNewPolicyResponse> {
    const data = MsgNewPolicy.encode(request).finish();
    const promise = this.rpc.request(this.service, "NewPolicy", data);
    return promise.then((data) => MsgNewPolicyResponse.decode(new BinaryReader(data)));
  }

  RevokeAction(request: MsgRevokeAction): Promise<MsgRevokeActionResponse> {
    const data = MsgRevokeAction.encode(request).finish();
    const promise = this.rpc.request(this.service, "RevokeAction", data);
    return promise.then((data) => MsgRevokeActionResponse.decode(new BinaryReader(data)));
  }

  ApproveAction(request: MsgApproveAction): Promise<MsgApproveActionResponse> {
    const data = MsgApproveAction.encode(request).finish();
    const promise = this.rpc.request(this.service, "ApproveAction", data);
    return promise.then((data) => MsgApproveActionResponse.decode(new BinaryReader(data)));
  }

  AddSignMethod(request: MsgAddSignMethod): Promise<MsgAddSignMethodResponse> {
    const data = MsgAddSignMethod.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSignMethod", data);
    return promise.then((data) => MsgAddSignMethodResponse.decode(new BinaryReader(data)));
  }

  RemoveSignMethod(request: MsgRemoveSignMethod): Promise<MsgRemoveSignMethodResponse> {
    const data = MsgRemoveSignMethod.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveSignMethod", data);
    return promise.then((data) => MsgRemoveSignMethodResponse.decode(new BinaryReader(data)));
  }

  AddMultiGrant(request: MsgAddMultiGrant): Promise<MsgAddMultiGrantResponse> {
    const data = MsgAddMultiGrant.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddMultiGrant", data);
    return promise.then((data) => MsgAddMultiGrantResponse.decode(new BinaryReader(data)));
  }

  RemoveMultiGrant(request: MsgRemoveMultiGrant): Promise<MsgRemoveMultiGrantResponse> {
    const data = MsgRemoveMultiGrant.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveMultiGrant", data);
    return promise.then((data) => MsgRemoveMultiGrantResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
