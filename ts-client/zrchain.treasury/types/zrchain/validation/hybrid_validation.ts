// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zrchain/validation/hybrid_validation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Header } from "../../tendermint/types/types";
import { AssetData } from "./asset_data";
import { BondStatus, bondStatusFromJSON, bondStatusToJSON, Commission, Description } from "./staking";

export const protobufPackage = "zrchain.validation";

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 */
export interface ValidatorHV {
  /**
   * operator_address defines the address of the validator's operator; bech
   * encoded in JSON.
   */
  operatorAddress: string;
  /**
   * consensus_pubkey is the consensus public key of the validator, as a
   * Protobuf Any.
   */
  consensusPubkey:
    | Any
    | undefined;
  /**
   * jailed defined whether the validator has been jailed from bonded status or
   * not.
   */
  jailed: boolean;
  /** status is the validator status (bonded/unbonding/unbonded). */
  status: BondStatus;
  /** tokens define the delegated tokens (incl. self-delegation). */
  tokensNative: string;
  tokensAVS: string;
  /** delegator_shares defines total shares issued to a validator's delegators. */
  delegatorShares: string;
  /** description defines the description terms for the validator. */
  description:
    | Description
    | undefined;
  /**
   * unbonding_height defines, if unbonding, the height at which this validator
   * has begun unbonding.
   */
  unbondingHeight: number;
  /**
   * unbonding_time defines, if unbonding, the min time for the validator to
   * complete unbonding.
   */
  unbondingTime:
    | Date
    | undefined;
  /** commission defines the commission parameters. */
  commission:
    | Commission
    | undefined;
  /**
   * min_self_delegation is the validator's self declared minimum self
   * delegation.
   */
  minSelfDelegation: string;
  /**
   * strictly positive if this validator's unbonding has been stopped by
   * external modules
   */
  unbondingOnHoldRefCount: number;
  /**
   * list of unbonding ids, each uniquely identifying an unbonding of this
   * validator
   */
  unbondingIds: number[];
}

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 */
export interface HistoricalInfoHV {
  header: Header | undefined;
  valset: ValidatorHV[];
}

/** SlashEvent defines a slash event. */
export interface SlashEvent {
  blockHeight: number;
  validatorAddr: string;
  percentageSlashed: string;
  tokensSlashedNative: string;
  tokensSlashedAVS: string;
}

/** HVParams defines the hybrid validation parameters. */
export interface HVParams {
  /** % APR */
  AVSRewardsRate: string;
  /** seconds */
  BlockTime: number;
  stakeableAssets: AssetData[];
  priceRetentionBlockRange: number;
}

/** ValidationInfo defines the validation info. */
export interface ValidationInfo {
  nonVotingValidators: string[];
  mismatchedVoteExtensions: string[];
  blockHeight: number;
}

function createBaseValidatorHV(): ValidatorHV {
  return {
    operatorAddress: "",
    consensusPubkey: undefined,
    jailed: false,
    status: 0,
    tokensNative: "",
    tokensAVS: "",
    delegatorShares: "",
    description: undefined,
    unbondingHeight: 0,
    unbondingTime: undefined,
    commission: undefined,
    minSelfDelegation: "",
    unbondingOnHoldRefCount: 0,
    unbondingIds: [],
  };
}

export const ValidatorHV: MessageFns<ValidatorHV> = {
  encode(message: ValidatorHV, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorAddress !== "") {
      writer.uint32(10).string(message.operatorAddress);
    }
    if (message.consensusPubkey !== undefined) {
      Any.encode(message.consensusPubkey, writer.uint32(18).fork()).join();
    }
    if (message.jailed !== false) {
      writer.uint32(24).bool(message.jailed);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.tokensNative !== "") {
      writer.uint32(42).string(message.tokensNative);
    }
    if (message.tokensAVS !== "") {
      writer.uint32(50).string(message.tokensAVS);
    }
    if (message.delegatorShares !== "") {
      writer.uint32(58).string(message.delegatorShares);
    }
    if (message.description !== undefined) {
      Description.encode(message.description, writer.uint32(66).fork()).join();
    }
    if (message.unbondingHeight !== 0) {
      writer.uint32(72).int64(message.unbondingHeight);
    }
    if (message.unbondingTime !== undefined) {
      Timestamp.encode(toTimestamp(message.unbondingTime), writer.uint32(82).fork()).join();
    }
    if (message.commission !== undefined) {
      Commission.encode(message.commission, writer.uint32(90).fork()).join();
    }
    if (message.minSelfDelegation !== "") {
      writer.uint32(98).string(message.minSelfDelegation);
    }
    if (message.unbondingOnHoldRefCount !== 0) {
      writer.uint32(104).int64(message.unbondingOnHoldRefCount);
    }
    writer.uint32(114).fork();
    for (const v of message.unbondingIds) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorHV {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorHV();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consensusPubkey = Any.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.jailed = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokensNative = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokensAVS = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.delegatorShares = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.description = Description.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.unbondingHeight = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.unbondingTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.commission = Commission.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.minSelfDelegation = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.unbondingOnHoldRefCount = longToNumber(reader.int64());
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.unbondingIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.unbondingIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorHV {
    return {
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
      consensusPubkey: isSet(object.consensusPubkey) ? Any.fromJSON(object.consensusPubkey) : undefined,
      jailed: isSet(object.jailed) ? globalThis.Boolean(object.jailed) : false,
      status: isSet(object.status) ? bondStatusFromJSON(object.status) : 0,
      tokensNative: isSet(object.tokensNative) ? globalThis.String(object.tokensNative) : "",
      tokensAVS: isSet(object.tokensAVS) ? globalThis.String(object.tokensAVS) : "",
      delegatorShares: isSet(object.delegatorShares) ? globalThis.String(object.delegatorShares) : "",
      description: isSet(object.description) ? Description.fromJSON(object.description) : undefined,
      unbondingHeight: isSet(object.unbondingHeight) ? globalThis.Number(object.unbondingHeight) : 0,
      unbondingTime: isSet(object.unbondingTime) ? fromJsonTimestamp(object.unbondingTime) : undefined,
      commission: isSet(object.commission) ? Commission.fromJSON(object.commission) : undefined,
      minSelfDelegation: isSet(object.minSelfDelegation) ? globalThis.String(object.minSelfDelegation) : "",
      unbondingOnHoldRefCount: isSet(object.unbondingOnHoldRefCount)
        ? globalThis.Number(object.unbondingOnHoldRefCount)
        : 0,
      unbondingIds: globalThis.Array.isArray(object?.unbondingIds)
        ? object.unbondingIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ValidatorHV): unknown {
    const obj: any = {};
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    if (message.consensusPubkey !== undefined) {
      obj.consensusPubkey = Any.toJSON(message.consensusPubkey);
    }
    if (message.jailed !== false) {
      obj.jailed = message.jailed;
    }
    if (message.status !== 0) {
      obj.status = bondStatusToJSON(message.status);
    }
    if (message.tokensNative !== "") {
      obj.tokensNative = message.tokensNative;
    }
    if (message.tokensAVS !== "") {
      obj.tokensAVS = message.tokensAVS;
    }
    if (message.delegatorShares !== "") {
      obj.delegatorShares = message.delegatorShares;
    }
    if (message.description !== undefined) {
      obj.description = Description.toJSON(message.description);
    }
    if (message.unbondingHeight !== 0) {
      obj.unbondingHeight = Math.round(message.unbondingHeight);
    }
    if (message.unbondingTime !== undefined) {
      obj.unbondingTime = message.unbondingTime.toISOString();
    }
    if (message.commission !== undefined) {
      obj.commission = Commission.toJSON(message.commission);
    }
    if (message.minSelfDelegation !== "") {
      obj.minSelfDelegation = message.minSelfDelegation;
    }
    if (message.unbondingOnHoldRefCount !== 0) {
      obj.unbondingOnHoldRefCount = Math.round(message.unbondingOnHoldRefCount);
    }
    if (message.unbondingIds?.length) {
      obj.unbondingIds = message.unbondingIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorHV>, I>>(base?: I): ValidatorHV {
    return ValidatorHV.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorHV>, I>>(object: I): ValidatorHV {
    const message = createBaseValidatorHV();
    message.operatorAddress = object.operatorAddress ?? "";
    message.consensusPubkey = (object.consensusPubkey !== undefined && object.consensusPubkey !== null)
      ? Any.fromPartial(object.consensusPubkey)
      : undefined;
    message.jailed = object.jailed ?? false;
    message.status = object.status ?? 0;
    message.tokensNative = object.tokensNative ?? "";
    message.tokensAVS = object.tokensAVS ?? "";
    message.delegatorShares = object.delegatorShares ?? "";
    message.description = (object.description !== undefined && object.description !== null)
      ? Description.fromPartial(object.description)
      : undefined;
    message.unbondingHeight = object.unbondingHeight ?? 0;
    message.unbondingTime = object.unbondingTime ?? undefined;
    message.commission = (object.commission !== undefined && object.commission !== null)
      ? Commission.fromPartial(object.commission)
      : undefined;
    message.minSelfDelegation = object.minSelfDelegation ?? "";
    message.unbondingOnHoldRefCount = object.unbondingOnHoldRefCount ?? 0;
    message.unbondingIds = object.unbondingIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseHistoricalInfoHV(): HistoricalInfoHV {
  return { header: undefined, valset: [] };
}

export const HistoricalInfoHV: MessageFns<HistoricalInfoHV> = {
  encode(message: HistoricalInfoHV, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    for (const v of message.valset) {
      ValidatorHV.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistoricalInfoHV {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistoricalInfoHV();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = Header.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.valset.push(ValidatorHV.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistoricalInfoHV {
    return {
      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,
      valset: globalThis.Array.isArray(object?.valset) ? object.valset.map((e: any) => ValidatorHV.fromJSON(e)) : [],
    };
  },

  toJSON(message: HistoricalInfoHV): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = Header.toJSON(message.header);
    }
    if (message.valset?.length) {
      obj.valset = message.valset.map((e) => ValidatorHV.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistoricalInfoHV>, I>>(base?: I): HistoricalInfoHV {
    return HistoricalInfoHV.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistoricalInfoHV>, I>>(object: I): HistoricalInfoHV {
    const message = createBaseHistoricalInfoHV();
    message.header = (object.header !== undefined && object.header !== null)
      ? Header.fromPartial(object.header)
      : undefined;
    message.valset = object.valset?.map((e) => ValidatorHV.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSlashEvent(): SlashEvent {
  return { blockHeight: 0, validatorAddr: "", percentageSlashed: "", tokensSlashedNative: "", tokensSlashedAVS: "" };
}

export const SlashEvent: MessageFns<SlashEvent> = {
  encode(message: SlashEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.validatorAddr !== "") {
      writer.uint32(18).string(message.validatorAddr);
    }
    if (message.percentageSlashed !== "") {
      writer.uint32(26).string(message.percentageSlashed);
    }
    if (message.tokensSlashedNative !== "") {
      writer.uint32(34).string(message.tokensSlashedNative);
    }
    if (message.tokensSlashedAVS !== "") {
      writer.uint32(42).string(message.tokensSlashedAVS);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlashEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlashEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.percentageSlashed = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokensSlashedNative = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokensSlashedAVS = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlashEvent {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      validatorAddr: isSet(object.validatorAddr) ? globalThis.String(object.validatorAddr) : "",
      percentageSlashed: isSet(object.percentageSlashed) ? globalThis.String(object.percentageSlashed) : "",
      tokensSlashedNative: isSet(object.tokensSlashedNative) ? globalThis.String(object.tokensSlashedNative) : "",
      tokensSlashedAVS: isSet(object.tokensSlashedAVS) ? globalThis.String(object.tokensSlashedAVS) : "",
    };
  },

  toJSON(message: SlashEvent): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.validatorAddr !== "") {
      obj.validatorAddr = message.validatorAddr;
    }
    if (message.percentageSlashed !== "") {
      obj.percentageSlashed = message.percentageSlashed;
    }
    if (message.tokensSlashedNative !== "") {
      obj.tokensSlashedNative = message.tokensSlashedNative;
    }
    if (message.tokensSlashedAVS !== "") {
      obj.tokensSlashedAVS = message.tokensSlashedAVS;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlashEvent>, I>>(base?: I): SlashEvent {
    return SlashEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlashEvent>, I>>(object: I): SlashEvent {
    const message = createBaseSlashEvent();
    message.blockHeight = object.blockHeight ?? 0;
    message.validatorAddr = object.validatorAddr ?? "";
    message.percentageSlashed = object.percentageSlashed ?? "";
    message.tokensSlashedNative = object.tokensSlashedNative ?? "";
    message.tokensSlashedAVS = object.tokensSlashedAVS ?? "";
    return message;
  },
};

function createBaseHVParams(): HVParams {
  return { AVSRewardsRate: "", BlockTime: 0, stakeableAssets: [], priceRetentionBlockRange: 0 };
}

export const HVParams: MessageFns<HVParams> = {
  encode(message: HVParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.AVSRewardsRate !== "") {
      writer.uint32(10).string(message.AVSRewardsRate);
    }
    if (message.BlockTime !== 0) {
      writer.uint32(16).int64(message.BlockTime);
    }
    for (const v of message.stakeableAssets) {
      AssetData.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.priceRetentionBlockRange !== 0) {
      writer.uint32(32).int64(message.priceRetentionBlockRange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HVParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHVParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.AVSRewardsRate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.BlockTime = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stakeableAssets.push(AssetData.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.priceRetentionBlockRange = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HVParams {
    return {
      AVSRewardsRate: isSet(object.AVSRewardsRate) ? globalThis.String(object.AVSRewardsRate) : "",
      BlockTime: isSet(object.BlockTime) ? globalThis.Number(object.BlockTime) : 0,
      stakeableAssets: globalThis.Array.isArray(object?.stakeableAssets)
        ? object.stakeableAssets.map((e: any) => AssetData.fromJSON(e))
        : [],
      priceRetentionBlockRange: isSet(object.priceRetentionBlockRange)
        ? globalThis.Number(object.priceRetentionBlockRange)
        : 0,
    };
  },

  toJSON(message: HVParams): unknown {
    const obj: any = {};
    if (message.AVSRewardsRate !== "") {
      obj.AVSRewardsRate = message.AVSRewardsRate;
    }
    if (message.BlockTime !== 0) {
      obj.BlockTime = Math.round(message.BlockTime);
    }
    if (message.stakeableAssets?.length) {
      obj.stakeableAssets = message.stakeableAssets.map((e) => AssetData.toJSON(e));
    }
    if (message.priceRetentionBlockRange !== 0) {
      obj.priceRetentionBlockRange = Math.round(message.priceRetentionBlockRange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HVParams>, I>>(base?: I): HVParams {
    return HVParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HVParams>, I>>(object: I): HVParams {
    const message = createBaseHVParams();
    message.AVSRewardsRate = object.AVSRewardsRate ?? "";
    message.BlockTime = object.BlockTime ?? 0;
    message.stakeableAssets = object.stakeableAssets?.map((e) => AssetData.fromPartial(e)) || [];
    message.priceRetentionBlockRange = object.priceRetentionBlockRange ?? 0;
    return message;
  },
};

function createBaseValidationInfo(): ValidationInfo {
  return { nonVotingValidators: [], mismatchedVoteExtensions: [], blockHeight: 0 };
}

export const ValidationInfo: MessageFns<ValidationInfo> = {
  encode(message: ValidationInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nonVotingValidators) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.mismatchedVoteExtensions) {
      writer.uint32(18).string(v!);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(24).uint64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nonVotingValidators.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mismatchedVoteExtensions.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationInfo {
    return {
      nonVotingValidators: globalThis.Array.isArray(object?.nonVotingValidators)
        ? object.nonVotingValidators.map((e: any) => globalThis.String(e))
        : [],
      mismatchedVoteExtensions: globalThis.Array.isArray(object?.mismatchedVoteExtensions)
        ? object.mismatchedVoteExtensions.map((e: any) => globalThis.String(e))
        : [],
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
    };
  },

  toJSON(message: ValidationInfo): unknown {
    const obj: any = {};
    if (message.nonVotingValidators?.length) {
      obj.nonVotingValidators = message.nonVotingValidators;
    }
    if (message.mismatchedVoteExtensions?.length) {
      obj.mismatchedVoteExtensions = message.mismatchedVoteExtensions;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidationInfo>, I>>(base?: I): ValidationInfo {
    return ValidationInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidationInfo>, I>>(object: I): ValidationInfo {
    const message = createBaseValidationInfo();
    message.nonVotingValidators = object.nonVotingValidators?.map((e) => e) || [];
    message.mismatchedVoteExtensions = object.mismatchedVoteExtensions?.map((e) => e) || [];
    message.blockHeight = object.blockHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
