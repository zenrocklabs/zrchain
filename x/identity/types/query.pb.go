// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/identity/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryWorkspacesRequest is request type for the Query/WorkspacesRequest RPC
// Method
type QueryWorkspacesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Owner      string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Creator    string             `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryWorkspacesRequest) Reset()         { *m = QueryWorkspacesRequest{} }
func (m *QueryWorkspacesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkspacesRequest) ProtoMessage()    {}
func (*QueryWorkspacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{2}
}
func (m *QueryWorkspacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkspacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkspacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkspacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkspacesRequest.Merge(m, src)
}
func (m *QueryWorkspacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkspacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkspacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkspacesRequest proto.InternalMessageInfo

func (m *QueryWorkspacesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryWorkspacesRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryWorkspacesRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// QueryWorkspacesResponse is response type for the Query/WorkspacesRequest RPC
// method
type QueryWorkspacesResponse struct {
	Workspaces []*Workspace        `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWorkspacesResponse) Reset()         { *m = QueryWorkspacesResponse{} }
func (m *QueryWorkspacesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkspacesResponse) ProtoMessage()    {}
func (*QueryWorkspacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{3}
}
func (m *QueryWorkspacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkspacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkspacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkspacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkspacesResponse.Merge(m, src)
}
func (m *QueryWorkspacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkspacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkspacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkspacesResponse proto.InternalMessageInfo

func (m *QueryWorkspacesResponse) GetWorkspaces() []*Workspace {
	if m != nil {
		return m.Workspaces
	}
	return nil
}

func (m *QueryWorkspacesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWorkspaceByAddressRequest is request type for the
// Query/WorkspaceByAddressRequest RPC method
type QueryWorkspaceByAddressRequest struct {
	WorkspaceAddr string `protobuf:"bytes,1,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
}

func (m *QueryWorkspaceByAddressRequest) Reset()         { *m = QueryWorkspaceByAddressRequest{} }
func (m *QueryWorkspaceByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkspaceByAddressRequest) ProtoMessage()    {}
func (*QueryWorkspaceByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{4}
}
func (m *QueryWorkspaceByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkspaceByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkspaceByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkspaceByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkspaceByAddressRequest.Merge(m, src)
}
func (m *QueryWorkspaceByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkspaceByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkspaceByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkspaceByAddressRequest proto.InternalMessageInfo

func (m *QueryWorkspaceByAddressRequest) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

// QueryWorkspaceByAddressResponse is the response type for
// Query/WorkspaceByAddressResponse RPC method
type QueryWorkspaceByAddressResponse struct {
	Workspace *Workspace `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (m *QueryWorkspaceByAddressResponse) Reset()         { *m = QueryWorkspaceByAddressResponse{} }
func (m *QueryWorkspaceByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkspaceByAddressResponse) ProtoMessage()    {}
func (*QueryWorkspaceByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{5}
}
func (m *QueryWorkspaceByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkspaceByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkspaceByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkspaceByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkspaceByAddressResponse.Merge(m, src)
}
func (m *QueryWorkspaceByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkspaceByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkspaceByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkspaceByAddressResponse proto.InternalMessageInfo

func (m *QueryWorkspaceByAddressResponse) GetWorkspace() *Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

// QueryKeyringsRequest is request type for the
// Query/KeyringsRequest RPC method
type QueryKeyringsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeyringsRequest) Reset()         { *m = QueryKeyringsRequest{} }
func (m *QueryKeyringsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyringsRequest) ProtoMessage()    {}
func (*QueryKeyringsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{6}
}
func (m *QueryKeyringsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyringsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyringsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyringsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyringsRequest.Merge(m, src)
}
func (m *QueryKeyringsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyringsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyringsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyringsRequest proto.InternalMessageInfo

func (m *QueryKeyringsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeyringsResponse is the response type for
// Query/KeyringsResponse RPC method
type QueryKeyringsResponse struct {
	Keyrings   []*Keyring          `protobuf:"bytes,1,rep,name=keyrings,proto3" json:"keyrings,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeyringsResponse) Reset()         { *m = QueryKeyringsResponse{} }
func (m *QueryKeyringsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyringsResponse) ProtoMessage()    {}
func (*QueryKeyringsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{7}
}
func (m *QueryKeyringsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyringsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyringsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyringsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyringsResponse.Merge(m, src)
}
func (m *QueryKeyringsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyringsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyringsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyringsResponse proto.InternalMessageInfo

func (m *QueryKeyringsResponse) GetKeyrings() []*Keyring {
	if m != nil {
		return m.Keyrings
	}
	return nil
}

func (m *QueryKeyringsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeyringByAddressRequest is request type for the
// Query/KeyringByAddressRequest RPC method
type QueryKeyringByAddressRequest struct {
	KeyringAddr string `protobuf:"bytes,1,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
}

func (m *QueryKeyringByAddressRequest) Reset()         { *m = QueryKeyringByAddressRequest{} }
func (m *QueryKeyringByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyringByAddressRequest) ProtoMessage()    {}
func (*QueryKeyringByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{8}
}
func (m *QueryKeyringByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyringByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyringByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyringByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyringByAddressRequest.Merge(m, src)
}
func (m *QueryKeyringByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyringByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyringByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyringByAddressRequest proto.InternalMessageInfo

func (m *QueryKeyringByAddressRequest) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

// QueryKeyringByAddressResponse is the response type for
// Query/KeyringByAddressResponse RPC method
type QueryKeyringByAddressResponse struct {
	Keyring *Keyring `protobuf:"bytes,1,opt,name=keyring,proto3" json:"keyring,omitempty"`
}

func (m *QueryKeyringByAddressResponse) Reset()         { *m = QueryKeyringByAddressResponse{} }
func (m *QueryKeyringByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyringByAddressResponse) ProtoMessage()    {}
func (*QueryKeyringByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad24483805da529, []int{9}
}
func (m *QueryKeyringByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyringByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyringByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyringByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyringByAddressResponse.Merge(m, src)
}
func (m *QueryKeyringByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyringByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyringByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyringByAddressResponse proto.InternalMessageInfo

func (m *QueryKeyringByAddressResponse) GetKeyring() *Keyring {
	if m != nil {
		return m.Keyring
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "zrchain.identity.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "zrchain.identity.QueryParamsResponse")
	proto.RegisterType((*QueryWorkspacesRequest)(nil), "zrchain.identity.QueryWorkspacesRequest")
	proto.RegisterType((*QueryWorkspacesResponse)(nil), "zrchain.identity.QueryWorkspacesResponse")
	proto.RegisterType((*QueryWorkspaceByAddressRequest)(nil), "zrchain.identity.QueryWorkspaceByAddressRequest")
	proto.RegisterType((*QueryWorkspaceByAddressResponse)(nil), "zrchain.identity.QueryWorkspaceByAddressResponse")
	proto.RegisterType((*QueryKeyringsRequest)(nil), "zrchain.identity.QueryKeyringsRequest")
	proto.RegisterType((*QueryKeyringsResponse)(nil), "zrchain.identity.QueryKeyringsResponse")
	proto.RegisterType((*QueryKeyringByAddressRequest)(nil), "zrchain.identity.QueryKeyringByAddressRequest")
	proto.RegisterType((*QueryKeyringByAddressResponse)(nil), "zrchain.identity.QueryKeyringByAddressResponse")
}

func init() { proto.RegisterFile("zrchain/identity/query.proto", fileDescriptor_fad24483805da529) }

var fileDescriptor_fad24483805da529 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xee, 0x40, 0xf8, 0xe8, 0x8b, 0x1a, 0x1c, 0xab, 0xd6, 0xb5, 0x2c, 0x75, 0xc3, 0x47, 0x25,
	0x71, 0x47, 0x20, 0xc4, 0x10, 0x0e, 0x06, 0x0e, 0x70, 0xf0, 0x82, 0xab, 0x89, 0x09, 0x31, 0x92,
	0x69, 0x3b, 0x59, 0x36, 0xd8, 0x9d, 0x65, 0x67, 0x0b, 0x56, 0x43, 0x4c, 0xbc, 0x78, 0x25, 0xf1,
	0xe0, 0xd1, 0xab, 0x47, 0xce, 0xfe, 0x02, 0x8e, 0x24, 0x5e, 0x3c, 0x19, 0x03, 0x26, 0xfe, 0x08,
	0x2f, 0xa6, 0xb3, 0xb3, 0xdb, 0x8f, 0xcd, 0xb6, 0x98, 0x70, 0x69, 0xba, 0x33, 0xcf, 0xfb, 0x3e,
	0xcf, 0xf3, 0x7e, 0xec, 0x42, 0xe1, 0xad, 0x5f, 0xd9, 0xa1, 0x8e, 0x4b, 0x9c, 0x2a, 0x73, 0x03,
	0x27, 0x68, 0x90, 0xbd, 0x3a, 0xf3, 0x1b, 0xa6, 0xe7, 0xf3, 0x80, 0xe3, 0x71, 0x75, 0x6b, 0x46,
	0xb7, 0xda, 0x75, 0x5a, 0x73, 0x5c, 0x4e, 0xe4, 0x6f, 0x08, 0xd2, 0x72, 0x36, 0xb7, 0xb9, 0xfc,
	0x4b, 0x9a, 0xff, 0xd4, 0x69, 0xc1, 0xe6, 0xdc, 0x7e, 0xcd, 0x08, 0xf5, 0x1c, 0x42, 0x5d, 0x97,
	0x07, 0x34, 0x70, 0xb8, 0x2b, 0xd4, 0xed, 0x5c, 0x85, 0x8b, 0x1a, 0x17, 0xa4, 0x4c, 0x05, 0x0b,
	0x19, 0xc9, 0xfe, 0x7c, 0x99, 0x05, 0x74, 0x9e, 0x78, 0xd4, 0x76, 0x5c, 0x09, 0x56, 0xd8, 0x89,
	0x84, 0x44, 0x8f, 0xfa, 0xb4, 0x16, 0xa5, 0x2a, 0x26, 0xae, 0x0f, 0xb8, 0xbf, 0x2b, 0x3c, 0x5a,
	0x61, 0x0a, 0xa1, 0x27, 0x10, 0xbb, 0xac, 0xe1, 0x3b, 0xae, 0x1d, 0xde, 0x1b, 0x39, 0xc0, 0x4f,
	0x9b, 0x12, 0x36, 0x65, 0x5a, 0x8b, 0xed, 0xd5, 0x99, 0x08, 0x0c, 0x0b, 0x6e, 0x74, 0x9c, 0x0a,
	0x8f, 0xbb, 0x82, 0xe1, 0x15, 0x18, 0x0e, 0xe9, 0xf3, 0xa8, 0x88, 0x4a, 0x63, 0x0b, 0x79, 0xb3,
	0xbb, 0x46, 0x66, 0x18, 0xb1, 0x96, 0x3d, 0xf9, 0x39, 0x99, 0xf9, 0xfa, 0xe7, 0x78, 0x0e, 0x59,
	0x2a, 0xc4, 0x38, 0x42, 0x70, 0x4b, 0x26, 0x7d, 0x11, 0x49, 0x8c, 0xe8, 0xf0, 0x3a, 0x40, 0xcb,
	0xb9, 0xca, 0x3d, 0x63, 0x86, 0x65, 0x32, 0x9b, 0x65, 0x32, 0xc3, 0xc6, 0xa8, 0x32, 0x99, 0x9b,
	0xd4, 0x66, 0x2a, 0xd6, 0x6a, 0x8b, 0xc4, 0x39, 0x18, 0xe2, 0x07, 0x2e, 0xf3, 0xf3, 0x03, 0x45,
	0x54, 0xca, 0x5a, 0xe1, 0x03, 0xce, 0xc3, 0x48, 0xc5, 0x67, 0x34, 0xe0, 0x7e, 0x7e, 0x50, 0x9e,
	0x47, 0x8f, 0xc6, 0x17, 0x04, 0xb7, 0x13, 0x92, 0x62, 0xaf, 0x10, 0xd7, 0xb2, 0xe9, 0x77, 0xb0,
	0x34, 0xb6, 0x70, 0x37, 0xe9, 0x37, 0x8e, 0xb4, 0xda, 0xe0, 0x78, 0xa3, 0xc3, 0xd0, 0x80, 0x34,
	0x34, 0xdb, 0xd7, 0x50, 0xc8, 0xdc, 0xee, 0xc8, 0xd8, 0x00, 0xbd, 0x53, 0xe0, 0x5a, 0x63, 0xb5,
	0x5a, 0xf5, 0x99, 0x88, 0x6b, 0x37, 0x0d, 0xd7, 0x62, 0xe2, 0x6d, 0x5a, 0xad, 0xfa, 0xb2, 0x7e,
	0x59, 0xeb, 0x6a, 0x7c, 0xda, 0x0c, 0x30, 0x5e, 0xc2, 0x64, 0x6a, 0x22, 0xe5, 0x78, 0x19, 0xb2,
	0x71, 0x8c, 0x6a, 0x42, 0x4f, 0xc3, 0x2d, 0xb4, 0xf1, 0x0a, 0x72, 0x32, 0xfb, 0x93, 0x70, 0xb6,
	0x2e, 0xbb, 0xb1, 0xc6, 0x67, 0x04, 0x37, 0xbb, 0x08, 0x94, 0xe8, 0x25, 0x18, 0x55, 0x03, 0x1d,
	0x35, 0xe9, 0x4e, 0x52, 0xb3, 0x8a, 0xb2, 0x62, 0xe8, 0xe5, 0x35, 0x68, 0x15, 0x0a, 0xed, 0xc2,
	0x12, 0xed, 0xb9, 0x07, 0x57, 0x14, 0x69, 0x7b, 0x73, 0xc6, 0xd4, 0x99, 0x6c, 0xcd, 0x73, 0x98,
	0x48, 0x49, 0xa1, 0x3c, 0x2e, 0xc2, 0x88, 0xc2, 0xab, 0x12, 0xf6, 0xb0, 0x18, 0x21, 0x17, 0xfe,
	0x0e, 0xc1, 0x90, 0x4c, 0x8b, 0x0f, 0x60, 0x38, 0xdc, 0x4a, 0x3c, 0x95, 0x8c, 0x4b, 0x2e, 0xbf,
	0x36, 0xdd, 0x07, 0x15, 0xaa, 0x32, 0x8a, 0x1f, 0xbe, 0xff, 0xfe, 0x34, 0xa0, 0xe1, 0x3c, 0x49,
	0x79, 0x47, 0xe1, 0x8f, 0x08, 0xa0, 0xb5, 0x59, 0xb8, 0x94, 0x92, 0x37, 0xf1, 0x3e, 0xd0, 0xee,
	0x5f, 0x00, 0xa9, 0x54, 0x4c, 0x49, 0x15, 0x3a, 0x2e, 0x90, 0xf4, 0x57, 0xa1, 0xc0, 0xdf, 0x10,
	0xe0, 0xe4, 0xe4, 0xe3, 0x87, 0xfd, 0x78, 0xba, 0xdb, 0xa9, 0xcd, 0xff, 0x47, 0x84, 0x52, 0xf8,
	0x58, 0x2a, 0x5c, 0xc6, 0x8f, 0x7a, 0x28, 0xdc, 0x2e, 0x37, 0xe4, 0x78, 0x30, 0x21, 0xc8, 0xbb,
	0xce, 0x75, 0x3e, 0xc4, 0xef, 0x61, 0x34, 0x1a, 0x7b, 0x3c, 0x93, 0xc2, 0xdf, 0xb5, 0x78, 0xda,
	0x6c, 0x5f, 0x9c, 0x52, 0x67, 0x48, 0x75, 0x05, 0xac, 0x91, 0xb4, 0x0f, 0x85, 0xc0, 0xc7, 0x08,
	0xc6, 0xbb, 0x87, 0x13, 0x9b, 0xbd, 0x19, 0x12, 0x95, 0x23, 0x17, 0xc6, 0x2b, 0x65, 0x2b, 0x52,
	0xd9, 0x12, 0x5e, 0x4c, 0x55, 0xd6, 0x51, 0xb5, 0xf6, 0x2d, 0x3b, 0x5c, 0x7b, 0x76, 0x72, 0xa6,
	0xa3, 0xd3, 0x33, 0x1d, 0xfd, 0x3a, 0xd3, 0xd1, 0xd1, 0xb9, 0x9e, 0x39, 0x3d, 0xd7, 0x33, 0x3f,
	0xce, 0xf5, 0xcc, 0xd6, 0xb2, 0xed, 0x04, 0x3b, 0xf5, 0xb2, 0x59, 0xe1, 0x35, 0xb2, 0xc5, 0x5c,
	0x9f, 0x57, 0x76, 0x1f, 0xac, 0xf3, 0xba, 0x5b, 0x95, 0xfb, 0x1c, 0x73, 0xed, 0x2f, 0x91, 0x37,
	0x2d, 0xc2, 0xa0, 0xe1, 0x31, 0x51, 0x1e, 0x96, 0x9f, 0xcc, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xe8, 0xc2, 0x16, 0x81, 0x38, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Workspaces items.
	Workspaces(ctx context.Context, in *QueryWorkspacesRequest, opts ...grpc.CallOption) (*QueryWorkspacesResponse, error)
	// Queries a list of WorkspaceByAddress items.
	WorkspaceByAddress(ctx context.Context, in *QueryWorkspaceByAddressRequest, opts ...grpc.CallOption) (*QueryWorkspaceByAddressResponse, error)
	// Queries a list of Keyrings items.
	Keyrings(ctx context.Context, in *QueryKeyringsRequest, opts ...grpc.CallOption) (*QueryKeyringsResponse, error)
	// Queries a list of KeyringByAddress items.
	KeyringByAddress(ctx context.Context, in *QueryKeyringByAddressRequest, opts ...grpc.CallOption) (*QueryKeyringByAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Workspaces(ctx context.Context, in *QueryWorkspacesRequest, opts ...grpc.CallOption) (*QueryWorkspacesResponse, error) {
	out := new(QueryWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Query/Workspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WorkspaceByAddress(ctx context.Context, in *QueryWorkspaceByAddressRequest, opts ...grpc.CallOption) (*QueryWorkspaceByAddressResponse, error) {
	out := new(QueryWorkspaceByAddressResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Query/WorkspaceByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keyrings(ctx context.Context, in *QueryKeyringsRequest, opts ...grpc.CallOption) (*QueryKeyringsResponse, error) {
	out := new(QueryKeyringsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Query/Keyrings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyringByAddress(ctx context.Context, in *QueryKeyringByAddressRequest, opts ...grpc.CallOption) (*QueryKeyringByAddressResponse, error) {
	out := new(QueryKeyringByAddressResponse)
	err := c.cc.Invoke(ctx, "/zrchain.identity.Query/KeyringByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Workspaces items.
	Workspaces(context.Context, *QueryWorkspacesRequest) (*QueryWorkspacesResponse, error)
	// Queries a list of WorkspaceByAddress items.
	WorkspaceByAddress(context.Context, *QueryWorkspaceByAddressRequest) (*QueryWorkspaceByAddressResponse, error)
	// Queries a list of Keyrings items.
	Keyrings(context.Context, *QueryKeyringsRequest) (*QueryKeyringsResponse, error)
	// Queries a list of KeyringByAddress items.
	KeyringByAddress(context.Context, *QueryKeyringByAddressRequest) (*QueryKeyringByAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Workspaces(ctx context.Context, req *QueryWorkspacesRequest) (*QueryWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Workspaces not implemented")
}
func (*UnimplementedQueryServer) WorkspaceByAddress(ctx context.Context, req *QueryWorkspaceByAddressRequest) (*QueryWorkspaceByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkspaceByAddress not implemented")
}
func (*UnimplementedQueryServer) Keyrings(ctx context.Context, req *QueryKeyringsRequest) (*QueryKeyringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keyrings not implemented")
}
func (*UnimplementedQueryServer) KeyringByAddress(ctx context.Context, req *QueryKeyringByAddressRequest) (*QueryKeyringByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyringByAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Workspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Workspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Query/Workspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Workspaces(ctx, req.(*QueryWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WorkspaceByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkspaceByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WorkspaceByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Query/WorkspaceByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WorkspaceByAddress(ctx, req.(*QueryWorkspaceByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keyrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keyrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Query/Keyrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keyrings(ctx, req.(*QueryKeyringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyringByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyringByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyringByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.identity.Query/KeyringByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyringByAddress(ctx, req.(*QueryKeyringByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.identity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Workspaces",
			Handler:    _Query_Workspaces_Handler,
		},
		{
			MethodName: "WorkspaceByAddress",
			Handler:    _Query_WorkspaceByAddress_Handler,
		},
		{
			MethodName: "Keyrings",
			Handler:    _Query_Keyrings_Handler,
		},
		{
			MethodName: "KeyringByAddress",
			Handler:    _Query_KeyringByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/identity/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWorkspacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkspacesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkspacesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkspacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkspacesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkspacesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Workspaces) > 0 {
		for iNdEx := len(m.Workspaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workspaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkspaceByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkspaceByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkspaceByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkspaceByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkspaceByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkspaceByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Workspace != nil {
		{
			size, err := m.Workspace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyringsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyringsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyringsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyringsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyringsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyringsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyrings) > 0 {
		for iNdEx := len(m.Keyrings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keyrings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyringByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyringByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyringByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyringByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyringByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyringByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keyring != nil {
		{
			size, err := m.Keyring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWorkspacesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkspacesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workspaces) > 0 {
		for _, e := range m.Workspaces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkspaceByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkspaceByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workspace != nil {
		l = m.Workspace.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyringsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyringsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keyrings) > 0 {
		for _, e := range m.Keyrings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyringByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyringByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keyring != nil {
		l = m.Keyring.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkspacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkspacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkspacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkspacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkspacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkspacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspaces = append(m.Workspaces, &Workspace{})
			if err := m.Workspaces[len(m.Workspaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkspaceByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkspaceByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkspaceByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkspaceByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkspaceByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkspaceByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workspace == nil {
				m.Workspace = &Workspace{}
			}
			if err := m.Workspace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyringsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyringsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyringsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyringsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyringsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyringsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyrings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyrings = append(m.Keyrings, &Keyring{})
			if err := m.Keyrings[len(m.Keyrings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyringByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyringByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyringByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyringByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyringByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyringByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keyring == nil {
				m.Keyring = &Keyring{}
			}
			if err := m.Keyring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
