// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/treasury/mpcsign.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignRequestStatus indicates the status of an MPC signature request.
// A request starts as "pending", waiting to be picked up. Then it can move to
// either "approved" or "rejected", depending on the decision of the MPC nodes.
type SignRequestStatus int32

const (
	// The request is missing the status field.
	SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED SignRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	SignRequestStatus_SIGN_REQUEST_STATUS_PENDING SignRequestStatus = 1
	// The request is partially fulfilled - at least one more response from
	// a different MPC party is needed to confirm it.
	SignRequestStatus_SIGN_REQUEST_STATUS_PARTIAL SignRequestStatus = 2
	// The request was fulfilled. This is a final state for a request.
	SignRequestStatus_SIGN_REQUEST_STATUS_FULFILLED SignRequestStatus = 3
	// The request was rejected. This is a final state for a request.
	SignRequestStatus_SIGN_REQUEST_STATUS_REJECTED SignRequestStatus = 4
)

var SignRequestStatus_name = map[int32]string{
	0: "SIGN_REQUEST_STATUS_UNSPECIFIED",
	1: "SIGN_REQUEST_STATUS_PENDING",
	2: "SIGN_REQUEST_STATUS_PARTIAL",
	3: "SIGN_REQUEST_STATUS_FULFILLED",
	4: "SIGN_REQUEST_STATUS_REJECTED",
}

var SignRequestStatus_value = map[string]int32{
	"SIGN_REQUEST_STATUS_UNSPECIFIED": 0,
	"SIGN_REQUEST_STATUS_PENDING":     1,
	"SIGN_REQUEST_STATUS_PARTIAL":     2,
	"SIGN_REQUEST_STATUS_FULFILLED":   3,
	"SIGN_REQUEST_STATUS_REJECTED":    4,
}

func (x SignRequestStatus) String() string {
	return proto.EnumName(SignRequestStatus_name, int32(x))
}

func (SignRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{0}
}

// format of a sign request
type SignRequest struct {
	Id                     uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string              `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId                  uint64              `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // Deprecated: Do not use.
	KeyType                KeyType             `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	DataForSigning         [][]byte            `protobuf:"bytes,5,rep,name=data_for_signing,json=dataForSigning,proto3" json:"data_for_signing,omitempty"`
	Status                 SignRequestStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=zrchain.treasury.SignRequestStatus" json:"status,omitempty"`
	SignedData             []*SignedDataWithID `protobuf:"bytes,7,rep,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
	KeyringPartySignatures [][]byte            `protobuf:"bytes,8,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"` // Deprecated: Do not use.
	RejectReason           string              `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Metadata               *types.Any          `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ParentReqId            uint64              `protobuf:"varint,11,opt,name=parent_req_id,json=parentReqId,proto3" json:"parent_req_id,omitempty"`
	ChildReqIds            []uint64            `protobuf:"varint,12,rep,packed,name=child_req_ids,json=childReqIds,proto3" json:"child_req_ids,omitempty"`
	CacheId                []byte              `protobuf:"bytes,13,opt,name=cache_id,json=cacheId,proto3" json:"cache_id,omitempty"`
	KeyIds                 []uint64            `protobuf:"varint,14,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	MpcBtl                 uint64              `protobuf:"varint,15,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	Fee                    uint64              `protobuf:"varint,16,opt,name=fee,proto3" json:"fee,omitempty"`
	ZenbtcTxBytes          []byte              `protobuf:"bytes,17,opt,name=zenbtc_tx_bytes,json=zenbtcTxBytes,proto3" json:"zenbtc_tx_bytes,omitempty"`
	KeyringPartySigs       []*PartySignature   `protobuf:"bytes,18,rep,name=keyring_party_sigs,json=keyringPartySigs,proto3" json:"keyring_party_sigs,omitempty"`
}

func (m *SignRequest) Reset()         { *m = SignRequest{} }
func (m *SignRequest) String() string { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()    {}
func (*SignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{0}
}
func (m *SignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRequest.Merge(m, src)
}
func (m *SignRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignRequest proto.InternalMessageInfo

func (m *SignRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SignRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Deprecated: Do not use.
func (m *SignRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *SignRequest) GetDataForSigning() [][]byte {
	if m != nil {
		return m.DataForSigning
	}
	return nil
}

func (m *SignRequest) GetStatus() SignRequestStatus {
	if m != nil {
		return m.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (m *SignRequest) GetSignedData() []*SignedDataWithID {
	if m != nil {
		return m.SignedData
	}
	return nil
}

// Deprecated: Do not use.
func (m *SignRequest) GetKeyringPartySignatures() [][]byte {
	if m != nil {
		return m.KeyringPartySignatures
	}
	return nil
}

func (m *SignRequest) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *SignRequest) GetMetadata() *types.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SignRequest) GetParentReqId() uint64 {
	if m != nil {
		return m.ParentReqId
	}
	return 0
}

func (m *SignRequest) GetChildReqIds() []uint64 {
	if m != nil {
		return m.ChildReqIds
	}
	return nil
}

func (m *SignRequest) GetCacheId() []byte {
	if m != nil {
		return m.CacheId
	}
	return nil
}

func (m *SignRequest) GetKeyIds() []uint64 {
	if m != nil {
		return m.KeyIds
	}
	return nil
}

func (m *SignRequest) GetMpcBtl() uint64 {
	if m != nil {
		return m.MpcBtl
	}
	return 0
}

func (m *SignRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *SignRequest) GetZenbtcTxBytes() []byte {
	if m != nil {
		return m.ZenbtcTxBytes
	}
	return nil
}

func (m *SignRequest) GetKeyringPartySigs() []*PartySignature {
	if m != nil {
		return m.KeyringPartySigs
	}
	return nil
}

// format of a signed data with an id value used to sort the signed data
type SignedDataWithID struct {
	SignRequestId uint64 `protobuf:"varint,1,opt,name=sign_request_id,json=signRequestId,proto3" json:"sign_request_id,omitempty"`
	SignedData    []byte `protobuf:"bytes,2,opt,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
}

func (m *SignedDataWithID) Reset()         { *m = SignedDataWithID{} }
func (m *SignedDataWithID) String() string { return proto.CompactTextString(m) }
func (*SignedDataWithID) ProtoMessage()    {}
func (*SignedDataWithID) Descriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{1}
}
func (m *SignedDataWithID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedDataWithID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedDataWithID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedDataWithID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedDataWithID.Merge(m, src)
}
func (m *SignedDataWithID) XXX_Size() int {
	return m.Size()
}
func (m *SignedDataWithID) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedDataWithID.DiscardUnknown(m)
}

var xxx_messageInfo_SignedDataWithID proto.InternalMessageInfo

func (m *SignedDataWithID) GetSignRequestId() uint64 {
	if m != nil {
		return m.SignRequestId
	}
	return 0
}

func (m *SignedDataWithID) GetSignedData() []byte {
	if m != nil {
		return m.SignedData
	}
	return nil
}

// format of a sign transaction request
type SignTransactionRequest struct {
	Id                  uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator             string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId               uint64     `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	WalletType          WalletType `protobuf:"varint,4,opt,name=wallet_type,json=walletType,proto3,enum=zrchain.treasury.WalletType" json:"wallet_type,omitempty"`
	UnsignedTransaction []byte     `protobuf:"bytes,5,opt,name=unsigned_transaction,json=unsignedTransaction,proto3" json:"unsigned_transaction,omitempty"`
	SignRequestId       uint64     `protobuf:"varint,6,opt,name=sign_request_id,json=signRequestId,proto3" json:"sign_request_id,omitempty"`
	NoBroadcast         bool       `protobuf:"varint,7,opt,name=no_broadcast,json=noBroadcast,proto3" json:"no_broadcast,omitempty"`
	KeyIds              []uint64   `protobuf:"varint,8,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
}

func (m *SignTransactionRequest) Reset()         { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()    {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{2}
}
func (m *SignTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionRequest.Merge(m, src)
}
func (m *SignTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionRequest proto.InternalMessageInfo

func (m *SignTransactionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SignTransactionRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SignTransactionRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignTransactionRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *SignTransactionRequest) GetUnsignedTransaction() []byte {
	if m != nil {
		return m.UnsignedTransaction
	}
	return nil
}

func (m *SignTransactionRequest) GetSignRequestId() uint64 {
	if m != nil {
		return m.SignRequestId
	}
	return 0
}

func (m *SignTransactionRequest) GetNoBroadcast() bool {
	if m != nil {
		return m.NoBroadcast
	}
	return false
}

func (m *SignTransactionRequest) GetKeyIds() []uint64 {
	if m != nil {
		return m.KeyIds
	}
	return nil
}

// format of a sign request response
type SignReqResponse struct {
	Id               uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator          string              `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyIds           []uint64            `protobuf:"varint,3,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	KeyType          string              `protobuf:"bytes,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	DataForSigning   [][]byte            `protobuf:"bytes,5,rep,name=data_for_signing,json=dataForSigning,proto3" json:"data_for_signing,omitempty"`
	Status           string              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	SignedData       []*SignedDataWithID `protobuf:"bytes,7,rep,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
	KeyringPartySigs []*PartySignature   `protobuf:"bytes,8,rep,name=keyring_party_sigs,json=keyringPartySigs,proto3" json:"keyring_party_sigs,omitempty"`
	RejectReason     string              `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Metadata         *types.Any          `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ParentReqId      uint64              `protobuf:"varint,11,opt,name=parent_req_id,json=parentReqId,proto3" json:"parent_req_id,omitempty"`
	ChildReqIds      []uint64            `protobuf:"varint,12,rep,packed,name=child_req_ids,json=childReqIds,proto3" json:"child_req_ids,omitempty"`
	CacheId          []byte              `protobuf:"bytes,13,opt,name=cache_id,json=cacheId,proto3" json:"cache_id,omitempty"`
	MpcBtl           uint64              `protobuf:"varint,14,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	Fee              uint64              `protobuf:"varint,15,opt,name=fee,proto3" json:"fee,omitempty"`
	ZenbtcTxBytes    []byte              `protobuf:"bytes,16,opt,name=zenbtc_tx_bytes,json=zenbtcTxBytes,proto3" json:"zenbtc_tx_bytes,omitempty"`
}

func (m *SignReqResponse) Reset()         { *m = SignReqResponse{} }
func (m *SignReqResponse) String() string { return proto.CompactTextString(m) }
func (*SignReqResponse) ProtoMessage()    {}
func (*SignReqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{3}
}
func (m *SignReqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignReqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignReqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignReqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignReqResponse.Merge(m, src)
}
func (m *SignReqResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignReqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignReqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignReqResponse proto.InternalMessageInfo

func (m *SignReqResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SignReqResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SignReqResponse) GetKeyIds() []uint64 {
	if m != nil {
		return m.KeyIds
	}
	return nil
}

func (m *SignReqResponse) GetKeyType() string {
	if m != nil {
		return m.KeyType
	}
	return ""
}

func (m *SignReqResponse) GetDataForSigning() [][]byte {
	if m != nil {
		return m.DataForSigning
	}
	return nil
}

func (m *SignReqResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SignReqResponse) GetSignedData() []*SignedDataWithID {
	if m != nil {
		return m.SignedData
	}
	return nil
}

func (m *SignReqResponse) GetKeyringPartySigs() []*PartySignature {
	if m != nil {
		return m.KeyringPartySigs
	}
	return nil
}

func (m *SignReqResponse) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *SignReqResponse) GetMetadata() *types.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SignReqResponse) GetParentReqId() uint64 {
	if m != nil {
		return m.ParentReqId
	}
	return 0
}

func (m *SignReqResponse) GetChildReqIds() []uint64 {
	if m != nil {
		return m.ChildReqIds
	}
	return nil
}

func (m *SignReqResponse) GetCacheId() []byte {
	if m != nil {
		return m.CacheId
	}
	return nil
}

func (m *SignReqResponse) GetMpcBtl() uint64 {
	if m != nil {
		return m.MpcBtl
	}
	return 0
}

func (m *SignReqResponse) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *SignReqResponse) GetZenbtcTxBytes() []byte {
	if m != nil {
		return m.ZenbtcTxBytes
	}
	return nil
}

// format of a sign transaction request response
type SignTxReqResponse struct {
	Id                  uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator             string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId               uint64   `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	WalletType          string   `protobuf:"bytes,4,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`
	UnsignedTransaction []byte   `protobuf:"bytes,5,opt,name=unsigned_transaction,json=unsignedTransaction,proto3" json:"unsigned_transaction,omitempty"`
	SignRequestId       uint64   `protobuf:"varint,6,opt,name=sign_request_id,json=signRequestId,proto3" json:"sign_request_id,omitempty"`
	NoBroadcast         bool     `protobuf:"varint,7,opt,name=no_broadcast,json=noBroadcast,proto3" json:"no_broadcast,omitempty"`
	MpcBtl              uint64   `protobuf:"varint,8,opt,name=mpc_btl,json=mpcBtl,proto3" json:"mpc_btl,omitempty"`
	KeyIds              []uint64 `protobuf:"varint,9,rep,packed,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
}

func (m *SignTxReqResponse) Reset()         { *m = SignTxReqResponse{} }
func (m *SignTxReqResponse) String() string { return proto.CompactTextString(m) }
func (*SignTxReqResponse) ProtoMessage()    {}
func (*SignTxReqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{4}
}
func (m *SignTxReqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignTxReqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignTxReqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignTxReqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTxReqResponse.Merge(m, src)
}
func (m *SignTxReqResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignTxReqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTxReqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignTxReqResponse proto.InternalMessageInfo

func (m *SignTxReqResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SignTxReqResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SignTxReqResponse) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SignTxReqResponse) GetWalletType() string {
	if m != nil {
		return m.WalletType
	}
	return ""
}

func (m *SignTxReqResponse) GetUnsignedTransaction() []byte {
	if m != nil {
		return m.UnsignedTransaction
	}
	return nil
}

func (m *SignTxReqResponse) GetSignRequestId() uint64 {
	if m != nil {
		return m.SignRequestId
	}
	return 0
}

func (m *SignTxReqResponse) GetNoBroadcast() bool {
	if m != nil {
		return m.NoBroadcast
	}
	return false
}

func (m *SignTxReqResponse) GetMpcBtl() uint64 {
	if m != nil {
		return m.MpcBtl
	}
	return 0
}

func (m *SignTxReqResponse) GetKeyIds() []uint64 {
	if m != nil {
		return m.KeyIds
	}
	return nil
}

// format of a sign transaction request for an InterChain Account transaction
type ICATransactionRequest struct {
	Id       uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator  string  `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId    uint64  `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType  KeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	InputMsg []byte  `protobuf:"bytes,5,opt,name=input_msg,json=inputMsg,proto3" json:"input_msg,omitempty"`
	// ibc.applications.interchain_accounts.v1.MsgSendTx input_msg = 5;
	Status                 SignRequestStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zrchain.treasury.SignRequestStatus" json:"status,omitempty"`
	SignedData             [][]byte          `protobuf:"bytes,7,rep,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
	KeyringPartySignatures []*PartySignature `protobuf:"bytes,8,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string            `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (m *ICATransactionRequest) Reset()         { *m = ICATransactionRequest{} }
func (m *ICATransactionRequest) String() string { return proto.CompactTextString(m) }
func (*ICATransactionRequest) ProtoMessage()    {}
func (*ICATransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19836ac54539a9ab, []int{5}
}
func (m *ICATransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICATransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICATransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICATransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICATransactionRequest.Merge(m, src)
}
func (m *ICATransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ICATransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ICATransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ICATransactionRequest proto.InternalMessageInfo

func (m *ICATransactionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ICATransactionRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ICATransactionRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ICATransactionRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *ICATransactionRequest) GetInputMsg() []byte {
	if m != nil {
		return m.InputMsg
	}
	return nil
}

func (m *ICATransactionRequest) GetStatus() SignRequestStatus {
	if m != nil {
		return m.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (m *ICATransactionRequest) GetSignedData() [][]byte {
	if m != nil {
		return m.SignedData
	}
	return nil
}

func (m *ICATransactionRequest) GetKeyringPartySignatures() []*PartySignature {
	if m != nil {
		return m.KeyringPartySignatures
	}
	return nil
}

func (m *ICATransactionRequest) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func init() {
	proto.RegisterEnum("zrchain.treasury.SignRequestStatus", SignRequestStatus_name, SignRequestStatus_value)
	proto.RegisterType((*SignRequest)(nil), "zrchain.treasury.SignRequest")
	proto.RegisterType((*SignedDataWithID)(nil), "zrchain.treasury.SignedDataWithID")
	proto.RegisterType((*SignTransactionRequest)(nil), "zrchain.treasury.SignTransactionRequest")
	proto.RegisterType((*SignReqResponse)(nil), "zrchain.treasury.SignReqResponse")
	proto.RegisterType((*SignTxReqResponse)(nil), "zrchain.treasury.SignTxReqResponse")
	proto.RegisterType((*ICATransactionRequest)(nil), "zrchain.treasury.ICATransactionRequest")
}

func init() { proto.RegisterFile("zrchain/treasury/mpcsign.proto", fileDescriptor_19836ac54539a9ab) }

var fileDescriptor_19836ac54539a9ab = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x93, 0x36, 0x7f, 0x26, 0x4d, 0xea, 0x1d, 0x76, 0xcb, 0xa4, 0xbb, 0x9b, 0x78, 0x53,
	0x09, 0x45, 0x48, 0x24, 0x50, 0x10, 0x12, 0x02, 0x0e, 0x49, 0x93, 0xac, 0x0c, 0x25, 0x2a, 0x76,
	0xaa, 0x95, 0xca, 0xc1, 0x9a, 0xd8, 0xd3, 0xc4, 0x24, 0x19, 0xbb, 0x9e, 0x09, 0x5b, 0xef, 0x47,
	0xe0, 0xc4, 0x97, 0xe0, 0xcc, 0x47, 0xe0, 0xca, 0x71, 0x25, 0x2e, 0x1c, 0x51, 0x7b, 0xe1, 0x63,
	0xa0, 0x19, 0xc7, 0x69, 0xd2, 0x64, 0xf9, 0x93, 0x05, 0x09, 0x6e, 0xf6, 0x7b, 0x3f, 0x3f, 0x3f,
	0xff, 0xde, 0xef, 0xf7, 0xc6, 0xa0, 0xf4, 0x22, 0xb0, 0x87, 0xd8, 0xa5, 0x75, 0x1e, 0x10, 0xcc,
	0xa6, 0x41, 0x58, 0x9f, 0xf8, 0x36, 0x73, 0x07, 0xb4, 0xe6, 0x07, 0x1e, 0xf7, 0xa0, 0x3a, 0xcb,
	0xd7, 0xe2, 0xfc, 0x41, 0x71, 0xe0, 0x79, 0x83, 0x31, 0xa9, 0xcb, 0x7c, 0x7f, 0x7a, 0x51, 0xc7,
	0x34, 0x8c, 0xc0, 0x07, 0x07, 0x2b, 0xc5, 0x46, 0x24, 0xce, 0x3d, 0x5e, 0xc9, 0x3d, 0xc7, 0xe3,
	0x31, 0xe1, 0x51, 0xba, 0xf2, 0xdb, 0x0e, 0xc8, 0x99, 0xee, 0x80, 0x1a, 0xe4, 0x72, 0x4a, 0x18,
	0x87, 0x05, 0x90, 0x70, 0x1d, 0xa4, 0x68, 0x4a, 0x75, 0xdb, 0x48, 0xb8, 0x0e, 0x44, 0x20, 0x6d,
	0x07, 0x04, 0x73, 0x2f, 0x40, 0x09, 0x4d, 0xa9, 0x66, 0x8d, 0xf8, 0x16, 0x16, 0x41, 0x6a, 0x44,
	0x42, 0xcb, 0x75, 0x50, 0x52, 0xa0, 0x9b, 0x09, 0xa4, 0x18, 0x3b, 0x23, 0x12, 0xea, 0x0e, 0xfc,
	0x00, 0x64, 0x44, 0x8a, 0x87, 0x3e, 0x41, 0xdb, 0x9a, 0x52, 0x2d, 0x1c, 0x15, 0x6b, 0x77, 0xbf,
	0xa7, 0xf6, 0x39, 0x09, 0x7b, 0xa1, 0x4f, 0x8c, 0xf4, 0x28, 0xba, 0x80, 0x55, 0xa0, 0x3a, 0x98,
	0x63, 0xeb, 0xc2, 0x0b, 0x2c, 0xc1, 0x84, 0x4b, 0x07, 0x68, 0x47, 0x4b, 0x56, 0x77, 0x8d, 0x82,
	0x88, 0x77, 0xbc, 0xc0, 0x8c, 0xa2, 0xf0, 0x63, 0x90, 0x62, 0x1c, 0xf3, 0x29, 0x43, 0x29, 0x59,
	0xfd, 0x70, 0xb5, 0xfa, 0xc2, 0x37, 0x99, 0x12, 0x6a, 0xcc, 0x1e, 0x81, 0xc7, 0x20, 0x27, 0xaa,
	0x13, 0xc7, 0x12, 0x55, 0x51, 0x5a, 0x4b, 0x56, 0x73, 0x47, 0x95, 0xf5, 0x15, 0x88, 0xd3, 0xc2,
	0x1c, 0x3f, 0x73, 0xf9, 0x50, 0x6f, 0x19, 0x80, 0xcd, 0x23, 0xf0, 0x13, 0x80, 0x46, 0x24, 0x0c,
	0x5c, 0x3a, 0xb0, 0x7c, 0x1c, 0xf0, 0x50, 0x36, 0x8c, 0xf9, 0x34, 0x20, 0x0c, 0x65, 0x44, 0xcf,
	0x92, 0x8e, 0xfd, 0x19, 0xe6, 0x54, 0x40, 0xcc, 0x39, 0x02, 0x1e, 0x82, 0x7c, 0x40, 0xbe, 0x26,
	0x36, 0xb7, 0xc4, 0xcb, 0x3c, 0x8a, 0xb2, 0x92, 0xda, 0xdd, 0x28, 0x68, 0xc8, 0x18, 0x7c, 0x17,
	0x64, 0x26, 0x84, 0x63, 0xd9, 0x24, 0xd0, 0x94, 0x6a, 0xee, 0xe8, 0x7e, 0x2d, 0x92, 0x40, 0x2d,
	0x96, 0x40, 0xad, 0x41, 0x43, 0x63, 0x8e, 0x82, 0x15, 0x90, 0xf7, 0x71, 0x40, 0xa8, 0x28, 0x7b,
	0x29, 0x06, 0x93, 0x93, 0x63, 0xcc, 0x45, 0x41, 0x83, 0x5c, 0xea, 0x8e, 0xc0, 0xd8, 0x43, 0x77,
	0xec, 0xcc, 0x20, 0x0c, 0xed, 0x6a, 0x49, 0x81, 0x91, 0x41, 0x09, 0x61, 0xb0, 0x08, 0x32, 0x36,
	0xb6, 0x87, 0x44, 0x94, 0xc8, 0x6b, 0x4a, 0x75, 0xd7, 0x48, 0xcb, 0x7b, 0xdd, 0x81, 0x6f, 0x82,
	0x74, 0x34, 0x74, 0x86, 0x0a, 0xf2, 0xc1, 0x94, 0x9c, 0x38, 0x13, 0x89, 0x89, 0x6f, 0x5b, 0x7d,
	0x3e, 0x46, 0x7b, 0xf2, 0xad, 0xa9, 0x89, 0x6f, 0x37, 0xf9, 0x18, 0xaa, 0x20, 0x79, 0x41, 0x08,
	0x52, 0x65, 0x50, 0x5c, 0xc2, 0xb7, 0xc0, 0xde, 0x0b, 0x42, 0xfb, 0xdc, 0xb6, 0xf8, 0x95, 0xd5,
	0x0f, 0x39, 0x61, 0xe8, 0x9e, 0x7c, 0x4b, 0x3e, 0x0a, 0xf7, 0xae, 0x9a, 0x22, 0x08, 0xbb, 0x00,
	0xae, 0x70, 0xcc, 0x10, 0x94, 0xf3, 0xd2, 0x56, 0xe7, 0xb5, 0x4c, 0xb2, 0xa1, 0xde, 0xe1, 0x9e,
	0x55, 0xbe, 0x02, 0xea, 0xdd, 0x99, 0x8a, 0x5e, 0xc4, 0xe4, 0x04, 0x1b, 0x42, 0x2a, 0xd6, 0x5c,
	0xfb, 0x79, 0x76, 0x2b, 0x20, 0xdd, 0x81, 0xe5, 0x65, 0xd1, 0x24, 0x64, 0xbf, 0x0b, 0x82, 0xa8,
	0xfc, 0x90, 0x00, 0xfb, 0xa2, 0x7a, 0x2f, 0xc0, 0x94, 0x61, 0x9b, 0xbb, 0xde, 0x06, 0x96, 0x7a,
	0xb0, 0x6c, 0xa9, 0xd8, 0x4e, 0x9f, 0x82, 0x5c, 0xe4, 0xd9, 0x45, 0x47, 0x3d, 0x5a, 0x65, 0xe0,
	0x99, 0x04, 0x49, 0x53, 0x81, 0xe7, 0xf3, 0x6b, 0xf8, 0x1e, 0xb8, 0x3f, 0xa5, 0xb3, 0xee, 0xf9,
	0x6d, 0x7b, 0x68, 0x47, 0x7e, 0xc4, 0x1b, 0x71, 0x6e, 0xa1, 0xf3, 0x75, 0xb4, 0xa4, 0xd6, 0xd1,
	0xf2, 0x04, 0xec, 0x52, 0xcf, 0xea, 0x07, 0x1e, 0x76, 0x6c, 0xcc, 0x38, 0x4a, 0x6b, 0x4a, 0x35,
	0x63, 0xe4, 0xa8, 0xd7, 0x8c, 0x43, 0x8b, 0x8a, 0xc9, 0x2c, 0x2a, 0xa6, 0xf2, 0xf3, 0x36, 0xd8,
	0x9b, 0xb9, 0xd4, 0x20, 0xcc, 0xf7, 0x28, 0x23, 0x7f, 0x83, 0xaa, 0x85, 0xb2, 0xc9, 0x25, 0x21,
	0x16, 0xef, 0xec, 0x9e, 0xec, 0x26, 0x0b, 0x66, 0x7f, 0x69, 0xc1, 0x64, 0xff, 0xd9, 0xdd, 0xb1,
	0x5e, 0xd7, 0x99, 0x4d, 0x75, 0xfd, 0xff, 0xde, 0x26, 0xf1, 0xd2, 0x28, 0xac, 0x5b, 0x1a, 0x7b,
	0x7f, 0xb8, 0x34, 0xd4, 0x35, 0x4b, 0xa3, 0xf2, 0x7d, 0x02, 0xdc, 0x93, 0x3e, 0xbc, 0xda, 0x4c,
	0x57, 0xaf, 0xb0, 0x60, 0x79, 0xd5, 0x82, 0xd9, 0xff, 0x96, 0xc9, 0x62, 0x22, 0x33, 0x4b, 0x44,
	0x2e, 0xd8, 0x24, 0xbb, 0xe4, 0xbe, 0x6f, 0x93, 0xe0, 0x81, 0x7e, 0xdc, 0xf8, 0x37, 0xd6, 0xd5,
	0x66, 0xa7, 0xff, 0x43, 0x90, 0x75, 0xa9, 0x3f, 0xe5, 0xd6, 0x84, 0x0d, 0x66, 0xac, 0x65, 0x64,
	0xe0, 0x0b, 0xf6, 0x9a, 0x07, 0x7e, 0x79, 0xd5, 0xb4, 0x4b, 0xbb, 0x1b, 0x9e, 0xff, 0xc9, 0x61,
	0xfe, 0x57, 0x6c, 0xf9, 0x3a, 0x47, 0xfd, 0xdb, 0x3f, 0x2a, 0x91, 0x68, 0x97, 0xfa, 0x87, 0x87,
	0xa0, 0x6c, 0xea, 0x4f, 0xbb, 0x96, 0xd1, 0xfe, 0xf2, 0xac, 0x6d, 0xf6, 0x2c, 0xb3, 0xd7, 0xe8,
	0x9d, 0x99, 0xd6, 0x59, 0xd7, 0x3c, 0x6d, 0x1f, 0xeb, 0x1d, 0xbd, 0xdd, 0x52, 0xb7, 0x60, 0x19,
	0x3c, 0x5c, 0x07, 0x3a, 0x6d, 0x77, 0x5b, 0x7a, 0xf7, 0xa9, 0xaa, 0xbc, 0x12, 0xd0, 0x30, 0x7a,
	0x7a, 0xe3, 0x44, 0x4d, 0xc0, 0x27, 0xe0, 0xf1, 0x3a, 0x40, 0xe7, 0xec, 0xa4, 0xa3, 0x9f, 0x9c,
	0xb4, 0x5b, 0x6a, 0x12, 0x6a, 0xe0, 0xd1, 0x3a, 0x88, 0xd1, 0xfe, 0xac, 0x7d, 0xdc, 0x6b, 0xb7,
	0xd4, 0xed, 0xa6, 0xf9, 0xd3, 0x75, 0x49, 0x79, 0x79, 0x5d, 0x52, 0x7e, 0xbd, 0x2e, 0x29, 0xdf,
	0xdd, 0x94, 0xb6, 0x5e, 0xde, 0x94, 0xb6, 0x7e, 0xb9, 0x29, 0x6d, 0x9d, 0x7f, 0x34, 0x70, 0xf9,
	0x70, 0xda, 0xaf, 0xd9, 0xde, 0xa4, 0x7e, 0x4e, 0x68, 0xe0, 0xd9, 0xa3, 0x77, 0x3a, 0xde, 0x94,
	0x3a, 0x58, 0x88, 0xae, 0x1e, 0xff, 0x9d, 0x7e, 0xf3, 0x61, 0xfd, 0xea, 0xf6, 0x17, 0x55, 0x68,
	0x87, 0xf5, 0x53, 0x72, 0x33, 0xbd, 0xff, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x78, 0x21,
	0xe7, 0x2c, 0x0b, 0x00, 0x00,
}

func (m *SignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyringPartySigs) > 0 {
		for iNdEx := len(m.KeyringPartySigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyringPartySigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMpcsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.ZenbtcTxBytes) > 0 {
		i -= len(m.ZenbtcTxBytes)
		copy(dAtA[i:], m.ZenbtcTxBytes)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.ZenbtcTxBytes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Fee != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.MpcBtl != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.MpcBtl))
		i--
		dAtA[i] = 0x78
	}
	if len(m.KeyIds) > 0 {
		dAtA2 := make([]byte, len(m.KeyIds)*10)
		var j1 int
		for _, num := range m.KeyIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMpcsign(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CacheId) > 0 {
		i -= len(m.CacheId)
		copy(dAtA[i:], m.CacheId)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.CacheId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChildReqIds) > 0 {
		dAtA4 := make([]byte, len(m.ChildReqIds)*10)
		var j3 int
		for _, num := range m.ChildReqIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMpcsign(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x62
	}
	if m.ParentReqId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.ParentReqId))
		i--
		dAtA[i] = 0x58
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMpcsign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KeyringPartySignatures) > 0 {
		for iNdEx := len(m.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyringPartySignatures[iNdEx])
			copy(dAtA[i:], m.KeyringPartySignatures[iNdEx])
			i = encodeVarintMpcsign(dAtA, i, uint64(len(m.KeyringPartySignatures[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SignedData) > 0 {
		for iNdEx := len(m.SignedData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMpcsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DataForSigning) > 0 {
		for iNdEx := len(m.DataForSigning) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataForSigning[iNdEx])
			copy(dAtA[i:], m.DataForSigning[iNdEx])
			i = encodeVarintMpcsign(dAtA, i, uint64(len(m.DataForSigning[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.KeyType != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedDataWithID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedDataWithID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedDataWithID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedData) > 0 {
		i -= len(m.SignedData)
		copy(dAtA[i:], m.SignedData)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.SignedData)))
		i--
		dAtA[i] = 0x12
	}
	if m.SignRequestId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.SignRequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyIds) > 0 {
		dAtA7 := make([]byte, len(m.KeyIds)*10)
		var j6 int
		for _, num := range m.KeyIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintMpcsign(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x42
	}
	if m.NoBroadcast {
		i--
		if m.NoBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SignRequestId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.SignRequestId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.UnsignedTransaction) > 0 {
		i -= len(m.UnsignedTransaction)
		copy(dAtA[i:], m.UnsignedTransaction)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.UnsignedTransaction)))
		i--
		dAtA[i] = 0x2a
	}
	if m.WalletType != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignReqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignReqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignReqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZenbtcTxBytes) > 0 {
		i -= len(m.ZenbtcTxBytes)
		copy(dAtA[i:], m.ZenbtcTxBytes)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.ZenbtcTxBytes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Fee != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x78
	}
	if m.MpcBtl != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.MpcBtl))
		i--
		dAtA[i] = 0x70
	}
	if len(m.CacheId) > 0 {
		i -= len(m.CacheId)
		copy(dAtA[i:], m.CacheId)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.CacheId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChildReqIds) > 0 {
		dAtA9 := make([]byte, len(m.ChildReqIds)*10)
		var j8 int
		for _, num := range m.ChildReqIds {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintMpcsign(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x62
	}
	if m.ParentReqId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.ParentReqId))
		i--
		dAtA[i] = 0x58
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMpcsign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KeyringPartySigs) > 0 {
		for iNdEx := len(m.KeyringPartySigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyringPartySigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMpcsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SignedData) > 0 {
		for iNdEx := len(m.SignedData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMpcsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DataForSigning) > 0 {
		for iNdEx := len(m.DataForSigning) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataForSigning[iNdEx])
			copy(dAtA[i:], m.DataForSigning[iNdEx])
			i = encodeVarintMpcsign(dAtA, i, uint64(len(m.DataForSigning[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.KeyType) > 0 {
		i -= len(m.KeyType)
		copy(dAtA[i:], m.KeyType)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.KeyType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyIds) > 0 {
		dAtA12 := make([]byte, len(m.KeyIds)*10)
		var j11 int
		for _, num := range m.KeyIds {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintMpcsign(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignTxReqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignTxReqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignTxReqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyIds) > 0 {
		dAtA14 := make([]byte, len(m.KeyIds)*10)
		var j13 int
		for _, num := range m.KeyIds {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintMpcsign(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x4a
	}
	if m.MpcBtl != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.MpcBtl))
		i--
		dAtA[i] = 0x40
	}
	if m.NoBroadcast {
		i--
		if m.NoBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SignRequestId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.SignRequestId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.UnsignedTransaction) > 0 {
		i -= len(m.UnsignedTransaction)
		copy(dAtA[i:], m.UnsignedTransaction)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.UnsignedTransaction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletType) > 0 {
		i -= len(m.WalletType)
		copy(dAtA[i:], m.WalletType)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.WalletType)))
		i--
		dAtA[i] = 0x22
	}
	if m.KeyId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICATransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICATransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICATransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KeyringPartySignatures) > 0 {
		for iNdEx := len(m.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyringPartySignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMpcsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SignedData) > 0 {
		for iNdEx := len(m.SignedData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SignedData[iNdEx])
			copy(dAtA[i:], m.SignedData[iNdEx])
			i = encodeVarintMpcsign(dAtA, i, uint64(len(m.SignedData[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.InputMsg) > 0 {
		i -= len(m.InputMsg)
		copy(dAtA[i:], m.InputMsg)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.InputMsg)))
		i--
		dAtA[i] = 0x2a
	}
	if m.KeyType != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyId != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMpcsign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMpcsign(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMpcsign(dAtA []byte, offset int, v uint64) int {
	offset -= sovMpcsign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMpcsign(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovMpcsign(uint64(m.KeyId))
	}
	if m.KeyType != 0 {
		n += 1 + sovMpcsign(uint64(m.KeyType))
	}
	if len(m.DataForSigning) > 0 {
		for _, b := range m.DataForSigning {
			l = len(b)
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovMpcsign(uint64(m.Status))
	}
	if len(m.SignedData) > 0 {
		for _, e := range m.SignedData {
			l = e.Size()
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	if len(m.KeyringPartySignatures) > 0 {
		for _, b := range m.KeyringPartySignatures {
			l = len(b)
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.ParentReqId != 0 {
		n += 1 + sovMpcsign(uint64(m.ParentReqId))
	}
	if len(m.ChildReqIds) > 0 {
		l = 0
		for _, e := range m.ChildReqIds {
			l += sovMpcsign(uint64(e))
		}
		n += 1 + sovMpcsign(uint64(l)) + l
	}
	l = len(m.CacheId)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if len(m.KeyIds) > 0 {
		l = 0
		for _, e := range m.KeyIds {
			l += sovMpcsign(uint64(e))
		}
		n += 1 + sovMpcsign(uint64(l)) + l
	}
	if m.MpcBtl != 0 {
		n += 1 + sovMpcsign(uint64(m.MpcBtl))
	}
	if m.Fee != 0 {
		n += 2 + sovMpcsign(uint64(m.Fee))
	}
	l = len(m.ZenbtcTxBytes)
	if l > 0 {
		n += 2 + l + sovMpcsign(uint64(l))
	}
	if len(m.KeyringPartySigs) > 0 {
		for _, e := range m.KeyringPartySigs {
			l = e.Size()
			n += 2 + l + sovMpcsign(uint64(l))
		}
	}
	return n
}

func (m *SignedDataWithID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignRequestId != 0 {
		n += 1 + sovMpcsign(uint64(m.SignRequestId))
	}
	l = len(m.SignedData)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	return n
}

func (m *SignTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMpcsign(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovMpcsign(uint64(m.KeyId))
	}
	if m.WalletType != 0 {
		n += 1 + sovMpcsign(uint64(m.WalletType))
	}
	l = len(m.UnsignedTransaction)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.SignRequestId != 0 {
		n += 1 + sovMpcsign(uint64(m.SignRequestId))
	}
	if m.NoBroadcast {
		n += 2
	}
	if len(m.KeyIds) > 0 {
		l = 0
		for _, e := range m.KeyIds {
			l += sovMpcsign(uint64(e))
		}
		n += 1 + sovMpcsign(uint64(l)) + l
	}
	return n
}

func (m *SignReqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMpcsign(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if len(m.KeyIds) > 0 {
		l = 0
		for _, e := range m.KeyIds {
			l += sovMpcsign(uint64(e))
		}
		n += 1 + sovMpcsign(uint64(l)) + l
	}
	l = len(m.KeyType)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if len(m.DataForSigning) > 0 {
		for _, b := range m.DataForSigning {
			l = len(b)
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if len(m.SignedData) > 0 {
		for _, e := range m.SignedData {
			l = e.Size()
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	if len(m.KeyringPartySigs) > 0 {
		for _, e := range m.KeyringPartySigs {
			l = e.Size()
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.ParentReqId != 0 {
		n += 1 + sovMpcsign(uint64(m.ParentReqId))
	}
	if len(m.ChildReqIds) > 0 {
		l = 0
		for _, e := range m.ChildReqIds {
			l += sovMpcsign(uint64(e))
		}
		n += 1 + sovMpcsign(uint64(l)) + l
	}
	l = len(m.CacheId)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.MpcBtl != 0 {
		n += 1 + sovMpcsign(uint64(m.MpcBtl))
	}
	if m.Fee != 0 {
		n += 1 + sovMpcsign(uint64(m.Fee))
	}
	l = len(m.ZenbtcTxBytes)
	if l > 0 {
		n += 2 + l + sovMpcsign(uint64(l))
	}
	return n
}

func (m *SignTxReqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMpcsign(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovMpcsign(uint64(m.KeyId))
	}
	l = len(m.WalletType)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	l = len(m.UnsignedTransaction)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.SignRequestId != 0 {
		n += 1 + sovMpcsign(uint64(m.SignRequestId))
	}
	if m.NoBroadcast {
		n += 2
	}
	if m.MpcBtl != 0 {
		n += 1 + sovMpcsign(uint64(m.MpcBtl))
	}
	if len(m.KeyIds) > 0 {
		l = 0
		for _, e := range m.KeyIds {
			l += sovMpcsign(uint64(e))
		}
		n += 1 + sovMpcsign(uint64(l)) + l
	}
	return n
}

func (m *ICATransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMpcsign(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovMpcsign(uint64(m.KeyId))
	}
	if m.KeyType != 0 {
		n += 1 + sovMpcsign(uint64(m.KeyType))
	}
	l = len(m.InputMsg)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMpcsign(uint64(m.Status))
	}
	if len(m.SignedData) > 0 {
		for _, b := range m.SignedData {
			l = len(b)
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	if len(m.KeyringPartySignatures) > 0 {
		for _, e := range m.KeyringPartySignatures {
			l = e.Size()
			n += 1 + l + sovMpcsign(uint64(l))
		}
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovMpcsign(uint64(l))
	}
	return n
}

func sovMpcsign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMpcsign(x uint64) (n int) {
	return sovMpcsign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataForSigning", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataForSigning = append(m.DataForSigning, make([]byte, postIndex-iNdEx))
			copy(m.DataForSigning[len(m.DataForSigning)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SignRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData, &SignedDataWithID{})
			if err := m.SignedData[len(m.SignedData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringPartySignatures = append(m.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
			copy(m.KeyringPartySignatures[len(m.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &types.Any{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentReqId", wireType)
			}
			m.ParentReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChildReqIds = append(m.ChildReqIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMpcsign
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMpcsign
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChildReqIds) == 0 {
					m.ChildReqIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMpcsign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChildReqIds = append(m.ChildReqIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildReqIds", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheId = append(m.CacheId[:0], dAtA[iNdEx:postIndex]...)
			if m.CacheId == nil {
				m.CacheId = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyIds = append(m.KeyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMpcsign
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMpcsign
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyIds) == 0 {
					m.KeyIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMpcsign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyIds = append(m.KeyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
			}
			m.MpcBtl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpcBtl |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcTxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZenbtcTxBytes = append(m.ZenbtcTxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ZenbtcTxBytes == nil {
				m.ZenbtcTxBytes = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringPartySigs = append(m.KeyringPartySigs, &PartySignature{})
			if err := m.KeyringPartySigs[len(m.KeyringPartySigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMpcsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMpcsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedDataWithID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedDataWithID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedDataWithID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequestId", wireType)
			}
			m.SignRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedData == nil {
				m.SignedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMpcsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMpcsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedTransaction", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsignedTransaction = append(m.UnsignedTransaction[:0], dAtA[iNdEx:postIndex]...)
			if m.UnsignedTransaction == nil {
				m.UnsignedTransaction = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequestId", wireType)
			}
			m.SignRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoBroadcast = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyIds = append(m.KeyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMpcsign
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMpcsign
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyIds) == 0 {
					m.KeyIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMpcsign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyIds = append(m.KeyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMpcsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMpcsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignReqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignReqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyIds = append(m.KeyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMpcsign
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMpcsign
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyIds) == 0 {
					m.KeyIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMpcsign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyIds = append(m.KeyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataForSigning", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataForSigning = append(m.DataForSigning, make([]byte, postIndex-iNdEx))
			copy(m.DataForSigning[len(m.DataForSigning)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData, &SignedDataWithID{})
			if err := m.SignedData[len(m.SignedData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringPartySigs = append(m.KeyringPartySigs, &PartySignature{})
			if err := m.KeyringPartySigs[len(m.KeyringPartySigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &types.Any{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentReqId", wireType)
			}
			m.ParentReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChildReqIds = append(m.ChildReqIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMpcsign
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMpcsign
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChildReqIds) == 0 {
					m.ChildReqIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMpcsign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChildReqIds = append(m.ChildReqIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildReqIds", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheId = append(m.CacheId[:0], dAtA[iNdEx:postIndex]...)
			if m.CacheId == nil {
				m.CacheId = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
			}
			m.MpcBtl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpcBtl |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcTxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZenbtcTxBytes = append(m.ZenbtcTxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ZenbtcTxBytes == nil {
				m.ZenbtcTxBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMpcsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMpcsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignTxReqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignTxReqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignTxReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedTransaction", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsignedTransaction = append(m.UnsignedTransaction[:0], dAtA[iNdEx:postIndex]...)
			if m.UnsignedTransaction == nil {
				m.UnsignedTransaction = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequestId", wireType)
			}
			m.SignRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoBroadcast = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpcBtl", wireType)
			}
			m.MpcBtl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpcBtl |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyIds = append(m.KeyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMpcsign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMpcsign
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMpcsign
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyIds) == 0 {
					m.KeyIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMpcsign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyIds = append(m.KeyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMpcsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMpcsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICATransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICATransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICATransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputMsg = append(m.InputMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.InputMsg == nil {
				m.InputMsg = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SignRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData, make([]byte, postIndex-iNdEx))
			copy(m.SignedData[len(m.SignedData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringPartySignatures = append(m.KeyringPartySignatures, &PartySignature{})
			if err := m.KeyringPartySignatures[len(m.KeyringPartySignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMpcsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMpcsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMpcsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMpcsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMpcsign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMpcsign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMpcsign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMpcsign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMpcsign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMpcsign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMpcsign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMpcsign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMpcsign = fmt.Errorf("proto: unexpected end of group")
)
