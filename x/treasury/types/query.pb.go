// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/treasury/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryKeyRequestsRequest is request type for the Query/KeyRequestsRequest RPC
// method.
type QueryKeyRequestsRequest struct {
	KeyringAddr   string             `protobuf:"bytes,1,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	Status        KeyRequestStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=zrchain.treasury.KeyRequestStatus" json:"status,omitempty"`
	WorkspaceAddr string             `protobuf:"bytes,3,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeyRequestsRequest) Reset()         { *m = QueryKeyRequestsRequest{} }
func (m *QueryKeyRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestsRequest) ProtoMessage()    {}
func (*QueryKeyRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{2}
}
func (m *QueryKeyRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestsRequest.Merge(m, src)
}
func (m *QueryKeyRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestsRequest proto.InternalMessageInfo

func (m *QueryKeyRequestsRequest) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *QueryKeyRequestsRequest) GetStatus() KeyRequestStatus {
	if m != nil {
		return m.Status
	}
	return KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED
}

func (m *QueryKeyRequestsRequest) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

func (m *QueryKeyRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeyRequestsResponse is response type for the Query/KeyRequestsResponse
// RPC method.
type QueryKeyRequestsResponse struct {
	KeyRequests []*KeyReqResponse   `protobuf:"bytes,1,rep,name=key_requests,json=keyRequests,proto3" json:"key_requests,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeyRequestsResponse) Reset()         { *m = QueryKeyRequestsResponse{} }
func (m *QueryKeyRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestsResponse) ProtoMessage()    {}
func (*QueryKeyRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{3}
}
func (m *QueryKeyRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestsResponse.Merge(m, src)
}
func (m *QueryKeyRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestsResponse proto.InternalMessageInfo

func (m *QueryKeyRequestsResponse) GetKeyRequests() []*KeyReqResponse {
	if m != nil {
		return m.KeyRequests
	}
	return nil
}

func (m *QueryKeyRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeyByIDRequest is request type for the
// Query/KeyByIDRequest RPC method.
type QueryKeyByIDRequest struct {
	Id         uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WalletType WalletType `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=zrchain.treasury.WalletType" json:"wallet_type,omitempty"`
	Prefixes   []string   `protobuf:"bytes,3,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (m *QueryKeyByIDRequest) Reset()         { *m = QueryKeyByIDRequest{} }
func (m *QueryKeyByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyByIDRequest) ProtoMessage()    {}
func (*QueryKeyByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{4}
}
func (m *QueryKeyByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyByIDRequest.Merge(m, src)
}
func (m *QueryKeyByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyByIDRequest proto.InternalMessageInfo

func (m *QueryKeyByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryKeyByIDRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *QueryKeyByIDRequest) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// QueryKeyByIDResponse is response type for the
// Query/KeyByIDResponse RPC method.
type QueryKeyByIDResponse struct {
	Key     *KeyResponse      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Wallets []*WalletResponse `protobuf:"bytes,2,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (m *QueryKeyByIDResponse) Reset()         { *m = QueryKeyByIDResponse{} }
func (m *QueryKeyByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyByIDResponse) ProtoMessage()    {}
func (*QueryKeyByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{5}
}
func (m *QueryKeyByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyByIDResponse.Merge(m, src)
}
func (m *QueryKeyByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyByIDResponse proto.InternalMessageInfo

func (m *QueryKeyByIDResponse) GetKey() *KeyResponse {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryKeyByIDResponse) GetWallets() []*WalletResponse {
	if m != nil {
		return m.Wallets
	}
	return nil
}

// QueryKeysRequest is request type for the Query/KeysRequest RPC method.
type QueryKeysRequest struct {
	WorkspaceAddr string             `protobuf:"bytes,1,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	WalletType    WalletType         `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=zrchain.treasury.WalletType" json:"wallet_type,omitempty"`
	Prefixes      []string           `protobuf:"bytes,3,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeysRequest) Reset()         { *m = QueryKeysRequest{} }
func (m *QueryKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeysRequest) ProtoMessage()    {}
func (*QueryKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{6}
}
func (m *QueryKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysRequest.Merge(m, src)
}
func (m *QueryKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysRequest proto.InternalMessageInfo

func (m *QueryKeysRequest) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

func (m *QueryKeysRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *QueryKeysRequest) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *QueryKeysRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeysResponse is response type for the Query/KeysResponse RPC method.
type QueryKeysResponse struct {
	Keys       []*KeyAndWalletResponse `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Pagination *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeysResponse) Reset()         { *m = QueryKeysResponse{} }
func (m *QueryKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeysResponse) ProtoMessage()    {}
func (*QueryKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{7}
}
func (m *QueryKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysResponse.Merge(m, src)
}
func (m *QueryKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysResponse proto.InternalMessageInfo

func (m *QueryKeysResponse) GetKeys() []*KeyAndWalletResponse {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *QueryKeysResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// KeyWalletResponse returns the key along with derived wallets
type KeyAndWalletResponse struct {
	Key     *KeyResponse      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Wallets []*WalletResponse `protobuf:"bytes,2,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (m *KeyAndWalletResponse) Reset()         { *m = KeyAndWalletResponse{} }
func (m *KeyAndWalletResponse) String() string { return proto.CompactTextString(m) }
func (*KeyAndWalletResponse) ProtoMessage()    {}
func (*KeyAndWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{8}
}
func (m *KeyAndWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyAndWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyAndWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyAndWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAndWalletResponse.Merge(m, src)
}
func (m *KeyAndWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyAndWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAndWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAndWalletResponse proto.InternalMessageInfo

func (m *KeyAndWalletResponse) GetKey() *KeyResponse {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyAndWalletResponse) GetWallets() []*WalletResponse {
	if m != nil {
		return m.Wallets
	}
	return nil
}

// WalletResponse returns the address to a certain wallet type
type WalletResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *WalletResponse) Reset()         { *m = WalletResponse{} }
func (m *WalletResponse) String() string { return proto.CompactTextString(m) }
func (*WalletResponse) ProtoMessage()    {}
func (*WalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{9}
}
func (m *WalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletResponse.Merge(m, src)
}
func (m *WalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *WalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WalletResponse proto.InternalMessageInfo

func (m *WalletResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WalletResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// QueryKeyRequestByIDRequest is request type for the
// Query/KeyRequestByIDRequest RPC method.
type QueryKeyRequestByIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryKeyRequestByIDRequest) Reset()         { *m = QueryKeyRequestByIDRequest{} }
func (m *QueryKeyRequestByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestByIDRequest) ProtoMessage()    {}
func (*QueryKeyRequestByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{10}
}
func (m *QueryKeyRequestByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestByIDRequest.Merge(m, src)
}
func (m *QueryKeyRequestByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestByIDRequest proto.InternalMessageInfo

func (m *QueryKeyRequestByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryKeyRequestByIDResponse is response type for the
// Query/KeyRequestByIDResponse RPC method.
type QueryKeyRequestByIDResponse struct {
	KeyRequest *KeyReqResponse `protobuf:"bytes,1,opt,name=key_request,json=keyRequest,proto3" json:"key_request,omitempty"`
}

func (m *QueryKeyRequestByIDResponse) Reset()         { *m = QueryKeyRequestByIDResponse{} }
func (m *QueryKeyRequestByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestByIDResponse) ProtoMessage()    {}
func (*QueryKeyRequestByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{11}
}
func (m *QueryKeyRequestByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestByIDResponse.Merge(m, src)
}
func (m *QueryKeyRequestByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestByIDResponse proto.InternalMessageInfo

func (m *QueryKeyRequestByIDResponse) GetKeyRequest() *KeyReqResponse {
	if m != nil {
		return m.KeyRequest
	}
	return nil
}

// QuerySignatureRequestsRequest is request type for the
// Query/SignatureRequestsRequest RPC method.
type QuerySignatureRequestsRequest struct {
	KeyringAddr string             `protobuf:"bytes,1,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	Status      SignRequestStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=zrchain.treasury.SignRequestStatus" json:"status,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySignatureRequestsRequest) Reset()         { *m = QuerySignatureRequestsRequest{} }
func (m *QuerySignatureRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestsRequest) ProtoMessage()    {}
func (*QuerySignatureRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{12}
}
func (m *QuerySignatureRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestsRequest.Merge(m, src)
}
func (m *QuerySignatureRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestsRequest proto.InternalMessageInfo

func (m *QuerySignatureRequestsRequest) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *QuerySignatureRequestsRequest) GetStatus() SignRequestStatus {
	if m != nil {
		return m.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (m *QuerySignatureRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySignatureRequestsResponse is response type for the
// Query/SignatureRequestsResponse RPC method.
type QuerySignatureRequestsResponse struct {
	SignRequests []*SignReqResponse  `protobuf:"bytes,1,rep,name=sign_requests,json=signRequests,proto3" json:"sign_requests,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySignatureRequestsResponse) Reset()         { *m = QuerySignatureRequestsResponse{} }
func (m *QuerySignatureRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestsResponse) ProtoMessage()    {}
func (*QuerySignatureRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{13}
}
func (m *QuerySignatureRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestsResponse.Merge(m, src)
}
func (m *QuerySignatureRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestsResponse proto.InternalMessageInfo

func (m *QuerySignatureRequestsResponse) GetSignRequests() []*SignReqResponse {
	if m != nil {
		return m.SignRequests
	}
	return nil
}

func (m *QuerySignatureRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySignatureRequestByIDRequest is request type for the
// Query/SignatureRequestByIDRequest RPC method.
type QuerySignatureRequestByIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySignatureRequestByIDRequest) Reset()         { *m = QuerySignatureRequestByIDRequest{} }
func (m *QuerySignatureRequestByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestByIDRequest) ProtoMessage()    {}
func (*QuerySignatureRequestByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{14}
}
func (m *QuerySignatureRequestByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestByIDRequest.Merge(m, src)
}
func (m *QuerySignatureRequestByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestByIDRequest proto.InternalMessageInfo

func (m *QuerySignatureRequestByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QuerySignatureRequestByIDResponse is response type for the
// Query/SignatureRequestByIDResponse RPC method.
type QuerySignatureRequestByIDResponse struct {
	SignRequest *SignReqResponse `protobuf:"bytes,1,opt,name=sign_request,json=signRequest,proto3" json:"sign_request,omitempty"`
}

func (m *QuerySignatureRequestByIDResponse) Reset()         { *m = QuerySignatureRequestByIDResponse{} }
func (m *QuerySignatureRequestByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestByIDResponse) ProtoMessage()    {}
func (*QuerySignatureRequestByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{15}
}
func (m *QuerySignatureRequestByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestByIDResponse.Merge(m, src)
}
func (m *QuerySignatureRequestByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestByIDResponse proto.InternalMessageInfo

func (m *QuerySignatureRequestByIDResponse) GetSignRequest() *SignReqResponse {
	if m != nil {
		return m.SignRequest
	}
	return nil
}

// QuerySignTransactionRequestsRequest is request type for the
// Query/SignTransactionRequestsRequest RPC method.
type QuerySignTransactionRequestsRequest struct {
	RequestId  uint64             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	KeyId      uint64             `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	WalletType WalletType         `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=zrchain.treasury.WalletType" json:"wallet_type,omitempty"`
	Status     SignRequestStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=zrchain.treasury.SignRequestStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySignTransactionRequestsRequest) Reset()         { *m = QuerySignTransactionRequestsRequest{} }
func (m *QuerySignTransactionRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignTransactionRequestsRequest) ProtoMessage()    {}
func (*QuerySignTransactionRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{16}
}
func (m *QuerySignTransactionRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignTransactionRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignTransactionRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignTransactionRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignTransactionRequestsRequest.Merge(m, src)
}
func (m *QuerySignTransactionRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignTransactionRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignTransactionRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignTransactionRequestsRequest proto.InternalMessageInfo

func (m *QuerySignTransactionRequestsRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *QuerySignTransactionRequestsRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *QuerySignTransactionRequestsRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *QuerySignTransactionRequestsRequest) GetStatus() SignRequestStatus {
	if m != nil {
		return m.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (m *QuerySignTransactionRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySignTransactionRequestsResponse is response type for the
// Query/SignTransactionRequestsResponse RPC method.
type QuerySignTransactionRequestsResponse struct {
	SignTransactionRequests []*SignTransactionRequestsResponse `protobuf:"bytes,1,rep,name=sign_transaction_requests,json=signTransactionRequests,proto3" json:"sign_transaction_requests,omitempty"`
	Pagination              *query.PageResponse                `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySignTransactionRequestsResponse) Reset()         { *m = QuerySignTransactionRequestsResponse{} }
func (m *QuerySignTransactionRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignTransactionRequestsResponse) ProtoMessage()    {}
func (*QuerySignTransactionRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{17}
}
func (m *QuerySignTransactionRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignTransactionRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignTransactionRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignTransactionRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignTransactionRequestsResponse.Merge(m, src)
}
func (m *QuerySignTransactionRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignTransactionRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignTransactionRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignTransactionRequestsResponse proto.InternalMessageInfo

func (m *QuerySignTransactionRequestsResponse) GetSignTransactionRequests() []*SignTransactionRequestsResponse {
	if m != nil {
		return m.SignTransactionRequests
	}
	return nil
}

func (m *QuerySignTransactionRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// SignTransactionRequestResponse returns the sign transcation- and sign request
type SignTransactionRequestsResponse struct {
	SignTransactionRequests *SignTxReqResponse `protobuf:"bytes,1,opt,name=sign_transaction_requests,json=signTransactionRequests,proto3" json:"sign_transaction_requests,omitempty"`
	SignRequest             *SignReqResponse   `protobuf:"bytes,2,opt,name=sign_request,json=signRequest,proto3" json:"sign_request,omitempty"`
}

func (m *SignTransactionRequestsResponse) Reset()         { *m = SignTransactionRequestsResponse{} }
func (m *SignTransactionRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequestsResponse) ProtoMessage()    {}
func (*SignTransactionRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{18}
}
func (m *SignTransactionRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignTransactionRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignTransactionRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignTransactionRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionRequestsResponse.Merge(m, src)
}
func (m *SignTransactionRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignTransactionRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionRequestsResponse proto.InternalMessageInfo

func (m *SignTransactionRequestsResponse) GetSignTransactionRequests() *SignTxReqResponse {
	if m != nil {
		return m.SignTransactionRequests
	}
	return nil
}

func (m *SignTransactionRequestsResponse) GetSignRequest() *SignReqResponse {
	if m != nil {
		return m.SignRequest
	}
	return nil
}

// QuerySignTransactionRequestByIDRequest is request type for the
// Query/SignTransactionRequestByIDRequest RPC method.
type QuerySignTransactionRequestByIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySignTransactionRequestByIDRequest) Reset() {
	*m = QuerySignTransactionRequestByIDRequest{}
}
func (m *QuerySignTransactionRequestByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignTransactionRequestByIDRequest) ProtoMessage()    {}
func (*QuerySignTransactionRequestByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{19}
}
func (m *QuerySignTransactionRequestByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignTransactionRequestByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignTransactionRequestByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignTransactionRequestByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignTransactionRequestByIDRequest.Merge(m, src)
}
func (m *QuerySignTransactionRequestByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignTransactionRequestByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignTransactionRequestByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignTransactionRequestByIDRequest proto.InternalMessageInfo

func (m *QuerySignTransactionRequestByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QuerySignTransactionRequestByIDResponse is response type for the
// Query/SignTransactionRequestByIDResponse RPC method.
type QuerySignTransactionRequestByIDResponse struct {
	SignTransactionRequest *SignTxReqResponse `protobuf:"bytes,1,opt,name=sign_transaction_request,json=signTransactionRequest,proto3" json:"sign_transaction_request,omitempty"`
}

func (m *QuerySignTransactionRequestByIDResponse) Reset() {
	*m = QuerySignTransactionRequestByIDResponse{}
}
func (m *QuerySignTransactionRequestByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignTransactionRequestByIDResponse) ProtoMessage()    {}
func (*QuerySignTransactionRequestByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{20}
}
func (m *QuerySignTransactionRequestByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignTransactionRequestByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignTransactionRequestByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignTransactionRequestByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignTransactionRequestByIDResponse.Merge(m, src)
}
func (m *QuerySignTransactionRequestByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignTransactionRequestByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignTransactionRequestByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignTransactionRequestByIDResponse proto.InternalMessageInfo

func (m *QuerySignTransactionRequestByIDResponse) GetSignTransactionRequest() *SignTxReqResponse {
	if m != nil {
		return m.SignTransactionRequest
	}
	return nil
}

type QueryZrSignKeysRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	WalletType string             `protobuf:"bytes,2,opt,name=walletType,proto3" json:"walletType,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryZrSignKeysRequest) Reset()         { *m = QueryZrSignKeysRequest{} }
func (m *QueryZrSignKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZrSignKeysRequest) ProtoMessage()    {}
func (*QueryZrSignKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{21}
}
func (m *QueryZrSignKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZrSignKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZrSignKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZrSignKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZrSignKeysRequest.Merge(m, src)
}
func (m *QueryZrSignKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZrSignKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZrSignKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZrSignKeysRequest proto.InternalMessageInfo

func (m *QueryZrSignKeysRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryZrSignKeysRequest) GetWalletType() string {
	if m != nil {
		return m.WalletType
	}
	return ""
}

func (m *QueryZrSignKeysRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ZrSignKeyEntry struct {
	WalletType string `protobuf:"bytes,1,opt,name=walletType,proto3" json:"walletType,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Index      uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Id         uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ZrSignKeyEntry) Reset()         { *m = ZrSignKeyEntry{} }
func (m *ZrSignKeyEntry) String() string { return proto.CompactTextString(m) }
func (*ZrSignKeyEntry) ProtoMessage()    {}
func (*ZrSignKeyEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{22}
}
func (m *ZrSignKeyEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZrSignKeyEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZrSignKeyEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZrSignKeyEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZrSignKeyEntry.Merge(m, src)
}
func (m *ZrSignKeyEntry) XXX_Size() int {
	return m.Size()
}
func (m *ZrSignKeyEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ZrSignKeyEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ZrSignKeyEntry proto.InternalMessageInfo

func (m *ZrSignKeyEntry) GetWalletType() string {
	if m != nil {
		return m.WalletType
	}
	return ""
}

func (m *ZrSignKeyEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ZrSignKeyEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ZrSignKeyEntry) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryZrSignKeysResponse struct {
	Keys       []*ZrSignKeyEntry   `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryZrSignKeysResponse) Reset()         { *m = QueryZrSignKeysResponse{} }
func (m *QueryZrSignKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZrSignKeysResponse) ProtoMessage()    {}
func (*QueryZrSignKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{23}
}
func (m *QueryZrSignKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZrSignKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZrSignKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZrSignKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZrSignKeysResponse.Merge(m, src)
}
func (m *QueryZrSignKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZrSignKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZrSignKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZrSignKeysResponse proto.InternalMessageInfo

func (m *QueryZrSignKeysResponse) GetKeys() []*ZrSignKeyEntry {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *QueryZrSignKeysResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryKeyByAddressRequest struct {
	Address     string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	KeyringAddr string     `protobuf:"bytes,2,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	KeyType     KeyType    `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	WalletType  WalletType `protobuf:"varint,4,opt,name=wallet_type,json=walletType,proto3,enum=zrchain.treasury.WalletType" json:"wallet_type,omitempty"`
	Prefixes    []string   `protobuf:"bytes,5,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (m *QueryKeyByAddressRequest) Reset()         { *m = QueryKeyByAddressRequest{} }
func (m *QueryKeyByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyByAddressRequest) ProtoMessage()    {}
func (*QueryKeyByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{24}
}
func (m *QueryKeyByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyByAddressRequest.Merge(m, src)
}
func (m *QueryKeyByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyByAddressRequest proto.InternalMessageInfo

func (m *QueryKeyByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryKeyByAddressRequest) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *QueryKeyByAddressRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *QueryKeyByAddressRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *QueryKeyByAddressRequest) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

type QueryKeyByAddressResponse struct {
	Response *KeyAndWalletResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QueryKeyByAddressResponse) Reset()         { *m = QueryKeyByAddressResponse{} }
func (m *QueryKeyByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyByAddressResponse) ProtoMessage()    {}
func (*QueryKeyByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{25}
}
func (m *QueryKeyByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyByAddressResponse.Merge(m, src)
}
func (m *QueryKeyByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyByAddressResponse proto.InternalMessageInfo

func (m *QueryKeyByAddressResponse) GetResponse() *KeyAndWalletResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// QueryZenbtcWalletsRequest is request type for the
// Query/ZenbtcWalletsRequest RPC method.
type QueryZenbtcWalletsRequest struct {
	RecipientAddr string             `protobuf:"bytes,1,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	ChainType     WalletType         `protobuf:"varint,2,opt,name=chain_type,json=chainType,proto3,enum=zrchain.treasury.WalletType" json:"chain_type,omitempty"`
	MintChainId   uint64             `protobuf:"varint,3,opt,name=mint_chain_id,json=mintChainId,proto3" json:"mint_chain_id,omitempty"`
	ReturnAddr    string             `protobuf:"bytes,4,opt,name=return_addr,json=returnAddr,proto3" json:"return_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryZenbtcWalletsRequest) Reset()         { *m = QueryZenbtcWalletsRequest{} }
func (m *QueryZenbtcWalletsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZenbtcWalletsRequest) ProtoMessage()    {}
func (*QueryZenbtcWalletsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{26}
}
func (m *QueryZenbtcWalletsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZenbtcWalletsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZenbtcWalletsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZenbtcWalletsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZenbtcWalletsRequest.Merge(m, src)
}
func (m *QueryZenbtcWalletsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZenbtcWalletsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZenbtcWalletsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZenbtcWalletsRequest proto.InternalMessageInfo

func (m *QueryZenbtcWalletsRequest) GetRecipientAddr() string {
	if m != nil {
		return m.RecipientAddr
	}
	return ""
}

func (m *QueryZenbtcWalletsRequest) GetChainType() WalletType {
	if m != nil {
		return m.ChainType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *QueryZenbtcWalletsRequest) GetMintChainId() uint64 {
	if m != nil {
		return m.MintChainId
	}
	return 0
}

func (m *QueryZenbtcWalletsRequest) GetReturnAddr() string {
	if m != nil {
		return m.ReturnAddr
	}
	return ""
}

func (m *QueryZenbtcWalletsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryZenbtcWalletsResponse is response type for the
// Query/ZenbtcWalletsResponse RPC method.
type QueryZenbtcWalletsResponse struct {
	ZenbtcWallets []*KeyAndWalletResponse `protobuf:"bytes,1,rep,name=zenbtc_wallets,json=zenbtcWallets,proto3" json:"zenbtc_wallets,omitempty"`
	Pagination    *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryZenbtcWalletsResponse) Reset()         { *m = QueryZenbtcWalletsResponse{} }
func (m *QueryZenbtcWalletsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZenbtcWalletsResponse) ProtoMessage()    {}
func (*QueryZenbtcWalletsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb79c12b3405d66, []int{27}
}
func (m *QueryZenbtcWalletsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZenbtcWalletsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZenbtcWalletsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZenbtcWalletsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZenbtcWalletsResponse.Merge(m, src)
}
func (m *QueryZenbtcWalletsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZenbtcWalletsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZenbtcWalletsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZenbtcWalletsResponse proto.InternalMessageInfo

func (m *QueryZenbtcWalletsResponse) GetZenbtcWallets() []*KeyAndWalletResponse {
	if m != nil {
		return m.ZenbtcWallets
	}
	return nil
}

func (m *QueryZenbtcWalletsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "zrchain.treasury.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "zrchain.treasury.QueryParamsResponse")
	proto.RegisterType((*QueryKeyRequestsRequest)(nil), "zrchain.treasury.QueryKeyRequestsRequest")
	proto.RegisterType((*QueryKeyRequestsResponse)(nil), "zrchain.treasury.QueryKeyRequestsResponse")
	proto.RegisterType((*QueryKeyByIDRequest)(nil), "zrchain.treasury.QueryKeyByIDRequest")
	proto.RegisterType((*QueryKeyByIDResponse)(nil), "zrchain.treasury.QueryKeyByIDResponse")
	proto.RegisterType((*QueryKeysRequest)(nil), "zrchain.treasury.QueryKeysRequest")
	proto.RegisterType((*QueryKeysResponse)(nil), "zrchain.treasury.QueryKeysResponse")
	proto.RegisterType((*KeyAndWalletResponse)(nil), "zrchain.treasury.KeyAndWalletResponse")
	proto.RegisterType((*WalletResponse)(nil), "zrchain.treasury.WalletResponse")
	proto.RegisterType((*QueryKeyRequestByIDRequest)(nil), "zrchain.treasury.QueryKeyRequestByIDRequest")
	proto.RegisterType((*QueryKeyRequestByIDResponse)(nil), "zrchain.treasury.QueryKeyRequestByIDResponse")
	proto.RegisterType((*QuerySignatureRequestsRequest)(nil), "zrchain.treasury.QuerySignatureRequestsRequest")
	proto.RegisterType((*QuerySignatureRequestsResponse)(nil), "zrchain.treasury.QuerySignatureRequestsResponse")
	proto.RegisterType((*QuerySignatureRequestByIDRequest)(nil), "zrchain.treasury.QuerySignatureRequestByIDRequest")
	proto.RegisterType((*QuerySignatureRequestByIDResponse)(nil), "zrchain.treasury.QuerySignatureRequestByIDResponse")
	proto.RegisterType((*QuerySignTransactionRequestsRequest)(nil), "zrchain.treasury.QuerySignTransactionRequestsRequest")
	proto.RegisterType((*QuerySignTransactionRequestsResponse)(nil), "zrchain.treasury.QuerySignTransactionRequestsResponse")
	proto.RegisterType((*SignTransactionRequestsResponse)(nil), "zrchain.treasury.SignTransactionRequestsResponse")
	proto.RegisterType((*QuerySignTransactionRequestByIDRequest)(nil), "zrchain.treasury.QuerySignTransactionRequestByIDRequest")
	proto.RegisterType((*QuerySignTransactionRequestByIDResponse)(nil), "zrchain.treasury.QuerySignTransactionRequestByIDResponse")
	proto.RegisterType((*QueryZrSignKeysRequest)(nil), "zrchain.treasury.QueryZrSignKeysRequest")
	proto.RegisterType((*ZrSignKeyEntry)(nil), "zrchain.treasury.ZrSignKeyEntry")
	proto.RegisterType((*QueryZrSignKeysResponse)(nil), "zrchain.treasury.QueryZrSignKeysResponse")
	proto.RegisterType((*QueryKeyByAddressRequest)(nil), "zrchain.treasury.QueryKeyByAddressRequest")
	proto.RegisterType((*QueryKeyByAddressResponse)(nil), "zrchain.treasury.QueryKeyByAddressResponse")
	proto.RegisterType((*QueryZenbtcWalletsRequest)(nil), "zrchain.treasury.QueryZenbtcWalletsRequest")
	proto.RegisterType((*QueryZenbtcWalletsResponse)(nil), "zrchain.treasury.QueryZenbtcWalletsResponse")
}

func init() { proto.RegisterFile("zrchain/treasury/query.proto", fileDescriptor_5eb79c12b3405d66) }

var fileDescriptor_5eb79c12b3405d66 = []byte{
	// 1644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x6f, 0x13, 0x47,
	0x1b, 0xcf, 0x38, 0x4e, 0x42, 0x1e, 0x27, 0x16, 0xcc, 0x9b, 0x17, 0xcc, 0xbe, 0xc4, 0x98, 0x0d,
	0x09, 0x21, 0x80, 0x17, 0xc2, 0xc7, 0xcb, 0x47, 0x41, 0x4d, 0xa0, 0xd0, 0x94, 0x56, 0xa5, 0x0b,
	0x52, 0xa5, 0x48, 0x95, 0xbb, 0xf1, 0x4e, 0xcd, 0xca, 0x78, 0xd7, 0xec, 0xae, 0x49, 0x1c, 0xcb,
	0x52, 0xd5, 0x5e, 0x7a, 0xe8, 0xa1, 0x52, 0x7b, 0xa0, 0xed, 0x81, 0x1e, 0x39, 0xb6, 0x52, 0xab,
	0x5e, 0x7a, 0x2f, 0xb7, 0x22, 0x71, 0xe9, 0x01, 0xa1, 0x0a, 0x2a, 0xd1, 0x3f, 0xa3, 0xda, 0xd9,
	0xd9, 0xf5, 0xec, 0x97, 0xed, 0x04, 0xb7, 0x97, 0x68, 0x3d, 0xf3, 0x3c, 0xf3, 0xfc, 0x9e, 0x8f,
	0x79, 0xe6, 0x37, 0x13, 0xd8, 0xb7, 0x69, 0x96, 0x6f, 0x2b, 0x9a, 0x2e, 0xd9, 0x26, 0x51, 0xac,
	0x86, 0xd9, 0x94, 0xee, 0x36, 0x88, 0xd9, 0x2c, 0xd6, 0x4d, 0xc3, 0x36, 0xf0, 0x4e, 0x36, 0x5b,
	0xf4, 0x66, 0x85, 0x5d, 0x4a, 0x4d, 0xd3, 0x0d, 0x89, 0xfe, 0x75, 0x85, 0x84, 0x85, 0xb2, 0x61,
	0xd5, 0x0c, 0x4b, 0x5a, 0x53, 0x2c, 0xe2, 0x6a, 0x4b, 0xf7, 0x4e, 0xac, 0x11, 0x5b, 0x39, 0x21,
	0xd5, 0x95, 0x8a, 0xa6, 0x2b, 0xb6, 0x66, 0xe8, 0x4c, 0x76, 0xaa, 0x62, 0x54, 0x0c, 0xfa, 0x29,
	0x39, 0x5f, 0x6c, 0x74, 0x5f, 0xc5, 0x30, 0x2a, 0x77, 0x88, 0xa4, 0xd4, 0x35, 0x49, 0xd1, 0x75,
	0xc3, 0xa6, 0x2a, 0x16, 0x9b, 0x15, 0x22, 0x10, 0xab, 0x84, 0x01, 0x14, 0xf2, 0x91, 0xb9, 0x5a,
	0xbd, 0x6c, 0x69, 0x15, 0xcf, 0xde, 0x74, 0x64, 0xbe, 0xae, 0x98, 0x4a, 0xcd, 0x4a, 0x9c, 0x5e,
	0x57, 0xee, 0xdc, 0x21, 0xb6, 0x3b, 0x2d, 0x4e, 0x01, 0x7e, 0xcf, 0xf1, 0xe7, 0x06, 0xd5, 0x91,
	0xc9, 0xdd, 0x06, 0xb1, 0x6c, 0x51, 0x86, 0xff, 0x04, 0x46, 0xad, 0xba, 0xa1, 0x5b, 0x04, 0x5f,
	0x80, 0x51, 0x77, 0xed, 0x1c, 0x2a, 0xa0, 0xf9, 0xcc, 0x62, 0xae, 0x18, 0x0e, 0x5e, 0xd1, 0xd5,
	0x58, 0x1e, 0x7f, 0xf4, 0x6c, 0xff, 0xd0, 0xc3, 0x97, 0xdf, 0x2f, 0x20, 0x99, 0xa9, 0x88, 0x2f,
	0x11, 0xec, 0xa1, 0x8b, 0x5e, 0x27, 0x4d, 0x66, 0xc7, 0xb3, 0x87, 0x0f, 0xc0, 0x44, 0x95, 0x34,
	0x4d, 0x4d, 0xaf, 0x94, 0x14, 0x55, 0x35, 0xe9, 0xf2, 0xe3, 0x72, 0x86, 0x8d, 0x2d, 0xa9, 0xaa,
	0x89, 0xcf, 0xc3, 0xa8, 0x65, 0x2b, 0x76, 0xc3, 0xca, 0xa5, 0x0a, 0x68, 0x3e, 0xbb, 0x28, 0x46,
	0x6d, 0x77, 0x16, 0xbe, 0x49, 0x25, 0x65, 0xa6, 0x81, 0x67, 0x21, 0xbb, 0x6e, 0x98, 0x55, 0xab,
	0xae, 0x94, 0x89, 0x6b, 0x60, 0x98, 0x1a, 0x98, 0xf4, 0x47, 0xa9, 0x89, 0xab, 0x00, 0x9d, 0x6c,
	0xe6, 0xd2, 0xd4, 0xc5, 0xb9, 0xa2, 0x9b, 0xfa, 0xa2, 0x93, 0xfa, 0xa2, 0x5b, 0x38, 0x2c, 0xf5,
	0xc5, 0x1b, 0x4a, 0x85, 0x30, 0x83, 0x32, 0xa7, 0x29, 0x3e, 0x44, 0x90, 0x8b, 0x7a, 0xca, 0x62,
	0x78, 0x99, 0xba, 0x5a, 0x32, 0xd9, 0x78, 0x0e, 0x15, 0x86, 0xe7, 0x33, 0x8b, 0x85, 0x24, 0x6f,
	0x3c, 0x3d, 0x1a, 0x0c, 0x6f, 0x31, 0x7c, 0x2d, 0x80, 0x34, 0x45, 0x91, 0x1e, 0xea, 0x89, 0x94,
	0xad, 0xc4, 0x43, 0xfd, 0x18, 0xb1, 0x4c, 0x5f, 0x27, 0xcd, 0xe5, 0xe6, 0xca, 0x15, 0x2f, 0x21,
	0x59, 0x48, 0x69, 0x2a, 0x4d, 0x43, 0x5a, 0x4e, 0x69, 0x2a, 0xbe, 0x08, 0x19, 0xb7, 0x6c, 0x4a,
	0x76, 0xb3, 0x4e, 0x58, 0x0a, 0xf6, 0x45, 0x41, 0xbf, 0x4f, 0x85, 0x6e, 0x35, 0xeb, 0x44, 0x86,
	0x75, 0xff, 0x1b, 0x0b, 0xb0, 0xa3, 0x6e, 0x92, 0x8f, 0xb4, 0x0d, 0x62, 0xe5, 0x86, 0x0b, 0xc3,
	0xf3, 0xe3, 0xb2, 0xff, 0x5b, 0xfc, 0x14, 0xc1, 0x54, 0x10, 0x02, 0x8b, 0x94, 0x04, 0xc3, 0x55,
	0xd2, 0x64, 0xa5, 0x36, 0x9d, 0x10, 0x20, 0xe6, 0x93, 0x23, 0x89, 0xcf, 0xc3, 0x98, 0x6b, 0xd3,
	0xa9, 0x91, 0x84, 0xa8, 0xba, 0x00, 0x7d, 0x3d, 0x4f, 0x41, 0x7c, 0x8a, 0x60, 0xa7, 0x87, 0xc2,
	0x2f, 0xcb, 0x68, 0xdd, 0xa0, 0xb8, 0xba, 0xf9, 0xe7, 0x82, 0x33, 0xb0, 0x92, 0xbc, 0x8f, 0x60,
	0x17, 0xe7, 0x1e, 0x8b, 0xf0, 0x79, 0x48, 0x57, 0x49, 0xd3, 0xab, 0xc1, 0xb9, 0xd8, 0x10, 0x2f,
	0xe9, 0x6a, 0x28, 0x66, 0x54, 0x67, 0x70, 0x25, 0xe8, 0xe4, 0x3f, 0xce, 0xce, 0xbf, 0x9b, 0xff,
	0x4b, 0x90, 0x0d, 0x99, 0xcf, 0xc1, 0x98, 0x93, 0x72, 0x62, 0x59, 0x2c, 0xeb, 0xde, 0x4f, 0x8c,
	0x21, 0xed, 0x27, 0x7a, 0x5c, 0xa6, 0xdf, 0xe2, 0x51, 0x10, 0x42, 0x5b, 0xbe, 0xcb, 0x76, 0x12,
	0x3f, 0x84, 0xff, 0xc5, 0x4a, 0x33, 0xd3, 0x4b, 0x90, 0xe1, 0x7a, 0x04, 0x8b, 0x40, 0xef, 0x16,
	0x01, 0x9d, 0x16, 0x21, 0xfe, 0x8a, 0x60, 0x9a, 0x9a, 0xb8, 0xa9, 0x55, 0x74, 0xc5, 0x6e, 0x98,
	0x64, 0x1b, 0x3d, 0xf7, 0x42, 0xa8, 0xe7, 0xce, 0x44, 0x21, 0x38, 0xcb, 0xc7, 0x37, 0xdd, 0x60,
	0xe9, 0x0e, 0x6f, 0xbb, 0x74, 0x7f, 0x40, 0x90, 0x4f, 0xf2, 0x84, 0xc5, 0xeb, 0x2a, 0x4c, 0x3a,
	0x07, 0x62, 0xb8, 0xa9, 0x1e, 0x48, 0x84, 0xeb, 0x87, 0x6c, 0xc2, 0xea, 0xe0, 0x1f, 0x60, 0x4d,
	0x2f, 0x42, 0x21, 0x16, 0x72, 0xb7, 0x9a, 0xd0, 0xe0, 0x40, 0x17, 0x1d, 0xe6, 0xe9, 0x15, 0x98,
	0xe0, 0x3d, 0x65, 0xa5, 0xd1, 0x87, 0xa3, 0x19, 0xce, 0x51, 0xf1, 0x41, 0x0a, 0x66, 0x7c, 0x5b,
	0xb7, 0x4c, 0x45, 0xb7, 0x94, 0xb2, 0x83, 0x3b, 0x5c, 0x22, 0xd3, 0x00, 0xcc, 0x50, 0xc9, 0x87,
	0x3a, 0xce, 0x46, 0x56, 0x54, 0xfc, 0x5f, 0x18, 0x75, 0xca, 0x54, 0x53, 0x69, 0xa8, 0xd2, 0xf2,
	0x48, 0x95, 0x34, 0x57, 0x22, 0x67, 0xc5, 0xf0, 0x16, 0xdb, 0x61, 0xa7, 0xe8, 0xd2, 0xaf, 0x5a,
	0x74, 0x23, 0xdb, 0x2e, 0xba, 0x67, 0x08, 0x0e, 0x76, 0x8f, 0x10, 0x4b, 0x48, 0x0d, 0xf6, 0xd2,
	0x84, 0xd8, 0x1d, 0x99, 0x70, 0x19, 0x9e, 0x88, 0x77, 0xa0, 0xcb, 0xaa, 0xf2, 0x1e, 0x2b, 0x5e,
	0x60, 0x70, 0x15, 0xfa, 0x08, 0xc1, 0xfe, 0x5e, 0xbe, 0x95, 0xba, 0xfb, 0xe6, 0xd8, 0x4e, 0x48,
	0xce, 0xad, 0x0d, 0xbe, 0xf6, 0x12, 0xbd, 0x09, 0x57, 0x73, 0x6a, 0x5b, 0xd5, 0x7c, 0x16, 0xe6,
	0xba, 0xa4, 0xaa, 0xdb, 0x96, 0xfb, 0x0c, 0xc1, 0xa1, 0x9e, 0xaa, 0x2c, 0x18, 0x1f, 0x40, 0x2e,
	0x29, 0x18, 0x5b, 0x89, 0xc5, 0xee, 0xf8, 0x58, 0x88, 0xdf, 0x20, 0xd8, 0x4d, 0xa1, 0xac, 0x9a,
	0x8e, 0x12, 0xcf, 0x42, 0x92, 0x0f, 0xa2, 0x3c, 0x70, 0x1b, 0x87, 0x1d, 0x47, 0xfc, 0x56, 0x1a,
	0x54, 0x0b, 0xae, 0x43, 0xd6, 0x87, 0xf5, 0x86, 0x6e, 0x9b, 0xcd, 0x90, 0x65, 0x14, 0xb1, 0xcc,
	0x61, 0x4e, 0x05, 0x31, 0x4f, 0xc1, 0x88, 0xa6, 0xab, 0x64, 0x83, 0xc2, 0x49, 0xcb, 0xee, 0x0f,
	0x96, 0x99, 0xb4, 0x9f, 0x99, 0xfb, 0xde, 0x65, 0x81, 0x0f, 0x07, 0xcb, 0xc4, 0x29, 0x48, 0x5f,
	0xef, 0xb0, 0x96, 0x98, 0x63, 0x31, 0x88, 0x55, 0xa6, 0xd2, 0x83, 0xdb, 0x39, 0x7f, 0x71, 0xec,
	0x7e, 0xb9, 0xb9, 0xe4, 0xba, 0xd5, 0x3b, 0x57, 0xe1, 0xe3, 0x36, 0x15, 0x3d, 0x6e, 0x4f, 0xc1,
	0x0e, 0xa7, 0x9f, 0x72, 0x5d, 0x73, 0x6f, 0xec, 0x99, 0x4f, 0x5b, 0xe6, 0x58, 0xd5, 0xfd, 0x08,
	0xb7, 0xdb, 0xf4, 0x2b, 0xb0, 0xcf, 0x91, 0x10, 0x35, 0x2f, 0xc1, 0xde, 0x18, 0x4f, 0x59, 0x1a,
	0x96, 0x61, 0x87, 0xc9, 0xbe, 0xd9, 0x06, 0xe8, 0x97, 0x40, 0xfa, 0x7a, 0xe2, 0xe7, 0x29, 0x66,
	0x61, 0x95, 0xe8, 0x6b, 0x76, 0xd9, 0x95, 0xe3, 0xe9, 0xb7, 0x49, 0xca, 0x5a, 0x5d, 0x23, 0xba,
	0x1d, 0xa0, 0xdf, 0xfe, 0x28, 0x63, 0x29, 0x40, 0xad, 0xf6, 0xcf, 0xbe, 0xc7, 0xe9, 0x14, 0x75,
	0x5f, 0x84, 0xc9, 0x9a, 0xa6, 0xdb, 0x25, 0x77, 0x05, 0x4d, 0x65, 0x65, 0x99, 0x71, 0x06, 0x2f,
	0x3b, 0x63, 0x2b, 0x2a, 0xde, 0x0f, 0x19, 0x93, 0xd8, 0x0d, 0x53, 0x77, 0x41, 0xa4, 0xdd, 0x6a,
	0x77, 0x87, 0x62, 0x2e, 0x8e, 0xdb, 0x3f, 0x75, 0x7e, 0x44, 0x8c, 0x45, 0x86, 0xc2, 0xc1, 0x22,
	0xfe, 0x0e, 0x64, 0x37, 0xe9, 0x44, 0xc9, 0xa3, 0xb9, 0x5b, 0x23, 0xee, 0x93, 0x9b, 0xfc, 0xb2,
	0x03, 0xdb, 0x11, 0x8b, 0xbf, 0xed, 0x84, 0x11, 0x0a, 0x1b, 0xaf, 0xc3, 0xa8, 0xfb, 0x00, 0x80,
	0x0f, 0x46, 0x31, 0x45, 0xdf, 0x19, 0x84, 0xd9, 0x1e, 0x52, 0xac, 0x4c, 0x0a, 0x9f, 0x3c, 0xf9,
	0xf3, 0xcb, 0x94, 0x80, 0x73, 0x52, 0xc2, 0x5b, 0x07, 0xfe, 0x09, 0x41, 0x86, 0xbb, 0x6d, 0xe3,
	0xc3, 0x09, 0x0b, 0x47, 0xdf, 0x1e, 0x84, 0x85, 0x7e, 0x44, 0x19, 0x90, 0x77, 0x29, 0x90, 0x15,
	0x7c, 0x4d, 0x8a, 0x7b, 0xb0, 0xf1, 0x0f, 0x47, 0xa9, 0xc5, 0x6f, 0xf5, 0xb6, 0xd4, 0x72, 0xd9,
	0x49, 0x5b, 0x6a, 0x05, 0xaf, 0x93, 0x6d, 0xfc, 0x00, 0x41, 0x36, 0x78, 0x09, 0xc0, 0x47, 0x7b,
	0xe2, 0xe1, 0x8e, 0x34, 0xe1, 0x58, 0x9f, 0xd2, 0xcc, 0x81, 0xe3, 0xd4, 0x81, 0x05, 0x3c, 0xdf,
	0xd5, 0x81, 0xd2, 0x9a, 0xc3, 0xea, 0xa4, 0x96, 0xa6, 0xb6, 0xf1, 0xd7, 0xc8, 0x6d, 0xb7, 0x58,
	0x4c, 0xb6, 0xe4, 0xc7, 0x72, 0xa6, 0xab, 0x0c, 0xc3, 0xf0, 0x26, 0xc5, 0xb0, 0x8c, 0x5f, 0x8f,
	0xc5, 0x60, 0x45, 0x82, 0x24, 0xb5, 0xb8, 0xfe, 0xd6, 0x96, 0x5a, 0x5e, 0x7b, 0x6a, 0xe3, 0x6f,
	0x11, 0x8c, 0xb1, 0x57, 0x03, 0x3c, 0x9b, 0x6c, 0x9a, 0x8f, 0xd7, 0x5c, 0x2f, 0x31, 0x06, 0x72,
	0x89, 0x82, 0xbc, 0x80, 0xcf, 0xc5, 0x07, 0xaa, 0x13, 0xa0, 0x64, 0x74, 0xbf, 0x20, 0xd8, 0x15,
	0xb9, 0xb3, 0x60, 0x29, 0x01, 0x40, 0xd2, 0x3d, 0x4d, 0x38, 0xde, 0xbf, 0x02, 0xc3, 0x7e, 0x85,
	0x62, 0xbf, 0x84, 0x5f, 0x8b, 0x62, 0xb7, 0x3c, 0xa5, 0x9e, 0xb5, 0x8a, 0x7f, 0x46, 0x30, 0x15,
	0x77, 0x17, 0xc1, 0x8b, 0x7d, 0x02, 0xe2, 0xc3, 0x7e, 0x72, 0x4b, 0x3a, 0xcc, 0x8f, 0x33, 0xd4,
	0x8f, 0xe3, 0xb8, 0xd8, 0x87, 0x1f, 0x7c, 0xc9, 0x3e, 0x45, 0xb0, 0x27, 0x81, 0xdb, 0xe2, 0xd3,
	0x5d, 0x80, 0x24, 0xdf, 0x84, 0x84, 0x33, 0x5b, 0x55, 0x63, 0x2e, 0xc8, 0xd4, 0x85, 0xb7, 0xf1,
	0x5b, 0xf1, 0x2e, 0xc4, 0xb1, 0xc9, 0x70, 0x41, 0xb9, 0x57, 0x2c, 0x2e, 0x31, 0x8f, 0x11, 0x08,
	0xc9, 0x84, 0x15, 0x9f, 0xdd, 0x12, 0x54, 0x3e, 0x49, 0xe7, 0xb6, 0xa1, 0xc9, 0xfc, 0xbc, 0x48,
	0xfd, 0xfc, 0x3f, 0x3e, 0xdd, 0xbf, 0x9f, 0x7c, 0xc6, 0xbe, 0x43, 0x00, 0x1d, 0xa6, 0x87, 0xe7,
	0x13, 0x80, 0x44, 0xb8, 0xb1, 0x70, 0xb8, 0x0f, 0xc9, 0xde, 0x10, 0x37, 0xcd, 0x12, 0x45, 0xe9,
	0xb6, 0x1f, 0xc6, 0xd8, 0xfc, 0x9d, 0xed, 0xf0, 0x84, 0x36, 0xfe, 0x0a, 0xc1, 0x04, 0xcf, 0x83,
	0xf0, 0x42, 0xb7, 0x4e, 0x12, 0xa4, 0x85, 0xc2, 0x91, 0xbe, 0x64, 0x19, 0xd0, 0x23, 0x14, 0xe8,
	0x2c, 0x9e, 0xf1, 0x81, 0xde, 0x3b, 0x15, 0xe9, 0x3e, 0x1e, 0xad, 0x7c, 0x82, 0x60, 0x32, 0xc0,
	0x16, 0x70, 0x92, 0xad, 0x38, 0x8a, 0x25, 0x1c, 0xed, 0x4f, 0x98, 0x21, 0xab, 0x50, 0x64, 0x0a,
	0x2e, 0x75, 0x90, 0x9d, 0xe6, 0xa2, 0x18, 0xe0, 0x26, 0x52, 0x2b, 0xc8, 0xdd, 0xda, 0x52, 0xab,
	0xc3, 0xd2, 0xda, 0x52, 0x2b, 0xc0, 0xba, 0xda, 0x8e, 0xb4, 0xcf, 0xb0, 0xda, 0xcb, 0x37, 0x1f,
	0x3d, 0xcf, 0xa3, 0xc7, 0xcf, 0xf3, 0xe8, 0x8f, 0xe7, 0x79, 0xf4, 0xc5, 0x8b, 0xfc, 0xd0, 0xe3,
	0x17, 0xf9, 0xa1, 0xdf, 0x5f, 0xe4, 0x87, 0x56, 0xcf, 0x55, 0x34, 0xfb, 0x76, 0x63, 0xad, 0x58,
	0x36, 0x6a, 0xd2, 0x2a, 0xd1, 0x4d, 0xa3, 0x5c, 0x3d, 0x76, 0xd5, 0x68, 0xe8, 0x2a, 0xa5, 0x22,
	0x3c, 0xae, 0x8d, 0x0e, 0x32, 0xc7, 0xa4, 0xb5, 0x36, 0x4a, 0xff, 0xe3, 0x71, 0xf2, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0f, 0xb0, 0x78, 0x21, 0x10, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error)
	// Queries a list of KeyRequestByID items.
	KeyRequestByID(ctx context.Context, in *QueryKeyRequestByIDRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIDResponse, error)
	// Queries a list of Keys items.
	Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error)
	// Queries a list of KeyByID items.
	KeyByID(ctx context.Context, in *QueryKeyByIDRequest, opts ...grpc.CallOption) (*QueryKeyByIDResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error)
	// Queries a list of SignatureRequestByID items.
	SignatureRequestByID(ctx context.Context, in *QuerySignatureRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIDResponse, error)
	// Queries a list of SignTransactionRequests items.
	SignTransactionRequests(ctx context.Context, in *QuerySignTransactionRequestsRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestsResponse, error)
	// Queries a list of SignTransactionRequestByID items.
	SignTransactionRequestByID(ctx context.Context, in *QuerySignTransactionRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestByIDResponse, error)
	// Queries a list of ZrSignKeys items.
	ZrSignKeys(ctx context.Context, in *QueryZrSignKeysRequest, opts ...grpc.CallOption) (*QueryZrSignKeysResponse, error)
	// Queries a list of KeyByAddress items.
	KeyByAddress(ctx context.Context, in *QueryKeyByAddressRequest, opts ...grpc.CallOption) (*QueryKeyByAddressResponse, error)
	// Queries a list of ZenbtcWallets items.
	ZenbtcWallets(ctx context.Context, in *QueryZenbtcWalletsRequest, opts ...grpc.CallOption) (*QueryZenbtcWalletsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error) {
	out := new(QueryKeyRequestsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/KeyRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequestByID(ctx context.Context, in *QueryKeyRequestByIDRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIDResponse, error) {
	out := new(QueryKeyRequestByIDResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/KeyRequestByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error) {
	out := new(QueryKeysResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/Keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyByID(ctx context.Context, in *QueryKeyByIDRequest, opts ...grpc.CallOption) (*QueryKeyByIDResponse, error) {
	out := new(QueryKeyByIDResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/KeyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error) {
	out := new(QuerySignatureRequestsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/SignatureRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequestByID(ctx context.Context, in *QuerySignatureRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIDResponse, error) {
	out := new(QuerySignatureRequestByIDResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/SignatureRequestByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignTransactionRequests(ctx context.Context, in *QuerySignTransactionRequestsRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestsResponse, error) {
	out := new(QuerySignTransactionRequestsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/SignTransactionRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignTransactionRequestByID(ctx context.Context, in *QuerySignTransactionRequestByIDRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestByIDResponse, error) {
	out := new(QuerySignTransactionRequestByIDResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/SignTransactionRequestByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZrSignKeys(ctx context.Context, in *QueryZrSignKeysRequest, opts ...grpc.CallOption) (*QueryZrSignKeysResponse, error) {
	out := new(QueryZrSignKeysResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/ZrSignKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyByAddress(ctx context.Context, in *QueryKeyByAddressRequest, opts ...grpc.CallOption) (*QueryKeyByAddressResponse, error) {
	out := new(QueryKeyByAddressResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/KeyByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZenbtcWallets(ctx context.Context, in *QueryZenbtcWalletsRequest, opts ...grpc.CallOption) (*QueryZenbtcWalletsResponse, error) {
	out := new(QueryZenbtcWalletsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.treasury.Query/ZenbtcWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(context.Context, *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error)
	// Queries a list of KeyRequestByID items.
	KeyRequestByID(context.Context, *QueryKeyRequestByIDRequest) (*QueryKeyRequestByIDResponse, error)
	// Queries a list of Keys items.
	Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error)
	// Queries a list of KeyByID items.
	KeyByID(context.Context, *QueryKeyByIDRequest) (*QueryKeyByIDResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(context.Context, *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error)
	// Queries a list of SignatureRequestByID items.
	SignatureRequestByID(context.Context, *QuerySignatureRequestByIDRequest) (*QuerySignatureRequestByIDResponse, error)
	// Queries a list of SignTransactionRequests items.
	SignTransactionRequests(context.Context, *QuerySignTransactionRequestsRequest) (*QuerySignTransactionRequestsResponse, error)
	// Queries a list of SignTransactionRequestByID items.
	SignTransactionRequestByID(context.Context, *QuerySignTransactionRequestByIDRequest) (*QuerySignTransactionRequestByIDResponse, error)
	// Queries a list of ZrSignKeys items.
	ZrSignKeys(context.Context, *QueryZrSignKeysRequest) (*QueryZrSignKeysResponse, error)
	// Queries a list of KeyByAddress items.
	KeyByAddress(context.Context, *QueryKeyByAddressRequest) (*QueryKeyByAddressResponse, error)
	// Queries a list of ZenbtcWallets items.
	ZenbtcWallets(context.Context, *QueryZenbtcWalletsRequest) (*QueryZenbtcWalletsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) KeyRequests(ctx context.Context, req *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequests not implemented")
}
func (*UnimplementedQueryServer) KeyRequestByID(ctx context.Context, req *QueryKeyRequestByIDRequest) (*QueryKeyRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequestByID not implemented")
}
func (*UnimplementedQueryServer) Keys(ctx context.Context, req *QueryKeysRequest) (*QueryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (*UnimplementedQueryServer) KeyByID(ctx context.Context, req *QueryKeyByIDRequest) (*QueryKeyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyByID not implemented")
}
func (*UnimplementedQueryServer) SignatureRequests(ctx context.Context, req *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequests not implemented")
}
func (*UnimplementedQueryServer) SignatureRequestByID(ctx context.Context, req *QuerySignatureRequestByIDRequest) (*QuerySignatureRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequestByID not implemented")
}
func (*UnimplementedQueryServer) SignTransactionRequests(ctx context.Context, req *QuerySignTransactionRequestsRequest) (*QuerySignTransactionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionRequests not implemented")
}
func (*UnimplementedQueryServer) SignTransactionRequestByID(ctx context.Context, req *QuerySignTransactionRequestByIDRequest) (*QuerySignTransactionRequestByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionRequestByID not implemented")
}
func (*UnimplementedQueryServer) ZrSignKeys(ctx context.Context, req *QueryZrSignKeysRequest) (*QueryZrSignKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZrSignKeys not implemented")
}
func (*UnimplementedQueryServer) KeyByAddress(ctx context.Context, req *QueryKeyByAddressRequest) (*QueryKeyByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyByAddress not implemented")
}
func (*UnimplementedQueryServer) ZenbtcWallets(ctx context.Context, req *QueryZenbtcWalletsRequest) (*QueryZenbtcWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZenbtcWallets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/KeyRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequests(ctx, req.(*QueryKeyRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/KeyRequestByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequestByID(ctx, req.(*QueryKeyRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keys(ctx, req.(*QueryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/KeyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyByID(ctx, req.(*QueryKeyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/SignatureRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequests(ctx, req.(*QuerySignatureRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/SignatureRequestByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequestByID(ctx, req.(*QuerySignatureRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignTransactionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignTransactionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignTransactionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/SignTransactionRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignTransactionRequests(ctx, req.(*QuerySignTransactionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignTransactionRequestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignTransactionRequestByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignTransactionRequestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/SignTransactionRequestByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignTransactionRequestByID(ctx, req.(*QuerySignTransactionRequestByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZrSignKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZrSignKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZrSignKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/ZrSignKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZrSignKeys(ctx, req.(*QueryZrSignKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/KeyByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyByAddress(ctx, req.(*QueryKeyByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZenbtcWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZenbtcWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZenbtcWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.treasury.Query/ZenbtcWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZenbtcWallets(ctx, req.(*QueryZenbtcWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.treasury.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "KeyRequests",
			Handler:    _Query_KeyRequests_Handler,
		},
		{
			MethodName: "KeyRequestByID",
			Handler:    _Query_KeyRequestByID_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Query_Keys_Handler,
		},
		{
			MethodName: "KeyByID",
			Handler:    _Query_KeyByID_Handler,
		},
		{
			MethodName: "SignatureRequests",
			Handler:    _Query_SignatureRequests_Handler,
		},
		{
			MethodName: "SignatureRequestByID",
			Handler:    _Query_SignatureRequestByID_Handler,
		},
		{
			MethodName: "SignTransactionRequests",
			Handler:    _Query_SignTransactionRequests_Handler,
		},
		{
			MethodName: "SignTransactionRequestByID",
			Handler:    _Query_SignTransactionRequestByID_Handler,
		},
		{
			MethodName: "ZrSignKeys",
			Handler:    _Query_ZrSignKeys_Handler,
		},
		{
			MethodName: "KeyByAddress",
			Handler:    _Query_KeyByAddress_Handler,
		},
		{
			MethodName: "ZenbtcWallets",
			Handler:    _Query_ZenbtcWallets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/treasury/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyRequests) > 0 {
		for iNdEx := len(m.KeyRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WalletType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WalletType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyAndWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyAndWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyAndWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyRequest != nil {
		{
			size, err := m.KeyRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignRequests) > 0 {
		for iNdEx := len(m.SignRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignRequest != nil {
		{
			size, err := m.SignRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignTransactionRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignTransactionRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignTransactionRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.WalletType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignTransactionRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignTransactionRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignTransactionRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignTransactionRequests) > 0 {
		for iNdEx := len(m.SignTransactionRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignTransactionRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignTransactionRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignTransactionRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignTransactionRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignRequest != nil {
		{
			size, err := m.SignRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SignTransactionRequests != nil {
		{
			size, err := m.SignTransactionRequests.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignTransactionRequestByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignTransactionRequestByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignTransactionRequestByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignTransactionRequestByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignTransactionRequestByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignTransactionRequestByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignTransactionRequest != nil {
		{
			size, err := m.SignTransactionRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZrSignKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZrSignKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZrSignKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WalletType) > 0 {
		i -= len(m.WalletType)
		copy(dAtA[i:], m.WalletType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZrSignKeyEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZrSignKeyEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZrSignKeyEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletType) > 0 {
		i -= len(m.WalletType)
		copy(dAtA[i:], m.WalletType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZrSignKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZrSignKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZrSignKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.WalletType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZenbtcWalletsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZenbtcWalletsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZenbtcWalletsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReturnAddr) > 0 {
		i -= len(m.ReturnAddr)
		copy(dAtA[i:], m.ReturnAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReturnAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.MintChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MintChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZenbtcWalletsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZenbtcWalletsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZenbtcWalletsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZenbtcWallets) > 0 {
		for iNdEx := len(m.ZenbtcWallets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ZenbtcWallets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKeyRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyRequests) > 0 {
		for _, e := range m.KeyRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.WalletType != 0 {
		n += 1 + sovQuery(uint64(m.WalletType))
	}
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKeyByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Wallets) > 0 {
		for _, e := range m.Wallets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.WalletType != 0 {
		n += 1 + sovQuery(uint64(m.WalletType))
	}
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *KeyAndWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Wallets) > 0 {
		for _, e := range m.Wallets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *WalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyRequestByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryKeyRequestByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyRequest != nil {
		l = m.KeyRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignatureRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignatureRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignRequests) > 0 {
		for _, e := range m.SignRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignatureRequestByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QuerySignatureRequestByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignRequest != nil {
		l = m.SignRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignTransactionRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	if m.KeyId != 0 {
		n += 1 + sovQuery(uint64(m.KeyId))
	}
	if m.WalletType != 0 {
		n += 1 + sovQuery(uint64(m.WalletType))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignTransactionRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignTransactionRequests) > 0 {
		for _, e := range m.SignTransactionRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignTransactionRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignTransactionRequests != nil {
		l = m.SignTransactionRequests.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SignRequest != nil {
		l = m.SignRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignTransactionRequestByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QuerySignTransactionRequestByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignTransactionRequest != nil {
		l = m.SignTransactionRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZrSignKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ZrSignKeyEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryZrSignKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.KeyType != 0 {
		n += 1 + sovQuery(uint64(m.KeyType))
	}
	if m.WalletType != 0 {
		n += 1 + sovQuery(uint64(m.WalletType))
	}
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKeyByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZenbtcWalletsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovQuery(uint64(m.ChainType))
	}
	if m.MintChainId != 0 {
		n += 1 + sovQuery(uint64(m.MintChainId))
	}
	l = len(m.ReturnAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZenbtcWalletsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ZenbtcWallets) > 0 {
		for _, e := range m.ZenbtcWallets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= KeyRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRequests = append(m.KeyRequests, &KeyReqResponse{})
			if err := m.KeyRequests[len(m.KeyRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &KeyResponse{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, &WalletResponse{})
			if err := m.Wallets[len(m.Wallets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &KeyAndWalletResponse{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyAndWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyAndWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyAndWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &KeyResponse{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, &WalletResponse{})
			if err := m.Wallets[len(m.Wallets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyRequest == nil {
				m.KeyRequest = &KeyReqResponse{}
			}
			if err := m.KeyRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SignRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignRequests = append(m.SignRequests, &SignReqResponse{})
			if err := m.SignRequests[len(m.SignRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignRequest == nil {
				m.SignRequest = &SignReqResponse{}
			}
			if err := m.SignRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignTransactionRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignTransactionRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignTransactionRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SignRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignTransactionRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignTransactionRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignTransactionRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignTransactionRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignTransactionRequests = append(m.SignTransactionRequests, &SignTransactionRequestsResponse{})
			if err := m.SignTransactionRequests[len(m.SignTransactionRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignTransactionRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignTransactionRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignTransactionRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignTransactionRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignTransactionRequests == nil {
				m.SignTransactionRequests = &SignTxReqResponse{}
			}
			if err := m.SignTransactionRequests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignRequest == nil {
				m.SignRequest = &SignReqResponse{}
			}
			if err := m.SignRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignTransactionRequestByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignTransactionRequestByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignTransactionRequestByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignTransactionRequestByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignTransactionRequestByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignTransactionRequestByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignTransactionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignTransactionRequest == nil {
				m.SignTransactionRequest = &SignTxReqResponse{}
			}
			if err := m.SignTransactionRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZrSignKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZrSignKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZrSignKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZrSignKeyEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZrSignKeyEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZrSignKeyEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZrSignKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZrSignKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZrSignKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &ZrSignKeyEntry{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &KeyAndWalletResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZenbtcWalletsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZenbtcWalletsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZenbtcWalletsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintChainId", wireType)
			}
			m.MintChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZenbtcWalletsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZenbtcWalletsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZenbtcWalletsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcWallets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZenbtcWallets = append(m.ZenbtcWallets, &KeyAndWalletResponse{})
			if err := m.ZenbtcWallets[len(m.ZenbtcWallets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
