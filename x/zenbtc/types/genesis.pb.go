// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/zenbtc/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the zenbtc module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// lock_transactions defines the lock transactions of the module.
	LockTransactions map[string]LockTransaction `protobuf:"bytes,2,rep,name=lock_transactions,json=lockTransactions,proto3" json:"lock_transactions" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// pending_mint_transactions defines the pending mint transactions of the module.
	PendingMintTransactions map[uint64]PendingMintTransaction `protobuf:"bytes,3,rep,name=pending_mint_transactions,json=pendingMintTransactions,proto3" json:"pending_mint_transactions" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// first_pending_eth_mint_transaction defines the first pending Ethereum mint transaction of the module.
	FirstPendingEthMintTransaction uint64 `protobuf:"varint,4,opt,name=first_pending_eth_mint_transaction,json=firstPendingEthMintTransaction,proto3" json:"first_pending_eth_mint_transaction,omitempty"`
	// first_pending_sol_mint_transaction defines the first pending Solana mint transaction of the module.
	FirstPendingSolMintTransaction uint64 `protobuf:"varint,5,opt,name=first_pending_sol_mint_transaction,json=firstPendingSolMintTransaction,proto3" json:"first_pending_sol_mint_transaction,omitempty"`
	// pending_mint_transaction_count defines the count of pending mint transactions of the module.
	PendingMintTransactionCount uint64 `protobuf:"varint,6,opt,name=pending_mint_transaction_count,json=pendingMintTransactionCount,proto3" json:"pending_mint_transaction_count,omitempty"`
	// burn_events defines the burn events of the module.
	BurnEvents map[uint64]BurnEvent `protobuf:"bytes,7,rep,name=burn_events,json=burnEvents,proto3" json:"burn_events" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// first_pending_burn_event defines the first pending burn event of the module.
	FirstPendingBurnEvent uint64 `protobuf:"varint,8,opt,name=first_pending_burn_event,json=firstPendingBurnEvent,proto3" json:"first_pending_burn_event,omitempty"`
	// burn_event_count defines the count of burn events of the module.
	BurnEventCount uint64 `protobuf:"varint,9,opt,name=burn_event_count,json=burnEventCount,proto3" json:"burn_event_count,omitempty"`
	// redemptions defines the redemptions of the module.
	Redemptions map[uint64]Redemption `protobuf:"bytes,10,rep,name=redemptions,proto3" json:"redemptions" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// first_pending_redemption defines the first pending redemption of the module.
	FirstPendingRedemption uint64 `protobuf:"varint,11,opt,name=first_pending_redemption,json=firstPendingRedemption,proto3" json:"first_pending_redemption,omitempty"`
	// first_redemption_awaiting_sign defines the first redemption awaiting sign of the module.
	FirstRedemptionAwaitingSign uint64 `protobuf:"varint,12,opt,name=first_redemption_awaiting_sign,json=firstRedemptionAwaitingSign,proto3" json:"first_redemption_awaiting_sign,omitempty"`
	// supply defines the supply of the module.
	Supply Supply `protobuf:"bytes,13,opt,name=supply,proto3" json:"supply"`
	// first_pending_stake_transaction defines the first pending stake transaction of the module.
	FirstPendingStakeTransaction uint64 `protobuf:"varint,14,opt,name=first_pending_stake_transaction,json=firstPendingStakeTransaction,proto3" json:"first_pending_stake_transaction,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa21ece0a519645b, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetLockTransactions() map[string]LockTransaction {
	if m != nil {
		return m.LockTransactions
	}
	return nil
}

func (m *GenesisState) GetPendingMintTransactions() map[uint64]PendingMintTransaction {
	if m != nil {
		return m.PendingMintTransactions
	}
	return nil
}

func (m *GenesisState) GetFirstPendingEthMintTransaction() uint64 {
	if m != nil {
		return m.FirstPendingEthMintTransaction
	}
	return 0
}

func (m *GenesisState) GetFirstPendingSolMintTransaction() uint64 {
	if m != nil {
		return m.FirstPendingSolMintTransaction
	}
	return 0
}

func (m *GenesisState) GetPendingMintTransactionCount() uint64 {
	if m != nil {
		return m.PendingMintTransactionCount
	}
	return 0
}

func (m *GenesisState) GetBurnEvents() map[uint64]BurnEvent {
	if m != nil {
		return m.BurnEvents
	}
	return nil
}

func (m *GenesisState) GetFirstPendingBurnEvent() uint64 {
	if m != nil {
		return m.FirstPendingBurnEvent
	}
	return 0
}

func (m *GenesisState) GetBurnEventCount() uint64 {
	if m != nil {
		return m.BurnEventCount
	}
	return 0
}

func (m *GenesisState) GetRedemptions() map[uint64]Redemption {
	if m != nil {
		return m.Redemptions
	}
	return nil
}

func (m *GenesisState) GetFirstPendingRedemption() uint64 {
	if m != nil {
		return m.FirstPendingRedemption
	}
	return 0
}

func (m *GenesisState) GetFirstRedemptionAwaitingSign() uint64 {
	if m != nil {
		return m.FirstRedemptionAwaitingSign
	}
	return 0
}

func (m *GenesisState) GetSupply() Supply {
	if m != nil {
		return m.Supply
	}
	return Supply{}
}

func (m *GenesisState) GetFirstPendingStakeTransaction() uint64 {
	if m != nil {
		return m.FirstPendingStakeTransaction
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "zrchain.zenbtc.GenesisState")
	proto.RegisterMapType((map[uint64]BurnEvent)(nil), "zrchain.zenbtc.GenesisState.BurnEventsEntry")
	proto.RegisterMapType((map[string]LockTransaction)(nil), "zrchain.zenbtc.GenesisState.LockTransactionsEntry")
	proto.RegisterMapType((map[uint64]PendingMintTransaction)(nil), "zrchain.zenbtc.GenesisState.PendingMintTransactionsEntry")
	proto.RegisterMapType((map[uint64]Redemption)(nil), "zrchain.zenbtc.GenesisState.RedemptionsEntry")
}

func init() { proto.RegisterFile("zrchain/zenbtc/genesis.proto", fileDescriptor_fa21ece0a519645b) }

var fileDescriptor_fa21ece0a519645b = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x6d, 0xf6, 0x0f, 0xe6, 0x8e, 0xd1, 0x59, 0x6c, 0x78, 0xdd, 0x94, 0x55, 0x3b, 0xa0, 0x0a,
	0x8d, 0x16, 0x0d, 0x21, 0x36, 0xc4, 0x85, 0x4d, 0x05, 0x09, 0x81, 0x34, 0xb5, 0x1c, 0xa6, 0x5d,
	0x2a, 0x37, 0x33, 0xa9, 0x69, 0x6a, 0x47, 0x89, 0x33, 0xe8, 0x4e, 0x7c, 0x04, 0x3e, 0x06, 0x47,
	0xbe, 0x01, 0xd7, 0x1d, 0x77, 0xe4, 0x84, 0xd0, 0x7a, 0xe0, 0x6b, 0xa0, 0xd8, 0x69, 0xe3, 0x38,
	0x59, 0x2f, 0x95, 0xd5, 0xf7, 0x7e, 0xef, 0xbd, 0x9f, 0xf3, 0xfb, 0x25, 0x60, 0xfb, 0x32, 0x70,
	0xfa, 0x98, 0xb2, 0xe6, 0x25, 0x61, 0x3d, 0xe1, 0x34, 0x5d, 0xc2, 0x48, 0x48, 0xc3, 0x86, 0x1f,
	0x70, 0xc1, 0xe1, 0x6a, 0x82, 0x36, 0x14, 0x5a, 0x5d, 0xc3, 0x43, 0xca, 0x78, 0x53, 0xfe, 0x2a,
	0x4a, 0xf5, 0x81, 0xcb, 0x5d, 0x2e, 0x8f, 0xcd, 0xf8, 0x94, 0xfc, 0xbb, 0x65, 0xc8, 0xfa, 0x38,
	0xc0, 0xc3, 0xf0, 0x16, 0x30, 0x8c, 0x7c, 0xdf, 0x1b, 0x25, 0x60, 0xcd, 0x00, 0x03, 0x72, 0x4e,
	0x86, 0xbe, 0xa0, 0x9c, 0x4d, 0xca, 0x37, 0x0d, 0xc6, 0x90, 0x32, 0xa1, 0xa0, 0xdd, 0x5f, 0x65,
	0xb0, 0xf2, 0x56, 0x75, 0xd0, 0x11, 0x58, 0x10, 0x78, 0x08, 0x96, 0x94, 0x35, 0xb2, 0x6a, 0x56,
	0xbd, 0xbc, 0xbf, 0xd1, 0xc8, 0x76, 0xd4, 0x38, 0x91, 0xe8, 0xd1, 0xf2, 0xd5, 0x9f, 0x9d, 0xd2,
	0x8f, 0x7f, 0x3f, 0x1f, 0x5b, 0xed, 0xa4, 0x00, 0x7e, 0x06, 0x6b, 0x1e, 0x77, 0x06, 0x5d, 0x11,
	0x60, 0x16, 0x62, 0x47, 0x26, 0x40, 0x73, 0xb5, 0xf9, 0x7a, 0x79, 0x7f, 0xdf, 0x54, 0xd1, 0x3d,
	0x1b, 0xef, 0xb9, 0x33, 0xf8, 0xa8, 0x15, 0xb5, 0x98, 0x08, 0x46, 0xba, 0x43, 0xc5, 0x33, 0x18,
	0xf0, 0x9b, 0x05, 0x36, 0x7d, 0xc2, 0xce, 0x29, 0x73, 0xbb, 0x71, 0x3b, 0x59, 0xd3, 0x79, 0x69,
	0x7a, 0x38, 0xd3, 0xf4, 0x44, 0x55, 0x7f, 0xa0, 0x4c, 0xcc, 0xf4, 0x7e, 0xe8, 0x17, 0x13, 0xe1,
	0x3b, 0xb0, 0xfb, 0x89, 0x06, 0xa1, 0xe8, 0x4e, 0x72, 0x10, 0xd1, 0xcf, 0x65, 0x41, 0x0b, 0x35,
	0xab, 0xbe, 0xd0, 0xb6, 0x25, 0x33, 0xb1, 0x6c, 0x89, 0xbe, 0x21, 0x96, 0xd7, 0x0a, 0xb9, 0x97,
	0xd7, 0x5a, 0xcc, 0x6b, 0x75, 0xb8, 0x67, 0x6a, 0x1d, 0x03, 0xfb, 0xb6, 0x9b, 0xe9, 0x3a, 0x3c,
	0x62, 0x02, 0x2d, 0x49, 0x9d, 0xad, 0xe2, 0xc6, 0x8e, 0x63, 0x0a, 0x3c, 0x05, 0xe5, 0x5e, 0x14,
	0xb0, 0x2e, 0xb9, 0x20, 0x4c, 0x84, 0xe8, 0x8e, 0xbc, 0xd0, 0xbd, 0x99, 0x17, 0x7a, 0x14, 0x05,
	0xac, 0x25, 0xe9, 0xb9, 0x3b, 0x04, 0xbd, 0x29, 0x06, 0x5f, 0x00, 0x94, 0x6d, 0x35, 0xf5, 0x41,
	0x77, 0x65, 0xb0, 0x75, 0xbd, 0xc1, 0xa9, 0x2a, 0xac, 0x83, 0x4a, 0x4a, 0x4d, 0x3a, 0x59, 0x96,
	0x05, 0xab, 0x53, 0x79, 0x15, 0xfe, 0x0c, 0x94, 0xb5, 0x25, 0x40, 0x40, 0x86, 0x7f, 0x32, 0x33,
	0x7c, 0x3b, 0xe5, 0xe7, 0xd2, 0xeb, 0x62, 0xf0, 0xc0, 0x8c, 0x9f, 0x82, 0xa8, 0x2c, 0xd3, 0x6c,
	0xe8, 0xf1, 0x53, 0xdd, 0xf8, 0xb9, 0xa8, 0xca, 0xb4, 0xa2, 0x8b, 0xbf, 0x60, 0x2a, 0xe4, 0xf3,
	0xa6, 0x2e, 0x43, 0x2b, 0xea, 0xb9, 0x48, 0x56, 0x5a, 0xf8, 0x3a, 0xe1, 0x74, 0xa8, 0xcb, 0xe2,
	0xf5, 0x54, 0xcb, 0x8f, 0xee, 0x15, 0xaf, 0x67, 0x47, 0xa2, 0x99, 0xf5, 0x54, 0x05, 0xb0, 0x05,
	0x76, 0x8c, 0x19, 0x13, 0x78, 0x40, 0x32, 0x03, 0xb6, 0x2a, 0x03, 0x6c, 0x67, 0x06, 0x2c, 0x26,
	0x69, 0xe3, 0x51, 0x3d, 0x07, 0xeb, 0x85, 0xfb, 0x0a, 0x2b, 0x60, 0x7e, 0x40, 0x46, 0xf2, 0xb5,
	0xb1, 0xdc, 0x8e, 0x8f, 0xf0, 0x39, 0x58, 0xbc, 0xc0, 0x5e, 0x44, 0xd0, 0x9c, 0xcc, 0xba, 0x63,
	0x66, 0x35, 0x74, 0xda, 0x8a, 0xfd, 0x72, 0xee, 0xc0, 0xaa, 0x06, 0x60, 0x7b, 0xd6, 0x82, 0xea,
	0x66, 0x0b, 0xca, 0xec, 0x55, 0xd6, 0xec, 0x51, 0xee, 0xbd, 0x55, 0x28, 0xa7, 0x7b, 0x9e, 0x82,
	0xfb, 0xc6, 0x0c, 0x17, 0xd8, 0x34, 0xb3, 0x36, 0x9b, 0xa6, 0xcd, 0x54, 0x41, 0x57, 0x3e, 0x03,
	0x15, 0x73, 0xc0, 0x0a, 0xa4, 0x9f, 0x66, 0xa5, 0xab, 0xa6, 0x74, 0x2a, 0xa1, 0x69, 0x1f, 0xbd,
	0xb9, 0xba, 0xb1, 0xad, 0xeb, 0x1b, 0xdb, 0xfa, 0x7b, 0x63, 0x5b, 0xdf, 0xc7, 0x76, 0xe9, 0x7a,
	0x6c, 0x97, 0x7e, 0x8f, 0xed, 0xd2, 0xd9, 0x9e, 0x4b, 0x45, 0x3f, 0xea, 0x35, 0x1c, 0x3e, 0x8c,
	0xdf, 0xfc, 0x01, 0x77, 0x06, 0x1e, 0xee, 0x85, 0x93, 0xaf, 0xc0, 0xd7, 0xc9, 0x41, 0x8c, 0x7c,
	0x12, 0xf6, 0x96, 0xe4, 0x07, 0xe1, 0xd9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0xf7, 0xcb,
	0x02, 0xe0, 0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FirstPendingStakeTransaction != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FirstPendingStakeTransaction))
		i--
		dAtA[i] = 0x70
	}
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.FirstRedemptionAwaitingSign != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FirstRedemptionAwaitingSign))
		i--
		dAtA[i] = 0x60
	}
	if m.FirstPendingRedemption != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FirstPendingRedemption))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Redemptions) > 0 {
		for k := range m.Redemptions {
			v := m.Redemptions[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.BurnEventCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BurnEventCount))
		i--
		dAtA[i] = 0x48
	}
	if m.FirstPendingBurnEvent != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FirstPendingBurnEvent))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BurnEvents) > 0 {
		for k := range m.BurnEvents {
			v := m.BurnEvents[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PendingMintTransactionCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PendingMintTransactionCount))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstPendingSolMintTransaction != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FirstPendingSolMintTransaction))
		i--
		dAtA[i] = 0x28
	}
	if m.FirstPendingEthMintTransaction != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.FirstPendingEthMintTransaction))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PendingMintTransactions) > 0 {
		for k := range m.PendingMintTransactions {
			v := m.PendingMintTransactions[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LockTransactions) > 0 {
		for k := range m.LockTransactions {
			v := m.LockTransactions[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.LockTransactions) > 0 {
		for k, v := range m.LockTransactions {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.PendingMintTransactions) > 0 {
		for k, v := range m.PendingMintTransactions {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.FirstPendingEthMintTransaction != 0 {
		n += 1 + sovGenesis(uint64(m.FirstPendingEthMintTransaction))
	}
	if m.FirstPendingSolMintTransaction != 0 {
		n += 1 + sovGenesis(uint64(m.FirstPendingSolMintTransaction))
	}
	if m.PendingMintTransactionCount != 0 {
		n += 1 + sovGenesis(uint64(m.PendingMintTransactionCount))
	}
	if len(m.BurnEvents) > 0 {
		for k, v := range m.BurnEvents {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.FirstPendingBurnEvent != 0 {
		n += 1 + sovGenesis(uint64(m.FirstPendingBurnEvent))
	}
	if m.BurnEventCount != 0 {
		n += 1 + sovGenesis(uint64(m.BurnEventCount))
	}
	if len(m.Redemptions) > 0 {
		for k, v := range m.Redemptions {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.FirstPendingRedemption != 0 {
		n += 1 + sovGenesis(uint64(m.FirstPendingRedemption))
	}
	if m.FirstRedemptionAwaitingSign != 0 {
		n += 1 + sovGenesis(uint64(m.FirstRedemptionAwaitingSign))
	}
	l = m.Supply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.FirstPendingStakeTransaction != 0 {
		n += 1 + sovGenesis(uint64(m.FirstPendingStakeTransaction))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockTransactions == nil {
				m.LockTransactions = make(map[string]LockTransaction)
			}
			var mapkey string
			mapvalue := &LockTransaction{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LockTransaction{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LockTransactions[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingMintTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingMintTransactions == nil {
				m.PendingMintTransactions = make(map[uint64]PendingMintTransaction)
			}
			var mapkey uint64
			mapvalue := &PendingMintTransaction{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PendingMintTransaction{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PendingMintTransactions[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPendingEthMintTransaction", wireType)
			}
			m.FirstPendingEthMintTransaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPendingEthMintTransaction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPendingSolMintTransaction", wireType)
			}
			m.FirstPendingSolMintTransaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPendingSolMintTransaction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingMintTransactionCount", wireType)
			}
			m.PendingMintTransactionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingMintTransactionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BurnEvents == nil {
				m.BurnEvents = make(map[uint64]BurnEvent)
			}
			var mapkey uint64
			mapvalue := &BurnEvent{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BurnEvent{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BurnEvents[mapkey] = *mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPendingBurnEvent", wireType)
			}
			m.FirstPendingBurnEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPendingBurnEvent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnEventCount", wireType)
			}
			m.BurnEventCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurnEventCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redemptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Redemptions == nil {
				m.Redemptions = make(map[uint64]Redemption)
			}
			var mapkey uint64
			mapvalue := &Redemption{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Redemption{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Redemptions[mapkey] = *mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPendingRedemption", wireType)
			}
			m.FirstPendingRedemption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPendingRedemption |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstRedemptionAwaitingSign", wireType)
			}
			m.FirstRedemptionAwaitingSign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstRedemptionAwaitingSign |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPendingStakeTransaction", wireType)
			}
			m.FirstPendingStakeTransaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPendingStakeTransaction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
