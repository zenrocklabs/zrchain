// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/zenex/swap.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/Zenrock-Foundation/zrchain/v6/x/validation/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SwapStatus defines the status of the swap.
type SwapStatus int32

const (
	// The swap status is unspecified (all swaps will be returned)
	SwapStatus_SWAP_STATUS_UNSPECIFIED SwapStatus = 0
	// The swap status is requested
	SwapStatus_SWAP_STATUS_REQUESTED SwapStatus = 1
	// The swap status is transfer requested
	SwapStatus_SWAP_STATUS_SWAP_TRANSFER_REQUESTED SwapStatus = 2
	// The swap status is rejected
	SwapStatus_SWAP_STATUS_REJECTED SwapStatus = 3
	// The swap status is completed
	SwapStatus_SWAP_STATUS_COMPLETED SwapStatus = 4
)

var SwapStatus_name = map[int32]string{
	0: "SWAP_STATUS_UNSPECIFIED",
	1: "SWAP_STATUS_REQUESTED",
	2: "SWAP_STATUS_SWAP_TRANSFER_REQUESTED",
	3: "SWAP_STATUS_REJECTED",
	4: "SWAP_STATUS_COMPLETED",
}

var SwapStatus_value = map[string]int32{
	"SWAP_STATUS_UNSPECIFIED":             0,
	"SWAP_STATUS_REQUESTED":               1,
	"SWAP_STATUS_SWAP_TRANSFER_REQUESTED": 2,
	"SWAP_STATUS_REJECTED":                3,
	"SWAP_STATUS_COMPLETED":               4,
}

func (x SwapStatus) String() string {
	return proto.EnumName(SwapStatus_name, int32(x))
}

func (SwapStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_776559c41e734f0c, []int{0}
}

// Swap objects defines a cross-chain swap operation
type Swap struct {
	Creator        string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SwapId         uint64     `protobuf:"varint,2,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	Status         SwapStatus `protobuf:"varint,3,opt,name=status,proto3,enum=zrchain.zenex.SwapStatus" json:"status,omitempty"`
	Pair           string     `protobuf:"bytes,4,opt,name=pair,proto3" json:"pair,omitempty"`
	Data           *SwapData  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	RockKeyId      uint64     `protobuf:"varint,6,opt,name=rock_key_id,json=rockKeyId,proto3" json:"rock_key_id,omitempty"`
	BtcKeyId       uint64     `protobuf:"varint,7,opt,name=btc_key_id,json=btcKeyId,proto3" json:"btc_key_id,omitempty"`
	BtcChangeKeyId uint64     `protobuf:"varint,8,opt,name=btc_change_key_id,json=btcChangeKeyId,proto3" json:"btc_change_key_id,omitempty"`
	Workspace      string     `protobuf:"bytes,9,opt,name=workspace,proto3" json:"workspace,omitempty"`
	SignTxId       uint64     `protobuf:"varint,10,opt,name=sign_tx_id,json=signTxId,proto3" json:"sign_tx_id,omitempty"`
}

func (m *Swap) Reset()         { *m = Swap{} }
func (m *Swap) String() string { return proto.CompactTextString(m) }
func (*Swap) ProtoMessage()    {}
func (*Swap) Descriptor() ([]byte, []int) {
	return fileDescriptor_776559c41e734f0c, []int{0}
}
func (m *Swap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Swap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Swap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Swap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Swap.Merge(m, src)
}
func (m *Swap) XXX_Size() int {
	return m.Size()
}
func (m *Swap) XXX_DiscardUnknown() {
	xxx_messageInfo_Swap.DiscardUnknown(m)
}

var xxx_messageInfo_Swap proto.InternalMessageInfo

func (m *Swap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Swap) GetSwapId() uint64 {
	if m != nil {
		return m.SwapId
	}
	return 0
}

func (m *Swap) GetStatus() SwapStatus {
	if m != nil {
		return m.Status
	}
	return SwapStatus_SWAP_STATUS_UNSPECIFIED
}

func (m *Swap) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Swap) GetData() *SwapData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Swap) GetRockKeyId() uint64 {
	if m != nil {
		return m.RockKeyId
	}
	return 0
}

func (m *Swap) GetBtcKeyId() uint64 {
	if m != nil {
		return m.BtcKeyId
	}
	return 0
}

func (m *Swap) GetBtcChangeKeyId() uint64 {
	if m != nil {
		return m.BtcChangeKeyId
	}
	return 0
}

func (m *Swap) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Swap) GetSignTxId() uint64 {
	if m != nil {
		return m.SignTxId
	}
	return 0
}

// SwapData defines the data for a swap.
type SwapData struct {
	BaseToken  *types.AssetData            `protobuf:"bytes,1,opt,name=base_token,json=baseToken,proto3" json:"base_token,omitempty"`
	QuoteToken *types.AssetData            `protobuf:"bytes,2,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`
	Price      cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	AmountIn   uint64                      `protobuf:"varint,4,opt,name=amount_in,json=amountIn,proto3" json:"amount_in,omitempty"`
	// amount_out will be filled when the Msg is processed
	AmountOut uint64 `protobuf:"varint,5,opt,name=amount_out,json=amountOut,proto3" json:"amount_out,omitempty"`
}

func (m *SwapData) Reset()         { *m = SwapData{} }
func (m *SwapData) String() string { return proto.CompactTextString(m) }
func (*SwapData) ProtoMessage()    {}
func (*SwapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_776559c41e734f0c, []int{1}
}
func (m *SwapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapData.Merge(m, src)
}
func (m *SwapData) XXX_Size() int {
	return m.Size()
}
func (m *SwapData) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapData.DiscardUnknown(m)
}

var xxx_messageInfo_SwapData proto.InternalMessageInfo

func (m *SwapData) GetBaseToken() *types.AssetData {
	if m != nil {
		return m.BaseToken
	}
	return nil
}

func (m *SwapData) GetQuoteToken() *types.AssetData {
	if m != nil {
		return m.QuoteToken
	}
	return nil
}

func (m *SwapData) GetAmountIn() uint64 {
	if m != nil {
		return m.AmountIn
	}
	return 0
}

func (m *SwapData) GetAmountOut() uint64 {
	if m != nil {
		return m.AmountOut
	}
	return 0
}

// SwapPair defines the pair of tokens for a swap
// using validation asset data
type SwapPair struct {
	BaseToken  *types.AssetData `protobuf:"bytes,1,opt,name=base_token,json=baseToken,proto3" json:"base_token,omitempty"`
	QuoteToken *types.AssetData `protobuf:"bytes,2,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`
}

func (m *SwapPair) Reset()         { *m = SwapPair{} }
func (m *SwapPair) String() string { return proto.CompactTextString(m) }
func (*SwapPair) ProtoMessage()    {}
func (*SwapPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_776559c41e734f0c, []int{2}
}
func (m *SwapPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapPair.Merge(m, src)
}
func (m *SwapPair) XXX_Size() int {
	return m.Size()
}
func (m *SwapPair) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapPair.DiscardUnknown(m)
}

var xxx_messageInfo_SwapPair proto.InternalMessageInfo

func (m *SwapPair) GetBaseToken() *types.AssetData {
	if m != nil {
		return m.BaseToken
	}
	return nil
}

func (m *SwapPair) GetQuoteToken() *types.AssetData {
	if m != nil {
		return m.QuoteToken
	}
	return nil
}

func init() {
	proto.RegisterEnum("zrchain.zenex.SwapStatus", SwapStatus_name, SwapStatus_value)
	proto.RegisterType((*Swap)(nil), "zrchain.zenex.Swap")
	proto.RegisterType((*SwapData)(nil), "zrchain.zenex.SwapData")
	proto.RegisterType((*SwapPair)(nil), "zrchain.zenex.SwapPair")
}

func init() { proto.RegisterFile("zrchain/zenex/swap.proto", fileDescriptor_776559c41e734f0c) }

var fileDescriptor_776559c41e734f0c = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x83, 0x09, 0xc9, 0x89, 0x2e, 0x82, 0x11, 0x57, 0x18, 0xb8, 0x98, 0x08, 0x16, 0x37,
	0xa5, 0xc2, 0x56, 0xa9, 0xc4, 0xaa, 0xaa, 0x14, 0x12, 0x23, 0xa5, 0xa5, 0x90, 0xda, 0x41, 0x95,
	0xd8, 0x58, 0x93, 0xf1, 0x28, 0xb1, 0xd2, 0x78, 0x5c, 0x7b, 0x5c, 0x12, 0x9e, 0xa0, 0xcb, 0xaa,
	0x8f, 0xd0, 0x55, 0x97, 0x5d, 0xf4, 0x21, 0x58, 0x22, 0x56, 0x55, 0x17, 0xa8, 0x82, 0x45, 0x5f,
	0xa3, 0x9a, 0xb1, 0xcd, 0x4f, 0xd5, 0x45, 0x77, 0xdd, 0x58, 0x33, 0xdf, 0xf7, 0x9d, 0xef, 0x9c,
	0x99, 0x73, 0xc6, 0xa0, 0x9d, 0x46, 0x64, 0x80, 0xfd, 0xc0, 0x3c, 0xa5, 0x01, 0x1d, 0x9b, 0xf1,
	0x09, 0x0e, 0x8d, 0x30, 0x62, 0x9c, 0xa1, 0x7f, 0x32, 0xc6, 0x90, 0xcc, 0xf2, 0x12, 0x61, 0xf1,
	0x88, 0xc5, 0xae, 0x24, 0xcd, 0x74, 0x93, 0x2a, 0x97, 0xe7, 0xf1, 0xc8, 0x0f, 0x98, 0x29, 0xbf,
	0x19, 0xb4, 0xd0, 0x67, 0x7d, 0x96, 0x4a, 0xc5, 0x2a, 0x43, 0x37, 0xf2, 0x64, 0x6f, 0xf1, 0x6b,
	0xdf, 0xc3, 0xdc, 0x67, 0x81, 0x89, 0xe3, 0x98, 0x72, 0xd7, 0xc3, 0x1c, 0xa7, 0xa2, 0xf5, 0x8b,
	0x22, 0xa8, 0xce, 0x09, 0x0e, 0x91, 0x06, 0x33, 0x24, 0xa2, 0x98, 0xb3, 0x48, 0x53, 0x6a, 0x4a,
	0xbd, 0x62, 0xe7, 0x5b, 0xb4, 0x08, 0x33, 0xa2, 0x50, 0xd7, 0xf7, 0xb4, 0x62, 0x4d, 0xa9, 0xab,
	0x76, 0x49, 0x6c, 0xdb, 0x1e, 0x7a, 0x04, 0xa5, 0x98, 0x63, 0x9e, 0xc4, 0xda, 0x54, 0x4d, 0xa9,
	0xcf, 0x6e, 0x2f, 0x19, 0xf7, 0x0e, 0x61, 0x08, 0x5f, 0x47, 0x0a, 0xec, 0x4c, 0x88, 0x10, 0xa8,
	0x21, 0xf6, 0x23, 0x4d, 0x95, 0x29, 0xe4, 0x1a, 0x3d, 0x04, 0x55, 0x14, 0xa4, 0x4d, 0xd7, 0x94,
	0x7a, 0x75, 0x7b, 0xf1, 0x37, 0x26, 0x2d, 0xcc, 0xb1, 0x2d, 0x45, 0x48, 0x87, 0x6a, 0xc4, 0xc8,
	0xd0, 0x1d, 0xd2, 0x89, 0x28, 0xa8, 0x24, 0x0b, 0xaa, 0x08, 0xe8, 0x39, 0x9d, 0xb4, 0x3d, 0xf4,
	0x1f, 0x40, 0x8f, 0x93, 0x9c, 0x9e, 0x91, 0x74, 0xb9, 0xc7, 0x49, 0xca, 0x3e, 0x80, 0x79, 0xc1,
	0x92, 0x01, 0x0e, 0xfa, 0x34, 0x17, 0x95, 0xa5, 0x68, 0xb6, 0xc7, 0x49, 0x53, 0xe2, 0xb9, 0x51,
	0xe5, 0x84, 0x45, 0xc3, 0x38, 0xc4, 0x84, 0x6a, 0x15, 0x59, 0xee, 0x2d, 0x20, 0xd2, 0xc4, 0x7e,
	0x3f, 0x70, 0xf9, 0x58, 0x38, 0x40, 0x9a, 0x46, 0x20, 0xdd, 0x71, 0xdb, 0x5b, 0xff, 0x50, 0x84,
	0x72, 0x5e, 0x37, 0x7a, 0x02, 0xd0, 0xc3, 0x31, 0x75, 0x39, 0x1b, 0xd2, 0x40, 0xde, 0x6d, 0x75,
	0x7b, 0xf5, 0xe6, 0x90, 0xb7, 0xbd, 0x31, 0x1a, 0xa2, 0x37, 0xf2, 0xa8, 0x15, 0x11, 0xd0, 0x15,
	0x7a, 0xf4, 0x14, 0xaa, 0x6f, 0x12, 0xc6, 0xf3, 0xf0, 0xe2, 0x9f, 0x84, 0x83, 0x8c, 0x48, 0xe3,
	0xf7, 0x61, 0x3a, 0x8c, 0x7c, 0x42, 0x65, 0x8b, 0x2a, 0xbb, 0x3b, 0x67, 0x97, 0x6b, 0x85, 0x6f,
	0x97, 0x6b, 0x2b, 0xe9, 0x48, 0xc5, 0xde, 0xd0, 0xf0, 0x99, 0x39, 0xc2, 0x7c, 0x60, 0xec, 0xd3,
	0x3e, 0x26, 0x93, 0x16, 0x25, 0x17, 0x5f, 0xb6, 0x20, 0x9b, 0xb8, 0x16, 0x25, 0x9f, 0x7e, 0x7c,
	0xde, 0x54, 0xec, 0xd4, 0x04, 0xad, 0x40, 0x05, 0x8f, 0x58, 0x12, 0x70, 0xd7, 0x0f, 0x64, 0x0f,
	0x55, 0xbb, 0x9c, 0x02, 0xed, 0x00, 0xad, 0x02, 0x64, 0x24, 0x4b, 0xb8, 0xec, 0xa6, 0x6a, 0x67,
	0xf2, 0xc3, 0x84, 0xaf, 0xbf, 0x53, 0xd2, 0x4b, 0xe9, 0x88, 0x9e, 0xff, 0xd5, 0x4b, 0xd9, 0xfc,
	0xa8, 0x00, 0xdc, 0x0e, 0x27, 0x5a, 0x81, 0x45, 0xe7, 0x55, 0xa3, 0xe3, 0x3a, 0xdd, 0x46, 0xf7,
	0xc8, 0x71, 0x8f, 0x0e, 0x9c, 0x8e, 0xd5, 0x6c, 0xef, 0xb5, 0xad, 0xd6, 0x5c, 0x01, 0x2d, 0xc1,
	0xbf, 0x77, 0x49, 0xdb, 0x7a, 0x79, 0x64, 0x39, 0x5d, 0xab, 0x35, 0xa7, 0xa0, 0xff, 0x61, 0xe3,
	0x2e, 0x25, 0xd7, 0x5d, 0xbb, 0x71, 0xe0, 0xec, 0x59, 0xf6, 0x1d, 0x61, 0x11, 0x69, 0xb0, 0x70,
	0xdf, 0xe3, 0x99, 0xd5, 0x14, 0xcc, 0xd4, 0xaf, 0xee, 0xcd, 0xc3, 0x17, 0x9d, 0x7d, 0x4b, 0x50,
	0xea, 0x6e, 0xe7, 0xec, 0x4a, 0x57, 0xce, 0xaf, 0x74, 0xe5, 0xfb, 0x95, 0xae, 0xbc, 0xbf, 0xd6,
	0x0b, 0xe7, 0xd7, 0x7a, 0xe1, 0xeb, 0xb5, 0x5e, 0x38, 0xde, 0xe9, 0xfb, 0x7c, 0x90, 0xf4, 0x0c,
	0xc2, 0x46, 0xe6, 0x31, 0x0d, 0xc4, 0xf0, 0x6f, 0xed, 0xb1, 0x24, 0xc8, 0xde, 0xf8, 0xcd, 0xb3,
	0xdf, 0x31, 0xc7, 0xd9, 0x8f, 0x86, 0x4f, 0x42, 0x1a, 0xf7, 0x4a, 0xf2, 0xc9, 0x3f, 0xfe, 0x19,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0x10, 0x88, 0x7d, 0x86, 0x04, 0x00, 0x00,
}

func (m *Swap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Swap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Swap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignTxId != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.SignTxId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Workspace) > 0 {
		i -= len(m.Workspace)
		copy(dAtA[i:], m.Workspace)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Workspace)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BtcChangeKeyId != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.BtcChangeKeyId))
		i--
		dAtA[i] = 0x40
	}
	if m.BtcKeyId != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.BtcKeyId))
		i--
		dAtA[i] = 0x38
	}
	if m.RockKeyId != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.RockKeyId))
		i--
		dAtA[i] = 0x30
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.SwapId != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.SwapId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmountOut != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.AmountOut))
		i--
		dAtA[i] = 0x28
	}
	if m.AmountIn != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.AmountIn))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.QuoteToken != nil {
		{
			size, err := m.QuoteToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseToken != nil {
		{
			size, err := m.BaseToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteToken != nil {
		{
			size, err := m.QuoteToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseToken != nil {
		{
			size, err := m.BaseToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Swap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.SwapId != 0 {
		n += 1 + sovSwap(uint64(m.SwapId))
	}
	if m.Status != 0 {
		n += 1 + sovSwap(uint64(m.Status))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.RockKeyId != 0 {
		n += 1 + sovSwap(uint64(m.RockKeyId))
	}
	if m.BtcKeyId != 0 {
		n += 1 + sovSwap(uint64(m.BtcKeyId))
	}
	if m.BtcChangeKeyId != 0 {
		n += 1 + sovSwap(uint64(m.BtcChangeKeyId))
	}
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.SignTxId != 0 {
		n += 1 + sovSwap(uint64(m.SignTxId))
	}
	return n
}

func (m *SwapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseToken != nil {
		l = m.BaseToken.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.QuoteToken != nil {
		l = m.QuoteToken.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovSwap(uint64(l))
	if m.AmountIn != 0 {
		n += 1 + sovSwap(uint64(m.AmountIn))
	}
	if m.AmountOut != 0 {
		n += 1 + sovSwap(uint64(m.AmountOut))
	}
	return n
}

func (m *SwapPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseToken != nil {
		l = m.BaseToken.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.QuoteToken != nil {
		l = m.QuoteToken.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func sovSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSwap(x uint64) (n int) {
	return sovSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Swap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Swap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Swap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapId", wireType)
			}
			m.SwapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SwapStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SwapData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RockKeyId", wireType)
			}
			m.RockKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RockKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcKeyId", wireType)
			}
			m.BtcKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcChangeKeyId", wireType)
			}
			m.BtcChangeKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcChangeKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignTxId", wireType)
			}
			m.SignTxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignTxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseToken == nil {
				m.BaseToken = &types.AssetData{}
			}
			if err := m.BaseToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteToken == nil {
				m.QuoteToken = &types.AssetData{}
			}
			if err := m.QuoteToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			m.AmountIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			m.AmountOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseToken == nil {
				m.BaseToken = &types.AssetData{}
			}
			if err := m.BaseToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteToken == nil {
				m.QuoteToken = &types.AssetData{}
			}
			if err := m.QuoteToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwap = fmt.Errorf("proto: unexpected end of group")
)
