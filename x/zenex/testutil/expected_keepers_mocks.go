// Code generated by MockGen. DO NOT EDIT.
// Source: x/zenex/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/zenex/types/expected_keepers.go -destination=x/zenex/testutil/expected_keepers_mocks.go -package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	math "cosmossdk.io/math"
	types "github.com/Zenrock-Foundation/zrchain/v6/x/identity/types"
	types0 "github.com/Zenrock-Foundation/zrchain/v6/x/treasury/types"
	types1 "github.com/Zenrock-Foundation/zrchain/v6/x/validation/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityKeeper is a mock of IdentityKeeper interface.
type MockIdentityKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityKeeperMockRecorder
	isgomock struct{}
}

// MockIdentityKeeperMockRecorder is the mock recorder for MockIdentityKeeper.
type MockIdentityKeeperMockRecorder struct {
	mock *MockIdentityKeeper
}

// NewMockIdentityKeeper creates a new mock instance.
func NewMockIdentityKeeper(ctrl *gomock.Controller) *MockIdentityKeeper {
	mock := &MockIdentityKeeper{ctrl: ctrl}
	mock.recorder = &MockIdentityKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityKeeper) EXPECT() *MockIdentityKeeperMockRecorder {
	return m.recorder
}

// GetWorkspace mocks base method.
func (m *MockIdentityKeeper) GetWorkspace(ctx types2.Context, id string) (*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", ctx, id)
	ret0, _ := ret[0].(*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockIdentityKeeperMockRecorder) GetWorkspace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockIdentityKeeper)(nil).GetWorkspace), ctx, id)
}

// MockTreasuryKeeper is a mock of TreasuryKeeper interface.
type MockTreasuryKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTreasuryKeeperMockRecorder
	isgomock struct{}
}

// MockTreasuryKeeperMockRecorder is the mock recorder for MockTreasuryKeeper.
type MockTreasuryKeeperMockRecorder struct {
	mock *MockTreasuryKeeper
}

// NewMockTreasuryKeeper creates a new mock instance.
func NewMockTreasuryKeeper(ctrl *gomock.Controller) *MockTreasuryKeeper {
	mock := &MockTreasuryKeeper{ctrl: ctrl}
	mock.recorder = &MockTreasuryKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreasuryKeeper) EXPECT() *MockTreasuryKeeperMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockTreasuryKeeper) GetKey(ctx types2.Context, keyID uint64) (*types0.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, keyID)
	ret0, _ := ret[0].(*types0.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockTreasuryKeeperMockRecorder) GetKey(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockTreasuryKeeper)(nil).GetKey), ctx, keyID)
}

// HandleSignatureRequest mocks base method.
func (m *MockTreasuryKeeper) HandleSignatureRequest(ctx types2.Context, msg *types0.MsgNewSignatureRequest) (*types0.MsgNewSignatureRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSignatureRequest", ctx, msg)
	ret0, _ := ret[0].(*types0.MsgNewSignatureRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleSignatureRequest indicates an expected call of HandleSignatureRequest.
func (mr *MockTreasuryKeeperMockRecorder) HandleSignatureRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignatureRequest", reflect.TypeOf((*MockTreasuryKeeper)(nil).HandleSignatureRequest), ctx, msg)
}

// MockValidationKeeper is a mock of ValidationKeeper interface.
type MockValidationKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockValidationKeeperMockRecorder
	isgomock struct{}
}

// MockValidationKeeperMockRecorder is the mock recorder for MockValidationKeeper.
type MockValidationKeeperMockRecorder struct {
	mock *MockValidationKeeper
}

// NewMockValidationKeeper creates a new mock instance.
func NewMockValidationKeeper(ctrl *gomock.Controller) *MockValidationKeeper {
	mock := &MockValidationKeeper{ctrl: ctrl}
	mock.recorder = &MockValidationKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidationKeeper) EXPECT() *MockValidationKeeperMockRecorder {
	return m.recorder
}

// GetAssetPrices mocks base method.
func (m *MockValidationKeeper) GetAssetPrices(ctx context.Context) (map[types1.Asset]math.LegacyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPrices", ctx)
	ret0, _ := ret[0].(map[types1.Asset]math.LegacyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPrices indicates an expected call of GetAssetPrices.
func (mr *MockValidationKeeperMockRecorder) GetAssetPrices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPrices", reflect.TypeOf((*MockValidationKeeper)(nil).GetAssetPrices), ctx)
}

// GetAssets mocks base method.
func (m *MockValidationKeeper) GetAssets(ctx context.Context) ([]types1.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", ctx)
	ret0, _ := ret[0].([]types1.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockValidationKeeperMockRecorder) GetAssets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockValidationKeeper)(nil).GetAssets), ctx)
}

// GetBtcRockPrice mocks base method.
func (m *MockValidationKeeper) GetBtcRockPrice(ctx context.Context) (math.LegacyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcRockPrice", ctx)
	ret0, _ := ret[0].(math.LegacyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcRockPrice indicates an expected call of GetBtcRockPrice.
func (mr *MockValidationKeeperMockRecorder) GetBtcRockPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcRockPrice", reflect.TypeOf((*MockValidationKeeper)(nil).GetBtcRockPrice), ctx)
}

// GetRockBtcPrice mocks base method.
func (m *MockValidationKeeper) GetRockBtcPrice(ctx context.Context) (math.LegacyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRockBtcPrice", ctx)
	ret0, _ := ret[0].(math.LegacyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRockBtcPrice indicates an expected call of GetRockBtcPrice.
func (mr *MockValidationKeeperMockRecorder) GetRockBtcPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRockBtcPrice", reflect.TypeOf((*MockValidationKeeper)(nil).GetRockBtcPrice), ctx)
}

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
	isgomock struct{}
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(arg0 context.Context, arg1 types2.AccAddress) types2.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types2.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), arg0, arg1)
}

// GetModuleAddress mocks base method.
func (m *MockAccountKeeper) GetModuleAddress(name string) types2.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAddress", name)
	ret0, _ := ret[0].(types2.AccAddress)
	return ret0
}

// GetModuleAddress indicates an expected call of GetModuleAddress.
func (mr *MockAccountKeeperMockRecorder) GetModuleAddress(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAddress", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAddress), name)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
	isgomock struct{}
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBankKeeper) GetBalance(arg0 context.Context, arg1 types2.AccAddress, arg2 string) types2.Coin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(types2.Coin)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBankKeeperMockRecorder) GetBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBankKeeper)(nil).GetBalance), arg0, arg1, arg2)
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockBankKeeper) SendCoinsFromAccountToModule(arg0 context.Context, arg1 types2.AccAddress, arg2 string, arg3 types2.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromAccountToModule(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromAccountToModule), arg0, arg1, arg2, arg3)
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(arg0 context.Context, arg1 string, arg2 types2.AccAddress, arg3 types2.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToAccount(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToAccount), arg0, arg1, arg2, arg3)
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(arg0 context.Context, arg1 types2.AccAddress) types2.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", arg0, arg1)
	ret0, _ := ret[0].(types2.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), arg0, arg1)
}

// MockParamSubspace is a mock of ParamSubspace interface.
type MockParamSubspace struct {
	ctrl     *gomock.Controller
	recorder *MockParamSubspaceMockRecorder
	isgomock struct{}
}

// MockParamSubspaceMockRecorder is the mock recorder for MockParamSubspace.
type MockParamSubspaceMockRecorder struct {
	mock *MockParamSubspace
}

// NewMockParamSubspace creates a new mock instance.
func NewMockParamSubspace(ctrl *gomock.Controller) *MockParamSubspace {
	mock := &MockParamSubspace{ctrl: ctrl}
	mock.recorder = &MockParamSubspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamSubspace) EXPECT() *MockParamSubspaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockParamSubspace) Get(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", arg0, arg1, arg2)
}

// Get indicates an expected call of Get.
func (mr *MockParamSubspaceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParamSubspace)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockParamSubspace) Set(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2)
}

// Set indicates an expected call of Set.
func (mr *MockParamSubspaceMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockParamSubspace)(nil).Set), arg0, arg1, arg2)
}
