// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/zentp/dct.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DctStatus represents the different possible states of a DCT.
type DctStatus int32

const (
	// Undefined: The status of the operation is not specified.
	DctStatus_DCT_STATUS_UNSPECIFIED DctStatus = 0
	// KeysRequested: Key requests have been sent to the keyring.
	DctStatus_DCT_STATUS_KEYS_REQUESTED DctStatus = 1
	// KeysCreated: Keys have been created.
	DctStatus_DCT_STATUS_KEYS_CREATED DctStatus = 2
	// Completed: The operation has been successfully finalized.
	DctStatus_DCT_STATUS_COMPLETED DctStatus = 3
	// Failed: The operation has failed. Please start over.
	DctStatus_DCT_STATUS_FAILED DctStatus = 4
)

var DctStatus_name = map[int32]string{
	0: "DCT_STATUS_UNSPECIFIED",
	1: "DCT_STATUS_KEYS_REQUESTED",
	2: "DCT_STATUS_KEYS_CREATED",
	3: "DCT_STATUS_COMPLETED",
	4: "DCT_STATUS_FAILED",
}

var DctStatus_value = map[string]int32{
	"DCT_STATUS_UNSPECIFIED":    0,
	"DCT_STATUS_KEYS_REQUESTED": 1,
	"DCT_STATUS_KEYS_CREATED":   2,
	"DCT_STATUS_COMPLETED":      3,
	"DCT_STATUS_FAILED":         4,
}

func (x DctStatus) String() string {
	return proto.EnumName(DctStatus_name, int32(x))
}

func (DctStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0d51806535edb97, []int{0}
}

// Dct represents the parameters for a DCT.
type Dct struct {
	Denom  string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Solana *Solana   `protobuf:"bytes,2,opt,name=solana,proto3" json:"solana,omitempty"`
	Status DctStatus `protobuf:"varint,3,opt,name=status,proto3,enum=zrchain.zentp.DctStatus" json:"status,omitempty"`
}

func (m *Dct) Reset()         { *m = Dct{} }
func (m *Dct) String() string { return proto.CompactTextString(m) }
func (*Dct) ProtoMessage()    {}
func (*Dct) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d51806535edb97, []int{0}
}
func (m *Dct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dct.Merge(m, src)
}
func (m *Dct) XXX_Size() int {
	return m.Size()
}
func (m *Dct) XXX_DiscardUnknown() {
	xxx_messageInfo_Dct.DiscardUnknown(m)
}

var xxx_messageInfo_Dct proto.InternalMessageInfo

func (m *Dct) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Dct) GetSolana() *Solana {
	if m != nil {
		return m.Solana
	}
	return nil
}

func (m *Dct) GetStatus() DctStatus {
	if m != nil {
		return m.Status
	}
	return DctStatus_DCT_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("zrchain.zentp.DctStatus", DctStatus_name, DctStatus_value)
	proto.RegisterType((*Dct)(nil), "zrchain.zentp.Dct")
}

func init() { proto.RegisterFile("zrchain/zentp/dct.proto", fileDescriptor_c0d51806535edb97) }

var fileDescriptor_c0d51806535edb97 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0xc1, 0x4e, 0xc2, 0x30,
	0x1c, 0xc7, 0xf1, 0x15, 0x94, 0x84, 0x1a, 0x0d, 0x36, 0x20, 0x13, 0xe3, 0x42, 0x3c, 0x11, 0x13,
	0x36, 0x83, 0x09, 0x77, 0x5c, 0x4b, 0x42, 0x44, 0xc5, 0x75, 0x1c, 0xe4, 0x42, 0x4a, 0x59, 0x84,
	0x28, 0xed, 0xb2, 0x15, 0xa3, 0xc4, 0x87, 0xf0, 0xe0, 0x43, 0x79, 0xe4, 0xe8, 0xd1, 0xc0, 0x8b,
	0x18, 0xc6, 0x34, 0x83, 0x63, 0xfb, 0xf9, 0xe6, 0x7f, 0xf8, 0xc1, 0xe2, 0x2c, 0xe0, 0x23, 0x36,
	0x16, 0xd6, 0xcc, 0x13, 0xca, 0xb7, 0x86, 0x5c, 0x99, 0x7e, 0x20, 0x95, 0x44, 0xfb, 0x31, 0x98,
	0x11, 0x94, 0x4a, 0x9b, 0x9d, 0xcf, 0x02, 0x36, 0x09, 0xd7, 0xe9, 0xd9, 0x3b, 0x4c, 0x63, 0xae,
	0x50, 0x1e, 0xee, 0x0e, 0x3d, 0x21, 0x27, 0x3a, 0x28, 0x83, 0x4a, 0xd6, 0x59, 0x3f, 0x50, 0x15,
	0x66, 0x42, 0xf9, 0xcc, 0x04, 0xd3, 0x53, 0x65, 0x50, 0xd9, 0xab, 0x15, 0xcc, 0x8d, 0xc3, 0x26,
	0x8d, 0xd0, 0x89, 0x23, 0x74, 0x01, 0x33, 0xa1, 0x62, 0x6a, 0x1a, 0xea, 0xe9, 0x32, 0xa8, 0x1c,
	0xd4, 0xf4, 0xad, 0x1c, 0x73, 0x45, 0x23, 0x77, 0xe2, 0xee, 0xfc, 0x13, 0xc0, 0xec, 0xff, 0x2f,
	0x2a, 0xc1, 0x23, 0x6c, 0xbb, 0x7d, 0xea, 0x36, 0xdc, 0x2e, 0xed, 0x77, 0x6f, 0x69, 0x87, 0xd8,
	0xad, 0x66, 0x8b, 0xe0, 0x9c, 0x86, 0x4e, 0xe1, 0x71, 0xc2, 0xae, 0xc9, 0x03, 0xed, 0x3b, 0xe4,
	0xbe, 0x4b, 0xa8, 0x4b, 0x70, 0x0e, 0xa0, 0x13, 0x58, 0xdc, 0x66, 0xdb, 0x21, 0x8d, 0x15, 0xa6,
	0x90, 0x0e, 0xf3, 0x09, 0xb4, 0xef, 0x6e, 0x3a, 0x6d, 0xb2, 0x92, 0x34, 0x2a, 0xc0, 0xc3, 0x84,
	0x34, 0x1b, 0xad, 0x36, 0xc1, 0xb9, 0x9d, 0xab, 0xce, 0xd7, 0xc2, 0x00, 0xf3, 0x85, 0x01, 0x7e,
	0x16, 0x06, 0xf8, 0x58, 0x1a, 0xda, 0x7c, 0x69, 0x68, 0xdf, 0x4b, 0x43, 0xeb, 0xd5, 0x1f, 0xc7,
	0x6a, 0x34, 0x1d, 0x98, 0x5c, 0x4e, 0xac, 0x9e, 0x27, 0x02, 0xc9, 0x9f, 0xaa, 0x4d, 0x39, 0x15,
	0x43, 0xa6, 0xc6, 0x52, 0x58, 0x7f, 0x43, 0xbf, 0xd4, 0xad, 0xd7, 0x78, 0x6d, 0xf5, 0xe6, 0x7b,
	0xe1, 0x20, 0x13, 0xad, 0x7d, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xa3, 0xc0, 0x4d, 0xb3,
	0x01, 0x00, 0x00,
}

func (m *Dct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDct(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Solana != nil {
		{
			size, err := m.Solana.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDct(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDct(dAtA []byte, offset int, v uint64) int {
	offset -= sovDct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDct(uint64(l))
	}
	if m.Solana != nil {
		l = m.Solana.Size()
		n += 1 + l + sovDct(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDct(uint64(m.Status))
	}
	return n
}

func sovDct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDct(x uint64) (n int) {
	return sovDct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solana", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Solana == nil {
				m.Solana = &Solana{}
			}
			if err := m.Solana.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DctStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDct = fmt.Errorf("proto: unexpected end of group")
)
