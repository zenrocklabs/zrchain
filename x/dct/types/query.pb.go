// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/dct/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryLockTransactionsRequest struct {
	Asset Asset `protobuf:"varint,1,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *QueryLockTransactionsRequest) Reset()         { *m = QueryLockTransactionsRequest{} }
func (m *QueryLockTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockTransactionsRequest) ProtoMessage()    {}
func (*QueryLockTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{2}
}
func (m *QueryLockTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockTransactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockTransactionsRequest.Merge(m, src)
}
func (m *QueryLockTransactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockTransactionsRequest proto.InternalMessageInfo

func (m *QueryLockTransactionsRequest) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type QueryLockTransactionsResponse struct {
	LockTransactions []*LockTransaction `protobuf:"bytes,1,rep,name=lock_transactions,json=lockTransactions,proto3" json:"lock_transactions,omitempty"`
}

func (m *QueryLockTransactionsResponse) Reset()         { *m = QueryLockTransactionsResponse{} }
func (m *QueryLockTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockTransactionsResponse) ProtoMessage()    {}
func (*QueryLockTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{3}
}
func (m *QueryLockTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockTransactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockTransactionsResponse.Merge(m, src)
}
func (m *QueryLockTransactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockTransactionsResponse proto.InternalMessageInfo

func (m *QueryLockTransactionsResponse) GetLockTransactions() []*LockTransaction {
	if m != nil {
		return m.LockTransactions
	}
	return nil
}

type QueryRedemptionsRequest struct {
	StartIndex uint64           `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Status     RedemptionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zrchain.dct.RedemptionStatus" json:"status,omitempty"`
	Asset      Asset            `protobuf:"varint,3,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *QueryRedemptionsRequest) Reset()         { *m = QueryRedemptionsRequest{} }
func (m *QueryRedemptionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionsRequest) ProtoMessage()    {}
func (*QueryRedemptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{4}
}
func (m *QueryRedemptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionsRequest.Merge(m, src)
}
func (m *QueryRedemptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionsRequest proto.InternalMessageInfo

func (m *QueryRedemptionsRequest) GetStartIndex() uint64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *QueryRedemptionsRequest) GetStatus() RedemptionStatus {
	if m != nil {
		return m.Status
	}
	return RedemptionStatus_UNSPECIFIED
}

func (m *QueryRedemptionsRequest) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type QueryRedemptionsResponse struct {
	Redemptions []Redemption `protobuf:"bytes,1,rep,name=redemptions,proto3" json:"redemptions"`
}

func (m *QueryRedemptionsResponse) Reset()         { *m = QueryRedemptionsResponse{} }
func (m *QueryRedemptionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionsResponse) ProtoMessage()    {}
func (*QueryRedemptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{5}
}
func (m *QueryRedemptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionsResponse.Merge(m, src)
}
func (m *QueryRedemptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionsResponse proto.InternalMessageInfo

func (m *QueryRedemptionsResponse) GetRedemptions() []Redemption {
	if m != nil {
		return m.Redemptions
	}
	return nil
}

type QueryPendingMintTransactionsRequest struct {
	StartIndex uint64                `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Status     MintTransactionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zrchain.dct.MintTransactionStatus" json:"status,omitempty"`
	Asset      Asset                 `protobuf:"varint,3,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *QueryPendingMintTransactionsRequest) Reset()         { *m = QueryPendingMintTransactionsRequest{} }
func (m *QueryPendingMintTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMintTransactionsRequest) ProtoMessage()    {}
func (*QueryPendingMintTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{6}
}
func (m *QueryPendingMintTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMintTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMintTransactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMintTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMintTransactionsRequest.Merge(m, src)
}
func (m *QueryPendingMintTransactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMintTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMintTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMintTransactionsRequest proto.InternalMessageInfo

func (m *QueryPendingMintTransactionsRequest) GetStartIndex() uint64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *QueryPendingMintTransactionsRequest) GetStatus() MintTransactionStatus {
	if m != nil {
		return m.Status
	}
	return MintTransactionStatus_MINT_TRANSACTION_STATUS_UNSPECIFIED
}

func (m *QueryPendingMintTransactionsRequest) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type QueryPendingMintTransactionsResponse struct {
	PendingMintTransactions []*PendingMintTransaction `protobuf:"bytes,1,rep,name=pending_mint_transactions,json=pendingMintTransactions,proto3" json:"pending_mint_transactions,omitempty"`
}

func (m *QueryPendingMintTransactionsResponse) Reset()         { *m = QueryPendingMintTransactionsResponse{} }
func (m *QueryPendingMintTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMintTransactionsResponse) ProtoMessage()    {}
func (*QueryPendingMintTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{7}
}
func (m *QueryPendingMintTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMintTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMintTransactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMintTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMintTransactionsResponse.Merge(m, src)
}
func (m *QueryPendingMintTransactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMintTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMintTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMintTransactionsResponse proto.InternalMessageInfo

func (m *QueryPendingMintTransactionsResponse) GetPendingMintTransactions() []*PendingMintTransaction {
	if m != nil {
		return m.PendingMintTransactions
	}
	return nil
}

type QueryPendingMintTransactionRequest struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Asset  Asset  `protobuf:"varint,2,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *QueryPendingMintTransactionRequest) Reset()         { *m = QueryPendingMintTransactionRequest{} }
func (m *QueryPendingMintTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMintTransactionRequest) ProtoMessage()    {}
func (*QueryPendingMintTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{8}
}
func (m *QueryPendingMintTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMintTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMintTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMintTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMintTransactionRequest.Merge(m, src)
}
func (m *QueryPendingMintTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMintTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMintTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMintTransactionRequest proto.InternalMessageInfo

func (m *QueryPendingMintTransactionRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryPendingMintTransactionRequest) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type QueryPendingMintTransactionResponse struct {
	PendingMintTransaction *PendingMintTransaction `protobuf:"bytes,1,opt,name=pending_mint_transaction,json=pendingMintTransaction,proto3" json:"pending_mint_transaction,omitempty"`
}

func (m *QueryPendingMintTransactionResponse) Reset()         { *m = QueryPendingMintTransactionResponse{} }
func (m *QueryPendingMintTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMintTransactionResponse) ProtoMessage()    {}
func (*QueryPendingMintTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{9}
}
func (m *QueryPendingMintTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMintTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMintTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMintTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMintTransactionResponse.Merge(m, src)
}
func (m *QueryPendingMintTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMintTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMintTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMintTransactionResponse proto.InternalMessageInfo

func (m *QueryPendingMintTransactionResponse) GetPendingMintTransaction() *PendingMintTransaction {
	if m != nil {
		return m.PendingMintTransaction
	}
	return nil
}

type QuerySupplyRequest struct {
	Asset Asset `protobuf:"varint,1,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *QuerySupplyRequest) Reset()         { *m = QuerySupplyRequest{} }
func (m *QuerySupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyRequest) ProtoMessage()    {}
func (*QuerySupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{10}
}
func (m *QuerySupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyRequest.Merge(m, src)
}
func (m *QuerySupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyRequest proto.InternalMessageInfo

func (m *QuerySupplyRequest) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type AssetSupply struct {
	Supply       Supply `protobuf:"bytes,1,opt,name=supply,proto3" json:"supply"`
	ExchangeRate string `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
}

func (m *AssetSupply) Reset()         { *m = AssetSupply{} }
func (m *AssetSupply) String() string { return proto.CompactTextString(m) }
func (*AssetSupply) ProtoMessage()    {}
func (*AssetSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{11}
}
func (m *AssetSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetSupply.Merge(m, src)
}
func (m *AssetSupply) XXX_Size() int {
	return m.Size()
}
func (m *AssetSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetSupply.DiscardUnknown(m)
}

var xxx_messageInfo_AssetSupply proto.InternalMessageInfo

func (m *AssetSupply) GetSupply() Supply {
	if m != nil {
		return m.Supply
	}
	return Supply{}
}

func (m *AssetSupply) GetExchangeRate() string {
	if m != nil {
		return m.ExchangeRate
	}
	return ""
}

type QuerySupplyResponse struct {
	Supplies []*AssetSupply `protobuf:"bytes,1,rep,name=supplies,proto3" json:"supplies,omitempty"`
}

func (m *QuerySupplyResponse) Reset()         { *m = QuerySupplyResponse{} }
func (m *QuerySupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyResponse) ProtoMessage()    {}
func (*QuerySupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{12}
}
func (m *QuerySupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyResponse.Merge(m, src)
}
func (m *QuerySupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyResponse proto.InternalMessageInfo

func (m *QuerySupplyResponse) GetSupplies() []*AssetSupply {
	if m != nil {
		return m.Supplies
	}
	return nil
}

type QueryBurnEventsRequest struct {
	StartIndex   uint64     `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	TxID         string     `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex     uint64     `protobuf:"varint,3,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	Caip2ChainID string     `protobuf:"bytes,4,opt,name=caip2chainID,proto3" json:"caip2chainID,omitempty"`
	Status       BurnStatus `protobuf:"varint,5,opt,name=status,proto3,enum=zrchain.dct.BurnStatus" json:"status,omitempty"`
	Asset        Asset      `protobuf:"varint,6,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *QueryBurnEventsRequest) Reset()         { *m = QueryBurnEventsRequest{} }
func (m *QueryBurnEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBurnEventsRequest) ProtoMessage()    {}
func (*QueryBurnEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{13}
}
func (m *QueryBurnEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnEventsRequest.Merge(m, src)
}
func (m *QueryBurnEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnEventsRequest proto.InternalMessageInfo

func (m *QueryBurnEventsRequest) GetStartIndex() uint64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *QueryBurnEventsRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *QueryBurnEventsRequest) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *QueryBurnEventsRequest) GetCaip2ChainID() string {
	if m != nil {
		return m.Caip2ChainID
	}
	return ""
}

func (m *QueryBurnEventsRequest) GetStatus() BurnStatus {
	if m != nil {
		return m.Status
	}
	return BurnStatus_BURN_STATUS_UNSPECIFIED
}

func (m *QueryBurnEventsRequest) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type QueryBurnEventsResponse struct {
	BurnEvents []*BurnEvent `protobuf:"bytes,1,rep,name=burnEvents,proto3" json:"burnEvents,omitempty"`
}

func (m *QueryBurnEventsResponse) Reset()         { *m = QueryBurnEventsResponse{} }
func (m *QueryBurnEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBurnEventsResponse) ProtoMessage()    {}
func (*QueryBurnEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10bff5d9f7ac8fe9, []int{14}
}
func (m *QueryBurnEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnEventsResponse.Merge(m, src)
}
func (m *QueryBurnEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnEventsResponse proto.InternalMessageInfo

func (m *QueryBurnEventsResponse) GetBurnEvents() []*BurnEvent {
	if m != nil {
		return m.BurnEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "zrchain.dct.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "zrchain.dct.QueryParamsResponse")
	proto.RegisterType((*QueryLockTransactionsRequest)(nil), "zrchain.dct.QueryLockTransactionsRequest")
	proto.RegisterType((*QueryLockTransactionsResponse)(nil), "zrchain.dct.QueryLockTransactionsResponse")
	proto.RegisterType((*QueryRedemptionsRequest)(nil), "zrchain.dct.QueryRedemptionsRequest")
	proto.RegisterType((*QueryRedemptionsResponse)(nil), "zrchain.dct.QueryRedemptionsResponse")
	proto.RegisterType((*QueryPendingMintTransactionsRequest)(nil), "zrchain.dct.QueryPendingMintTransactionsRequest")
	proto.RegisterType((*QueryPendingMintTransactionsResponse)(nil), "zrchain.dct.QueryPendingMintTransactionsResponse")
	proto.RegisterType((*QueryPendingMintTransactionRequest)(nil), "zrchain.dct.QueryPendingMintTransactionRequest")
	proto.RegisterType((*QueryPendingMintTransactionResponse)(nil), "zrchain.dct.QueryPendingMintTransactionResponse")
	proto.RegisterType((*QuerySupplyRequest)(nil), "zrchain.dct.QuerySupplyRequest")
	proto.RegisterType((*AssetSupply)(nil), "zrchain.dct.AssetSupply")
	proto.RegisterType((*QuerySupplyResponse)(nil), "zrchain.dct.QuerySupplyResponse")
	proto.RegisterType((*QueryBurnEventsRequest)(nil), "zrchain.dct.QueryBurnEventsRequest")
	proto.RegisterType((*QueryBurnEventsResponse)(nil), "zrchain.dct.QueryBurnEventsResponse")
}

func init() { proto.RegisterFile("zrchain/dct/query.proto", fileDescriptor_10bff5d9f7ac8fe9) }

var fileDescriptor_10bff5d9f7ac8fe9 = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xa6, 0x8e, 0xdb, 0x3c, 0xb7, 0x85, 0x4e, 0xaa, 0x78, 0x59, 0x12, 0xc7, 0xda, 0x84,
	0x2a, 0x44, 0xc2, 0x5b, 0x9b, 0x52, 0x24, 0x0e, 0x20, 0xa2, 0x42, 0x1b, 0x41, 0x11, 0xdd, 0x72,
	0x2a, 0x42, 0xd6, 0x78, 0x3d, 0x5a, 0x2f, 0xb1, 0x67, 0xb6, 0x3b, 0xe3, 0xc8, 0xa5, 0x2a, 0x48,
	0x08, 0x89, 0x2b, 0x12, 0xdc, 0xf8, 0x02, 0x1c, 0x38, 0x20, 0x71, 0xe2, 0x1b, 0xf4, 0x58, 0x89,
	0x0b, 0x27, 0x40, 0x09, 0x12, 0x7c, 0x0c, 0xe4, 0xb7, 0x63, 0x67, 0xd7, 0xbb, 0xfe, 0x93, 0x5e,
	0xac, 0xf5, 0x9b, 0xf7, 0x7e, 0xf3, 0x7b, 0xbf, 0x7d, 0x7f, 0x16, 0xca, 0x5f, 0x44, 0x5e, 0x87,
	0x06, 0xdc, 0x69, 0x7b, 0xca, 0x79, 0xd8, 0x67, 0xd1, 0xa3, 0x5a, 0x18, 0x09, 0x25, 0x48, 0x49,
	0x1f, 0xd4, 0xda, 0x9e, 0xb2, 0xae, 0xd0, 0x5e, 0xc0, 0x85, 0x83, 0xbf, 0xf1, 0xb9, 0xb5, 0xe7,
	0x09, 0xd9, 0x13, 0xd2, 0x69, 0x51, 0xc9, 0xe2, 0x40, 0xe7, 0xa8, 0xde, 0x62, 0x8a, 0xd6, 0x9d,
	0x90, 0xfa, 0x01, 0xa7, 0x2a, 0x10, 0x5c, 0xfb, 0x5e, 0xf5, 0x85, 0x2f, 0xf0, 0xd1, 0x19, 0x3e,
	0x69, 0xeb, 0x86, 0x2f, 0x84, 0xdf, 0x65, 0x0e, 0x0d, 0x03, 0x87, 0x72, 0x2e, 0x14, 0x86, 0x48,
	0x7d, 0xba, 0x9e, 0x24, 0xd6, 0x0b, 0xb8, 0xd2, 0x76, 0x33, 0x69, 0x0f, 0x69, 0x44, 0x7b, 0xa3,
	0x88, 0xcd, 0xe4, 0x49, 0xc4, 0xda, 0xac, 0x17, 0x26, 0x01, 0x53, 0x81, 0xb2, 0x1f, 0x86, 0x5d,
	0x9d, 0xaa, 0x7d, 0x15, 0xc8, 0xbd, 0x61, 0x02, 0x1f, 0x23, 0x9a, 0xcb, 0x1e, 0xf6, 0x99, 0x54,
	0xf6, 0x5d, 0x58, 0x4b, 0x59, 0x65, 0x28, 0xb8, 0x64, 0xe4, 0x26, 0x14, 0xe3, 0x5b, 0x4d, 0xa3,
	0x6a, 0xec, 0x96, 0x1a, 0x6b, 0xb5, 0x84, 0x50, 0xb5, 0xd8, 0x79, 0x7f, 0xf5, 0xe9, 0x9f, 0x5b,
	0x4b, 0x3f, 0xfd, 0xfb, 0xcb, 0x9e, 0xe1, 0x6a, 0x6f, 0xfb, 0x0e, 0x6c, 0x20, 0xdc, 0x87, 0xc2,
	0x3b, 0xfc, 0x24, 0xa2, 0x5c, 0x52, 0x0f, 0xd9, 0xe9, 0xeb, 0xc8, 0x2e, 0xac, 0x50, 0x29, 0x99,
	0x42, 0xd8, 0xcb, 0x0d, 0x92, 0x82, 0x7d, 0x77, 0x78, 0xe2, 0xc6, 0x0e, 0xf6, 0xe7, 0xb0, 0x39,
	0x05, 0x49, 0x53, 0x3c, 0x80, 0x2b, 0x5d, 0xe1, 0x1d, 0x36, 0x55, 0xe2, 0xd0, 0x34, 0xaa, 0xe7,
	0x76, 0x4b, 0x8d, 0x8d, 0x14, 0xec, 0x04, 0x82, 0xfb, 0x62, 0x77, 0x02, 0xd2, 0xfe, 0xd1, 0x80,
	0x32, 0x5e, 0xe6, 0x9e, 0xea, 0x39, 0x62, 0xbc, 0x05, 0x25, 0xa9, 0x68, 0xa4, 0x9a, 0x01, 0x6f,
	0xb3, 0x01, 0xf2, 0x2e, 0xb8, 0x80, 0xa6, 0x83, 0xa1, 0x85, 0xbc, 0x01, 0x45, 0xa9, 0xa8, 0xea,
	0x4b, 0x73, 0x19, 0x73, 0xda, 0x4c, 0x5d, 0x7e, 0x8a, 0x78, 0x1f, 0x9d, 0x5c, 0xed, 0x7c, 0xaa,
	0xc4, 0xb9, 0x79, 0x4a, 0x7c, 0x0a, 0x66, 0x96, 0x9c, 0x16, 0xe1, 0x1d, 0x28, 0x25, 0x6a, 0x40,
	0xa7, 0x5f, 0x9e, 0xc2, 0x60, 0xbf, 0x30, 0x7c, 0x61, 0x6e, 0x32, 0xc2, 0xfe, 0xd9, 0x80, 0xed,
	0xb8, 0x00, 0x18, 0x6f, 0x07, 0xdc, 0xbf, 0x1b, 0x70, 0x95, 0xf7, 0xe2, 0xe6, 0xca, 0xf0, 0xd6,
	0x84, 0x0c, 0x76, 0x8a, 0xc4, 0x04, 0xec, 0x73, 0x6b, 0xf1, 0xad, 0x01, 0x3b, 0xb3, 0xe9, 0x6a,
	0x61, 0x9a, 0xf0, 0x52, 0x18, 0xbb, 0x34, 0x87, 0x6d, 0x95, 0x57, 0x25, 0xdb, 0xe9, 0x9a, 0xce,
	0x05, 0x74, 0xcb, 0x61, 0xfe, 0x45, 0xb6, 0x0f, 0xf6, 0x0c, 0x22, 0x23, 0xd9, 0xca, 0x70, 0x5e,
	0x0d, 0x9a, 0x1d, 0x2a, 0x3b, 0x28, 0xd9, 0xaa, 0x5b, 0x54, 0x83, 0x3b, 0x54, 0x76, 0x4e, 0x53,
	0x5e, 0x9e, 0x97, 0xf2, 0x37, 0xb3, 0xdf, 0xd0, 0x38, 0xe3, 0xcf, 0xc0, 0x9c, 0x96, 0xb1, 0x6e,
	0xe2, 0x85, 0x12, 0x5e, 0xcf, 0x4f, 0xd8, 0x7e, 0x5b, 0x8f, 0x8f, 0xfb, 0x38, 0x53, 0xce, 0xde,
	0xcf, 0x0c, 0x4a, 0xf8, 0x3f, 0x8e, 0x27, 0x75, 0x28, 0xc6, 0xd3, 0x29, 0x77, 0xc0, 0xc4, 0x4e,
	0xba, 0x5e, 0xb5, 0x23, 0xd9, 0x86, 0x4b, 0x6c, 0xe0, 0x75, 0x28, 0xf7, 0x59, 0x33, 0xa2, 0x8a,
	0xa1, 0x74, 0xab, 0xee, 0xc5, 0x91, 0xd1, 0xa5, 0x8a, 0xd9, 0x1f, 0xe8, 0x79, 0x36, 0xa2, 0xa9,
	0xc5, 0xb9, 0x01, 0x17, 0x10, 0x25, 0x60, 0xa3, 0xb7, 0x6f, 0x66, 0xa9, 0xea, 0x98, 0xb1, 0xa7,
	0xfd, 0x9f, 0x01, 0xeb, 0x88, 0xb6, 0xdf, 0x8f, 0xf8, 0x7b, 0x47, 0x8c, 0xab, 0xc5, 0xfb, 0x81,
	0x40, 0x41, 0x0d, 0x0e, 0x6e, 0x69, 0x92, 0xf8, 0x4c, 0x2c, 0xb8, 0xd0, 0x15, 0x3e, 0x9e, 0x63,
	0xa9, 0x17, 0xdc, 0xf1, 0x7f, 0x62, 0xc3, 0x45, 0x8f, 0x06, 0x61, 0x03, 0x39, 0x1d, 0xdc, 0x32,
	0x0b, 0x71, 0x72, 0x49, 0x1b, 0x71, 0xc6, 0x3d, 0xb6, 0x82, 0x72, 0xa7, 0x1b, 0x7d, 0x48, 0x72,
	0x5a, 0x63, 0x15, 0xe7, 0xbd, 0x9e, 0x7b, 0x7a, 0x02, 0x26, 0x33, 0x1d, 0xef, 0x02, 0x68, 0x8d,
	0xad, 0x5a, 0xbd, 0xf5, 0xcc, 0xcd, 0x78, 0xec, 0x26, 0x3c, 0x1b, 0x7f, 0x9d, 0x87, 0x15, 0xc4,
	0x24, 0x0c, 0x4a, 0x89, 0x25, 0x43, 0xb6, 0x52, 0xc1, 0xd9, 0xa5, 0x64, 0x55, 0xa7, 0x3b, 0xc4,
	0x9c, 0xec, 0xb5, 0xaf, 0x7f, 0xff, 0xe7, 0xfb, 0xe5, 0x4b, 0xa4, 0x94, 0x58, 0x90, 0xe4, 0x07,
	0x03, 0xd6, 0x6e, 0x33, 0x35, 0xb9, 0x31, 0xc8, 0xab, 0x59, 0xb8, 0x29, 0xfb, 0xc9, 0xda, 0x5b,
	0xc4, 0x55, 0x73, 0xb8, 0x86, 0x1c, 0xaa, 0xa4, 0x82, 0x1c, 0x1e, 0xa3, 0x8e, 0x4f, 0x9c, 0xcc,
	0x4e, 0x22, 0x5f, 0xc1, 0xe5, 0xdb, 0x4c, 0x25, 0xa6, 0x37, 0xd9, 0xc9, 0xde, 0x92, 0xdd, 0x3c,
	0xd6, 0x2b, 0x73, 0xbc, 0x34, 0x8d, 0x2a, 0xd2, 0xb0, 0x88, 0x99, 0xa2, 0x91, 0x98, 0xf1, 0xe4,
	0x57, 0x43, 0x6f, 0xe5, 0x29, 0x43, 0x93, 0x5c, 0xcf, 0xd1, 0x7b, 0xe6, 0x3a, 0xb0, 0xea, 0x67,
	0x88, 0xd0, 0x3c, 0x6b, 0xc8, 0x73, 0x97, 0x5c, 0x4b, 0xf1, 0x9c, 0x3a, 0xa4, 0xc9, 0x6f, 0x06,
	0xbc, 0x3c, 0x03, 0x98, 0x38, 0x8b, 0x52, 0x18, 0x71, 0xbe, 0xbe, 0x78, 0x80, 0xa6, 0xfc, 0x26,
	0x52, 0xae, 0x13, 0x67, 0x21, 0xca, 0xce, 0x63, 0x3d, 0xea, 0x9f, 0x8c, 0x0b, 0x5e, 0x0f, 0xbb,
	0x9c, 0x82, 0x4f, 0x8d, 0xd1, 0xbc, 0x82, 0x4f, 0x0f, 0xb0, 0x89, 0x82, 0xd7, 0x13, 0xf1, 0x4b,
	0x78, 0x61, 0xa2, 0x69, 0xc9, 0x76, 0x16, 0x29, 0x33, 0xbc, 0xac, 0x9d, 0xd9, 0x4e, 0x33, 0x0b,
	0x6b, 0xd8, 0xe0, 0x4d, 0x86, 0x9e, 0xfb, 0x1f, 0x3d, 0x3d, 0xae, 0x18, 0xcf, 0x8e, 0x2b, 0xc6,
	0xdf, 0xc7, 0x15, 0xe3, 0xbb, 0x93, 0xca, 0xd2, 0xb3, 0x93, 0xca, 0xd2, 0x1f, 0x27, 0x95, 0xa5,
	0x07, 0x37, 0xfc, 0x40, 0x75, 0xfa, 0xad, 0x9a, 0x27, 0x7a, 0xce, 0x03, 0xc6, 0x23, 0xe1, 0x1d,
	0xbe, 0xf6, 0xbe, 0xe8, 0xf3, 0x36, 0x7e, 0xfd, 0x3a, 0xa3, 0x8f, 0xd4, 0xa3, 0x9b, 0xce, 0x00,
	0xd1, 0xd5, 0xa3, 0x90, 0xc9, 0x56, 0x11, 0xbf, 0x54, 0x5f, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x67, 0xff, 0x95, 0xaf, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of LockTransactions items.
	GetLockTransactions(ctx context.Context, in *QueryLockTransactionsRequest, opts ...grpc.CallOption) (*QueryLockTransactionsResponse, error)
	// Queries a list of Redemptions items.
	GetRedemptions(ctx context.Context, in *QueryRedemptionsRequest, opts ...grpc.CallOption) (*QueryRedemptionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransactions(ctx context.Context, in *QueryPendingMintTransactionsRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransaction(ctx context.Context, in *QueryPendingMintTransactionRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionResponse, error)
	// Queries the current supply snapshot for DCT assets.
	QuerySupply(ctx context.Context, in *QuerySupplyRequest, opts ...grpc.CallOption) (*QuerySupplyResponse, error)
	// Queries a list of BurnEvents items.
	QueryBurnEvents(ctx context.Context, in *QueryBurnEventsRequest, opts ...grpc.CallOption) (*QueryBurnEventsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLockTransactions(ctx context.Context, in *QueryLockTransactionsRequest, opts ...grpc.CallOption) (*QueryLockTransactionsResponse, error) {
	out := new(QueryLockTransactionsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/GetLockTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptions(ctx context.Context, in *QueryRedemptionsRequest, opts ...grpc.CallOption) (*QueryRedemptionsResponse, error) {
	out := new(QueryRedemptionsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/GetRedemptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingMintTransactions(ctx context.Context, in *QueryPendingMintTransactionsRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionsResponse, error) {
	out := new(QueryPendingMintTransactionsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/QueryPendingMintTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingMintTransaction(ctx context.Context, in *QueryPendingMintTransactionRequest, opts ...grpc.CallOption) (*QueryPendingMintTransactionResponse, error) {
	out := new(QueryPendingMintTransactionResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/QueryPendingMintTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySupply(ctx context.Context, in *QuerySupplyRequest, opts ...grpc.CallOption) (*QuerySupplyResponse, error) {
	out := new(QuerySupplyResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/QuerySupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBurnEvents(ctx context.Context, in *QueryBurnEventsRequest, opts ...grpc.CallOption) (*QueryBurnEventsResponse, error) {
	out := new(QueryBurnEventsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.dct.Query/QueryBurnEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of LockTransactions items.
	GetLockTransactions(context.Context, *QueryLockTransactionsRequest) (*QueryLockTransactionsResponse, error)
	// Queries a list of Redemptions items.
	GetRedemptions(context.Context, *QueryRedemptionsRequest) (*QueryRedemptionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransactions(context.Context, *QueryPendingMintTransactionsRequest) (*QueryPendingMintTransactionsResponse, error)
	// Queries a list of PendingMintTransactions items.
	QueryPendingMintTransaction(context.Context, *QueryPendingMintTransactionRequest) (*QueryPendingMintTransactionResponse, error)
	// Queries the current supply snapshot for DCT assets.
	QuerySupply(context.Context, *QuerySupplyRequest) (*QuerySupplyResponse, error)
	// Queries a list of BurnEvents items.
	QueryBurnEvents(context.Context, *QueryBurnEventsRequest) (*QueryBurnEventsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) GetLockTransactions(ctx context.Context, req *QueryLockTransactionsRequest) (*QueryLockTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockTransactions not implemented")
}
func (*UnimplementedQueryServer) GetRedemptions(ctx context.Context, req *QueryRedemptionsRequest) (*QueryRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptions not implemented")
}
func (*UnimplementedQueryServer) QueryPendingMintTransactions(ctx context.Context, req *QueryPendingMintTransactionsRequest) (*QueryPendingMintTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingMintTransactions not implemented")
}
func (*UnimplementedQueryServer) QueryPendingMintTransaction(ctx context.Context, req *QueryPendingMintTransactionRequest) (*QueryPendingMintTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingMintTransaction not implemented")
}
func (*UnimplementedQueryServer) QuerySupply(ctx context.Context, req *QuerySupplyRequest) (*QuerySupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySupply not implemented")
}
func (*UnimplementedQueryServer) QueryBurnEvents(ctx context.Context, req *QueryBurnEventsRequest) (*QueryBurnEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBurnEvents not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLockTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLockTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/GetLockTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLockTransactions(ctx, req.(*QueryLockTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/GetRedemptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptions(ctx, req.(*QueryRedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingMintTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingMintTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingMintTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/QueryPendingMintTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingMintTransactions(ctx, req.(*QueryPendingMintTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingMintTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingMintTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingMintTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/QueryPendingMintTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingMintTransaction(ctx, req.(*QueryPendingMintTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/QuerySupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySupply(ctx, req.(*QuerySupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBurnEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBurnEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBurnEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.dct.Query/QueryBurnEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBurnEvents(ctx, req.(*QueryBurnEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.dct.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "GetLockTransactions",
			Handler:    _Query_GetLockTransactions_Handler,
		},
		{
			MethodName: "GetRedemptions",
			Handler:    _Query_GetRedemptions_Handler,
		},
		{
			MethodName: "QueryPendingMintTransactions",
			Handler:    _Query_QueryPendingMintTransactions_Handler,
		},
		{
			MethodName: "QueryPendingMintTransaction",
			Handler:    _Query_QueryPendingMintTransaction_Handler,
		},
		{
			MethodName: "QuerySupply",
			Handler:    _Query_QuerySupply_Handler,
		},
		{
			MethodName: "QueryBurnEvents",
			Handler:    _Query_QueryBurnEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/dct/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockTransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockTransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockTransactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockTransactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockTransactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockTransactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockTransactions) > 0 {
		for iNdEx := len(m.LockTransactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockTransactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.StartIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redemptions) > 0 {
		for iNdEx := len(m.Redemptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Redemptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMintTransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMintTransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMintTransactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.StartIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMintTransactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMintTransactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMintTransactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingMintTransactions) > 0 {
		for iNdEx := len(m.PendingMintTransactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingMintTransactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMintTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMintTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMintTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMintTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMintTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMintTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingMintTransaction != nil {
		{
			size, err := m.PendingMintTransaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		i -= len(m.ExchangeRate)
		copy(dAtA[i:], m.ExchangeRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExchangeRate)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Supplies) > 0 {
		for iNdEx := len(m.Supplies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Supplies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBurnEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Caip2ChainID) > 0 {
		i -= len(m.Caip2ChainID)
		copy(dAtA[i:], m.Caip2ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caip2ChainID)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if m.StartIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBurnEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnEvents) > 0 {
		for iNdEx := len(m.BurnEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockTransactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != 0 {
		n += 1 + sovQuery(uint64(m.Asset))
	}
	return n
}

func (m *QueryLockTransactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockTransactions) > 0 {
		for _, e := range m.LockTransactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRedemptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartIndex != 0 {
		n += 1 + sovQuery(uint64(m.StartIndex))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Asset != 0 {
		n += 1 + sovQuery(uint64(m.Asset))
	}
	return n
}

func (m *QueryRedemptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Redemptions) > 0 {
		for _, e := range m.Redemptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingMintTransactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartIndex != 0 {
		n += 1 + sovQuery(uint64(m.StartIndex))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Asset != 0 {
		n += 1 + sovQuery(uint64(m.Asset))
	}
	return n
}

func (m *QueryPendingMintTransactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingMintTransactions) > 0 {
		for _, e := range m.PendingMintTransactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingMintTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Asset != 0 {
		n += 1 + sovQuery(uint64(m.Asset))
	}
	return n
}

func (m *QueryPendingMintTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PendingMintTransaction != nil {
		l = m.PendingMintTransaction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != 0 {
		n += 1 + sovQuery(uint64(m.Asset))
	}
	return n
}

func (m *AssetSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supply.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.ExchangeRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Supplies) > 0 {
		for _, e := range m.Supplies {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBurnEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartIndex != 0 {
		n += 1 + sovQuery(uint64(m.StartIndex))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	l = len(m.Caip2ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Asset != 0 {
		n += 1 + sovQuery(uint64(m.Asset))
	}
	return n
}

func (m *QueryBurnEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BurnEvents) > 0 {
		for _, e := range m.BurnEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockTransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockTransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockTransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockTransactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockTransactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockTransactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockTransactions = append(m.LockTransactions, &LockTransaction{})
			if err := m.LockTransactions[len(m.LockTransactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RedemptionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redemptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redemptions = append(m.Redemptions, Redemption{})
			if err := m.Redemptions[len(m.Redemptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMintTransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMintTransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMintTransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MintTransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMintTransactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMintTransactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMintTransactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingMintTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingMintTransactions = append(m.PendingMintTransactions, &PendingMintTransaction{})
			if err := m.PendingMintTransactions[len(m.PendingMintTransactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMintTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMintTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMintTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMintTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMintTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMintTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingMintTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingMintTransaction == nil {
				m.PendingMintTransaction = &PendingMintTransaction{}
			}
			if err := m.PendingMintTransaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supplies = append(m.Supplies, &AssetSupply{})
			if err := m.Supplies[len(m.Supplies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caip2ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caip2ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BurnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnEvents = append(m.BurnEvents, &BurnEvent{})
			if err := m.BurnEvents[len(m.BurnEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
