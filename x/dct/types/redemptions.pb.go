// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/dct/redemptions.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RedemptionStatus int32

const (
	RedemptionStatus_UNSPECIFIED   RedemptionStatus = 0
	RedemptionStatus_INITIATED     RedemptionStatus = 1
	RedemptionStatus_AWAITING_SIGN RedemptionStatus = 2
	RedemptionStatus_COMPLETED     RedemptionStatus = 3
)

var RedemptionStatus_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "INITIATED",
	2: "AWAITING_SIGN",
	3: "COMPLETED",
}

var RedemptionStatus_value = map[string]int32{
	"UNSPECIFIED":   0,
	"INITIATED":     1,
	"AWAITING_SIGN": 2,
	"COMPLETED":     3,
}

func (x RedemptionStatus) String() string {
	return proto.EnumName(RedemptionStatus_name, int32(x))
}

func (RedemptionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3606ebc400a1471, []int{0}
}

type BurnStatus int32

const (
	BurnStatus_BURN_STATUS_UNSPECIFIED BurnStatus = 0
	BurnStatus_BURN_STATUS_UNSTAKING   BurnStatus = 1
	BurnStatus_BURN_STATUS_UNSTAKED    BurnStatus = 2
)

var BurnStatus_name = map[int32]string{
	0: "BURN_STATUS_UNSPECIFIED",
	1: "BURN_STATUS_UNSTAKING",
	2: "BURN_STATUS_UNSTAKED",
}

var BurnStatus_value = map[string]int32{
	"BURN_STATUS_UNSPECIFIED": 0,
	"BURN_STATUS_UNSTAKING":   1,
	"BURN_STATUS_UNSTAKED":    2,
}

func (x BurnStatus) String() string {
	return proto.EnumName(BurnStatus_name, int32(x))
}

func (BurnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3606ebc400a1471, []int{1}
}

// Redemption contains the data for a redemption transaction.
type Redemption struct {
	Data   RedemptionData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Status RedemptionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zrchain.dct.RedemptionStatus" json:"status,omitempty"`
}

func (m *Redemption) Reset()         { *m = Redemption{} }
func (m *Redemption) String() string { return proto.CompactTextString(m) }
func (*Redemption) ProtoMessage()    {}
func (*Redemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3606ebc400a1471, []int{0}
}
func (m *Redemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redemption.Merge(m, src)
}
func (m *Redemption) XXX_Size() int {
	return m.Size()
}
func (m *Redemption) XXX_DiscardUnknown() {
	xxx_messageInfo_Redemption.DiscardUnknown(m)
}

var xxx_messageInfo_Redemption proto.InternalMessageInfo

func (m *Redemption) GetData() RedemptionData {
	if m != nil {
		return m.Data
	}
	return RedemptionData{}
}

func (m *Redemption) GetStatus() RedemptionStatus {
	if m != nil {
		return m.Status
	}
	return RedemptionStatus_UNSPECIFIED
}

type RedemptionData struct {
	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DestinationAddress []byte `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Amount             uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	SignReqId          uint64 `protobuf:"varint,4,opt,name=sign_req_id,json=signReqId,proto3" json:"sign_req_id,omitempty"`
	Asset              Asset  `protobuf:"varint,5,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *RedemptionData) Reset()         { *m = RedemptionData{} }
func (m *RedemptionData) String() string { return proto.CompactTextString(m) }
func (*RedemptionData) ProtoMessage()    {}
func (*RedemptionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3606ebc400a1471, []int{1}
}
func (m *RedemptionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedemptionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedemptionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedemptionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedemptionData.Merge(m, src)
}
func (m *RedemptionData) XXX_Size() int {
	return m.Size()
}
func (m *RedemptionData) XXX_DiscardUnknown() {
	xxx_messageInfo_RedemptionData.DiscardUnknown(m)
}

var xxx_messageInfo_RedemptionData proto.InternalMessageInfo

func (m *RedemptionData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RedemptionData) GetDestinationAddress() []byte {
	if m != nil {
		return m.DestinationAddress
	}
	return nil
}

func (m *RedemptionData) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RedemptionData) GetSignReqId() uint64 {
	if m != nil {
		return m.SignReqId
	}
	return 0
}

func (m *RedemptionData) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

type BurnEvent struct {
	Id              uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TxID            string     `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	LogIndex        uint64     `protobuf:"varint,3,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	ChainID         string     `protobuf:"bytes,4,opt,name=chainID,proto3" json:"chainID,omitempty"`
	DestinationAddr []byte     `protobuf:"bytes,5,opt,name=destinationAddr,proto3" json:"destinationAddr,omitempty"`
	Amount          uint64     `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Asset           Asset      `protobuf:"varint,7,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
	Status          BurnStatus `protobuf:"varint,8,opt,name=status,proto3,enum=zrchain.dct.BurnStatus" json:"status,omitempty"`
	MaturityHeight  int64      `protobuf:"varint,9,opt,name=maturity_height,json=maturityHeight,proto3" json:"maturity_height,omitempty"`
}

func (m *BurnEvent) Reset()         { *m = BurnEvent{} }
func (m *BurnEvent) String() string { return proto.CompactTextString(m) }
func (*BurnEvent) ProtoMessage()    {}
func (*BurnEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3606ebc400a1471, []int{2}
}
func (m *BurnEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnEvent.Merge(m, src)
}
func (m *BurnEvent) XXX_Size() int {
	return m.Size()
}
func (m *BurnEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BurnEvent proto.InternalMessageInfo

func (m *BurnEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BurnEvent) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *BurnEvent) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *BurnEvent) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *BurnEvent) GetDestinationAddr() []byte {
	if m != nil {
		return m.DestinationAddr
	}
	return nil
}

func (m *BurnEvent) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BurnEvent) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

func (m *BurnEvent) GetStatus() BurnStatus {
	if m != nil {
		return m.Status
	}
	return BurnStatus_BURN_STATUS_UNSPECIFIED
}

func (m *BurnEvent) GetMaturityHeight() int64 {
	if m != nil {
		return m.MaturityHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("zrchain.dct.RedemptionStatus", RedemptionStatus_name, RedemptionStatus_value)
	proto.RegisterEnum("zrchain.dct.BurnStatus", BurnStatus_name, BurnStatus_value)
	proto.RegisterType((*Redemption)(nil), "zrchain.dct.Redemption")
	proto.RegisterType((*RedemptionData)(nil), "zrchain.dct.RedemptionData")
	proto.RegisterType((*BurnEvent)(nil), "zrchain.dct.BurnEvent")
}

func init() { proto.RegisterFile("zrchain/dct/redemptions.proto", fileDescriptor_d3606ebc400a1471) }

var fileDescriptor_d3606ebc400a1471 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x8d, 0x4d, 0x08, 0xf8, 0x06, 0x82, 0xbf, 0xf9, 0x68, 0x71, 0x41, 0xb8, 0x88, 0x4d, 0x23,
	0xa4, 0xc6, 0x12, 0x2d, 0xdd, 0x3b, 0xd8, 0xd0, 0x51, 0x5b, 0x17, 0x4d, 0x8c, 0x2a, 0xb1, 0xa8,
	0x35, 0x64, 0x46, 0x8e, 0xd5, 0xc6, 0x0e, 0xf6, 0x18, 0x01, 0x4f, 0xd1, 0xf7, 0xe8, 0xb2, 0x2f,
	0xc1, 0x92, 0x65, 0x57, 0x55, 0x45, 0x5e, 0xa4, 0xf2, 0xe4, 0x87, 0x38, 0xa8, 0xea, 0x6e, 0xee,
	0x3d, 0x67, 0xce, 0x3d, 0x47, 0x57, 0x17, 0xb6, 0x6f, 0xd2, 0x6e, 0x8f, 0x46, 0xb1, 0xc5, 0xba,
	0xc2, 0x4a, 0x39, 0xe3, 0xfd, 0x81, 0x88, 0x92, 0x38, 0x6b, 0x0d, 0xd2, 0x44, 0x24, 0xa8, 0x3e,
	0x86, 0x5b, 0xac, 0x2b, 0x36, 0xd7, 0xc3, 0x24, 0x4c, 0x64, 0xdf, 0x2a, 0x5e, 0x23, 0xca, 0xa6,
	0x31, 0xab, 0x30, 0xa0, 0x29, 0xed, 0x8f, 0x3f, 0xef, 0xde, 0x00, 0x90, 0xa9, 0x22, 0x3a, 0x80,
	0x2a, 0xa3, 0x82, 0x1a, 0xca, 0x8e, 0xd2, 0xac, 0xef, 0x6f, 0xb5, 0x66, 0x94, 0x5b, 0x0f, 0x34,
	0x87, 0x0a, 0xda, 0xae, 0xde, 0xfe, 0x7a, 0x5e, 0x21, 0x92, 0x8e, 0x0e, 0xa0, 0x96, 0x09, 0x2a,
	0xf2, 0xcc, 0x50, 0x77, 0x94, 0x66, 0x63, 0x7f, 0xfb, 0x2f, 0x1f, 0x3b, 0x92, 0x44, 0xc6, 0xe4,
	0xdd, 0x1f, 0x0a, 0x34, 0xca, 0xaa, 0xa8, 0x01, 0x6a, 0xc4, 0xe4, 0xf8, 0x2a, 0x51, 0x23, 0x86,
	0x2c, 0xf8, 0x9f, 0xf1, 0x4c, 0x44, 0x31, 0x2d, 0x28, 0x01, 0x65, 0x2c, 0xe5, 0xd9, 0x68, 0xcc,
	0x0a, 0x41, 0x33, 0x90, 0x3d, 0x42, 0xd0, 0x53, 0xa8, 0xd1, 0x7e, 0x92, 0xc7, 0xc2, 0x58, 0x90,
	0x22, 0xe3, 0x0a, 0x99, 0x50, 0xcf, 0xa2, 0x30, 0x0e, 0x52, 0x7e, 0x11, 0x44, 0xcc, 0xa8, 0x4a,
	0x50, 0x2b, 0x5a, 0x84, 0x5f, 0x60, 0x86, 0x9a, 0xb0, 0x48, 0xb3, 0x8c, 0x0b, 0x63, 0x51, 0x26,
	0x40, 0xa5, 0x04, 0x76, 0x81, 0x90, 0x11, 0x61, 0xf7, 0xbb, 0x0a, 0x5a, 0x3b, 0x4f, 0x63, 0xf7,
	0x92, 0xc7, 0xe2, 0x91, 0x61, 0x04, 0x55, 0x71, 0x85, 0x1d, 0xe9, 0x50, 0x23, 0xf2, 0x8d, 0x36,
	0x61, 0xf9, 0x6b, 0x12, 0xe2, 0x98, 0xf1, 0xab, 0xb1, 0xab, 0x69, 0x8d, 0x0c, 0x58, 0x92, 0x73,
	0xb0, 0x23, 0x3d, 0x69, 0x64, 0x52, 0xa2, 0x26, 0xac, 0xcd, 0xe5, 0x93, 0xde, 0x56, 0xc8, 0x7c,
	0x7b, 0x26, 0x73, 0xad, 0x94, 0x79, 0x9a, 0x69, 0xe9, 0x1f, 0x99, 0x90, 0x35, 0x5d, 0xe0, 0xb2,
	0xa4, 0x6e, 0x94, 0xa8, 0x45, 0xda, 0xf2, 0xea, 0xd0, 0x0b, 0x58, 0xeb, 0x53, 0x91, 0xa7, 0x91,
	0xb8, 0x0e, 0x7a, 0x3c, 0x0a, 0x7b, 0xc2, 0xd0, 0x76, 0x94, 0xe6, 0x02, 0x69, 0x4c, 0xda, 0x6f,
	0x65, 0x77, 0xcf, 0x07, 0x7d, 0x7e, 0xff, 0x68, 0x0d, 0xea, 0xa7, 0x5e, 0xe7, 0xc4, 0x3d, 0xc4,
	0x47, 0xd8, 0x75, 0xf4, 0x0a, 0x5a, 0x05, 0x0d, 0x7b, 0xd8, 0xc7, 0xb6, 0xef, 0x3a, 0xba, 0x82,
	0xfe, 0x83, 0x55, 0xfb, 0x93, 0x8d, 0x7d, 0xec, 0x1d, 0x07, 0x1d, 0x7c, 0xec, 0xe9, 0x6a, 0xc1,
	0x38, 0xfc, 0xf8, 0xe1, 0xe4, 0xbd, 0x5b, 0x30, 0x16, 0xf6, 0x3e, 0x03, 0x3c, 0x98, 0x42, 0x5b,
	0xb0, 0xd1, 0x3e, 0x25, 0x5e, 0xd0, 0xf1, 0x6d, 0xff, 0xb4, 0x13, 0x94, 0xb5, 0x9f, 0xc1, 0x93,
	0x39, 0xd0, 0xb7, 0xdf, 0x61, 0xef, 0x58, 0x57, 0x90, 0x01, 0xeb, 0x8f, 0x21, 0xd7, 0xd1, 0xd5,
	0xb6, 0x77, 0x7b, 0x6f, 0x2a, 0x77, 0xf7, 0xa6, 0xf2, 0xfb, 0xde, 0x54, 0xbe, 0x0d, 0xcd, 0xca,
	0xdd, 0xd0, 0xac, 0xfc, 0x1c, 0x9a, 0x95, 0xb3, 0xd7, 0x61, 0x24, 0x7a, 0xf9, 0x79, 0xab, 0x9b,
	0xf4, 0xad, 0x33, 0x1e, 0xa7, 0x49, 0xf7, 0xcb, 0xcb, 0xa3, 0x24, 0x8f, 0x99, 0x5c, 0x87, 0x35,
	0xb9, 0xb3, 0xcb, 0x37, 0xd6, 0x95, 0x3c, 0x36, 0x71, 0x3d, 0xe0, 0xd9, 0x79, 0x4d, 0x1e, 0xdb,
	0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x40, 0xdc, 0xc0, 0xca, 0x03, 0x00, 0x00,
}

func (m *Redemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRedemptions(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedemptionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedemptionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedemptionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x28
	}
	if m.SignReqId != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.SignReqId))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintRedemptions(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BurnEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaturityHeight != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.MaturityHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Asset != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x38
	}
	if m.Amount != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DestinationAddr) > 0 {
		i -= len(m.DestinationAddr)
		copy(dAtA[i:], m.DestinationAddr)
		i = encodeVarintRedemptions(dAtA, i, uint64(len(m.DestinationAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintRedemptions(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogIndex != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintRedemptions(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedemptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedemptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Redemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovRedemptions(uint64(l))
	if m.Status != 0 {
		n += 1 + sovRedemptions(uint64(m.Status))
	}
	return n
}

func (m *RedemptionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRedemptions(uint64(m.Id))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovRedemptions(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovRedemptions(uint64(m.Amount))
	}
	if m.SignReqId != 0 {
		n += 1 + sovRedemptions(uint64(m.SignReqId))
	}
	if m.Asset != 0 {
		n += 1 + sovRedemptions(uint64(m.Asset))
	}
	return n
}

func (m *BurnEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRedemptions(uint64(m.Id))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovRedemptions(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovRedemptions(uint64(m.LogIndex))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovRedemptions(uint64(l))
	}
	l = len(m.DestinationAddr)
	if l > 0 {
		n += 1 + l + sovRedemptions(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovRedemptions(uint64(m.Amount))
	}
	if m.Asset != 0 {
		n += 1 + sovRedemptions(uint64(m.Asset))
	}
	if m.Status != 0 {
		n += 1 + sovRedemptions(uint64(m.Status))
	}
	if m.MaturityHeight != 0 {
		n += 1 + sovRedemptions(uint64(m.MaturityHeight))
	}
	return n
}

func sovRedemptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedemptions(x uint64) (n int) {
	return sovRedemptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Redemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RedemptionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedemptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedemptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedemptionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedemptionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedemptionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = append(m.DestinationAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationAddress == nil {
				m.DestinationAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignReqId", wireType)
			}
			m.SignReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedemptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedemptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddr = append(m.DestinationAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationAddr == nil {
				m.DestinationAddr = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BurnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityHeight", wireType)
			}
			m.MaturityHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaturityHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedemptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedemptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedemptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedemptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedemptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedemptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedemptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedemptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedemptions = fmt.Errorf("proto: unexpected end of group")
)
