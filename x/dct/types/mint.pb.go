// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/dct/mint.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintTransactionStatus int32

const (
	MintTransactionStatus_MINT_TRANSACTION_STATUS_UNSPECIFIED MintTransactionStatus = 0
	MintTransactionStatus_MINT_TRANSACTION_STATUS_DEPOSITED   MintTransactionStatus = 1
	MintTransactionStatus_MINT_TRANSACTION_STATUS_STAKED      MintTransactionStatus = 2
	MintTransactionStatus_MINT_TRANSACTION_STATUS_MINTED      MintTransactionStatus = 3
)

var MintTransactionStatus_name = map[int32]string{
	0: "MINT_TRANSACTION_STATUS_UNSPECIFIED",
	1: "MINT_TRANSACTION_STATUS_DEPOSITED",
	2: "MINT_TRANSACTION_STATUS_STAKED",
	3: "MINT_TRANSACTION_STATUS_MINTED",
}

var MintTransactionStatus_value = map[string]int32{
	"MINT_TRANSACTION_STATUS_UNSPECIFIED": 0,
	"MINT_TRANSACTION_STATUS_DEPOSITED":   1,
	"MINT_TRANSACTION_STATUS_STAKED":      2,
	"MINT_TRANSACTION_STATUS_MINTED":      3,
}

func (x MintTransactionStatus) String() string {
	return proto.EnumName(MintTransactionStatus_name, int32(x))
}

func (MintTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{0}
}

// WalletType specifies the Layer 1 blockchain that this wallet will be used
// for.
type WalletType int32

const (
	// The wallet type is missing (all wallets will be derived)
	WalletType_WALLET_TYPE_UNSPECIFIED WalletType = 0
	// The wallet type for native cosmos accounts
	WalletType_WALLET_TYPE_NATIVE WalletType = 1
	// The wallet type for mainnet ETH and its ERC-20 tokens
	WalletType_WALLET_TYPE_EVM WalletType = 2
	// The Wallet type for Testnet BTC
	WalletType_WALLET_TYPE_BTC_TESTNET WalletType = 3
	// The Wallet type for Mainnet BTC
	WalletType_WALLET_TYPE_BTC_MAINNET WalletType = 4
	// The Wallet type for RegNet - Local Test Network
	WalletType_WALLET_TYPE_BTC_REGNET WalletType = 5
	// Wallet type for Solana
	WalletType_WALLET_TYPE_SOLANA WalletType = 6
)

var WalletType_name = map[int32]string{
	0: "WALLET_TYPE_UNSPECIFIED",
	1: "WALLET_TYPE_NATIVE",
	2: "WALLET_TYPE_EVM",
	3: "WALLET_TYPE_BTC_TESTNET",
	4: "WALLET_TYPE_BTC_MAINNET",
	5: "WALLET_TYPE_BTC_REGNET",
	6: "WALLET_TYPE_SOLANA",
}

var WalletType_value = map[string]int32{
	"WALLET_TYPE_UNSPECIFIED": 0,
	"WALLET_TYPE_NATIVE":      1,
	"WALLET_TYPE_EVM":         2,
	"WALLET_TYPE_BTC_TESTNET": 3,
	"WALLET_TYPE_BTC_MAINNET": 4,
	"WALLET_TYPE_BTC_REGNET":  5,
	"WALLET_TYPE_SOLANA":      6,
}

func (x WalletType) String() string {
	return proto.EnumName(WalletType_name, int32(x))
}

func (WalletType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{1}
}

type NonceData struct {
	Nonce     uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Counter   uint64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Skip      bool   `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	PrevNonce uint64 `protobuf:"varint,4,opt,name=prev_nonce,json=prevNonce,proto3" json:"prev_nonce,omitempty"`
}

func (m *NonceData) Reset()         { *m = NonceData{} }
func (m *NonceData) String() string { return proto.CompactTextString(m) }
func (*NonceData) ProtoMessage()    {}
func (*NonceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{0}
}
func (m *NonceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceData.Merge(m, src)
}
func (m *NonceData) XXX_Size() int {
	return m.Size()
}
func (m *NonceData) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceData.DiscardUnknown(m)
}

var xxx_messageInfo_NonceData proto.InternalMessageInfo

func (m *NonceData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *NonceData) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *NonceData) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *NonceData) GetPrevNonce() uint64 {
	if m != nil {
		return m.PrevNonce
	}
	return 0
}

type RequestedBitcoinHeaders struct {
	Heights []int64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (m *RequestedBitcoinHeaders) Reset()         { *m = RequestedBitcoinHeaders{} }
func (m *RequestedBitcoinHeaders) String() string { return proto.CompactTextString(m) }
func (*RequestedBitcoinHeaders) ProtoMessage()    {}
func (*RequestedBitcoinHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{1}
}
func (m *RequestedBitcoinHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestedBitcoinHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestedBitcoinHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestedBitcoinHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestedBitcoinHeaders.Merge(m, src)
}
func (m *RequestedBitcoinHeaders) XXX_Size() int {
	return m.Size()
}
func (m *RequestedBitcoinHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestedBitcoinHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_RequestedBitcoinHeaders proto.InternalMessageInfo

func (m *RequestedBitcoinHeaders) GetHeights() []int64 {
	if m != nil {
		return m.Heights
	}
	return nil
}

type RequestedZcashHeaders struct {
	Heights []int64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (m *RequestedZcashHeaders) Reset()         { *m = RequestedZcashHeaders{} }
func (m *RequestedZcashHeaders) String() string { return proto.CompactTextString(m) }
func (*RequestedZcashHeaders) ProtoMessage()    {}
func (*RequestedZcashHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{2}
}
func (m *RequestedZcashHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestedZcashHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestedZcashHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestedZcashHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestedZcashHeaders.Merge(m, src)
}
func (m *RequestedZcashHeaders) XXX_Size() int {
	return m.Size()
}
func (m *RequestedZcashHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestedZcashHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_RequestedZcashHeaders proto.InternalMessageInfo

func (m *RequestedZcashHeaders) GetHeights() []int64 {
	if m != nil {
		return m.Heights
	}
	return nil
}

type LockTransaction struct {
	RawTx         string `protobuf:"bytes,1,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	Vout          uint64 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Sender        string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	MintRecipient string `protobuf:"bytes,4,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	Amount        uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockHeight   int64  `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Asset         Asset  `protobuf:"varint,7,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *LockTransaction) Reset()         { *m = LockTransaction{} }
func (m *LockTransaction) String() string { return proto.CompactTextString(m) }
func (*LockTransaction) ProtoMessage()    {}
func (*LockTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{3}
}
func (m *LockTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTransaction.Merge(m, src)
}
func (m *LockTransaction) XXX_Size() int {
	return m.Size()
}
func (m *LockTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_LockTransaction proto.InternalMessageInfo

func (m *LockTransaction) GetRawTx() string {
	if m != nil {
		return m.RawTx
	}
	return ""
}

func (m *LockTransaction) GetVout() uint64 {
	if m != nil {
		return m.Vout
	}
	return 0
}

func (m *LockTransaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *LockTransaction) GetMintRecipient() string {
	if m != nil {
		return m.MintRecipient
	}
	return ""
}

func (m *LockTransaction) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *LockTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *LockTransaction) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

// PendingMintTransaction is the metadata for a pending zenBTC mint transaction.
type PendingMintTransaction struct {
	ChainId            uint64                `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // Deprecated: Do not use.
	ChainType          WalletType            `protobuf:"varint,2,opt,name=chain_type,json=chainType,proto3,enum=zrchain.dct.WalletType" json:"chain_type,omitempty"`
	RecipientAddress   string                `protobuf:"bytes,3,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount             uint64                `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Creator            string                `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId              uint64                `protobuf:"varint,6,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // Deprecated: Do not use.
	Caip2ChainId       string                `protobuf:"bytes,7,opt,name=caip2_chain_id,json=caip2ChainId,proto3" json:"caip2_chain_id,omitempty"`
	Id                 uint64                `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	Status             MintTransactionStatus `protobuf:"varint,9,opt,name=status,proto3,enum=zrchain.dct.MintTransactionStatus" json:"status,omitempty"`
	ZrchainTxId        uint64                `protobuf:"varint,10,opt,name=zrchain_tx_id,json=zrchainTxId,proto3" json:"zrchain_tx_id,omitempty"`
	BlockHeight        int64                 `protobuf:"varint,11,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	AwaitingEventSince int64                 `protobuf:"varint,12,opt,name=awaiting_event_since,json=awaitingEventSince,proto3" json:"awaiting_event_since,omitempty"`
	TxHash             string                `protobuf:"bytes,13,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Asset              Asset                 `protobuf:"varint,14,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
}

func (m *PendingMintTransaction) Reset()         { *m = PendingMintTransaction{} }
func (m *PendingMintTransaction) String() string { return proto.CompactTextString(m) }
func (*PendingMintTransaction) ProtoMessage()    {}
func (*PendingMintTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{4}
}
func (m *PendingMintTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingMintTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingMintTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingMintTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingMintTransaction.Merge(m, src)
}
func (m *PendingMintTransaction) XXX_Size() int {
	return m.Size()
}
func (m *PendingMintTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingMintTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_PendingMintTransaction proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *PendingMintTransaction) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PendingMintTransaction) GetChainType() WalletType {
	if m != nil {
		return m.ChainType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *PendingMintTransaction) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *PendingMintTransaction) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PendingMintTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Deprecated: Do not use.
func (m *PendingMintTransaction) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *PendingMintTransaction) GetCaip2ChainId() string {
	if m != nil {
		return m.Caip2ChainId
	}
	return ""
}

func (m *PendingMintTransaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PendingMintTransaction) GetStatus() MintTransactionStatus {
	if m != nil {
		return m.Status
	}
	return MintTransactionStatus_MINT_TRANSACTION_STATUS_UNSPECIFIED
}

func (m *PendingMintTransaction) GetZrchainTxId() uint64 {
	if m != nil {
		return m.ZrchainTxId
	}
	return 0
}

func (m *PendingMintTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PendingMintTransaction) GetAwaitingEventSince() int64 {
	if m != nil {
		return m.AwaitingEventSince
	}
	return 0
}

func (m *PendingMintTransaction) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *PendingMintTransaction) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

// Deprecated: This message is deprecated and should no longer be used.
//
// Deprecated: Do not use.
type PendingMintTransactions struct {
	Txs []*PendingMintTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *PendingMintTransactions) Reset()         { *m = PendingMintTransactions{} }
func (m *PendingMintTransactions) String() string { return proto.CompactTextString(m) }
func (*PendingMintTransactions) ProtoMessage()    {}
func (*PendingMintTransactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6645623106a90320, []int{5}
}
func (m *PendingMintTransactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingMintTransactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingMintTransactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingMintTransactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingMintTransactions.Merge(m, src)
}
func (m *PendingMintTransactions) XXX_Size() int {
	return m.Size()
}
func (m *PendingMintTransactions) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingMintTransactions.DiscardUnknown(m)
}

var xxx_messageInfo_PendingMintTransactions proto.InternalMessageInfo

func (m *PendingMintTransactions) GetTxs() []*PendingMintTransaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterEnum("zrchain.dct.MintTransactionStatus", MintTransactionStatus_name, MintTransactionStatus_value)
	proto.RegisterEnum("zrchain.dct.WalletType", WalletType_name, WalletType_value)
	proto.RegisterType((*NonceData)(nil), "zrchain.dct.NonceData")
	proto.RegisterType((*RequestedBitcoinHeaders)(nil), "zrchain.dct.RequestedBitcoinHeaders")
	proto.RegisterType((*RequestedZcashHeaders)(nil), "zrchain.dct.RequestedZcashHeaders")
	proto.RegisterType((*LockTransaction)(nil), "zrchain.dct.LockTransaction")
	proto.RegisterType((*PendingMintTransaction)(nil), "zrchain.dct.PendingMintTransaction")
	proto.RegisterType((*PendingMintTransactions)(nil), "zrchain.dct.PendingMintTransactions")
}

func init() { proto.RegisterFile("zrchain/dct/mint.proto", fileDescriptor_6645623106a90320) }

var fileDescriptor_6645623106a90320 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x72, 0xdb, 0x36,
	0x10, 0x36, 0xf5, 0x67, 0x6b, 0x6d, 0x2b, 0x2c, 0x1a, 0x4b, 0x6c, 0x3a, 0xd1, 0x28, 0x4a, 0x33,
	0xd5, 0xa4, 0x53, 0xa9, 0x75, 0xda, 0x1c, 0x72, 0xa3, 0x2d, 0xa6, 0xe6, 0xd4, 0xa6, 0x3d, 0x20,
	0x92, 0x4c, 0x7d, 0xe1, 0xc0, 0x24, 0xc6, 0xc2, 0xc8, 0x06, 0x55, 0x02, 0xb2, 0xe5, 0x3e, 0x45,
	0x6f, 0x7d, 0x8c, 0xbe, 0x44, 0x0f, 0x3d, 0xe6, 0xd8, 0x63, 0xc6, 0x7e, 0x91, 0x0e, 0x40, 0x49,
	0x91, 0x15, 0x27, 0xb9, 0x61, 0xbf, 0xef, 0x5b, 0x00, 0xdf, 0xee, 0x02, 0x50, 0xff, 0x23, 0x8b,
	0x07, 0x94, 0x8b, 0x5e, 0x12, 0xab, 0xde, 0x39, 0x17, 0xaa, 0x3b, 0xca, 0x52, 0x95, 0xa2, 0xf5,
	0x29, 0xde, 0x4d, 0x62, 0xf5, 0xc0, 0x59, 0x14, 0x8d, 0x68, 0x46, 0xcf, 0x65, 0x2e, 0x6b, 0x0b,
	0xa8, 0x06, 0xa9, 0x88, 0x59, 0x9f, 0x2a, 0x8a, 0xee, 0x43, 0x59, 0xe8, 0xc0, 0xb1, 0x5a, 0x56,
	0xa7, 0x84, 0xf3, 0x00, 0x39, 0xb0, 0x1a, 0xa7, 0x63, 0xa1, 0x58, 0xe6, 0x14, 0x0c, 0x3e, 0x0b,
	0x11, 0x82, 0x92, 0x1c, 0xf2, 0x91, 0x53, 0x6c, 0x59, 0x9d, 0x35, 0x6c, 0xd6, 0xe8, 0x21, 0xc0,
	0x28, 0x63, 0x17, 0x51, 0xbe, 0x51, 0xc9, 0x24, 0x54, 0x35, 0x62, 0x8e, 0x69, 0x3f, 0x83, 0x06,
	0x66, 0xbf, 0x8f, 0x99, 0x54, 0x2c, 0xd9, 0xe1, 0x2a, 0x4e, 0xb9, 0xd8, 0x63, 0x34, 0x61, 0x99,
	0xd4, 0xe7, 0x0c, 0x18, 0x3f, 0x1d, 0x28, 0xe9, 0x58, 0xad, 0x62, 0xa7, 0x88, 0x67, 0x61, 0xfb,
	0x47, 0xd8, 0x9a, 0x27, 0x1d, 0xc7, 0x54, 0x0e, 0x3e, 0x9f, 0xf2, 0xce, 0x82, 0x7b, 0xfb, 0x69,
	0x3c, 0x24, 0x19, 0x15, 0x92, 0xc6, 0x8a, 0xa7, 0x02, 0x6d, 0x41, 0x25, 0xa3, 0x97, 0x91, 0x9a,
	0x18, 0x7f, 0x55, 0x5c, 0xce, 0xe8, 0x25, 0x99, 0x68, 0x17, 0x17, 0xe9, 0x58, 0x4d, 0xcd, 0x99,
	0x35, 0xaa, 0x43, 0x45, 0x32, 0x91, 0xb0, 0xcc, 0x78, 0xab, 0xe2, 0x69, 0x84, 0x9e, 0x40, 0x4d,
	0xd7, 0x38, 0xca, 0x58, 0xcc, 0x47, 0x9c, 0x09, 0x65, 0x1c, 0x56, 0xf1, 0xa6, 0x46, 0xf1, 0x0c,
	0xd4, 0xe9, 0xf4, 0x5c, 0x17, 0xc9, 0x29, 0x9b, 0x4d, 0xa7, 0x11, 0x7a, 0x04, 0x1b, 0x27, 0x67,
	0x69, 0x3c, 0x8c, 0xf2, 0x6b, 0x3a, 0x95, 0x96, 0xd5, 0x29, 0xe2, 0x75, 0x83, 0xed, 0x19, 0x08,
	0x75, 0xa0, 0x4c, 0xa5, 0x64, 0xca, 0x59, 0x6d, 0x59, 0x9d, 0xda, 0x36, 0xea, 0x2e, 0xf4, 0xb1,
	0xeb, 0x6a, 0x06, 0xe7, 0x82, 0xf6, 0x5f, 0x25, 0xa8, 0x1f, 0x31, 0x91, 0x70, 0x71, 0x7a, 0xc0,
	0x85, 0x5a, 0x74, 0xfa, 0x10, 0xd6, 0x4c, 0x52, 0xc4, 0x93, 0xbc, 0x97, 0x3b, 0x05, 0xc7, 0xc2,
	0xab, 0x06, 0xf3, 0x13, 0xf4, 0x1c, 0x20, 0xa7, 0xd5, 0xd5, 0x88, 0x19, 0xdf, 0xb5, 0xed, 0xc6,
	0xad, 0x83, 0xde, 0xd0, 0xb3, 0x33, 0xa6, 0xc8, 0xd5, 0x88, 0xe1, 0xaa, 0x41, 0xf5, 0x12, 0x7d,
	0x07, 0x5f, 0xcc, 0x8d, 0x47, 0x34, 0x49, 0x32, 0x26, 0xe5, 0xb4, 0x40, 0xf6, 0x9c, 0x70, 0x73,
	0x7c, 0xa1, 0x06, 0xa5, 0x5b, 0x35, 0xd0, 0xe3, 0x94, 0x31, 0xaa, 0xd2, 0xcc, 0x14, 0xa7, 0x8a,
	0x67, 0x21, 0xfa, 0x0a, 0x2a, 0x43, 0x76, 0xa5, 0xef, 0x5c, 0x99, 0xdf, 0xb9, 0x3c, 0x64, 0x57,
	0x7e, 0x82, 0xbe, 0x81, 0x5a, 0x4c, 0xf9, 0x68, 0x3b, 0x9a, 0xdb, 0x5a, 0x35, 0xb9, 0x1b, 0x06,
	0xdd, 0x9d, 0xfa, 0xaa, 0x41, 0x81, 0x27, 0xce, 0x9a, 0x39, 0xae, 0xc0, 0x13, 0xf4, 0x02, 0x2a,
	0x52, 0x51, 0x35, 0x96, 0x4e, 0xd5, 0x78, 0x6c, 0xdf, 0xf2, 0xb8, 0x54, 0xb4, 0xd0, 0x28, 0xf1,
	0x34, 0x03, 0xb5, 0x61, 0x73, 0x2a, 0x8e, 0xd4, 0x44, 0x1f, 0x08, 0x66, 0xdb, 0xd9, 0xb3, 0x22,
	0x13, 0x3f, 0xf9, 0xa0, 0x9d, 0xeb, 0x1f, 0xb6, 0xf3, 0x07, 0xb8, 0x4f, 0x2f, 0x29, 0x57, 0x5c,
	0x9c, 0x46, 0xec, 0x42, 0xd7, 0x4d, 0x72, 0xfd, 0x30, 0x36, 0x8c, 0x14, 0xcd, 0x38, 0x4f, 0x53,
	0xa1, 0x66, 0x50, 0x03, 0x56, 0xd5, 0x24, 0x1a, 0x50, 0x39, 0x70, 0x36, 0xf3, 0xd9, 0x53, 0x93,
	0x3d, 0x2a, 0x07, 0xef, 0x27, 0xa3, 0xf6, 0xb9, 0xc9, 0x20, 0xd0, 0xb8, 0x7b, 0x30, 0x24, 0xfa,
	0x19, 0x8a, 0x6a, 0x92, 0xbf, 0x96, 0xf5, 0xed, 0xc7, 0xb7, 0xb6, 0xb8, 0x3b, 0x05, 0x6b, 0xfd,
	0x8b, 0x82, 0x63, 0x3d, 0xfd, 0xdb, 0x82, 0xad, 0x3b, 0x6b, 0x86, 0xbe, 0x85, 0xc7, 0x07, 0x7e,
	0x40, 0x22, 0x82, 0xdd, 0x20, 0x74, 0x77, 0x89, 0x7f, 0x18, 0x44, 0x21, 0x71, 0xc9, 0xab, 0x30,
	0x7a, 0x15, 0x84, 0x47, 0xde, 0xae, 0xff, 0xd2, 0xf7, 0xfa, 0xf6, 0x0a, 0x7a, 0x02, 0x8f, 0x3e,
	0x26, 0xec, 0x7b, 0x47, 0x87, 0xa1, 0x4f, 0xbc, 0xbe, 0x6d, 0xa1, 0x36, 0x34, 0x3f, 0x26, 0x0b,
	0x89, 0xfb, 0xab, 0xd7, 0xb7, 0x0b, 0x9f, 0xd2, 0x68, 0xdc, 0xeb, 0xdb, 0xc5, 0xa7, 0xff, 0x58,
	0x00, 0xef, 0x27, 0x19, 0x7d, 0x0d, 0x8d, 0x37, 0xee, 0xfe, 0xbe, 0x47, 0x22, 0xf2, 0xdb, 0x91,
	0xb7, 0x74, 0xb5, 0x3a, 0xa0, 0x45, 0x32, 0x70, 0x89, 0xff, 0xda, 0xb3, 0x2d, 0xf4, 0x25, 0xdc,
	0x5b, 0xc4, 0xbd, 0xd7, 0x07, 0x76, 0x61, 0x79, 0xa7, 0x1d, 0xb2, 0x1b, 0x11, 0x2f, 0x24, 0x81,
	0x47, 0xec, 0xe2, 0x5d, 0xe4, 0x81, 0xeb, 0x07, 0x9a, 0x2c, 0xa1, 0x07, 0x50, 0x5f, 0x26, 0xb1,
	0xf7, 0x8b, 0xe6, 0xca, 0xcb, 0x57, 0x08, 0x0f, 0xf7, 0xdd, 0xc0, 0xb5, 0x2b, 0x3b, 0xc1, 0xbf,
	0xd7, 0x4d, 0xeb, 0xed, 0x75, 0xd3, 0x7a, 0x77, 0xdd, 0xb4, 0xfe, 0xbc, 0x69, 0xae, 0xbc, 0xbd,
	0x69, 0xae, 0xfc, 0x77, 0xd3, 0x5c, 0x39, 0xfe, 0xe9, 0x94, 0xab, 0xc1, 0xf8, 0xa4, 0x1b, 0xa7,
	0xe7, 0xbd, 0x63, 0x26, 0xb2, 0x34, 0x1e, 0x7e, 0xff, 0x32, 0x1d, 0x8b, 0x84, 0xea, 0xee, 0xf4,
	0x66, 0xbf, 0xfe, 0xc5, 0xf3, 0xde, 0xc4, 0x7c, 0xfd, 0xfa, 0xbd, 0xcb, 0x93, 0x8a, 0xf9, 0xfa,
	0x9f, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x04, 0x8e, 0x76, 0x71, 0x3b, 0x06, 0x00, 0x00,
}

func (m *NonceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevNonce != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.PrevNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.Skip {
		i--
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Counter != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestedBitcoinHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestedBitcoinHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestedBitcoinHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Heights) > 0 {
		dAtA2 := make([]byte, len(m.Heights)*10)
		var j1 int
		for _, num1 := range m.Heights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMint(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestedZcashHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestedZcashHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestedZcashHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Heights) > 0 {
		dAtA4 := make([]byte, len(m.Heights)*10)
		var j3 int
		for _, num1 := range m.Heights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMint(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintMint(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Vout != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Vout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RawTx) > 0 {
		i -= len(m.RawTx)
		copy(dAtA[i:], m.RawTx)
		i = encodeVarintMint(dAtA, i, uint64(len(m.RawTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingMintTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingMintTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingMintTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x70
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMint(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x6a
	}
	if m.AwaitingEventSince != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.AwaitingEventSince))
		i--
		dAtA[i] = 0x60
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if m.ZrchainTxId != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.ZrchainTxId))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.Id != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Caip2ChainId) > 0 {
		i -= len(m.Caip2ChainId)
		copy(dAtA[i:], m.Caip2ChainId)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Caip2ChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.KeyId != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintMint(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingMintTransactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingMintTransactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingMintTransactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NonceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMint(uint64(m.Nonce))
	}
	if m.Counter != 0 {
		n += 1 + sovMint(uint64(m.Counter))
	}
	if m.Skip {
		n += 2
	}
	if m.PrevNonce != 0 {
		n += 1 + sovMint(uint64(m.PrevNonce))
	}
	return n
}

func (m *RequestedBitcoinHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Heights) > 0 {
		l = 0
		for _, e := range m.Heights {
			l += sovMint(uint64(e))
		}
		n += 1 + sovMint(uint64(l)) + l
	}
	return n
}

func (m *RequestedZcashHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Heights) > 0 {
		l = 0
		for _, e := range m.Heights {
			l += sovMint(uint64(e))
		}
		n += 1 + sovMint(uint64(l)) + l
	}
	return n
}

func (m *LockTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawTx)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Vout != 0 {
		n += 1 + sovMint(uint64(m.Vout))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovMint(uint64(m.Amount))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMint(uint64(m.BlockHeight))
	}
	if m.Asset != 0 {
		n += 1 + sovMint(uint64(m.Asset))
	}
	return n
}

func (m *PendingMintTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovMint(uint64(m.ChainId))
	}
	if m.ChainType != 0 {
		n += 1 + sovMint(uint64(m.ChainType))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovMint(uint64(m.Amount))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovMint(uint64(m.KeyId))
	}
	l = len(m.Caip2ChainId)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMint(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovMint(uint64(m.Status))
	}
	if m.ZrchainTxId != 0 {
		n += 1 + sovMint(uint64(m.ZrchainTxId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMint(uint64(m.BlockHeight))
	}
	if m.AwaitingEventSince != 0 {
		n += 1 + sovMint(uint64(m.AwaitingEventSince))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Asset != 0 {
		n += 1 + sovMint(uint64(m.Asset))
	}
	return n
}

func (m *PendingMintTransactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovMint(uint64(l))
		}
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NonceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevNonce", wireType)
			}
			m.PrevNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestedBitcoinHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestedBitcoinHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestedBitcoinHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heights = append(m.Heights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMint
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMint
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Heights) == 0 {
					m.Heights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heights = append(m.Heights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestedZcashHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestedZcashHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestedZcashHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heights = append(m.Heights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMint
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMint
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Heights) == 0 {
					m.Heights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heights = append(m.Heights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
			}
			m.Vout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingMintTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingMintTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingMintTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caip2ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caip2ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MintTransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZrchainTxId", wireType)
			}
			m.ZrchainTxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZrchainTxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitingEventSince", wireType)
			}
			m.AwaitingEventSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwaitingEventSince |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingMintTransactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingMintTransactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingMintTransactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &PendingMintTransaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)
