// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/dct/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Asset int32

const (
	Asset_ASSET_UNSPECIFIED Asset = 0
	Asset_ASSET_ZENBTC      Asset = 1
	Asset_ASSET_ZENZEC      Asset = 2
)

var Asset_name = map[int32]string{
	0: "ASSET_UNSPECIFIED",
	1: "ASSET_ZENBTC",
	2: "ASSET_ZENZEC",
}

var Asset_value = map[string]int32{
	"ASSET_UNSPECIFIED": 0,
	"ASSET_ZENBTC":      1,
	"ASSET_ZENZEC":      2,
}

func (x Asset) String() string {
	return proto.EnumName(Asset_name, int32(x))
}

func (Asset) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22822d50c91b4396, []int{0}
}

// Params defines the parameters for the module.
type Params struct {
	Assets []AssetParams `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_22822d50c91b4396, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAssets() []AssetParams {
	if m != nil {
		return m.Assets
	}
	return nil
}

type AssetParams struct {
	Asset               Asset    `protobuf:"varint,1,opt,name=asset,proto3,enum=zrchain.dct.Asset" json:"asset,omitempty"`
	DepositKeyringAddr  string   `protobuf:"bytes,2,opt,name=deposit_keyring_addr,json=depositKeyringAddr,proto3" json:"deposit_keyring_addr,omitempty"`
	StakerKeyId         uint64   `protobuf:"varint,3,opt,name=staker_key_id,json=stakerKeyId,proto3" json:"staker_key_id,omitempty"`
	EthMinterKeyId      uint64   `protobuf:"varint,4,opt,name=eth_minter_key_id,json=ethMinterKeyId,proto3" json:"eth_minter_key_id,omitempty"`
	UnstakerKeyId       uint64   `protobuf:"varint,5,opt,name=unstaker_key_id,json=unstakerKeyId,proto3" json:"unstaker_key_id,omitempty"`
	CompleterKeyId      uint64   `protobuf:"varint,6,opt,name=completer_key_id,json=completerKeyId,proto3" json:"completer_key_id,omitempty"`
	RewardsDepositKeyId uint64   `protobuf:"varint,7,opt,name=rewards_deposit_key_id,json=rewardsDepositKeyId,proto3" json:"rewards_deposit_key_id,omitempty"`
	ChangeAddressKeyIds []uint64 `protobuf:"varint,8,rep,packed,name=change_address_key_ids,json=changeAddressKeyIds,proto3" json:"change_address_key_ids,omitempty"`
	ProxyAddress        string   `protobuf:"bytes,9,opt,name=proxy_address,json=proxyAddress,proto3" json:"proxy_address,omitempty"`
	EthTokenAddr        string   `protobuf:"bytes,10,opt,name=eth_token_addr,json=ethTokenAddr,proto3" json:"eth_token_addr,omitempty"`
	ControllerAddr      string   `protobuf:"bytes,11,opt,name=controller_addr,json=controllerAddr,proto3" json:"controller_addr,omitempty"`
	Solana              *Solana  `protobuf:"bytes,12,opt,name=solana,proto3" json:"solana,omitempty"`
}

func (m *AssetParams) Reset()         { *m = AssetParams{} }
func (m *AssetParams) String() string { return proto.CompactTextString(m) }
func (*AssetParams) ProtoMessage()    {}
func (*AssetParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_22822d50c91b4396, []int{1}
}
func (m *AssetParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetParams.Merge(m, src)
}
func (m *AssetParams) XXX_Size() int {
	return m.Size()
}
func (m *AssetParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetParams.DiscardUnknown(m)
}

var xxx_messageInfo_AssetParams proto.InternalMessageInfo

func (m *AssetParams) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_ASSET_UNSPECIFIED
}

func (m *AssetParams) GetDepositKeyringAddr() string {
	if m != nil {
		return m.DepositKeyringAddr
	}
	return ""
}

func (m *AssetParams) GetStakerKeyId() uint64 {
	if m != nil {
		return m.StakerKeyId
	}
	return 0
}

func (m *AssetParams) GetEthMinterKeyId() uint64 {
	if m != nil {
		return m.EthMinterKeyId
	}
	return 0
}

func (m *AssetParams) GetUnstakerKeyId() uint64 {
	if m != nil {
		return m.UnstakerKeyId
	}
	return 0
}

func (m *AssetParams) GetCompleterKeyId() uint64 {
	if m != nil {
		return m.CompleterKeyId
	}
	return 0
}

func (m *AssetParams) GetRewardsDepositKeyId() uint64 {
	if m != nil {
		return m.RewardsDepositKeyId
	}
	return 0
}

func (m *AssetParams) GetChangeAddressKeyIds() []uint64 {
	if m != nil {
		return m.ChangeAddressKeyIds
	}
	return nil
}

func (m *AssetParams) GetProxyAddress() string {
	if m != nil {
		return m.ProxyAddress
	}
	return ""
}

func (m *AssetParams) GetEthTokenAddr() string {
	if m != nil {
		return m.EthTokenAddr
	}
	return ""
}

func (m *AssetParams) GetControllerAddr() string {
	if m != nil {
		return m.ControllerAddr
	}
	return ""
}

func (m *AssetParams) GetSolana() *Solana {
	if m != nil {
		return m.Solana
	}
	return nil
}

type Solana struct {
	SignerKeyId         uint64 `protobuf:"varint,1,opt,name=signer_key_id,json=signerKeyId,proto3" json:"signer_key_id,omitempty"`
	ProgramId           string `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	NonceAccountKey     uint64 `protobuf:"varint,3,opt,name=nonce_account_key,json=nonceAccountKey,proto3" json:"nonce_account_key,omitempty"`
	NonceAuthorityKey   uint64 `protobuf:"varint,4,opt,name=nonce_authority_key,json=nonceAuthorityKey,proto3" json:"nonce_authority_key,omitempty"`
	MintAddress         string `protobuf:"bytes,5,opt,name=mint_address,json=mintAddress,proto3" json:"mint_address,omitempty"`
	FeeWallet           string `protobuf:"bytes,6,opt,name=fee_wallet,json=feeWallet,proto3" json:"fee_wallet,omitempty"`
	Fee                 uint64 `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	MultisigKeyAddress  string `protobuf:"bytes,8,opt,name=multisig_key_address,json=multisigKeyAddress,proto3" json:"multisig_key_address,omitempty"`
	Btl                 int64  `protobuf:"varint,9,opt,name=btl,proto3" json:"btl,omitempty"`
	EventStoreProgramId string `protobuf:"bytes,10,opt,name=event_store_program_id,json=eventStoreProgramId,proto3" json:"event_store_program_id,omitempty"`
}

func (m *Solana) Reset()         { *m = Solana{} }
func (m *Solana) String() string { return proto.CompactTextString(m) }
func (*Solana) ProtoMessage()    {}
func (*Solana) Descriptor() ([]byte, []int) {
	return fileDescriptor_22822d50c91b4396, []int{2}
}
func (m *Solana) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Solana) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Solana.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Solana) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solana.Merge(m, src)
}
func (m *Solana) XXX_Size() int {
	return m.Size()
}
func (m *Solana) XXX_DiscardUnknown() {
	xxx_messageInfo_Solana.DiscardUnknown(m)
}

var xxx_messageInfo_Solana proto.InternalMessageInfo

func (m *Solana) GetSignerKeyId() uint64 {
	if m != nil {
		return m.SignerKeyId
	}
	return 0
}

func (m *Solana) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

func (m *Solana) GetNonceAccountKey() uint64 {
	if m != nil {
		return m.NonceAccountKey
	}
	return 0
}

func (m *Solana) GetNonceAuthorityKey() uint64 {
	if m != nil {
		return m.NonceAuthorityKey
	}
	return 0
}

func (m *Solana) GetMintAddress() string {
	if m != nil {
		return m.MintAddress
	}
	return ""
}

func (m *Solana) GetFeeWallet() string {
	if m != nil {
		return m.FeeWallet
	}
	return ""
}

func (m *Solana) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Solana) GetMultisigKeyAddress() string {
	if m != nil {
		return m.MultisigKeyAddress
	}
	return ""
}

func (m *Solana) GetBtl() int64 {
	if m != nil {
		return m.Btl
	}
	return 0
}

func (m *Solana) GetEventStoreProgramId() string {
	if m != nil {
		return m.EventStoreProgramId
	}
	return ""
}

func init() {
	proto.RegisterEnum("zrchain.dct.Asset", Asset_name, Asset_value)
	proto.RegisterType((*Params)(nil), "zrchain.dct.Params")
	proto.RegisterType((*AssetParams)(nil), "zrchain.dct.AssetParams")
	proto.RegisterType((*Solana)(nil), "zrchain.dct.Solana")
}

func init() { proto.RegisterFile("zrchain/dct/params.proto", fileDescriptor_22822d50c91b4396) }

var fileDescriptor_22822d50c91b4396 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0x4f, 0x4f, 0x1a, 0x41,
	0x18, 0xc6, 0x59, 0xf9, 0x53, 0x19, 0x50, 0x61, 0xb0, 0xcd, 0xc6, 0x44, 0xa4, 0xb4, 0x69, 0xa9,
	0x4d, 0xa1, 0xd1, 0xc6, 0x83, 0x37, 0x50, 0x4c, 0x08, 0xa9, 0x31, 0x60, 0xd3, 0x84, 0xcb, 0x66,
	0xdc, 0x1d, 0x97, 0x0d, 0xcb, 0x0c, 0x99, 0x19, 0x54, 0xfa, 0x11, 0x7a, 0xea, 0xbd, 0x97, 0x7e,
	0x84, 0x7e, 0x0c, 0x8f, 0x1e, 0x7b, 0x6a, 0x1a, 0x3d, 0xb4, 0x9f, 0xa1, 0xa7, 0x66, 0xde, 0xd9,
	0x45, 0x4c, 0x2f, 0x64, 0xf2, 0x3c, 0xbf, 0xf7, 0xdd, 0x9d, 0xe7, 0x7d, 0x59, 0x64, 0x7f, 0x12,
	0xee, 0x90, 0x04, 0xac, 0xe1, 0xb9, 0xaa, 0x31, 0x21, 0x82, 0x8c, 0x65, 0x7d, 0x22, 0xb8, 0xe2,
	0x38, 0x17, 0x39, 0x75, 0xcf, 0x55, 0x1b, 0x45, 0x32, 0x0e, 0x18, 0x6f, 0xc0, 0xaf, 0xf1, 0x37,
	0xd6, 0x7d, 0xee, 0x73, 0x38, 0x36, 0xf4, 0xc9, 0xa8, 0x55, 0x07, 0x65, 0x4e, 0xa0, 0x0b, 0xde,
	0x43, 0x19, 0x22, 0x25, 0x55, 0xd2, 0xb6, 0x2a, 0xc9, 0x5a, 0x6e, 0xc7, 0xae, 0x2f, 0x34, 0xac,
	0x37, 0xb5, 0x65, 0xc8, 0x56, 0xea, 0xfa, 0xe7, 0x56, 0xa2, 0x17, 0xd1, 0xfb, 0x9b, 0x7f, 0xbe,
	0x6d, 0x59, 0x9f, 0x7f, 0x7f, 0xdf, 0x5e, 0x8f, 0x5f, 0xed, 0x0a, 0x5e, 0xce, 0xc0, 0xd5, 0xaf,
	0x29, 0x94, 0x5b, 0x28, 0xc6, 0x35, 0x94, 0x86, 0x42, 0xdb, 0xaa, 0x58, 0xb5, 0xd5, 0x1d, 0xfc,
	0xff, 0x53, 0x7a, 0x06, 0xc0, 0x6f, 0xd1, 0xba, 0x47, 0x27, 0x5c, 0x06, 0xca, 0x19, 0xd1, 0x99,
	0x08, 0x98, 0xef, 0x10, 0xcf, 0x13, 0xf6, 0x52, 0xc5, 0xaa, 0x65, 0x7b, 0x38, 0xf2, 0xba, 0xc6,
	0x6a, 0x7a, 0x9e, 0xc0, 0x55, 0xb4, 0x22, 0x15, 0x19, 0x51, 0xa1, 0x0b, 0x9c, 0xc0, 0xb3, 0x93,
	0x15, 0xab, 0x96, 0xea, 0xe5, 0x8c, 0xd8, 0xa5, 0xb3, 0x8e, 0x87, 0x5f, 0xa1, 0x22, 0x55, 0x43,
	0x67, 0x1c, 0x30, 0x75, 0xcf, 0xa5, 0x80, 0x5b, 0xa5, 0x6a, 0xf8, 0x1e, 0x74, 0x83, 0xbe, 0x40,
	0x6b, 0x53, 0xf6, 0xb0, 0x61, 0x1a, 0xc0, 0x95, 0x58, 0x36, 0x5c, 0x0d, 0x15, 0x5c, 0x3e, 0x9e,
	0x84, 0x74, 0xa1, 0x63, 0xc6, 0x74, 0x9c, 0xeb, 0x86, 0xdc, 0x45, 0x4f, 0x04, 0xbd, 0x24, 0xc2,
	0x93, 0xce, 0xc2, 0xd5, 0x34, 0xff, 0x08, 0xf8, 0x52, 0xe4, 0x1e, 0xce, 0xef, 0x66, 0x8a, 0xdc,
	0x21, 0x61, 0x3e, 0x85, 0xeb, 0x53, 0x29, 0xa3, 0x1a, 0x69, 0x2f, 0x57, 0x92, 0xba, 0xc8, 0xb8,
	0x4d, 0x63, 0x42, 0x8d, 0xc4, 0xcf, 0xd0, 0xca, 0x44, 0xf0, 0xab, 0x59, 0x5c, 0x63, 0x67, 0x21,
	0xb5, 0x3c, 0x88, 0x11, 0x8a, 0x9f, 0x23, 0x7d, 0x65, 0x47, 0xf1, 0x11, 0x65, 0x26, 0x5b, 0x64,
	0x28, 0xaa, 0x86, 0xa7, 0x5a, 0x84, 0x54, 0x5f, 0xa2, 0x35, 0x97, 0x33, 0x25, 0x78, 0x18, 0x52,
	0x61, 0xb0, 0x1c, 0x60, 0xab, 0xf7, 0x32, 0x80, 0xaf, 0x51, 0x46, 0xf2, 0x90, 0x30, 0x62, 0xe7,
	0x2b, 0x56, 0x2d, 0xb7, 0x53, 0x7a, 0x30, 0xdb, 0x3e, 0x58, 0xbd, 0x08, 0xd9, 0x4f, 0xe9, 0xb5,
	0xa9, 0xfe, 0x5d, 0x42, 0x19, 0x63, 0xc0, 0xf0, 0x02, 0x9f, 0xdd, 0x47, 0x68, 0x45, 0xc3, 0x03,
	0xd1, 0x44, 0xb1, 0x89, 0xd0, 0x44, 0x70, 0x5f, 0x90, 0xb1, 0x06, 0xcc, 0x22, 0x64, 0x23, 0xa5,
	0xe3, 0xe1, 0x6d, 0x54, 0x64, 0x9c, 0xb9, 0xd4, 0x21, 0xae, 0xcb, 0xa7, 0x0c, 0xc2, 0x8d, 0x76,
	0x60, 0x0d, 0x8c, 0xa6, 0xd1, 0xbb, 0x74, 0x86, 0xeb, 0xa8, 0x14, 0xb1, 0x53, 0x35, 0xe4, 0x22,
	0x50, 0x33, 0xa0, 0xcd, 0x26, 0x98, 0x36, 0xcd, 0xd8, 0xd1, 0xfc, 0x53, 0x94, 0xd7, 0x3b, 0x33,
	0xcf, 0x33, 0x0d, 0x0f, 0xcf, 0x69, 0x2d, 0x8e, 0x73, 0x13, 0xa1, 0x73, 0x4a, 0x9d, 0x4b, 0x12,
	0x86, 0x54, 0xc1, 0x06, 0x64, 0x7b, 0xd9, 0x73, 0x4a, 0x3f, 0x82, 0x80, 0x0b, 0x28, 0x79, 0x4e,
	0x69, 0x34, 0x69, 0x7d, 0xd4, 0x1b, 0x3e, 0x9e, 0x86, 0x2a, 0x90, 0x81, 0x0f, 0x97, 0x8e, 0x7b,
	0x2f, 0x9b, 0x0d, 0x8f, 0xbd, 0x2e, 0x9d, 0x4f, 0xac, 0x80, 0x92, 0x67, 0x2a, 0x84, 0x61, 0x26,
	0x7b, 0xfa, 0xa8, 0xb7, 0x83, 0x5e, 0x50, 0xa6, 0x1c, 0xa9, 0xb8, 0xa0, 0xce, 0x42, 0x3c, 0x66,
	0x96, 0x25, 0x70, 0xfb, 0xda, 0x3c, 0x89, 0x83, 0x32, 0xe1, 0x6f, 0xb7, 0x50, 0x1a, 0xfe, 0x70,
	0xf8, 0x31, 0x2a, 0x36, 0xfb, 0xfd, 0xf6, 0xa9, 0xf3, 0xe1, 0xb8, 0x7f, 0xd2, 0x3e, 0xe8, 0x1c,
	0x75, 0xda, 0x87, 0x85, 0x04, 0x2e, 0xa0, 0xbc, 0x91, 0x07, 0xed, 0xe3, 0xd6, 0xe9, 0x41, 0xc1,
	0x7a, 0xa0, 0x0c, 0xda, 0x07, 0x85, 0xa5, 0xd6, 0xf1, 0xf5, 0x6d, 0xd9, 0xba, 0xb9, 0x2d, 0x5b,
	0xbf, 0x6e, 0xcb, 0xd6, 0x97, 0xbb, 0x72, 0xe2, 0xe6, 0xae, 0x9c, 0xf8, 0x71, 0x57, 0x4e, 0x0c,
	0xde, 0xf9, 0x81, 0x1a, 0x4e, 0xcf, 0xea, 0x2e, 0x1f, 0x37, 0x06, 0x94, 0x09, 0xee, 0x8e, 0xde,
	0x1c, 0xf1, 0x29, 0xf3, 0x88, 0x0a, 0x38, 0x6b, 0xc4, 0x1f, 0x8b, 0x8b, 0xbd, 0xe8, 0x7b, 0xa1,
	0x66, 0x13, 0x2a, 0xcf, 0x32, 0xf0, 0x59, 0xda, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x64,
	0x71, 0x30, 0xe8, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Assets) != len(that1.Assets) {
		return false
	}
	for i := range this.Assets {
		if !this.Assets[i].Equal(&that1.Assets[i]) {
			return false
		}
	}
	return true
}
func (this *AssetParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssetParams)
	if !ok {
		that2, ok := that.(AssetParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asset != that1.Asset {
		return false
	}
	if this.DepositKeyringAddr != that1.DepositKeyringAddr {
		return false
	}
	if this.StakerKeyId != that1.StakerKeyId {
		return false
	}
	if this.EthMinterKeyId != that1.EthMinterKeyId {
		return false
	}
	if this.UnstakerKeyId != that1.UnstakerKeyId {
		return false
	}
	if this.CompleterKeyId != that1.CompleterKeyId {
		return false
	}
	if this.RewardsDepositKeyId != that1.RewardsDepositKeyId {
		return false
	}
	if len(this.ChangeAddressKeyIds) != len(that1.ChangeAddressKeyIds) {
		return false
	}
	for i := range this.ChangeAddressKeyIds {
		if this.ChangeAddressKeyIds[i] != that1.ChangeAddressKeyIds[i] {
			return false
		}
	}
	if this.ProxyAddress != that1.ProxyAddress {
		return false
	}
	if this.EthTokenAddr != that1.EthTokenAddr {
		return false
	}
	if this.ControllerAddr != that1.ControllerAddr {
		return false
	}
	if !this.Solana.Equal(that1.Solana) {
		return false
	}
	return true
}
func (this *Solana) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Solana)
	if !ok {
		that2, ok := that.(Solana)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignerKeyId != that1.SignerKeyId {
		return false
	}
	if this.ProgramId != that1.ProgramId {
		return false
	}
	if this.NonceAccountKey != that1.NonceAccountKey {
		return false
	}
	if this.NonceAuthorityKey != that1.NonceAuthorityKey {
		return false
	}
	if this.MintAddress != that1.MintAddress {
		return false
	}
	if this.FeeWallet != that1.FeeWallet {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if this.MultisigKeyAddress != that1.MultisigKeyAddress {
		return false
	}
	if this.Btl != that1.Btl {
		return false
	}
	if this.EventStoreProgramId != that1.EventStoreProgramId {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Solana != nil {
		{
			size, err := m.Solana.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ControllerAddr) > 0 {
		i -= len(m.ControllerAddr)
		copy(dAtA[i:], m.ControllerAddr)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ControllerAddr)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EthTokenAddr) > 0 {
		i -= len(m.EthTokenAddr)
		copy(dAtA[i:], m.EthTokenAddr)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EthTokenAddr)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ProxyAddress) > 0 {
		i -= len(m.ProxyAddress)
		copy(dAtA[i:], m.ProxyAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProxyAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChangeAddressKeyIds) > 0 {
		dAtA3 := make([]byte, len(m.ChangeAddressKeyIds)*10)
		var j2 int
		for _, num := range m.ChangeAddressKeyIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintParams(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x42
	}
	if m.RewardsDepositKeyId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RewardsDepositKeyId))
		i--
		dAtA[i] = 0x38
	}
	if m.CompleterKeyId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CompleterKeyId))
		i--
		dAtA[i] = 0x30
	}
	if m.UnstakerKeyId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnstakerKeyId))
		i--
		dAtA[i] = 0x28
	}
	if m.EthMinterKeyId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EthMinterKeyId))
		i--
		dAtA[i] = 0x20
	}
	if m.StakerKeyId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StakerKeyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DepositKeyringAddr) > 0 {
		i -= len(m.DepositKeyringAddr)
		copy(dAtA[i:], m.DepositKeyringAddr)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DepositKeyringAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asset != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Solana) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Solana) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Solana) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventStoreProgramId) > 0 {
		i -= len(m.EventStoreProgramId)
		copy(dAtA[i:], m.EventStoreProgramId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EventStoreProgramId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Btl != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Btl))
		i--
		dAtA[i] = 0x48
	}
	if len(m.MultisigKeyAddress) > 0 {
		i -= len(m.MultisigKeyAddress)
		copy(dAtA[i:], m.MultisigKeyAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MultisigKeyAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.Fee != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x38
	}
	if len(m.FeeWallet) > 0 {
		i -= len(m.FeeWallet)
		copy(dAtA[i:], m.FeeWallet)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FeeWallet)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MintAddress) > 0 {
		i -= len(m.MintAddress)
		copy(dAtA[i:], m.MintAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MintAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NonceAuthorityKey != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NonceAuthorityKey))
		i--
		dAtA[i] = 0x20
	}
	if m.NonceAccountKey != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NonceAccountKey))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SignerKeyId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SignerKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *AssetParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != 0 {
		n += 1 + sovParams(uint64(m.Asset))
	}
	l = len(m.DepositKeyringAddr)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.StakerKeyId != 0 {
		n += 1 + sovParams(uint64(m.StakerKeyId))
	}
	if m.EthMinterKeyId != 0 {
		n += 1 + sovParams(uint64(m.EthMinterKeyId))
	}
	if m.UnstakerKeyId != 0 {
		n += 1 + sovParams(uint64(m.UnstakerKeyId))
	}
	if m.CompleterKeyId != 0 {
		n += 1 + sovParams(uint64(m.CompleterKeyId))
	}
	if m.RewardsDepositKeyId != 0 {
		n += 1 + sovParams(uint64(m.RewardsDepositKeyId))
	}
	if len(m.ChangeAddressKeyIds) > 0 {
		l = 0
		for _, e := range m.ChangeAddressKeyIds {
			l += sovParams(uint64(e))
		}
		n += 1 + sovParams(uint64(l)) + l
	}
	l = len(m.ProxyAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.EthTokenAddr)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ControllerAddr)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Solana != nil {
		l = m.Solana.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *Solana) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerKeyId != 0 {
		n += 1 + sovParams(uint64(m.SignerKeyId))
	}
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.NonceAccountKey != 0 {
		n += 1 + sovParams(uint64(m.NonceAccountKey))
	}
	if m.NonceAuthorityKey != 0 {
		n += 1 + sovParams(uint64(m.NonceAuthorityKey))
	}
	l = len(m.MintAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.FeeWallet)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovParams(uint64(m.Fee))
	}
	l = len(m.MultisigKeyAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Btl != 0 {
		n += 1 + sovParams(uint64(m.Btl))
	}
	l = len(m.EventStoreProgramId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, AssetParams{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositKeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositKeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerKeyId", wireType)
			}
			m.StakerKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakerKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthMinterKeyId", wireType)
			}
			m.EthMinterKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthMinterKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakerKeyId", wireType)
			}
			m.UnstakerKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakerKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleterKeyId", wireType)
			}
			m.CompleterKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleterKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsDepositKeyId", wireType)
			}
			m.RewardsDepositKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsDepositKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChangeAddressKeyIds = append(m.ChangeAddressKeyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthParams
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthParams
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChangeAddressKeyIds) == 0 {
					m.ChangeAddressKeyIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChangeAddressKeyIds = append(m.ChangeAddressKeyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeAddressKeyIds", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthTokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthTokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solana", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Solana == nil {
				m.Solana = &Solana{}
			}
			if err := m.Solana.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Solana) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Solana: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Solana: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerKeyId", wireType)
			}
			m.SignerKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceAccountKey", wireType)
			}
			m.NonceAccountKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceAccountKey |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceAuthorityKey", wireType)
			}
			m.NonceAuthorityKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceAuthorityKey |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeWallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeWallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigKeyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultisigKeyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Btl", wireType)
			}
			m.Btl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Btl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStoreProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventStoreProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
