// Code generated by MockGen. DO NOT EDIT.
// Source: x/validation/keeper/abci_types.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	api "github.com/Zenrock-Foundation/zrchain/v6/sidecar/proto/api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MocksidecarClient is a mock of sidecarClient interface.
type MocksidecarClient struct {
	ctrl     *gomock.Controller
	recorder *MocksidecarClientMockRecorder
}

// MocksidecarClientMockRecorder is the mock recorder for MocksidecarClient.
type MocksidecarClientMockRecorder struct {
	mock *MocksidecarClient
}

// NewMocksidecarClient creates a new mock instance.
func NewMocksidecarClient(ctrl *gomock.Controller) *MocksidecarClient {
	mock := &MocksidecarClient{ctrl: ctrl}
	mock.recorder = &MocksidecarClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksidecarClient) EXPECT() *MocksidecarClientMockRecorder {
	return m.recorder
}

// GetBitcoinBlockHeaderByHeight mocks base method.
func (m *MocksidecarClient) GetBitcoinBlockHeaderByHeight(ctx context.Context, in *api.BitcoinBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*api.BitcoinBlockHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBitcoinBlockHeaderByHeight", varargs...)
	ret0, _ := ret[0].(*api.BitcoinBlockHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBitcoinBlockHeaderByHeight indicates an expected call of GetBitcoinBlockHeaderByHeight.
func (mr *MocksidecarClientMockRecorder) GetBitcoinBlockHeaderByHeight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitcoinBlockHeaderByHeight", reflect.TypeOf((*MocksidecarClient)(nil).GetBitcoinBlockHeaderByHeight), varargs...)
}

// GetLatestBitcoinBlockHeader mocks base method.
func (m *MocksidecarClient) GetLatestBitcoinBlockHeader(ctx context.Context, in *api.LatestBitcoinBlockHeaderRequest, opts ...grpc.CallOption) (*api.BitcoinBlockHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestBitcoinBlockHeader", varargs...)
	ret0, _ := ret[0].(*api.BitcoinBlockHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBitcoinBlockHeader indicates an expected call of GetLatestBitcoinBlockHeader.
func (mr *MocksidecarClientMockRecorder) GetLatestBitcoinBlockHeader(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBitcoinBlockHeader", reflect.TypeOf((*MocksidecarClient)(nil).GetLatestBitcoinBlockHeader), varargs...)
}

// GetLatestEthereumNonceForAccount mocks base method.
func (m *MocksidecarClient) GetLatestEthereumNonceForAccount(ctx context.Context, in *api.LatestEthereumNonceForAccountRequest, opts ...grpc.CallOption) (*api.LatestEthereumNonceForAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestEthereumNonceForAccount", varargs...)
	ret0, _ := ret[0].(*api.LatestEthereumNonceForAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEthereumNonceForAccount indicates an expected call of GetLatestEthereumNonceForAccount.
func (mr *MocksidecarClientMockRecorder) GetLatestEthereumNonceForAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEthereumNonceForAccount", reflect.TypeOf((*MocksidecarClient)(nil).GetLatestEthereumNonceForAccount), varargs...)
}

// GetSidecarState mocks base method.
func (m *MocksidecarClient) GetSidecarState(ctx context.Context, arg1 *api.SidecarStateRequest, opts ...grpc.CallOption) (*api.SidecarStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, arg1}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSidecarState", varargs...)
	ret0, _ := ret[0].(*api.SidecarStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSidecarState indicates an expected call of GetSidecarState.
func (mr *MocksidecarClientMockRecorder) GetSidecarState(ctx, arg1 interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, arg1}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSidecarState", reflect.TypeOf((*MocksidecarClient)(nil).GetSidecarState), varargs...)
}

// GetSidecarStateByEthHeight mocks base method.
func (m *MocksidecarClient) GetSidecarStateByEthHeight(ctx context.Context, req *api.SidecarStateByEthHeightRequest, opts ...grpc.CallOption) (*api.SidecarStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSidecarStateByEthHeight", varargs...)
	ret0, _ := ret[0].(*api.SidecarStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSidecarStateByEthHeight indicates an expected call of GetSidecarStateByEthHeight.
func (mr *MocksidecarClientMockRecorder) GetSidecarStateByEthHeight(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSidecarStateByEthHeight", reflect.TypeOf((*MocksidecarClient)(nil).GetSidecarStateByEthHeight), varargs...)
}

// GetSolanaAccountInfo mocks base method.
func (m *MocksidecarClient) GetSolanaAccountInfo(ctx context.Context, in *api.SolanaAccountInfoRequest, opts ...grpc.CallOption) (*api.SolanaAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolanaAccountInfo", varargs...)
	ret0, _ := ret[0].(*api.SolanaAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolanaAccountInfo indicates an expected call of GetSolanaAccountInfo.
func (mr *MocksidecarClientMockRecorder) GetSolanaAccountInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolanaAccountInfo", reflect.TypeOf((*MocksidecarClient)(nil).GetSolanaAccountInfo), varargs...)
}
