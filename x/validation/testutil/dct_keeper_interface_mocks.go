// Code generated by MockGen. DO NOT EDIT.
// Source: shared/dct_keeper_interface.go
//
// Generated by this command:
//
//	mockgen -source=shared/dct_keeper_interface.go -destination=x/validation/testutil/dct_keeper_interface_mocks.go -package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	math "cosmossdk.io/math"
	types "github.com/Zenrock-Foundation/zrchain/v6/x/dct/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDCTKeeper is a mock of DCTKeeper interface.
type MockDCTKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDCTKeeperMockRecorder
	isgomock struct{}
}

// MockDCTKeeperMockRecorder is the mock recorder for MockDCTKeeper.
type MockDCTKeeperMockRecorder struct {
	mock *MockDCTKeeper
}

// NewMockDCTKeeper creates a new mock instance.
func NewMockDCTKeeper(ctrl *gomock.Controller) *MockDCTKeeper {
	mock := &MockDCTKeeper{ctrl: ctrl}
	mock.recorder = &MockDCTKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCTKeeper) EXPECT() *MockDCTKeeperMockRecorder {
	return m.recorder
}

// CreateBurnEvent mocks base method.
func (m *MockDCTKeeper) CreateBurnEvent(ctx context.Context, asset types.Asset, burnEvent *types.BurnEvent) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBurnEvent", ctx, asset, burnEvent)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBurnEvent indicates an expected call of CreateBurnEvent.
func (mr *MockDCTKeeperMockRecorder) CreateBurnEvent(ctx, asset, burnEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBurnEvent", reflect.TypeOf((*MockDCTKeeper)(nil).CreateBurnEvent), ctx, asset, burnEvent)
}

// GetAssetParams mocks base method.
func (m *MockDCTKeeper) GetAssetParams(ctx context.Context, asset types.Asset) (types.AssetParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetParams", ctx, asset)
	ret0, _ := ret[0].(types.AssetParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetParams indicates an expected call of GetAssetParams.
func (mr *MockDCTKeeperMockRecorder) GetAssetParams(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetParams", reflect.TypeOf((*MockDCTKeeper)(nil).GetAssetParams), ctx, asset)
}

// GetAuthority mocks base method.
func (m *MockDCTKeeper) GetAuthority() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthority")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthority indicates an expected call of GetAuthority.
func (mr *MockDCTKeeperMockRecorder) GetAuthority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthority", reflect.TypeOf((*MockDCTKeeper)(nil).GetAuthority))
}

// GetBitcoinProxyAddress mocks base method.
func (m *MockDCTKeeper) GetBitcoinProxyAddress(ctx context.Context, asset types.Asset) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBitcoinProxyAddress", ctx, asset)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBitcoinProxyAddress indicates an expected call of GetBitcoinProxyAddress.
func (mr *MockDCTKeeperMockRecorder) GetBitcoinProxyAddress(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitcoinProxyAddress", reflect.TypeOf((*MockDCTKeeper)(nil).GetBitcoinProxyAddress), ctx, asset)
}

// GetChangeAddressKeyIDs mocks base method.
func (m *MockDCTKeeper) GetChangeAddressKeyIDs(ctx context.Context, asset types.Asset) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeAddressKeyIDs", ctx, asset)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeAddressKeyIDs indicates an expected call of GetChangeAddressKeyIDs.
func (mr *MockDCTKeeperMockRecorder) GetChangeAddressKeyIDs(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeAddressKeyIDs", reflect.TypeOf((*MockDCTKeeper)(nil).GetChangeAddressKeyIDs), ctx, asset)
}

// GetCompleterKeyID mocks base method.
func (m *MockDCTKeeper) GetCompleterKeyID(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompleterKeyID", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompleterKeyID indicates an expected call of GetCompleterKeyID.
func (mr *MockDCTKeeperMockRecorder) GetCompleterKeyID(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompleterKeyID", reflect.TypeOf((*MockDCTKeeper)(nil).GetCompleterKeyID), ctx, asset)
}

// GetDepositKeyringAddr mocks base method.
func (m *MockDCTKeeper) GetDepositKeyringAddr(ctx context.Context, asset types.Asset) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositKeyringAddr", ctx, asset)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositKeyringAddr indicates an expected call of GetDepositKeyringAddr.
func (mr *MockDCTKeeperMockRecorder) GetDepositKeyringAddr(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositKeyringAddr", reflect.TypeOf((*MockDCTKeeper)(nil).GetDepositKeyringAddr), ctx, asset)
}

// GetEthMinterKeyID mocks base method.
func (m *MockDCTKeeper) GetEthMinterKeyID(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthMinterKeyID", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthMinterKeyID indicates an expected call of GetEthMinterKeyID.
func (mr *MockDCTKeeperMockRecorder) GetEthMinterKeyID(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthMinterKeyID", reflect.TypeOf((*MockDCTKeeper)(nil).GetEthMinterKeyID), ctx, asset)
}

// GetExchangeRate mocks base method.
func (m *MockDCTKeeper) GetExchangeRate(ctx context.Context, asset types.Asset) (math.LegacyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, asset)
	ret0, _ := ret[0].(math.LegacyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockDCTKeeperMockRecorder) GetExchangeRate(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockDCTKeeper)(nil).GetExchangeRate), ctx, asset)
}

// GetFirstPendingEthMintTransaction mocks base method.
func (m *MockDCTKeeper) GetFirstPendingEthMintTransaction(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingEthMintTransaction", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingEthMintTransaction indicates an expected call of GetFirstPendingEthMintTransaction.
func (mr *MockDCTKeeperMockRecorder) GetFirstPendingEthMintTransaction(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingEthMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).GetFirstPendingEthMintTransaction), ctx, asset)
}

// GetFirstPendingSolMintTransaction mocks base method.
func (m *MockDCTKeeper) GetFirstPendingSolMintTransaction(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingSolMintTransaction", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingSolMintTransaction indicates an expected call of GetFirstPendingSolMintTransaction.
func (mr *MockDCTKeeperMockRecorder) GetFirstPendingSolMintTransaction(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingSolMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).GetFirstPendingSolMintTransaction), ctx, asset)
}

// GetFirstRedemptionAwaitingSign mocks base method.
func (m *MockDCTKeeper) GetFirstRedemptionAwaitingSign(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstRedemptionAwaitingSign", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstRedemptionAwaitingSign indicates an expected call of GetFirstRedemptionAwaitingSign.
func (mr *MockDCTKeeperMockRecorder) GetFirstRedemptionAwaitingSign(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstRedemptionAwaitingSign", reflect.TypeOf((*MockDCTKeeper)(nil).GetFirstRedemptionAwaitingSign), ctx, asset)
}

// GetParams mocks base method.
func (m *MockDCTKeeper) GetParams(ctx context.Context) (types.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParams indicates an expected call of GetParams.
func (mr *MockDCTKeeperMockRecorder) GetParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockDCTKeeper)(nil).GetParams), ctx)
}

// GetPendingMintTransaction mocks base method.
func (m *MockDCTKeeper) GetPendingMintTransaction(ctx context.Context, asset types.Asset, id uint64) (types.PendingMintTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingMintTransaction", ctx, asset, id)
	ret0, _ := ret[0].(types.PendingMintTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingMintTransaction indicates an expected call of GetPendingMintTransaction.
func (mr *MockDCTKeeperMockRecorder) GetPendingMintTransaction(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).GetPendingMintTransaction), ctx, asset, id)
}

// GetProxyAddress mocks base method.
func (m *MockDCTKeeper) GetProxyAddress(ctx context.Context, asset types.Asset) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyAddress", ctx, asset)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxyAddress indicates an expected call of GetProxyAddress.
func (mr *MockDCTKeeperMockRecorder) GetProxyAddress(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyAddress", reflect.TypeOf((*MockDCTKeeper)(nil).GetProxyAddress), ctx, asset)
}

// GetRedemption mocks base method.
func (m *MockDCTKeeper) GetRedemption(ctx context.Context, asset types.Asset, id uint64) (types.Redemption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedemption", ctx, asset, id)
	ret0, _ := ret[0].(types.Redemption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedemption indicates an expected call of GetRedemption.
func (mr *MockDCTKeeperMockRecorder) GetRedemption(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedemption", reflect.TypeOf((*MockDCTKeeper)(nil).GetRedemption), ctx, asset, id)
}

// GetRewardsDepositKeyID mocks base method.
func (m *MockDCTKeeper) GetRewardsDepositKeyID(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsDepositKeyID", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardsDepositKeyID indicates an expected call of GetRewardsDepositKeyID.
func (mr *MockDCTKeeperMockRecorder) GetRewardsDepositKeyID(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsDepositKeyID", reflect.TypeOf((*MockDCTKeeper)(nil).GetRewardsDepositKeyID), ctx, asset)
}

// GetSolanaParams mocks base method.
func (m *MockDCTKeeper) GetSolanaParams(ctx context.Context, asset types.Asset) (*types.Solana, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolanaParams", ctx, asset)
	ret0, _ := ret[0].(*types.Solana)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolanaParams indicates an expected call of GetSolanaParams.
func (mr *MockDCTKeeperMockRecorder) GetSolanaParams(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolanaParams", reflect.TypeOf((*MockDCTKeeper)(nil).GetSolanaParams), ctx, asset)
}

// GetStakerKeyID mocks base method.
func (m *MockDCTKeeper) GetStakerKeyID(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerKeyID", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerKeyID indicates an expected call of GetStakerKeyID.
func (mr *MockDCTKeeperMockRecorder) GetStakerKeyID(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerKeyID", reflect.TypeOf((*MockDCTKeeper)(nil).GetStakerKeyID), ctx, asset)
}

// GetSupply mocks base method.
func (m *MockDCTKeeper) GetSupply(ctx context.Context, asset types.Asset) (types.Supply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupply", ctx, asset)
	ret0, _ := ret[0].(types.Supply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupply indicates an expected call of GetSupply.
func (mr *MockDCTKeeperMockRecorder) GetSupply(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupply", reflect.TypeOf((*MockDCTKeeper)(nil).GetSupply), ctx, asset)
}

// GetUnstakerKeyID mocks base method.
func (m *MockDCTKeeper) GetUnstakerKeyID(ctx context.Context, asset types.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnstakerKeyID", ctx, asset)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnstakerKeyID indicates an expected call of GetUnstakerKeyID.
func (mr *MockDCTKeeperMockRecorder) GetUnstakerKeyID(ctx, asset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnstakerKeyID", reflect.TypeOf((*MockDCTKeeper)(nil).GetUnstakerKeyID), ctx, asset)
}

// HasPendingMintTransaction mocks base method.
func (m *MockDCTKeeper) HasPendingMintTransaction(ctx context.Context, asset types.Asset, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPendingMintTransaction", ctx, asset, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPendingMintTransaction indicates an expected call of HasPendingMintTransaction.
func (mr *MockDCTKeeperMockRecorder) HasPendingMintTransaction(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPendingMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).HasPendingMintTransaction), ctx, asset, id)
}

// ListSupportedAssets mocks base method.
func (m *MockDCTKeeper) ListSupportedAssets(ctx context.Context) ([]types.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedAssets", ctx)
	ret0, _ := ret[0].([]types.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportedAssets indicates an expected call of ListSupportedAssets.
func (mr *MockDCTKeeperMockRecorder) ListSupportedAssets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedAssets", reflect.TypeOf((*MockDCTKeeper)(nil).ListSupportedAssets), ctx)
}

// SetBurnEvent mocks base method.
func (m *MockDCTKeeper) SetBurnEvent(ctx context.Context, asset types.Asset, id uint64, burnEvent types.BurnEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBurnEvent", ctx, asset, id, burnEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBurnEvent indicates an expected call of SetBurnEvent.
func (mr *MockDCTKeeperMockRecorder) SetBurnEvent(ctx, asset, id, burnEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBurnEvent", reflect.TypeOf((*MockDCTKeeper)(nil).SetBurnEvent), ctx, asset, id, burnEvent)
}

// SetFirstPendingBurnEvent mocks base method.
func (m *MockDCTKeeper) SetFirstPendingBurnEvent(ctx context.Context, asset types.Asset, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingBurnEvent", ctx, asset, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingBurnEvent indicates an expected call of SetFirstPendingBurnEvent.
func (mr *MockDCTKeeperMockRecorder) SetFirstPendingBurnEvent(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingBurnEvent", reflect.TypeOf((*MockDCTKeeper)(nil).SetFirstPendingBurnEvent), ctx, asset, id)
}

// SetFirstPendingEthMintTransaction mocks base method.
func (m *MockDCTKeeper) SetFirstPendingEthMintTransaction(ctx context.Context, asset types.Asset, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingEthMintTransaction", ctx, asset, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingEthMintTransaction indicates an expected call of SetFirstPendingEthMintTransaction.
func (mr *MockDCTKeeperMockRecorder) SetFirstPendingEthMintTransaction(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingEthMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).SetFirstPendingEthMintTransaction), ctx, asset, id)
}

// SetFirstPendingSolMintTransaction mocks base method.
func (m *MockDCTKeeper) SetFirstPendingSolMintTransaction(ctx context.Context, asset types.Asset, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingSolMintTransaction", ctx, asset, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingSolMintTransaction indicates an expected call of SetFirstPendingSolMintTransaction.
func (mr *MockDCTKeeperMockRecorder) SetFirstPendingSolMintTransaction(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingSolMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).SetFirstPendingSolMintTransaction), ctx, asset, id)
}

// SetFirstRedemptionAwaitingSign mocks base method.
func (m *MockDCTKeeper) SetFirstRedemptionAwaitingSign(ctx context.Context, asset types.Asset, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstRedemptionAwaitingSign", ctx, asset, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstRedemptionAwaitingSign indicates an expected call of SetFirstRedemptionAwaitingSign.
func (mr *MockDCTKeeperMockRecorder) SetFirstRedemptionAwaitingSign(ctx, asset, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstRedemptionAwaitingSign", reflect.TypeOf((*MockDCTKeeper)(nil).SetFirstRedemptionAwaitingSign), ctx, asset, id)
}

// SetPendingMintTransaction mocks base method.
func (m *MockDCTKeeper) SetPendingMintTransaction(ctx context.Context, pendingMintTransaction types.PendingMintTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingMintTransaction", ctx, pendingMintTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingMintTransaction indicates an expected call of SetPendingMintTransaction.
func (mr *MockDCTKeeperMockRecorder) SetPendingMintTransaction(ctx, pendingMintTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingMintTransaction", reflect.TypeOf((*MockDCTKeeper)(nil).SetPendingMintTransaction), ctx, pendingMintTransaction)
}

// SetRedemption mocks base method.
func (m *MockDCTKeeper) SetRedemption(ctx context.Context, asset types.Asset, id uint64, redemption types.Redemption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedemption", ctx, asset, id, redemption)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedemption indicates an expected call of SetRedemption.
func (mr *MockDCTKeeperMockRecorder) SetRedemption(ctx, asset, id, redemption any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedemption", reflect.TypeOf((*MockDCTKeeper)(nil).SetRedemption), ctx, asset, id, redemption)
}

// SetSupply mocks base method.
func (m *MockDCTKeeper) SetSupply(ctx context.Context, supply types.Supply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSupply", ctx, supply)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSupply indicates an expected call of SetSupply.
func (mr *MockDCTKeeperMockRecorder) SetSupply(ctx, supply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupply", reflect.TypeOf((*MockDCTKeeper)(nil).SetSupply), ctx, supply)
}

// WalkBurnEvents mocks base method.
func (m *MockDCTKeeper) WalkBurnEvents(ctx context.Context, asset types.Asset, fn func(uint64, types.BurnEvent) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkBurnEvents", ctx, asset, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkBurnEvents indicates an expected call of WalkBurnEvents.
func (mr *MockDCTKeeperMockRecorder) WalkBurnEvents(ctx, asset, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkBurnEvents", reflect.TypeOf((*MockDCTKeeper)(nil).WalkBurnEvents), ctx, asset, fn)
}

// WalkPendingMintTransactions mocks base method.
func (m *MockDCTKeeper) WalkPendingMintTransactions(ctx context.Context, asset types.Asset, fn func(uint64, types.PendingMintTransaction) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkPendingMintTransactions", ctx, asset, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkPendingMintTransactions indicates an expected call of WalkPendingMintTransactions.
func (mr *MockDCTKeeperMockRecorder) WalkPendingMintTransactions(ctx, asset, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPendingMintTransactions", reflect.TypeOf((*MockDCTKeeper)(nil).WalkPendingMintTransactions), ctx, asset, fn)
}

// WalkRedemptions mocks base method.
func (m *MockDCTKeeper) WalkRedemptions(ctx context.Context, asset types.Asset, fn func(uint64, types.Redemption) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRedemptions", ctx, asset, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRedemptions indicates an expected call of WalkRedemptions.
func (mr *MockDCTKeeperMockRecorder) WalkRedemptions(ctx, asset, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRedemptions", reflect.TypeOf((*MockDCTKeeper)(nil).WalkRedemptions), ctx, asset, fn)
}

// WalkRedemptionsDescending mocks base method.
func (m *MockDCTKeeper) WalkRedemptionsDescending(ctx context.Context, asset types.Asset, fn func(uint64, types.Redemption) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRedemptionsDescending", ctx, asset, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRedemptionsDescending indicates an expected call of WalkRedemptionsDescending.
func (mr *MockDCTKeeperMockRecorder) WalkRedemptionsDescending(ctx, asset, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRedemptionsDescending", reflect.TypeOf((*MockDCTKeeper)(nil).WalkRedemptionsDescending), ctx, asset, fn)
}
