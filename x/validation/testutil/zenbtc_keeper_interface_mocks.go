// Code generated by MockGen. DO NOT EDIT.
// Source: shared/zenbtc_keeper_interface.go
//
// Generated by this command:
//
//	mockgen -source=shared/zenbtc_keeper_interface.go -destination=x/validation/testutil/zenbtc_keeper_interface_mocks.go -package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	math "cosmossdk.io/math"
	types "github.com/zenrocklabs/zenbtc/x/zenbtc/types"
	gomock "go.uber.org/mock/gomock"
)

// MockZenBTCKeeper is a mock of ZenBTCKeeper interface.
type MockZenBTCKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockZenBTCKeeperMockRecorder
	isgomock struct{}
}

// MockZenBTCKeeperMockRecorder is the mock recorder for MockZenBTCKeeper.
type MockZenBTCKeeperMockRecorder struct {
	mock *MockZenBTCKeeper
}

// NewMockZenBTCKeeper creates a new mock instance.
func NewMockZenBTCKeeper(ctrl *gomock.Controller) *MockZenBTCKeeper {
	mock := &MockZenBTCKeeper{ctrl: ctrl}
	mock.recorder = &MockZenBTCKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZenBTCKeeper) EXPECT() *MockZenBTCKeeperMockRecorder {
	return m.recorder
}

// CreateBurnEvent mocks base method.
func (m *MockZenBTCKeeper) CreateBurnEvent(ctx context.Context, burnEvent *types.BurnEvent) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBurnEvent", ctx, burnEvent)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBurnEvent indicates an expected call of CreateBurnEvent.
func (mr *MockZenBTCKeeperMockRecorder) CreateBurnEvent(ctx, burnEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBurnEvent", reflect.TypeOf((*MockZenBTCKeeper)(nil).CreateBurnEvent), ctx, burnEvent)
}

// GetBitcoinProxyAddress mocks base method.
func (m *MockZenBTCKeeper) GetBitcoinProxyAddress(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBitcoinProxyAddress", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBitcoinProxyAddress indicates an expected call of GetBitcoinProxyAddress.
func (mr *MockZenBTCKeeperMockRecorder) GetBitcoinProxyAddress(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitcoinProxyAddress", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetBitcoinProxyAddress), ctx)
}

// GetBurnEvent mocks base method.
func (m *MockZenBTCKeeper) GetBurnEvent(ctx context.Context, id uint64) (types.BurnEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBurnEvent", ctx, id)
	ret0, _ := ret[0].(types.BurnEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBurnEvent indicates an expected call of GetBurnEvent.
func (mr *MockZenBTCKeeperMockRecorder) GetBurnEvent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBurnEvent", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetBurnEvent), ctx, id)
}

// GetChangeAddressKeyIDs mocks base method.
func (m *MockZenBTCKeeper) GetChangeAddressKeyIDs(ctx context.Context) []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeAddressKeyIDs", ctx)
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// GetChangeAddressKeyIDs indicates an expected call of GetChangeAddressKeyIDs.
func (mr *MockZenBTCKeeperMockRecorder) GetChangeAddressKeyIDs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeAddressKeyIDs", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetChangeAddressKeyIDs), ctx)
}

// GetCompleterKeyID mocks base method.
func (m *MockZenBTCKeeper) GetCompleterKeyID(ctx context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompleterKeyID", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCompleterKeyID indicates an expected call of GetCompleterKeyID.
func (mr *MockZenBTCKeeperMockRecorder) GetCompleterKeyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompleterKeyID", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetCompleterKeyID), ctx)
}

// GetControllerAddr mocks base method.
func (m *MockZenBTCKeeper) GetControllerAddr(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerAddr", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetControllerAddr indicates an expected call of GetControllerAddr.
func (mr *MockZenBTCKeeperMockRecorder) GetControllerAddr(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerAddr", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetControllerAddr), ctx)
}

// GetEthMinterKeyID mocks base method.
func (m *MockZenBTCKeeper) GetEthMinterKeyID(ctx context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthMinterKeyID", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEthMinterKeyID indicates an expected call of GetEthMinterKeyID.
func (mr *MockZenBTCKeeperMockRecorder) GetEthMinterKeyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthMinterKeyID", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetEthMinterKeyID), ctx)
}

// GetEthTokenAddr mocks base method.
func (m *MockZenBTCKeeper) GetEthTokenAddr(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthTokenAddr", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEthTokenAddr indicates an expected call of GetEthTokenAddr.
func (mr *MockZenBTCKeeperMockRecorder) GetEthTokenAddr(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthTokenAddr", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetEthTokenAddr), ctx)
}

// GetExchangeRate mocks base method.
func (m *MockZenBTCKeeper) GetExchangeRate(ctx context.Context) (math.LegacyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx)
	ret0, _ := ret[0].(math.LegacyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockZenBTCKeeperMockRecorder) GetExchangeRate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetExchangeRate), ctx)
}

// GetFirstPendingBurnEvent mocks base method.
func (m *MockZenBTCKeeper) GetFirstPendingBurnEvent(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingBurnEvent", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingBurnEvent indicates an expected call of GetFirstPendingBurnEvent.
func (mr *MockZenBTCKeeperMockRecorder) GetFirstPendingBurnEvent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingBurnEvent", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetFirstPendingBurnEvent), ctx)
}

// GetFirstPendingEthMintTransaction mocks base method.
func (m *MockZenBTCKeeper) GetFirstPendingEthMintTransaction(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingEthMintTransaction", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingEthMintTransaction indicates an expected call of GetFirstPendingEthMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) GetFirstPendingEthMintTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingEthMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetFirstPendingEthMintTransaction), ctx)
}

// GetFirstPendingRedemption mocks base method.
func (m *MockZenBTCKeeper) GetFirstPendingRedemption(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingRedemption", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingRedemption indicates an expected call of GetFirstPendingRedemption.
func (mr *MockZenBTCKeeperMockRecorder) GetFirstPendingRedemption(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingRedemption", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetFirstPendingRedemption), ctx)
}

// GetFirstPendingSolMintTransaction mocks base method.
func (m *MockZenBTCKeeper) GetFirstPendingSolMintTransaction(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingSolMintTransaction", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingSolMintTransaction indicates an expected call of GetFirstPendingSolMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) GetFirstPendingSolMintTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingSolMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetFirstPendingSolMintTransaction), ctx)
}

// GetFirstPendingStakeTransaction mocks base method.
func (m *MockZenBTCKeeper) GetFirstPendingStakeTransaction(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPendingStakeTransaction", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPendingStakeTransaction indicates an expected call of GetFirstPendingStakeTransaction.
func (mr *MockZenBTCKeeperMockRecorder) GetFirstPendingStakeTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPendingStakeTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetFirstPendingStakeTransaction), ctx)
}

// GetFirstRedemptionAwaitingSign mocks base method.
func (m *MockZenBTCKeeper) GetFirstRedemptionAwaitingSign(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstRedemptionAwaitingSign", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstRedemptionAwaitingSign indicates an expected call of GetFirstRedemptionAwaitingSign.
func (mr *MockZenBTCKeeperMockRecorder) GetFirstRedemptionAwaitingSign(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstRedemptionAwaitingSign", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetFirstRedemptionAwaitingSign), ctx)
}

// GetParams mocks base method.
func (m *MockZenBTCKeeper) GetParams(ctx context.Context) (types.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParams indicates an expected call of GetParams.
func (mr *MockZenBTCKeeperMockRecorder) GetParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetParams), ctx)
}

// GetPendingMintTransaction mocks base method.
func (m *MockZenBTCKeeper) GetPendingMintTransaction(ctx context.Context, id uint64) (types.PendingMintTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingMintTransaction", ctx, id)
	ret0, _ := ret[0].(types.PendingMintTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingMintTransaction indicates an expected call of GetPendingMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) GetPendingMintTransaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetPendingMintTransaction), ctx, id)
}

// GetRedemption mocks base method.
func (m *MockZenBTCKeeper) GetRedemption(ctx context.Context, id uint64) (types.Redemption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedemption", ctx, id)
	ret0, _ := ret[0].(types.Redemption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedemption indicates an expected call of GetRedemption.
func (mr *MockZenBTCKeeperMockRecorder) GetRedemption(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedemption", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetRedemption), ctx, id)
}

// GetRewardsDepositKeyID mocks base method.
func (m *MockZenBTCKeeper) GetRewardsDepositKeyID(ctx context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsDepositKeyID", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRewardsDepositKeyID indicates an expected call of GetRewardsDepositKeyID.
func (mr *MockZenBTCKeeperMockRecorder) GetRewardsDepositKeyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsDepositKeyID", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetRewardsDepositKeyID), ctx)
}

// GetSolanaParams mocks base method.
func (m *MockZenBTCKeeper) GetSolanaParams(ctx context.Context) *types.Solana {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolanaParams", ctx)
	ret0, _ := ret[0].(*types.Solana)
	return ret0
}

// GetSolanaParams indicates an expected call of GetSolanaParams.
func (mr *MockZenBTCKeeperMockRecorder) GetSolanaParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolanaParams", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetSolanaParams), ctx)
}

// GetStakerKeyID mocks base method.
func (m *MockZenBTCKeeper) GetStakerKeyID(ctx context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerKeyID", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetStakerKeyID indicates an expected call of GetStakerKeyID.
func (mr *MockZenBTCKeeperMockRecorder) GetStakerKeyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerKeyID", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetStakerKeyID), ctx)
}

// GetSupply mocks base method.
func (m *MockZenBTCKeeper) GetSupply(ctx context.Context) (types.Supply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupply", ctx)
	ret0, _ := ret[0].(types.Supply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupply indicates an expected call of GetSupply.
func (mr *MockZenBTCKeeperMockRecorder) GetSupply(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupply", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetSupply), ctx)
}

// GetUnstakerKeyID mocks base method.
func (m *MockZenBTCKeeper) GetUnstakerKeyID(ctx context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnstakerKeyID", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUnstakerKeyID indicates an expected call of GetUnstakerKeyID.
func (mr *MockZenBTCKeeperMockRecorder) GetUnstakerKeyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnstakerKeyID", reflect.TypeOf((*MockZenBTCKeeper)(nil).GetUnstakerKeyID), ctx)
}

// HasPendingMintTransaction mocks base method.
func (m *MockZenBTCKeeper) HasPendingMintTransaction(ctx context.Context, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPendingMintTransaction", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPendingMintTransaction indicates an expected call of HasPendingMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) HasPendingMintTransaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPendingMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).HasPendingMintTransaction), ctx, id)
}

// HasRedemption mocks base method.
func (m *MockZenBTCKeeper) HasRedemption(ctx context.Context, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRedemption", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRedemption indicates an expected call of HasRedemption.
func (mr *MockZenBTCKeeperMockRecorder) HasRedemption(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRedemption", reflect.TypeOf((*MockZenBTCKeeper)(nil).HasRedemption), ctx, id)
}

// SetBurnEvent mocks base method.
func (m *MockZenBTCKeeper) SetBurnEvent(ctx context.Context, id uint64, burnEvent types.BurnEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBurnEvent", ctx, id, burnEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBurnEvent indicates an expected call of SetBurnEvent.
func (mr *MockZenBTCKeeperMockRecorder) SetBurnEvent(ctx, id, burnEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBurnEvent", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetBurnEvent), ctx, id, burnEvent)
}

// SetFirstPendingBurnEvent mocks base method.
func (m *MockZenBTCKeeper) SetFirstPendingBurnEvent(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingBurnEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingBurnEvent indicates an expected call of SetFirstPendingBurnEvent.
func (mr *MockZenBTCKeeperMockRecorder) SetFirstPendingBurnEvent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingBurnEvent", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetFirstPendingBurnEvent), ctx, id)
}

// SetFirstPendingEthMintTransaction mocks base method.
func (m *MockZenBTCKeeper) SetFirstPendingEthMintTransaction(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingEthMintTransaction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingEthMintTransaction indicates an expected call of SetFirstPendingEthMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) SetFirstPendingEthMintTransaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingEthMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetFirstPendingEthMintTransaction), ctx, id)
}

// SetFirstPendingRedemption mocks base method.
func (m *MockZenBTCKeeper) SetFirstPendingRedemption(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingRedemption", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingRedemption indicates an expected call of SetFirstPendingRedemption.
func (mr *MockZenBTCKeeperMockRecorder) SetFirstPendingRedemption(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingRedemption", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetFirstPendingRedemption), ctx, id)
}

// SetFirstPendingSolMintTransaction mocks base method.
func (m *MockZenBTCKeeper) SetFirstPendingSolMintTransaction(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingSolMintTransaction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingSolMintTransaction indicates an expected call of SetFirstPendingSolMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) SetFirstPendingSolMintTransaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingSolMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetFirstPendingSolMintTransaction), ctx, id)
}

// SetFirstPendingStakeTransaction mocks base method.
func (m *MockZenBTCKeeper) SetFirstPendingStakeTransaction(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPendingStakeTransaction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPendingStakeTransaction indicates an expected call of SetFirstPendingStakeTransaction.
func (mr *MockZenBTCKeeperMockRecorder) SetFirstPendingStakeTransaction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPendingStakeTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetFirstPendingStakeTransaction), ctx, id)
}

// SetFirstRedemptionAwaitingSign mocks base method.
func (m *MockZenBTCKeeper) SetFirstRedemptionAwaitingSign(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstRedemptionAwaitingSign", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstRedemptionAwaitingSign indicates an expected call of SetFirstRedemptionAwaitingSign.
func (mr *MockZenBTCKeeperMockRecorder) SetFirstRedemptionAwaitingSign(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstRedemptionAwaitingSign", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetFirstRedemptionAwaitingSign), ctx, id)
}

// SetPendingMintTransaction mocks base method.
func (m *MockZenBTCKeeper) SetPendingMintTransaction(ctx context.Context, pendingMintTransaction types.PendingMintTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingMintTransaction", ctx, pendingMintTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingMintTransaction indicates an expected call of SetPendingMintTransaction.
func (mr *MockZenBTCKeeperMockRecorder) SetPendingMintTransaction(ctx, pendingMintTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingMintTransaction", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetPendingMintTransaction), ctx, pendingMintTransaction)
}

// SetRedemption mocks base method.
func (m *MockZenBTCKeeper) SetRedemption(ctx context.Context, id uint64, redemption types.Redemption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedemption", ctx, id, redemption)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedemption indicates an expected call of SetRedemption.
func (mr *MockZenBTCKeeperMockRecorder) SetRedemption(ctx, id, redemption any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedemption", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetRedemption), ctx, id, redemption)
}

// SetSupply mocks base method.
func (m *MockZenBTCKeeper) SetSupply(ctx context.Context, supply types.Supply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSupply", ctx, supply)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSupply indicates an expected call of SetSupply.
func (mr *MockZenBTCKeeperMockRecorder) SetSupply(ctx, supply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupply", reflect.TypeOf((*MockZenBTCKeeper)(nil).SetSupply), ctx, supply)
}

// WalkBurnEvents mocks base method.
func (m *MockZenBTCKeeper) WalkBurnEvents(ctx context.Context, fn func(uint64, types.BurnEvent) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkBurnEvents", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkBurnEvents indicates an expected call of WalkBurnEvents.
func (mr *MockZenBTCKeeperMockRecorder) WalkBurnEvents(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkBurnEvents", reflect.TypeOf((*MockZenBTCKeeper)(nil).WalkBurnEvents), ctx, fn)
}

// WalkPendingMintTransactions mocks base method.
func (m *MockZenBTCKeeper) WalkPendingMintTransactions(ctx context.Context, fn func(uint64, types.PendingMintTransaction) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkPendingMintTransactions", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkPendingMintTransactions indicates an expected call of WalkPendingMintTransactions.
func (mr *MockZenBTCKeeperMockRecorder) WalkPendingMintTransactions(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPendingMintTransactions", reflect.TypeOf((*MockZenBTCKeeper)(nil).WalkPendingMintTransactions), ctx, fn)
}

// WalkRedemptions mocks base method.
func (m *MockZenBTCKeeper) WalkRedemptions(ctx context.Context, fn func(uint64, types.Redemption) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRedemptions", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRedemptions indicates an expected call of WalkRedemptions.
func (mr *MockZenBTCKeeperMockRecorder) WalkRedemptions(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRedemptions", reflect.TypeOf((*MockZenBTCKeeper)(nil).WalkRedemptions), ctx, fn)
}

// WalkRedemptionsDescending mocks base method.
func (m *MockZenBTCKeeper) WalkRedemptionsDescending(ctx context.Context, fn func(uint64, types.Redemption) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRedemptionsDescending", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRedemptionsDescending indicates an expected call of WalkRedemptionsDescending.
func (mr *MockZenBTCKeeperMockRecorder) WalkRedemptionsDescending(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRedemptionsDescending", reflect.TypeOf((*MockZenBTCKeeper)(nil).WalkRedemptionsDescending), ctx, fn)
}
