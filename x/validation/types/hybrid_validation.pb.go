// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/validation/hybrid_validation.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types1 "github.com/cometbft/cometbft/proto/tendermint/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type ValidatorHV struct {
	// operator_address defines the address of the validator's operator; bech
	// encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// consensus_pubkey is the consensus public key of the validator, as a
	// Protobuf Any.
	ConsensusPubkey *types.Any `protobuf:"bytes,2,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// jailed defined whether the validator has been jailed from bonded status or
	// not.
	Jailed bool `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// status is the validator status (bonded/unbonding/unbonded).
	Status BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=zrchain.validation.BondStatus" json:"status,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	TokensNative cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=tokensNative,proto3,customtype=cosmossdk.io/math.Int" json:"tokensNative"`
	TokensAVS    cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=tokensAVS,proto3,customtype=cosmossdk.io/math.Int" json:"tokensAVS"`
	// delegator_shares defines total shares issued to a validator's delegators.
	DelegatorShares cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"delegator_shares"`
	// description defines the description terms for the validator.
	Description Description `protobuf:"bytes,8,opt,name=description,proto3" json:"description"`
	// unbonding_height defines, if unbonding, the height at which this validator
	// has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,9,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty"`
	// unbonding_time defines, if unbonding, the min time for the validator to
	// complete unbonding.
	UnbondingTime time.Time `protobuf:"bytes,10,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time"`
	// commission defines the commission parameters.
	Commission Commission `protobuf:"bytes,11,opt,name=commission,proto3" json:"commission"`
	// min_self_delegation is the validator's self declared minimum self
	// delegation.
	MinSelfDelegation cosmossdk_io_math.Int `protobuf:"bytes,12,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=cosmossdk.io/math.Int" json:"min_self_delegation"`
	// strictly positive if this validator's unbonding has been stopped by
	// external modules
	UnbondingOnHoldRefCount int64 `protobuf:"varint,13,opt,name=unbonding_on_hold_ref_count,json=unbondingOnHoldRefCount,proto3" json:"unbonding_on_hold_ref_count,omitempty"`
	// list of unbonding ids, each uniquely identifying an unbonding of this
	// validator
	UnbondingIds []uint64 `protobuf:"varint,14,rep,packed,name=unbonding_ids,json=unbondingIds,proto3" json:"unbonding_ids,omitempty"`
}

func (m *ValidatorHV) Reset()         { *m = ValidatorHV{} }
func (m *ValidatorHV) String() string { return proto.CompactTextString(m) }
func (*ValidatorHV) ProtoMessage()    {}
func (*ValidatorHV) Descriptor() ([]byte, []int) {
	return fileDescriptor_174547ed801eca57, []int{0}
}
func (m *ValidatorHV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorHV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorHV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorHV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorHV.Merge(m, src)
}
func (m *ValidatorHV) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorHV) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorHV.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorHV proto.InternalMessageInfo

// HistoricalInfo contains header and validator information for a given block.
// It is stored as part of staking module's state, which persists the `n` most
// recent HistoricalInfo
// (`n` is set by the staking module's `historical_entries` parameter).
type HistoricalInfoHV struct {
	Header types1.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Valset []ValidatorHV `protobuf:"bytes,2,rep,name=valset,proto3" json:"valset"`
}

func (m *HistoricalInfoHV) Reset()         { *m = HistoricalInfoHV{} }
func (m *HistoricalInfoHV) String() string { return proto.CompactTextString(m) }
func (*HistoricalInfoHV) ProtoMessage()    {}
func (*HistoricalInfoHV) Descriptor() ([]byte, []int) {
	return fileDescriptor_174547ed801eca57, []int{1}
}
func (m *HistoricalInfoHV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalInfoHV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalInfoHV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalInfoHV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalInfoHV.Merge(m, src)
}
func (m *HistoricalInfoHV) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalInfoHV) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalInfoHV.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalInfoHV proto.InternalMessageInfo

func (m *HistoricalInfoHV) GetHeader() types1.Header {
	if m != nil {
		return m.Header
	}
	return types1.Header{}
}

func (m *HistoricalInfoHV) GetValset() []ValidatorHV {
	if m != nil {
		return m.Valset
	}
	return nil
}

type SlashEvent struct {
	BlockHeight         int64                       `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ValidatorAddr       string                      `protobuf:"bytes,2,opt,name=validatorAddr,proto3" json:"validatorAddr,omitempty"`
	PercentageSlashed   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=percentageSlashed,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"percentageSlashed"`
	TokensSlashedNative cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=tokensSlashedNative,proto3,customtype=cosmossdk.io/math.Int" json:"tokensSlashedNative"`
	TokensSlashedAVS    cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=tokensSlashedAVS,proto3,customtype=cosmossdk.io/math.Int" json:"tokensSlashedAVS"`
}

func (m *SlashEvent) Reset()         { *m = SlashEvent{} }
func (m *SlashEvent) String() string { return proto.CompactTextString(m) }
func (*SlashEvent) ProtoMessage()    {}
func (*SlashEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_174547ed801eca57, []int{2}
}
func (m *SlashEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashEvent.Merge(m, src)
}
func (m *SlashEvent) XXX_Size() int {
	return m.Size()
}
func (m *SlashEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SlashEvent proto.InternalMessageInfo

func (m *SlashEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *SlashEvent) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

type HVParams struct {
	AVSRewardsRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=AVSRewardsRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"AVSRewardsRate"`
	BlockTime      int64                       `protobuf:"varint,2,opt,name=BlockTime,proto3" json:"BlockTime,omitempty"`
	ZenBTCParams   *ZenBTCParams               `protobuf:"bytes,3,opt,name=ZenBTCParams,proto3" json:"ZenBTCParams,omitempty"`
}

func (m *HVParams) Reset()         { *m = HVParams{} }
func (m *HVParams) String() string { return proto.CompactTextString(m) }
func (*HVParams) ProtoMessage()    {}
func (*HVParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_174547ed801eca57, []int{3}
}
func (m *HVParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HVParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HVParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HVParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HVParams.Merge(m, src)
}
func (m *HVParams) XXX_Size() int {
	return m.Size()
}
func (m *HVParams) XXX_DiscardUnknown() {
	xxx_messageInfo_HVParams.DiscardUnknown(m)
}

var xxx_messageInfo_HVParams proto.InternalMessageInfo

func (m *HVParams) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *HVParams) GetZenBTCParams() *ZenBTCParams {
	if m != nil {
		return m.ZenBTCParams
	}
	return nil
}

type ZenBTCParams struct {
	ZenBTCEthBatcherAddr      string       `protobuf:"bytes,1,opt,name=zenBTCEthBatcherAddr,proto3" json:"zenBTCEthBatcherAddr,omitempty"`
	ZenBTCDepositKeyringAddr  string       `protobuf:"bytes,2,opt,name=zenBTCDepositKeyringAddr,proto3" json:"zenBTCDepositKeyringAddr,omitempty"`
	ZenBTCMinterKeyID         uint64       `protobuf:"varint,3,opt,name=zenBTCMinterKeyID,proto3" json:"zenBTCMinterKeyID,omitempty"`
	ZenBTCWithdrawerKeyID     uint64       `protobuf:"varint,4,opt,name=zenBTCWithdrawerKeyID,proto3" json:"zenBTCWithdrawerKeyID,omitempty"`
	ZenBTCUnstakerKeyID       uint64       `protobuf:"varint,5,opt,name=zenBTCUnstakerKeyID,proto3" json:"zenBTCUnstakerKeyID,omitempty"`
	ZenBTCBurnerKeyID         uint64       `protobuf:"varint,6,opt,name=zenBTCBurnerKeyID,proto3" json:"zenBTCBurnerKeyID,omitempty"`
	ZenBTCRewardsDepositKeyID uint64       `protobuf:"varint,7,opt,name=zenBTCRewardsDepositKeyID,proto3" json:"zenBTCRewardsDepositKeyID,omitempty"`
	ZenBTCChangeAddressKeyIDs []uint64     `protobuf:"varint,8,rep,packed,name=zenBTCChangeAddressKeyIDs,proto3" json:"zenBTCChangeAddressKeyIDs,omitempty"`
	ZenBTCStrategyAddr        string       `protobuf:"bytes,9,opt,name=zenBTCStrategyAddr,proto3" json:"zenBTCStrategyAddr,omitempty"`
	BitcoinProxyCreatorID     string       `protobuf:"bytes,10,opt,name=bitcoinProxyCreatorID,proto3" json:"bitcoinProxyCreatorID,omitempty"`
	StakeableAssets           []*AssetData `protobuf:"bytes,11,rep,name=stakeableAssets,proto3" json:"stakeableAssets,omitempty"`
	Authority                 string       `protobuf:"bytes,12,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *ZenBTCParams) Reset()         { *m = ZenBTCParams{} }
func (m *ZenBTCParams) String() string { return proto.CompactTextString(m) }
func (*ZenBTCParams) ProtoMessage()    {}
func (*ZenBTCParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_174547ed801eca57, []int{4}
}
func (m *ZenBTCParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZenBTCParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZenBTCParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZenBTCParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZenBTCParams.Merge(m, src)
}
func (m *ZenBTCParams) XXX_Size() int {
	return m.Size()
}
func (m *ZenBTCParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ZenBTCParams.DiscardUnknown(m)
}

var xxx_messageInfo_ZenBTCParams proto.InternalMessageInfo

func (m *ZenBTCParams) GetZenBTCEthBatcherAddr() string {
	if m != nil {
		return m.ZenBTCEthBatcherAddr
	}
	return ""
}

func (m *ZenBTCParams) GetZenBTCDepositKeyringAddr() string {
	if m != nil {
		return m.ZenBTCDepositKeyringAddr
	}
	return ""
}

func (m *ZenBTCParams) GetZenBTCMinterKeyID() uint64 {
	if m != nil {
		return m.ZenBTCMinterKeyID
	}
	return 0
}

func (m *ZenBTCParams) GetZenBTCWithdrawerKeyID() uint64 {
	if m != nil {
		return m.ZenBTCWithdrawerKeyID
	}
	return 0
}

func (m *ZenBTCParams) GetZenBTCUnstakerKeyID() uint64 {
	if m != nil {
		return m.ZenBTCUnstakerKeyID
	}
	return 0
}

func (m *ZenBTCParams) GetZenBTCBurnerKeyID() uint64 {
	if m != nil {
		return m.ZenBTCBurnerKeyID
	}
	return 0
}

func (m *ZenBTCParams) GetZenBTCRewardsDepositKeyID() uint64 {
	if m != nil {
		return m.ZenBTCRewardsDepositKeyID
	}
	return 0
}

func (m *ZenBTCParams) GetZenBTCChangeAddressKeyIDs() []uint64 {
	if m != nil {
		return m.ZenBTCChangeAddressKeyIDs
	}
	return nil
}

func (m *ZenBTCParams) GetZenBTCStrategyAddr() string {
	if m != nil {
		return m.ZenBTCStrategyAddr
	}
	return ""
}

func (m *ZenBTCParams) GetBitcoinProxyCreatorID() string {
	if m != nil {
		return m.BitcoinProxyCreatorID
	}
	return ""
}

func (m *ZenBTCParams) GetStakeableAssets() []*AssetData {
	if m != nil {
		return m.StakeableAssets
	}
	return nil
}

func (m *ZenBTCParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type ValidationInfo struct {
	NonVotingValidators      []string `protobuf:"bytes,1,rep,name=non_voting_validators,json=nonVotingValidators,proto3" json:"non_voting_validators,omitempty"`
	MismatchedVoteExtensions []string `protobuf:"bytes,2,rep,name=mismatched_vote_extensions,json=mismatchedVoteExtensions,proto3" json:"mismatched_vote_extensions,omitempty"`
}

func (m *ValidationInfo) Reset()         { *m = ValidationInfo{} }
func (m *ValidationInfo) String() string { return proto.CompactTextString(m) }
func (*ValidationInfo) ProtoMessage()    {}
func (*ValidationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_174547ed801eca57, []int{5}
}
func (m *ValidationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationInfo.Merge(m, src)
}
func (m *ValidationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationInfo proto.InternalMessageInfo

func (m *ValidationInfo) GetNonVotingValidators() []string {
	if m != nil {
		return m.NonVotingValidators
	}
	return nil
}

func (m *ValidationInfo) GetMismatchedVoteExtensions() []string {
	if m != nil {
		return m.MismatchedVoteExtensions
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorHV)(nil), "zrchain.validation.ValidatorHV")
	proto.RegisterType((*HistoricalInfoHV)(nil), "zrchain.validation.HistoricalInfoHV")
	proto.RegisterType((*SlashEvent)(nil), "zrchain.validation.SlashEvent")
	proto.RegisterType((*HVParams)(nil), "zrchain.validation.HVParams")
	proto.RegisterType((*ZenBTCParams)(nil), "zrchain.validation.ZenBTCParams")
	proto.RegisterType((*ValidationInfo)(nil), "zrchain.validation.ValidationInfo")
}

func init() {
	proto.RegisterFile("zrchain/validation/hybrid_validation.proto", fileDescriptor_174547ed801eca57)
}

var fileDescriptor_174547ed801eca57 = []byte{
	// 1260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x73, 0x13, 0xc7,
	0x12, 0xf7, 0x22, 0x23, 0xac, 0x91, 0xff, 0x8e, 0xcd, 0x7b, 0x8b, 0xe1, 0x49, 0x2a, 0xf3, 0x0e,
	0x7a, 0xbc, 0xb0, 0x4a, 0x9c, 0x3f, 0x07, 0xe0, 0x62, 0x59, 0x24, 0x52, 0x41, 0x82, 0x6b, 0x05,
	0xa2, 0x42, 0x92, 0xda, 0x1a, 0xed, 0xb6, 0x77, 0x27, 0xde, 0x9d, 0x51, 0xed, 0x8c, 0x0c, 0xcb,
	0x31, 0xa7, 0x54, 0xe5, 0x42, 0x55, 0xbe, 0x00, 0xc7, 0x1c, 0x73, 0xe0, 0x43, 0x90, 0x9c, 0x28,
	0x2e, 0x49, 0xe5, 0x40, 0x52, 0x70, 0x48, 0x2e, 0xf9, 0x0e, 0xa9, 0x99, 0x5d, 0xed, 0xca, 0x58,
	0x3e, 0xc0, 0x45, 0xa5, 0xe9, 0xdf, 0xaf, 0x7f, 0x3b, 0xdd, 0xd3, 0xd3, 0x3d, 0xe8, 0xd2, 0xc3,
	0xd8, 0x0d, 0x08, 0x65, 0xad, 0x43, 0x12, 0x52, 0x8f, 0x48, 0xca, 0x59, 0x2b, 0x48, 0x86, 0x31,
	0xf5, 0x9c, 0xc2, 0x62, 0x8d, 0x62, 0x2e, 0x39, 0xc6, 0x19, 0xd7, 0x2a, 0x90, 0xcd, 0x35, 0x12,
	0x51, 0xc6, 0x5b, 0xfa, 0x37, 0xa5, 0x6d, 0x9e, 0x73, 0xb9, 0x88, 0xb8, 0x70, 0xf4, 0xaa, 0x95,
	0x2e, 0x32, 0x68, 0xc3, 0xe7, 0x3e, 0x4f, 0xed, 0xea, 0xdf, 0xc4, 0xc1, 0xe7, 0xdc, 0x0f, 0xa1,
	0xa5, 0x57, 0xc3, 0xf1, 0x7e, 0x8b, 0xb0, 0x24, 0x83, 0xea, 0xaf, 0x43, 0x92, 0x46, 0x20, 0x24,
	0x89, 0x46, 0x19, 0xe1, 0x82, 0x04, 0xe6, 0x41, 0x1c, 0x51, 0x26, 0x5b, 0x32, 0x19, 0x81, 0x48,
	0x7f, 0x33, 0xf4, 0xe2, 0x8c, 0xe8, 0x88, 0x10, 0x20, 0x1d, 0x8f, 0x48, 0x92, 0x91, 0x1a, 0x33,
	0x48, 0x42, 0x92, 0x03, 0xca, 0xfc, 0x94, 0xb1, 0xf5, 0xcb, 0x19, 0x54, 0x1d, 0xa4, 0x20, 0x8f,
	0xbb, 0x03, 0xbc, 0x8b, 0x56, 0xf9, 0x08, 0x62, 0xb5, 0x72, 0x88, 0xe7, 0xc5, 0x20, 0x84, 0x69,
	0x34, 0x8c, 0x66, 0xa5, 0x6d, 0x3e, 0x7f, 0x72, 0x79, 0x23, 0x0b, 0x79, 0x27, 0x45, 0xfa, 0x32,
	0xa6, 0xcc, 0xb7, 0x57, 0x26, 0x1e, 0x99, 0x19, 0x7f, 0x8e, 0x56, 0x5d, 0xce, 0x04, 0x30, 0x31,
	0x16, 0xce, 0x68, 0x3c, 0x3c, 0x80, 0xc4, 0x3c, 0xd5, 0x30, 0x9a, 0xd5, 0xed, 0x0d, 0x2b, 0x8d,
	0xda, 0x9a, 0x44, 0x6d, 0xed, 0xb0, 0xa4, 0x6d, 0xfe, 0x5c, 0x48, 0xbb, 0x71, 0x32, 0x92, 0xdc,
	0xda, 0x1b, 0x0f, 0x6f, 0x40, 0x62, 0xaf, 0xe4, 0x3a, 0x7b, 0x5a, 0x06, 0xff, 0x0b, 0x95, 0xbf,
	0x26, 0x34, 0x04, 0xcf, 0x2c, 0x35, 0x8c, 0xe6, 0x82, 0x9d, 0xad, 0xf0, 0x47, 0xa8, 0x2c, 0x24,
	0x91, 0x63, 0x61, 0xce, 0x37, 0x8c, 0xe6, 0xf2, 0x76, 0xcd, 0x3a, 0x7e, 0xa2, 0x56, 0x9b, 0x33,
	0xaf, 0xaf, 0x59, 0x76, 0xc6, 0xc6, 0xb7, 0xd0, 0xa2, 0xe4, 0x07, 0xc0, 0xc4, 0x67, 0x44, 0xd2,
	0x43, 0x30, 0x4f, 0xeb, 0x58, 0xff, 0xff, 0xf4, 0x45, 0x7d, 0xee, 0xb7, 0x17, 0xf5, 0xb3, 0xe9,
	0xa6, 0x84, 0x77, 0x60, 0x51, 0xde, 0x8a, 0x88, 0x0c, 0xac, 0x1e, 0x93, 0xcf, 0x9f, 0x5c, 0x46,
	0xd9, 0x6e, 0x7b, 0x4c, 0xda, 0x47, 0x04, 0x70, 0x0f, 0x55, 0xd2, 0xf5, 0xce, 0xa0, 0x6f, 0x96,
	0xdf, 0x5c, 0xad, 0xf0, 0xc6, 0x5f, 0xa2, 0x55, 0x0f, 0x42, 0xf0, 0xf5, 0x61, 0x88, 0x80, 0xc4,
	0x20, 0xcc, 0x33, 0x5a, 0xf1, 0xbd, 0x4c, 0xf1, 0xfc, 0x71, 0xc5, 0x9b, 0xe0, 0x13, 0x37, 0xe9,
	0x80, 0x3b, 0xa5, 0xdb, 0x01, 0xd7, 0x5e, 0xc9, 0xa5, 0xfa, 0x5a, 0x09, 0xdf, 0x44, 0x55, 0x0f,
	0x84, 0x1b, 0xd3, 0x91, 0xca, 0x8d, 0xb9, 0xa0, 0xcf, 0xa7, 0x3e, 0x2b, 0x6d, 0x9d, 0x82, 0xd6,
	0xae, 0xa8, 0x2f, 0xff, 0xf0, 0xe7, 0x8f, 0x97, 0x0c, 0x7b, 0xda, 0x1d, 0xff, 0x0f, 0xad, 0x8e,
	0xd9, 0x90, 0x33, 0x8f, 0x32, 0xdf, 0x09, 0x80, 0xfa, 0x81, 0x34, 0x2b, 0x0d, 0xa3, 0x59, 0xb2,
	0x57, 0x72, 0x7b, 0x57, 0x9b, 0xf1, 0x1e, 0x5a, 0x2e, 0xa8, 0xaa, 0xe8, 0x4d, 0xa4, 0xbf, 0xbd,
	0x79, 0xac, 0x36, 0x6e, 0x4f, 0x6e, 0x44, 0x7b, 0x49, 0x7d, 0xf6, 0xd1, 0xef, 0x75, 0x23, 0xfd,
	0xf4, 0x52, 0x2e, 0xa0, 0x28, 0xb8, 0x87, 0x90, 0xcb, 0xa3, 0x88, 0x0a, 0xa1, 0x22, 0xa9, 0x6a,
	0xb5, 0x99, 0x05, 0xb0, 0x9b, 0xb3, 0xa6, 0x03, 0x99, 0x72, 0xc6, 0x5f, 0xa0, 0xf5, 0x88, 0x32,
	0x47, 0x40, 0xb8, 0xef, 0x64, 0x19, 0x53, 0x9a, 0x8b, 0x6f, 0x7e, 0x90, 0x6b, 0x11, 0x65, 0x7d,
	0x08, 0xf7, 0x3b, 0xb9, 0x0a, 0xbe, 0x86, 0xce, 0x17, 0x91, 0x73, 0xe6, 0x04, 0x3c, 0xf4, 0x9c,
	0x18, 0xf6, 0x1d, 0x97, 0x8f, 0x99, 0x34, 0x97, 0x74, 0xbe, 0xfe, 0x9d, 0x53, 0x6e, 0xb1, 0x2e,
	0x0f, 0x3d, 0x1b, 0xf6, 0x77, 0x15, 0x8c, 0x2f, 0xa2, 0x22, 0x6c, 0x87, 0x7a, 0xc2, 0x5c, 0x6e,
	0x94, 0x9a, 0xf3, 0xf6, 0x62, 0x6e, 0xec, 0x79, 0xe2, 0xca, 0xc2, 0xb7, 0x8f, 0xeb, 0x73, 0x7f,
	0x3d, 0xae, 0xcf, 0x6d, 0x7d, 0x6f, 0xa0, 0xd5, 0x2e, 0x15, 0x92, 0xc7, 0xd4, 0x25, 0x61, 0x8f,
	0xed, 0xf3, 0xee, 0x00, 0x5f, 0x45, 0xe5, 0x00, 0x88, 0x07, 0xb1, 0xbe, 0xd4, 0xd5, 0x6d, 0xd3,
	0x2a, 0x9a, 0x8c, 0x95, 0xb6, 0x97, 0xae, 0xc6, 0xa7, 0xf3, 0x93, 0xb9, 0xe0, 0x36, 0x2a, 0x1f,
	0x92, 0x50, 0x80, 0x34, 0x4f, 0x35, 0x4a, 0x27, 0x15, 0xcb, 0x54, 0x33, 0x39, 0xa2, 0x91, 0x7a,
	0x6e, 0xfd, 0x7d, 0x0a, 0xa1, 0x7e, 0x48, 0x44, 0x70, 0xfd, 0x10, 0x98, 0xc4, 0x0d, 0x54, 0x1d,
	0x86, 0xdc, 0x3d, 0x48, 0x4b, 0x43, 0x6f, 0xaa, 0x64, 0x4f, 0x9b, 0xf0, 0x7f, 0xd1, 0xd2, 0xe1,
	0x44, 0x52, 0xf5, 0x17, 0xdd, 0x48, 0x2a, 0xf6, 0x51, 0x23, 0x76, 0xd0, 0xda, 0x08, 0x62, 0x17,
	0x98, 0x24, 0x3e, 0x68, 0xfd, 0xac, 0x43, 0xbc, 0xd5, 0x5d, 0x39, 0xae, 0x85, 0xbf, 0x42, 0xeb,
	0xe9, 0xc5, 0xcc, 0x0c, 0x59, 0xbb, 0x98, 0x7f, 0xf3, 0xba, 0x98, 0xa5, 0x83, 0xef, 0xa2, 0xd5,
	0x23, 0x66, 0xd5, 0x3c, 0xde, 0xa2, 0x15, 0x1d, 0x13, 0xd9, 0xfa, 0xc9, 0x40, 0x0b, 0xdd, 0xc1,
	0x1e, 0x89, 0x49, 0xa4, 0xfa, 0xf2, 0xf2, 0xce, 0xa0, 0x6f, 0xc3, 0x7d, 0x12, 0x7b, 0xc2, 0x26,
	0x12, 0xb2, 0xd6, 0xfe, 0x16, 0x29, 0x7a, 0x4d, 0x08, 0x5f, 0x40, 0x95, 0xb6, 0x3a, 0x35, 0x75,
	0x1f, 0xf5, 0x11, 0x95, 0xec, 0xc2, 0x80, 0x3b, 0x68, 0xf1, 0x1e, 0xb0, 0xf6, 0xed, 0xdd, 0x74,
	0x23, 0xfa, 0x64, 0xaa, 0xdb, 0x8d, 0x59, 0xf5, 0x33, 0xcd, 0xb3, 0x8f, 0x78, 0x6d, 0x7d, 0x77,
	0xfa, 0xa8, 0x0c, 0xde, 0x46, 0x1b, 0x0f, 0xf5, 0xfa, 0xba, 0x0c, 0xda, 0x44, 0xba, 0x01, 0xa4,
	0x25, 0xa2, 0xa3, 0xb2, 0x67, 0x62, 0xf8, 0x0a, 0x32, 0x53, 0x7b, 0x07, 0x46, 0x5c, 0x50, 0x79,
	0x03, 0x12, 0x35, 0xc4, 0xa6, 0x4a, 0xeb, 0x44, 0x1c, 0xbf, 0x83, 0xd6, 0x52, 0xec, 0x53, 0xca,
	0x24, 0xc4, 0x37, 0x20, 0xe9, 0x75, 0x74, 0x2c, 0xf3, 0xf6, 0x71, 0x00, 0x7f, 0x80, 0xce, 0xa6,
	0xc6, 0xbb, 0x54, 0x06, 0x5e, 0x4c, 0xee, 0x4f, 0x3c, 0xe6, 0xb5, 0xc7, 0x6c, 0x10, 0xbf, 0x8b,
	0xd6, 0x53, 0xe0, 0x0e, 0x53, 0x93, 0x7a, 0xe2, 0x73, 0x5a, 0xfb, 0xcc, 0x82, 0x8a, 0x5d, 0xb5,
	0xc7, 0x31, 0x9b, 0xf0, 0xcb, 0xd3, 0xbb, 0x9a, 0x02, 0xf0, 0x35, 0x74, 0x2e, 0x35, 0x66, 0xa7,
	0x57, 0x84, 0xd9, 0xeb, 0xe8, 0xe9, 0x32, 0x6f, 0x9f, 0x4c, 0x28, 0xbc, 0x77, 0x03, 0xc2, 0x7c,
	0xc8, 0x06, 0xbe, 0xc6, 0x84, 0xb9, 0xa0, 0xfb, 0xd1, 0xc9, 0x04, 0x6c, 0x21, 0x9c, 0x82, 0x7d,
	0x19, 0x13, 0x09, 0x7e, 0xa2, 0xb3, 0x5e, 0xd1, 0x59, 0x9f, 0x81, 0xa8, 0x0c, 0x0e, 0xa9, 0x74,
	0x39, 0x65, 0x7b, 0x31, 0x7f, 0x90, 0xec, 0xc6, 0xa0, 0x2e, 0x7c, 0xaf, 0xa3, 0x07, 0x46, 0xc5,
	0x9e, 0x0d, 0xe2, 0x4f, 0xd0, 0x8a, 0x4e, 0x0f, 0x19, 0x86, 0xb0, 0xa3, 0x5e, 0x44, 0xc2, 0xac,
	0xea, 0x7e, 0xf5, 0x9f, 0x59, 0xf5, 0xa6, 0x19, 0x1d, 0x22, 0x89, 0xfd, 0xba, 0x97, 0xaa, 0x69,
	0x32, 0x96, 0x01, 0x8f, 0xa9, 0x4c, 0xd2, 0x09, 0x60, 0x17, 0x86, 0xad, 0x6f, 0x0c, 0xb4, 0x3c,
	0xc8, 0x75, 0x54, 0x7f, 0xc5, 0xdb, 0xe8, 0x2c, 0xe3, 0xcc, 0x39, 0xe4, 0x52, 0xb5, 0xe8, 0xbc,
	0x43, 0xa9, 0x17, 0x54, 0xa9, 0x59, 0xb1, 0xd7, 0x19, 0x67, 0x03, 0x8d, 0xe5, 0x4d, 0x52, 0xe0,
	0x6b, 0x68, 0x33, 0xa2, 0x22, 0xd2, 0x15, 0xea, 0x29, 0x57, 0x70, 0xe0, 0x81, 0x04, 0xa6, 0xa6,
	0x91, 0xd0, 0x8d, 0xb6, 0x62, 0x9b, 0x05, 0x63, 0xc0, 0x25, 0x5c, 0xcf, 0xf1, 0xf6, 0x9d, 0xa7,
	0x2f, 0x6b, 0xc6, 0xb3, 0x97, 0x35, 0xe3, 0x8f, 0x97, 0x35, 0xe3, 0xd1, 0xab, 0xda, 0xdc, 0xb3,
	0x57, 0xb5, 0xb9, 0x5f, 0x5f, 0xd5, 0xe6, 0xee, 0x5d, 0xf5, 0xa9, 0x0c, 0xc6, 0x43, 0xcb, 0xe5,
	0x51, 0xeb, 0x1e, 0xb0, 0x98, 0xbb, 0x07, 0x97, 0x3f, 0xe6, 0x63, 0x96, 0xbd, 0x02, 0xf3, 0x87,
	0xe1, 0x87, 0xad, 0x07, 0xd3, 0xaf, 0x43, 0x3d, 0x03, 0x86, 0x65, 0x3d, 0x82, 0xdf, 0xff, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x28, 0xc4, 0xa3, 0x4d, 0x43, 0x0b, 0x00, 0x00,
}

func (m *ValidatorHV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorHV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorHV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingIds) > 0 {
		dAtA2 := make([]byte, len(m.UnbondingIds)*10)
		var j1 int
		for _, num := range m.UnbondingIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintHybridValidation(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x72
	}
	if m.UnbondingOnHoldRefCount != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.UnbondingOnHoldRefCount))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondingTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintHybridValidation(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x52
	if m.UnbondingHeight != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TokensAVS.Size()
		i -= size
		if _, err := m.TokensAVS.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TokensNative.Size()
		i -= size
		if _, err := m.TokensNative.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybridValidation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalInfoHV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalInfoHV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalInfoHV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valset) > 0 {
		for iNdEx := len(m.Valset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHybridValidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SlashEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokensSlashedAVS.Size()
		i -= size
		if _, err := m.TokensSlashedAVS.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokensSlashedNative.Size()
		i -= size
		if _, err := m.TokensSlashedNative.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PercentageSlashed.Size()
		i -= size
		if _, err := m.PercentageSlashed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HVParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HVParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HVParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZenBTCParams != nil {
		{
			size, err := m.ZenBTCParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybridValidation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockTime != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.BlockTime))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.AVSRewardsRate.Size()
		i -= size
		if _, err := m.AVSRewardsRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHybridValidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ZenBTCParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZenBTCParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZenBTCParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StakeableAssets) > 0 {
		for iNdEx := len(m.StakeableAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeableAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHybridValidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.BitcoinProxyCreatorID) > 0 {
		i -= len(m.BitcoinProxyCreatorID)
		copy(dAtA[i:], m.BitcoinProxyCreatorID)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.BitcoinProxyCreatorID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ZenBTCStrategyAddr) > 0 {
		i -= len(m.ZenBTCStrategyAddr)
		copy(dAtA[i:], m.ZenBTCStrategyAddr)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.ZenBTCStrategyAddr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ZenBTCChangeAddressKeyIDs) > 0 {
		dAtA10 := make([]byte, len(m.ZenBTCChangeAddressKeyIDs)*10)
		var j9 int
		for _, num := range m.ZenBTCChangeAddressKeyIDs {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintHybridValidation(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x42
	}
	if m.ZenBTCRewardsDepositKeyID != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.ZenBTCRewardsDepositKeyID))
		i--
		dAtA[i] = 0x38
	}
	if m.ZenBTCBurnerKeyID != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.ZenBTCBurnerKeyID))
		i--
		dAtA[i] = 0x30
	}
	if m.ZenBTCUnstakerKeyID != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.ZenBTCUnstakerKeyID))
		i--
		dAtA[i] = 0x28
	}
	if m.ZenBTCWithdrawerKeyID != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.ZenBTCWithdrawerKeyID))
		i--
		dAtA[i] = 0x20
	}
	if m.ZenBTCMinterKeyID != 0 {
		i = encodeVarintHybridValidation(dAtA, i, uint64(m.ZenBTCMinterKeyID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ZenBTCDepositKeyringAddr) > 0 {
		i -= len(m.ZenBTCDepositKeyringAddr)
		copy(dAtA[i:], m.ZenBTCDepositKeyringAddr)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.ZenBTCDepositKeyringAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZenBTCEthBatcherAddr) > 0 {
		i -= len(m.ZenBTCEthBatcherAddr)
		copy(dAtA[i:], m.ZenBTCEthBatcherAddr)
		i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.ZenBTCEthBatcherAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MismatchedVoteExtensions) > 0 {
		for iNdEx := len(m.MismatchedVoteExtensions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MismatchedVoteExtensions[iNdEx])
			copy(dAtA[i:], m.MismatchedVoteExtensions[iNdEx])
			i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.MismatchedVoteExtensions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NonVotingValidators) > 0 {
		for iNdEx := len(m.NonVotingValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NonVotingValidators[iNdEx])
			copy(dAtA[i:], m.NonVotingValidators[iNdEx])
			i = encodeVarintHybridValidation(dAtA, i, uint64(len(m.NonVotingValidators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintHybridValidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovHybridValidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorHV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovHybridValidation(uint64(m.Status))
	}
	l = m.TokensNative.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.TokensAVS.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovHybridValidation(uint64(m.UnbondingHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	if m.UnbondingOnHoldRefCount != 0 {
		n += 1 + sovHybridValidation(uint64(m.UnbondingOnHoldRefCount))
	}
	if len(m.UnbondingIds) > 0 {
		l = 0
		for _, e := range m.UnbondingIds {
			l += sovHybridValidation(uint64(e))
		}
		n += 1 + sovHybridValidation(uint64(l)) + l
	}
	return n
}

func (m *HistoricalInfoHV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	if len(m.Valset) > 0 {
		for _, e := range m.Valset {
			l = e.Size()
			n += 1 + l + sovHybridValidation(uint64(l))
		}
	}
	return n
}

func (m *SlashEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovHybridValidation(uint64(m.BlockHeight))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	l = m.PercentageSlashed.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.TokensSlashedNative.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	l = m.TokensSlashedAVS.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	return n
}

func (m *HVParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AVSRewardsRate.Size()
	n += 1 + l + sovHybridValidation(uint64(l))
	if m.BlockTime != 0 {
		n += 1 + sovHybridValidation(uint64(m.BlockTime))
	}
	if m.ZenBTCParams != nil {
		l = m.ZenBTCParams.Size()
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	return n
}

func (m *ZenBTCParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZenBTCEthBatcherAddr)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	l = len(m.ZenBTCDepositKeyringAddr)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	if m.ZenBTCMinterKeyID != 0 {
		n += 1 + sovHybridValidation(uint64(m.ZenBTCMinterKeyID))
	}
	if m.ZenBTCWithdrawerKeyID != 0 {
		n += 1 + sovHybridValidation(uint64(m.ZenBTCWithdrawerKeyID))
	}
	if m.ZenBTCUnstakerKeyID != 0 {
		n += 1 + sovHybridValidation(uint64(m.ZenBTCUnstakerKeyID))
	}
	if m.ZenBTCBurnerKeyID != 0 {
		n += 1 + sovHybridValidation(uint64(m.ZenBTCBurnerKeyID))
	}
	if m.ZenBTCRewardsDepositKeyID != 0 {
		n += 1 + sovHybridValidation(uint64(m.ZenBTCRewardsDepositKeyID))
	}
	if len(m.ZenBTCChangeAddressKeyIDs) > 0 {
		l = 0
		for _, e := range m.ZenBTCChangeAddressKeyIDs {
			l += sovHybridValidation(uint64(e))
		}
		n += 1 + sovHybridValidation(uint64(l)) + l
	}
	l = len(m.ZenBTCStrategyAddr)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	l = len(m.BitcoinProxyCreatorID)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	if len(m.StakeableAssets) > 0 {
		for _, e := range m.StakeableAssets {
			l = e.Size()
			n += 1 + l + sovHybridValidation(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovHybridValidation(uint64(l))
	}
	return n
}

func (m *ValidationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NonVotingValidators) > 0 {
		for _, s := range m.NonVotingValidators {
			l = len(s)
			n += 1 + l + sovHybridValidation(uint64(l))
		}
	}
	if len(m.MismatchedVoteExtensions) > 0 {
		for _, s := range m.MismatchedVoteExtensions {
			l = len(s)
			n += 1 + l + sovHybridValidation(uint64(l))
		}
	}
	return n
}

func sovHybridValidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHybridValidation(x uint64) (n int) {
	return sovHybridValidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorHV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorHV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorHV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensNative", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensNative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensAVS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensAVS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingOnHoldRefCount", wireType)
			}
			m.UnbondingOnHoldRefCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingOnHoldRefCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHybridValidation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnbondingIds = append(m.UnbondingIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHybridValidation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHybridValidation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHybridValidation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnbondingIds) == 0 {
					m.UnbondingIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHybridValidation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnbondingIds = append(m.UnbondingIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHybridValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalInfoHV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalInfoHV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalInfoHV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valset = append(m.Valset, ValidatorHV{})
			if err := m.Valset[len(m.Valset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybridValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageSlashed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PercentageSlashed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensSlashedNative", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensSlashedNative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensSlashedAVS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensSlashedAVS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybridValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HVParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HVParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HVParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVSRewardsRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AVSRewardsRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZenBTCParams == nil {
				m.ZenBTCParams = &ZenBTCParams{}
			}
			if err := m.ZenBTCParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybridValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZenBTCParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZenBTCParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZenBTCParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCEthBatcherAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZenBTCEthBatcherAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCDepositKeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZenBTCDepositKeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCMinterKeyID", wireType)
			}
			m.ZenBTCMinterKeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZenBTCMinterKeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCWithdrawerKeyID", wireType)
			}
			m.ZenBTCWithdrawerKeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZenBTCWithdrawerKeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCUnstakerKeyID", wireType)
			}
			m.ZenBTCUnstakerKeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZenBTCUnstakerKeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCBurnerKeyID", wireType)
			}
			m.ZenBTCBurnerKeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZenBTCBurnerKeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCRewardsDepositKeyID", wireType)
			}
			m.ZenBTCRewardsDepositKeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZenBTCRewardsDepositKeyID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHybridValidation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ZenBTCChangeAddressKeyIDs = append(m.ZenBTCChangeAddressKeyIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHybridValidation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHybridValidation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHybridValidation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ZenBTCChangeAddressKeyIDs) == 0 {
					m.ZenBTCChangeAddressKeyIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHybridValidation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ZenBTCChangeAddressKeyIDs = append(m.ZenBTCChangeAddressKeyIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCChangeAddressKeyIDs", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenBTCStrategyAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZenBTCStrategyAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinProxyCreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BitcoinProxyCreatorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeableAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeableAssets = append(m.StakeableAssets, &AssetData{})
			if err := m.StakeableAssets[len(m.StakeableAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybridValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonVotingValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonVotingValidators = append(m.NonVotingValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MismatchedVoteExtensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHybridValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MismatchedVoteExtensions = append(m.MismatchedVoteExtensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybridValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHybridValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHybridValidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHybridValidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHybridValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHybridValidation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHybridValidation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHybridValidation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHybridValidation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHybridValidation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHybridValidation = fmt.Errorf("proto: unexpected end of group")
)
