// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/validation/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	api "github.com/Zenrock-Foundation/zrchain/v6/sidecar/proto/api"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/zenrocklabs/zenbtc/x/zenbtc/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the staking module's genesis state.
type GenesisState struct {
	// params defines all the parameters of related to deposit.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// last_total_power tracks the total amounts of bonded tokens recorded during
	// the previous end block.
	LastTotalPower cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=last_total_power,json=lastTotalPower,proto3,customtype=cosmossdk.io/math.Int" json:"last_total_power"`
	// last_validator_powers is a special index that provides a historical list
	// of the last-block's bonded validators.
	LastValidatorPowers []LastValidatorPower `protobuf:"bytes,3,rep,name=last_validator_powers,json=lastValidatorPowers,proto3" json:"last_validator_powers"`
	// validators defines the validator set at genesis.
	Validators []ValidatorHV `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators"`
	// delegations defines the delegations active at genesis.
	Delegations []Delegation `protobuf:"bytes,5,rep,name=delegations,proto3" json:"delegations"`
	// unbonding_delegations defines the unbonding delegations active at genesis.
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,6,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// redelegations defines the redelegations active at genesis.
	Redelegations []Redelegation `protobuf:"bytes,7,rep,name=redelegations,proto3" json:"redelegations"`
	// exported defines a bool to identify whether the chain dealing with exported
	// or initialized genesis.
	Exported bool `protobuf:"varint,8,opt,name=exported,proto3" json:"exported,omitempty"`
	// HVParams defines the hybrid validation parameters at genesis.
	HVParams *HVParams `protobuf:"bytes,9,opt,name=HVParams,proto3" json:"HVParams,omitempty"`
	// asset_prices defines the asset prices at genesis.
	AssetPrices []*AssetData `protobuf:"bytes,10,rep,name=asset_prices,json=assetPrices,proto3" json:"asset_prices,omitempty"`
	// last_valid_ve_height defines the last valid ve height at genesis.
	LastValidVeHeight int64 `protobuf:"varint,11,opt,name=last_valid_ve_height,json=lastValidVeHeight,proto3" json:"last_valid_ve_height,omitempty"`
	// slash_events defines the slash events at genesis.
	SlashEvents []SlashEvent `protobuf:"bytes,12,rep,name=slash_events,json=slashEvents,proto3" json:"slash_events"`
	// slash_event_count defines the slash event count at genesis.
	SlashEventCount uint64 `protobuf:"varint,13,opt,name=slash_event_count,json=slashEventCount,proto3" json:"slash_event_count,omitempty"`
	// validation_infos defines the validation infos at genesis.
	ValidationInfos []ValidationInfo `protobuf:"bytes,14,rep,name=validation_infos,json=validationInfos,proto3" json:"validation_infos"`
	// btc_block_headers defines the Bitcoin block headers at genesis.
	BtcBlockHeaders []api.BTCBlockHeader `protobuf:"bytes,15,rep,name=btc_block_headers,json=btcBlockHeaders,proto3" json:"btc_block_headers"`
	// last_used_solana_nonce defines the last used Solana nonce at genesis.
	LastUsedSolanaNonce []SolanaNonce `protobuf:"bytes,16,rep,name=last_used_solana_nonce,json=lastUsedSolanaNonce,proto3" json:"last_used_solana_nonce"`
	// backfill_requests defines the backfill requests at genesis.
	BackfillRequest BackfillRequests `protobuf:"bytes,17,opt,name=backfill_request,json=backfillRequest,proto3" json:"backfill_request"`
	// last_used_ethereum_nonce defines the last used Ethereum nonce at genesis.
	LastUsedEthereumNonce []types.NonceData `protobuf:"bytes,18,rep,name=last_used_ethereum_nonce,json=lastUsedEthereumNonce,proto3" json:"last_used_ethereum_nonce"`
	// requested_historical_bitcoin_headers defines the requested historical Bitcoin headers at genesis.
	RequestedHistoricalBitcoinHeaders []types.RequestedBitcoinHeaders `protobuf:"bytes,19,rep,name=requested_historical_bitcoin_headers,json=requestedHistoricalBitcoinHeaders,proto3" json:"requested_historical_bitcoin_headers"`
	// avs_rewards_pool defines the AVS rewards pool at genesis.
	AvsRewardsPool []string `protobuf:"bytes,20,rep,name=avs_rewards_pool,json=avsRewardsPool,proto3" json:"avs_rewards_pool,omitempty"`
	// ethereum_nonce_requested defines the Ethereum nonce requested at genesis.
	EthereumNonceRequested []uint64 `protobuf:"varint,21,rep,packed,name=ethereum_nonce_requested,json=ethereumNonceRequested,proto3" json:"ethereum_nonce_requested,omitempty"`
	// solana_nonce_requested defines the Solana nonce requested at genesis.
	SolanaNonceRequested []uint64 `protobuf:"varint,22,rep,packed,name=solana_nonce_requested,json=solanaNonceRequested,proto3" json:"solana_nonce_requested,omitempty"`
	// solana_zentp_accounts_requested defines the Solana Zentp accounts requested at genesis.
	SolanaZentpAccountsRequested []string `protobuf:"bytes,23,rep,name=solana_zentp_accounts_requested,json=solanaZentpAccountsRequested,proto3" json:"solana_zentp_accounts_requested,omitempty"`
	// solana_accounts_requested defines the Solana accounts requested at genesis.
	SolanaAccountsRequested []string `protobuf:"bytes,24,rep,name=solana_accounts_requested,json=solanaAccountsRequested,proto3" json:"solana_accounts_requested,omitempty"`
	// last_completed_zentp_mint_id defines the last completed Zentp mint id at genesis.
	LastCompletedZentpMintId uint64 `protobuf:"varint,25,opt,name=last_completed_zentp_mint_id,json=lastCompletedZentpMintId,proto3" json:"last_completed_zentp_mint_id,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c682c41018a13c0f, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetLastValidatorPowers() []LastValidatorPower {
	if m != nil {
		return m.LastValidatorPowers
	}
	return nil
}

func (m *GenesisState) GetValidators() []ValidatorHV {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GenesisState) GetDelegations() []Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *GenesisState) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *GenesisState) GetRedelegations() []Redelegation {
	if m != nil {
		return m.Redelegations
	}
	return nil
}

func (m *GenesisState) GetExported() bool {
	if m != nil {
		return m.Exported
	}
	return false
}

func (m *GenesisState) GetHVParams() *HVParams {
	if m != nil {
		return m.HVParams
	}
	return nil
}

func (m *GenesisState) GetAssetPrices() []*AssetData {
	if m != nil {
		return m.AssetPrices
	}
	return nil
}

func (m *GenesisState) GetLastValidVeHeight() int64 {
	if m != nil {
		return m.LastValidVeHeight
	}
	return 0
}

func (m *GenesisState) GetSlashEvents() []SlashEvent {
	if m != nil {
		return m.SlashEvents
	}
	return nil
}

func (m *GenesisState) GetSlashEventCount() uint64 {
	if m != nil {
		return m.SlashEventCount
	}
	return 0
}

func (m *GenesisState) GetValidationInfos() []ValidationInfo {
	if m != nil {
		return m.ValidationInfos
	}
	return nil
}

func (m *GenesisState) GetBtcBlockHeaders() []api.BTCBlockHeader {
	if m != nil {
		return m.BtcBlockHeaders
	}
	return nil
}

func (m *GenesisState) GetLastUsedSolanaNonce() []SolanaNonce {
	if m != nil {
		return m.LastUsedSolanaNonce
	}
	return nil
}

func (m *GenesisState) GetBackfillRequest() BackfillRequests {
	if m != nil {
		return m.BackfillRequest
	}
	return BackfillRequests{}
}

func (m *GenesisState) GetLastUsedEthereumNonce() []types.NonceData {
	if m != nil {
		return m.LastUsedEthereumNonce
	}
	return nil
}

func (m *GenesisState) GetRequestedHistoricalBitcoinHeaders() []types.RequestedBitcoinHeaders {
	if m != nil {
		return m.RequestedHistoricalBitcoinHeaders
	}
	return nil
}

func (m *GenesisState) GetAvsRewardsPool() []string {
	if m != nil {
		return m.AvsRewardsPool
	}
	return nil
}

func (m *GenesisState) GetEthereumNonceRequested() []uint64 {
	if m != nil {
		return m.EthereumNonceRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaNonceRequested() []uint64 {
	if m != nil {
		return m.SolanaNonceRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaZentpAccountsRequested() []string {
	if m != nil {
		return m.SolanaZentpAccountsRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaAccountsRequested() []string {
	if m != nil {
		return m.SolanaAccountsRequested
	}
	return nil
}

func (m *GenesisState) GetLastCompletedZentpMintId() uint64 {
	if m != nil {
		return m.LastCompletedZentpMintId
	}
	return 0
}

// LastValidatorPower required for validator set update logic.
type LastValidatorPower struct {
	// address is the address of the validator.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// power defines the power of the validator.
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *LastValidatorPower) Reset()         { *m = LastValidatorPower{} }
func (m *LastValidatorPower) String() string { return proto.CompactTextString(m) }
func (*LastValidatorPower) ProtoMessage()    {}
func (*LastValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_c682c41018a13c0f, []int{1}
}
func (m *LastValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastValidatorPower.Merge(m, src)
}
func (m *LastValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *LastValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_LastValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_LastValidatorPower proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "zrchain.validation.GenesisState")
	proto.RegisterType((*LastValidatorPower)(nil), "zrchain.validation.LastValidatorPower")
}

func init() { proto.RegisterFile("zrchain/validation/genesis.proto", fileDescriptor_c682c41018a13c0f) }

var fileDescriptor_c682c41018a13c0f = []byte{
	// 1077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0x4f, 0x4f, 0x24, 0x45,
	0x18, 0xc6, 0x67, 0x1c, 0x60, 0xa1, 0x60, 0xf9, 0x53, 0x0c, 0x6c, 0x83, 0x38, 0x33, 0xe2, 0x46,
	0x27, 0x24, 0x4c, 0x1b, 0x4c, 0x8c, 0x71, 0x63, 0x94, 0x61, 0x51, 0x50, 0x34, 0xd8, 0x2c, 0xc4,
	0x90, 0x98, 0x4a, 0x4d, 0x77, 0x31, 0x5d, 0xa1, 0xa7, 0xaa, 0xed, 0xaa, 0x99, 0x65, 0xb9, 0x7a,
	0xf1, 0xe8, 0x47, 0xd8, 0xa3, 0x47, 0x0f, 0xfb, 0x21, 0xf6, 0xb8, 0xd9, 0x93, 0xf1, 0xb0, 0x31,
	0x70, 0xd0, 0x6f, 0xe0, 0xd5, 0x74, 0x55, 0x75, 0x4f, 0x8d, 0xd3, 0xbb, 0x17, 0xc2, 0xf4, 0xf3,
	0xbc, 0xbf, 0xf7, 0xe9, 0xea, 0xb7, 0xba, 0x1a, 0x34, 0xae, 0x13, 0x3f, 0xc4, 0x94, 0xb9, 0x03,
	0x1c, 0xd1, 0x00, 0x4b, 0xca, 0x99, 0xdb, 0x25, 0x8c, 0x08, 0x2a, 0x5a, 0x71, 0xc2, 0x25, 0x87,
	0xd0, 0x38, 0x5a, 0x43, 0xc7, 0x7a, 0xb5, 0xcb, 0xbb, 0x5c, 0xc9, 0x6e, 0xfa, 0x9f, 0x76, 0xae,
	0x17, 0xb1, 0x84, 0xc4, 0x97, 0x94, 0x75, 0x8d, 0xa3, 0x5e, 0xe4, 0xe0, 0x11, 0x66, 0xd8, 0x18,
	0xde, 0x2e, 0x30, 0xc8, 0x2b, 0x23, 0xbe, 0x57, 0x20, 0x62, 0x21, 0x88, 0x44, 0x01, 0x96, 0x19,
	0x61, 0xab, 0xc0, 0x14, 0x3e, 0xe9, 0x24, 0x34, 0x40, 0xc3, 0x2b, 0xc6, 0xbb, 0xe6, 0x73, 0xd1,
	0xe3, 0x02, 0xe9, 0x3b, 0xd1, 0x3f, 0x8c, 0xb4, 0x84, 0x7b, 0x94, 0x71, 0x57, 0xfd, 0xcd, 0xdc,
	0x38, 0xa6, 0xae, 0xa0, 0x01, 0xf1, 0x71, 0x82, 0x04, 0x49, 0x06, 0xd4, 0x27, 0x99, 0x94, 0x35,
	0xbd, 0x26, 0xac, 0x23, 0x7d, 0xb7, 0x47, 0x99, 0xd4, 0xd2, 0xe6, 0xbf, 0xf3, 0x60, 0xee, 0x2b,
	0xbd, 0xa0, 0x27, 0x12, 0x4b, 0x02, 0x3f, 0x03, 0x53, 0x31, 0x4e, 0x70, 0x4f, 0x38, 0xe5, 0x46,
	0xb9, 0x39, 0xbb, 0xb3, 0xde, 0x1a, 0x5f, 0xe0, 0xd6, 0xb1, 0x72, 0xb4, 0x67, 0x9e, 0xbf, 0xaa,
	0x97, 0x7e, 0xfb, 0xfb, 0xf7, 0xad, 0xb2, 0x67, 0x8a, 0xe0, 0x39, 0x58, 0x8c, 0xb0, 0x90, 0x48,
	0x72, 0x89, 0x23, 0x14, 0xf3, 0xc7, 0x24, 0x71, 0xde, 0x6a, 0x94, 0x9b, 0x73, 0xed, 0x0f, 0x53,
	0xf3, 0x9f, 0xaf, 0xea, 0x2b, 0xfa, 0x46, 0x44, 0x70, 0xd9, 0xa2, 0xdc, 0xed, 0x61, 0x19, 0xb6,
	0x0e, 0x99, 0x7c, 0xf9, 0x6c, 0x1b, 0x98, 0x3b, 0x3c, 0x64, 0x52, 0x33, 0xe7, 0x53, 0xd2, 0xa3,
	0x14, 0x74, 0x9c, 0x72, 0x20, 0x01, 0x2b, 0x8a, 0x6d, 0x82, 0xf0, 0x44, 0xf3, 0x85, 0x53, 0x69,
	0x54, 0x9a, 0xb3, 0x3b, 0xef, 0x17, 0x25, 0x3d, 0xc2, 0x42, 0x9e, 0x65, 0x7e, 0x85, 0xb1, 0x53,
	0x2f, 0x47, 0x63, 0xb2, 0x80, 0x5f, 0x03, 0x90, 0x77, 0x10, 0xce, 0x84, 0x62, 0xd7, 0x8b, 0xd8,
	0x79, 0xe1, 0xc1, 0x99, 0x0d, 0xb5, 0xaa, 0xe1, 0x37, 0x60, 0x36, 0x20, 0x11, 0xe9, 0xaa, 0x02,
	0xe1, 0x4c, 0x2a, 0x58, 0xad, 0x08, 0xf6, 0x30, 0xb7, 0xd9, 0x2c, 0xbb, 0x1a, 0x76, 0xc1, 0x4a,
	0x9f, 0x75, 0x38, 0x0b, 0x28, 0xeb, 0x22, 0x1b, 0x3b, 0xa5, 0xb0, 0x1f, 0x14, 0x61, 0x4f, 0xb3,
	0x82, 0x62, 0x7e, 0xb5, 0x3f, 0xae, 0x0b, 0xf8, 0x3d, 0xb8, 0x9b, 0x10, 0xbb, 0xc1, 0x1d, 0xd5,
	0xa0, 0x51, 0xd4, 0xc0, 0xb3, 0x8c, 0x36, 0x79, 0x94, 0x00, 0xd7, 0xc1, 0x34, 0xb9, 0x8a, 0x79,
	0x22, 0x49, 0xe0, 0x4c, 0x37, 0xca, 0xcd, 0x69, 0x2f, 0xff, 0x0d, 0x3f, 0x01, 0xd3, 0x07, 0x67,
	0x7a, 0xa4, 0x9c, 0x19, 0x35, 0x74, 0x1b, 0x45, 0x9d, 0x32, 0x8f, 0x97, 0xbb, 0xe1, 0x17, 0x60,
	0x4e, 0xef, 0xb0, 0x38, 0xa1, 0x3e, 0x11, 0x0e, 0x50, 0x39, 0xdf, 0x29, 0xaa, 0xde, 0x4d, 0x7d,
	0x0f, 0xb1, 0xc4, 0xde, 0xac, 0x2a, 0x39, 0x56, 0x15, 0xd0, 0x05, 0xd5, 0xe1, 0x4c, 0xa1, 0x01,
	0x41, 0x21, 0xa1, 0xdd, 0x50, 0x3a, 0xb3, 0x8d, 0x72, 0xb3, 0xe2, 0x2d, 0xe5, 0xf3, 0x71, 0x46,
	0x0e, 0x94, 0x00, 0x8f, 0xc0, 0x9c, 0x88, 0xb0, 0x08, 0x11, 0x19, 0x10, 0x26, 0x85, 0x33, 0xf7,
	0xfa, 0x47, 0x7a, 0x92, 0xfa, 0xf6, 0x53, 0xdb, 0xc8, 0x23, 0x15, 0xf9, 0x65, 0x01, 0xb7, 0xc0,
	0x92, 0x45, 0x43, 0x3e, 0xef, 0x33, 0xe9, 0xdc, 0x6d, 0x94, 0x9b, 0x13, 0xde, 0xc2, 0xd0, 0xb7,
	0x97, 0x5e, 0x86, 0x3f, 0x80, 0xc5, 0x21, 0x1c, 0x51, 0x76, 0xc1, 0x85, 0x33, 0xaf, 0xba, 0x6f,
	0xbe, 0x61, 0x3a, 0x29, 0x67, 0x87, 0xec, 0x82, 0xdb, 0x09, 0x16, 0x06, 0x23, 0x52, 0x3a, 0xf1,
	0x4b, 0x1d, 0xe9, 0xa3, 0x4e, 0xc4, 0xfd, 0x4b, 0x14, 0x12, 0x1c, 0xa4, 0x9b, 0x6a, 0x41, 0xa1,
	0x97, 0x5b, 0x38, 0xa6, 0xad, 0xf6, 0xa3, 0xbd, 0x76, 0x2a, 0x1e, 0x28, 0x6d, 0x84, 0xd5, 0x91,
	0xbe, 0x25, 0x09, 0x88, 0xc0, 0xaa, 0x5a, 0xd0, 0xbe, 0x20, 0x01, 0xd2, 0x2f, 0x4f, 0xc4, 0x38,
	0xf3, 0x89, 0xb3, 0xf8, 0xfa, 0x9d, 0x74, 0xa2, 0x7c, 0xdf, 0xa5, 0xb6, 0xb1, 0xed, 0x79, 0x2a,
	0x48, 0x60, 0xe9, 0xe9, 0x1b, 0xa6, 0x83, 0xfd, 0xcb, 0x0b, 0x1a, 0x45, 0x28, 0x21, 0x3f, 0xf5,
	0x89, 0x90, 0xce, 0x92, 0x9a, 0x9a, 0xfb, 0x45, 0xe8, 0xb6, 0xf1, 0x7a, 0xda, 0x2a, 0x46, 0xc3,
	0x8f, 0x8a, 0xf0, 0x47, 0xe0, 0x0c, 0xc3, 0x13, 0x19, 0x92, 0x84, 0xf4, 0x7b, 0x26, 0x3e, 0x54,
	0xf1, 0xd7, 0xf2, 0x1e, 0xfa, 0x5d, 0xda, 0x52, 0xa1, 0xd2, 0xb9, 0xb2, 0xc1, 0x2b, 0x59, 0xf0,
	0x7d, 0xc3, 0xd0, 0xd1, 0x7f, 0x2e, 0x83, 0xfb, 0x26, 0x32, 0x09, 0x50, 0x48, 0x85, 0xe4, 0x09,
	0xf5, 0x71, 0x84, 0x3a, 0x54, 0xfa, 0x9c, 0xb2, 0x7c, 0xed, 0x97, 0xff, 0xb7, 0xa1, 0x4d, 0x2f,
	0x2f, 0xab, 0x6d, 0x6b, 0xbf, 0x59, 0x73, 0xbb, 0xf3, 0xbb, 0x39, 0xff, 0x20, 0xc7, 0x8f, 0xba,
	0xa1, 0x0b, 0x16, 0xf1, 0x40, 0xa0, 0x84, 0x3c, 0xc6, 0x49, 0x20, 0x50, 0xcc, 0x79, 0xe4, 0x54,
	0x1b, 0x95, 0xe6, 0x4c, 0x7b, 0xd2, 0xbc, 0x77, 0xf1, 0x40, 0x78, 0x5a, 0x3d, 0xe6, 0x3c, 0x82,
	0x9f, 0x03, 0x67, 0x74, 0x2d, 0x50, 0xde, 0xc4, 0x59, 0x69, 0x54, 0x9a, 0x13, 0x59, 0xe1, 0x2a,
	0xb1, 0x6f, 0x37, 0x4f, 0x0b, 0x1f, 0x80, 0x55, 0x7b, 0x12, 0xac, 0xf2, 0x55, 0xbb, 0xbc, 0x2a,
	0x86, 0x8f, 0x79, 0x58, 0x7c, 0x04, 0xea, 0xa6, 0xf8, 0x9a, 0x30, 0x19, 0x23, 0xec, 0xab, 0x5d,
	0x22, 0x2c, 0xca, 0x3d, 0x3b, 0xfd, 0x86, 0x76, 0x9f, 0xa7, 0xe6, 0x5d, 0xe3, 0x1d, 0xd2, 0x76,
	0xc1, 0x9a, 0xa1, 0x15, 0x70, 0x1c, 0x9b, 0x73, 0x4f, 0xfb, 0xc6, 0x11, 0xfb, 0x60, 0x43, 0x0d,
	0x89, 0xcf, 0x7b, 0x71, 0x44, 0xd2, 0x27, 0xa9, 0x83, 0xa5, 0xa7, 0x2a, 0xa2, 0x81, 0xb3, 0x96,
	0x6e, 0xdf, 0x8c, 0xa2, 0xe6, 0x69, 0x2f, 0x73, 0xaa, 0x50, 0xdf, 0x52, 0x26, 0x0f, 0x83, 0xcd,
	0x10, 0xc0, 0xf1, 0xc3, 0x09, 0xee, 0x80, 0x3b, 0x38, 0x08, 0x12, 0x22, 0xf4, 0xf9, 0x3b, 0xd3,
	0x76, 0x5e, 0x3e, 0xdb, 0xae, 0x9a, 0x93, 0x71, 0x57, 0x2b, 0x27, 0x32, 0xa1, 0xac, 0xeb, 0x65,
	0x46, 0x58, 0x05, 0x93, 0xc3, 0x83, 0xb6, 0xe2, 0xe9, 0x1f, 0x9f, 0x4e, 0xff, 0xf2, 0xb4, 0x5e,
	0xfa, 0xe7, 0x69, 0xbd, 0xd4, 0x3e, 0x7d, 0x7e, 0x53, 0x2b, 0xbf, 0xb8, 0xa9, 0x95, 0xff, 0xba,
	0xa9, 0x95, 0x7f, 0xbd, 0xad, 0x95, 0x5e, 0xdc, 0xd6, 0x4a, 0x7f, 0xdc, 0xd6, 0x4a, 0xe7, 0x0f,
	0xba, 0x54, 0x86, 0xfd, 0x4e, 0xcb, 0xe7, 0x3d, 0xf7, 0x9c, 0xb0, 0x84, 0xfb, 0x97, 0xdb, 0x5f,
	0xf2, 0x3e, 0x33, 0x1f, 0x26, 0xf9, 0xb7, 0xca, 0xc7, 0xee, 0xd5, 0xc8, 0x27, 0xcf, 0x93, 0x98,
	0x88, 0xce, 0x94, 0xfa, 0x82, 0xf8, 0xe8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x31, 0xb5,
	0x3f, 0xa4, 0x09, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCompletedZentpMintId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastCompletedZentpMintId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.SolanaAccountsRequested) > 0 {
		for iNdEx := len(m.SolanaAccountsRequested) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SolanaAccountsRequested[iNdEx])
			copy(dAtA[i:], m.SolanaAccountsRequested[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.SolanaAccountsRequested[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.SolanaZentpAccountsRequested) > 0 {
		for iNdEx := len(m.SolanaZentpAccountsRequested) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SolanaZentpAccountsRequested[iNdEx])
			copy(dAtA[i:], m.SolanaZentpAccountsRequested[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.SolanaZentpAccountsRequested[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.SolanaNonceRequested) > 0 {
		dAtA2 := make([]byte, len(m.SolanaNonceRequested)*10)
		var j1 int
		for _, num := range m.SolanaNonceRequested {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGenesis(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.EthereumNonceRequested) > 0 {
		dAtA4 := make([]byte, len(m.EthereumNonceRequested)*10)
		var j3 int
		for _, num := range m.EthereumNonceRequested {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGenesis(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.AvsRewardsPool) > 0 {
		for iNdEx := len(m.AvsRewardsPool) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvsRewardsPool[iNdEx])
			copy(dAtA[i:], m.AvsRewardsPool[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AvsRewardsPool[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.RequestedHistoricalBitcoinHeaders) > 0 {
		for iNdEx := len(m.RequestedHistoricalBitcoinHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestedHistoricalBitcoinHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.LastUsedEthereumNonce) > 0 {
		for iNdEx := len(m.LastUsedEthereumNonce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastUsedEthereumNonce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.BackfillRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if len(m.LastUsedSolanaNonce) > 0 {
		for iNdEx := len(m.LastUsedSolanaNonce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastUsedSolanaNonce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.BtcBlockHeaders) > 0 {
		for iNdEx := len(m.BtcBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcBlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ValidationInfos) > 0 {
		for iNdEx := len(m.ValidationInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SlashEventCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SlashEventCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.SlashEvents) > 0 {
		for iNdEx := len(m.SlashEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SlashEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.LastValidVeHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastValidVeHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.AssetPrices) > 0 {
		for iNdEx := len(m.AssetPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.HVParams != nil {
		{
			size, err := m.HVParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Exported {
		i--
		if m.Exported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Redelegations) > 0 {
		for iNdEx := len(m.Redelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Redelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LastValidatorPowers) > 0 {
		for iNdEx := len(m.LastValidatorPowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastValidatorPowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.LastTotalPower.Size()
		i -= size
		if _, err := m.LastTotalPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LastValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LastTotalPower.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.LastValidatorPowers) > 0 {
		for _, e := range m.LastValidatorPowers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Redelegations) > 0 {
		for _, e := range m.Redelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Exported {
		n += 2
	}
	if m.HVParams != nil {
		l = m.HVParams.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.AssetPrices) > 0 {
		for _, e := range m.AssetPrices {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastValidVeHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LastValidVeHeight))
	}
	if len(m.SlashEvents) > 0 {
		for _, e := range m.SlashEvents {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.SlashEventCount != 0 {
		n += 1 + sovGenesis(uint64(m.SlashEventCount))
	}
	if len(m.ValidationInfos) > 0 {
		for _, e := range m.ValidationInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BtcBlockHeaders) > 0 {
		for _, e := range m.BtcBlockHeaders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LastUsedSolanaNonce) > 0 {
		for _, e := range m.LastUsedSolanaNonce {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	l = m.BackfillRequest.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.LastUsedEthereumNonce) > 0 {
		for _, e := range m.LastUsedEthereumNonce {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RequestedHistoricalBitcoinHeaders) > 0 {
		for _, e := range m.RequestedHistoricalBitcoinHeaders {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AvsRewardsPool) > 0 {
		for _, s := range m.AvsRewardsPool {
			l = len(s)
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EthereumNonceRequested) > 0 {
		l = 0
		for _, e := range m.EthereumNonceRequested {
			l += sovGenesis(uint64(e))
		}
		n += 2 + sovGenesis(uint64(l)) + l
	}
	if len(m.SolanaNonceRequested) > 0 {
		l = 0
		for _, e := range m.SolanaNonceRequested {
			l += sovGenesis(uint64(e))
		}
		n += 2 + sovGenesis(uint64(l)) + l
	}
	if len(m.SolanaZentpAccountsRequested) > 0 {
		for _, s := range m.SolanaZentpAccountsRequested {
			l = len(s)
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SolanaAccountsRequested) > 0 {
		for _, s := range m.SolanaAccountsRequested {
			l = len(s)
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastCompletedZentpMintId != 0 {
		n += 2 + sovGenesis(uint64(m.LastCompletedZentpMintId))
	}
	return n
}

func (m *LastValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovGenesis(uint64(m.Power))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTotalPower", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTotalPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidatorPowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastValidatorPowers = append(m.LastValidatorPowers, LastValidatorPower{})
			if err := m.LastValidatorPowers[len(m.LastValidatorPowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorHV{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redelegations = append(m.Redelegations, Redelegation{})
			if err := m.Redelegations[len(m.Redelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exported = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HVParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HVParams == nil {
				m.HVParams = &HVParams{}
			}
			if err := m.HVParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetPrices = append(m.AssetPrices, &AssetData{})
			if err := m.AssetPrices[len(m.AssetPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidVeHeight", wireType)
			}
			m.LastValidVeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastValidVeHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashEvents = append(m.SlashEvents, SlashEvent{})
			if err := m.SlashEvents[len(m.SlashEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashEventCount", wireType)
			}
			m.SlashEventCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashEventCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationInfos = append(m.ValidationInfos, ValidationInfo{})
			if err := m.ValidationInfos[len(m.ValidationInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcBlockHeaders = append(m.BtcBlockHeaders, api.BTCBlockHeader{})
			if err := m.BtcBlockHeaders[len(m.BtcBlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsedSolanaNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUsedSolanaNonce = append(m.LastUsedSolanaNonce, SolanaNonce{})
			if err := m.LastUsedSolanaNonce[len(m.LastUsedSolanaNonce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackfillRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackfillRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsedEthereumNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUsedEthereumNonce = append(m.LastUsedEthereumNonce, types.NonceData{})
			if err := m.LastUsedEthereumNonce[len(m.LastUsedEthereumNonce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedHistoricalBitcoinHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedHistoricalBitcoinHeaders = append(m.RequestedHistoricalBitcoinHeaders, types.RequestedBitcoinHeaders{})
			if err := m.RequestedHistoricalBitcoinHeaders[len(m.RequestedHistoricalBitcoinHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsRewardsPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsRewardsPool = append(m.AvsRewardsPool, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EthereumNonceRequested = append(m.EthereumNonceRequested, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EthereumNonceRequested) == 0 {
					m.EthereumNonceRequested = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EthereumNonceRequested = append(m.EthereumNonceRequested, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumNonceRequested", wireType)
			}
		case 22:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SolanaNonceRequested = append(m.SolanaNonceRequested, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SolanaNonceRequested) == 0 {
					m.SolanaNonceRequested = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SolanaNonceRequested = append(m.SolanaNonceRequested, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaNonceRequested", wireType)
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaZentpAccountsRequested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SolanaZentpAccountsRequested = append(m.SolanaZentpAccountsRequested, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaAccountsRequested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SolanaAccountsRequested = append(m.SolanaAccountsRequested, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletedZentpMintId", wireType)
			}
			m.LastCompletedZentpMintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCompletedZentpMintId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
