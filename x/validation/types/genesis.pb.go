// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/validation/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	api "github.com/Zenrock-Foundation/zrchain/v6/sidecar/proto/api"
	types "github.com/Zenrock-Foundation/zrchain/v6/x/zenbtc/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the staking module's genesis state.
type GenesisState struct {
	// params defines all the parameters of related to deposit.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// last_total_power tracks the total amounts of bonded tokens recorded during
	// the previous end block.
	LastTotalPower cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=last_total_power,json=lastTotalPower,proto3,customtype=cosmossdk.io/math.Int" json:"last_total_power"`
	// last_validator_powers is a special index that provides a historical list
	// of the last-block's bonded validators.
	LastValidatorPowers []LastValidatorPower `protobuf:"bytes,3,rep,name=last_validator_powers,json=lastValidatorPowers,proto3" json:"last_validator_powers"`
	// validators defines the validator set at genesis.
	Validators []ValidatorHV `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators"`
	// delegations defines the delegations active at genesis.
	Delegations []Delegation `protobuf:"bytes,5,rep,name=delegations,proto3" json:"delegations"`
	// unbonding_delegations defines the unbonding delegations active at genesis.
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,6,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// redelegations defines the redelegations active at genesis.
	Redelegations []Redelegation `protobuf:"bytes,7,rep,name=redelegations,proto3" json:"redelegations"`
	// exported defines a bool to identify whether the chain dealing with exported
	// or initialized genesis.
	Exported bool `protobuf:"varint,8,opt,name=exported,proto3" json:"exported,omitempty"`
	// HVParams defines the hybrid validation parameters at genesis.
	HVParams HVParams `protobuf:"bytes,9,opt,name=HVParams,proto3" json:"HVParams"`
	// asset_prices defines the asset prices at genesis.
	AssetPrices map[int32]cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,rep,name=asset_prices,json=assetPrices,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"asset_prices" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// last_valid_ve_height defines the last valid ve height at genesis.
	LastValidVeHeight int64 `protobuf:"varint,11,opt,name=last_valid_ve_height,json=lastValidVeHeight,proto3" json:"last_valid_ve_height,omitempty"`
	// slash_events defines the slash events at genesis.
	SlashEvents map[uint64]SlashEvent `protobuf:"bytes,12,rep,name=slash_events,json=slashEvents,proto3" json:"slash_events" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// slash_event_count defines the slash event count at genesis.
	SlashEventCount uint64 `protobuf:"varint,13,opt,name=slash_event_count,json=slashEventCount,proto3" json:"slash_event_count,omitempty"`
	// validation_infos defines the validation infos at genesis.
	ValidationInfos map[int64]ValidationInfo `protobuf:"bytes,14,rep,name=validation_infos,json=validationInfos,proto3" json:"validation_infos" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// btc_block_headers defines the Bitcoin block headers at genesis.
	BtcBlockHeaders map[int64]api.BTCBlockHeader `protobuf:"bytes,15,rep,name=btc_block_headers,json=btcBlockHeaders,proto3" json:"btc_block_headers" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// last_used_solana_nonce defines the last used Solana nonce at genesis.
	LastUsedSolanaNonce map[uint64]SolanaNonce `protobuf:"bytes,16,rep,name=last_used_solana_nonce,json=lastUsedSolanaNonce,proto3" json:"last_used_solana_nonce" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// backfill_requests defines the backfill requests at genesis.
	BackfillRequest BackfillRequests `protobuf:"bytes,17,opt,name=backfill_request,json=backfillRequest,proto3" json:"backfill_request"`
	// last_used_ethereum_nonce defines the last used Ethereum nonce at genesis.
	LastUsedEthereumNonce map[uint64]types.NonceData `protobuf:"bytes,18,rep,name=last_used_ethereum_nonce,json=lastUsedEthereumNonce,proto3" json:"last_used_ethereum_nonce" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// requested_historical_bitcoin_headers defines the requested historical Bitcoin headers at genesis.
	RequestedHistoricalBitcoinHeaders types.RequestedBitcoinHeaders `protobuf:"bytes,19,opt,name=requested_historical_bitcoin_headers,json=requestedHistoricalBitcoinHeaders,proto3" json:"requested_historical_bitcoin_headers"`
	// avs_rewards_pool defines the AVS rewards pool at genesis.
	AvsRewardsPool map[string]cosmossdk_io_math.Int `protobuf:"bytes,20,rep,name=avs_rewards_pool,json=avsRewardsPool,proto3,customtype=cosmossdk.io/math.Int" json:"avs_rewards_pool" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ethereum_nonce_requested defines the Ethereum nonce requested at genesis.
	EthereumNonceRequested map[uint64]bool `protobuf:"bytes,21,rep,name=ethereum_nonce_requested,json=ethereumNonceRequested,proto3" json:"ethereum_nonce_requested,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// solana_nonce_requested defines the Solana nonce requested at genesis.
	SolanaNonceRequested map[uint64]bool `protobuf:"bytes,22,rep,name=solana_nonce_requested,json=solanaNonceRequested,proto3" json:"solana_nonce_requested,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// solana_zentp_accounts_requested defines the Solana Zentp accounts requested at genesis.
	SolanaZentpAccountsRequested map[string]bool `protobuf:"bytes,23,rep,name=solana_zentp_accounts_requested,json=solanaZentpAccountsRequested,proto3" json:"solana_zentp_accounts_requested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// solana_accounts_requested defines the Solana accounts requested at genesis.
	SolanaAccountsRequested map[string]bool `protobuf:"bytes,24,rep,name=solana_accounts_requested,json=solanaAccountsRequested,proto3" json:"solana_accounts_requested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// solana_dct_accounts_requested defines the Solana accounts requested for DCT assets at genesis.
	SolanaDctAccountsRequested map[string]bool `protobuf:"bytes,30,rep,name=solana_dct_accounts_requested,json=solanaDctAccountsRequested,proto3" json:"solana_dct_accounts_requested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// validator_mismatch_counts defines the validator mismatch counts at genesis.
	ValidatorMismatchCounts map[string]ValidatorMismatchCount `protobuf:"bytes,25,rep,name=validator_mismatch_counts,json=validatorMismatchCounts,proto3" json:"validator_mismatch_counts" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// last_completed_zentp_mint_id defines the last completed Zentp mint id at genesis.
	LastCompletedZentpMintId uint64 `protobuf:"varint,26,opt,name=last_completed_zentp_mint_id,json=lastCompletedZentpMintId,proto3" json:"last_completed_zentp_mint_id,omitempty"`
	// avs_delegations defines the AVS delegations at genesis.
	AvsDelegations map[string]cosmossdk_io_math.Int `protobuf:"bytes,27,rep,name=avs_delegations,json=avsDelegations,proto3,customtype=cosmossdk.io/math.Int" json:"avs_delegations" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// validator_delegations defines the validator delegations at genesis.
	ValidatorDelegations map[string]cosmossdk_io_math.Int `protobuf:"bytes,28,rep,name=validator_delegations,json=validatorDelegations,proto3,customtype=cosmossdk.io/math.Int" json:"validator_delegations" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// latest_btc_header_height defines the latest Bitcoin header height at genesis.
	LatestBtcHeaderHeight int64 `protobuf:"varint,29,opt,name=latest_btc_header_height,json=latestBtcHeaderHeight,proto3" json:"latest_btc_header_height,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c682c41018a13c0f, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetLastValidatorPowers() []LastValidatorPower {
	if m != nil {
		return m.LastValidatorPowers
	}
	return nil
}

func (m *GenesisState) GetValidators() []ValidatorHV {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GenesisState) GetDelegations() []Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *GenesisState) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *GenesisState) GetRedelegations() []Redelegation {
	if m != nil {
		return m.Redelegations
	}
	return nil
}

func (m *GenesisState) GetExported() bool {
	if m != nil {
		return m.Exported
	}
	return false
}

func (m *GenesisState) GetHVParams() HVParams {
	if m != nil {
		return m.HVParams
	}
	return HVParams{}
}

func (m *GenesisState) GetLastValidVeHeight() int64 {
	if m != nil {
		return m.LastValidVeHeight
	}
	return 0
}

func (m *GenesisState) GetSlashEvents() map[uint64]SlashEvent {
	if m != nil {
		return m.SlashEvents
	}
	return nil
}

func (m *GenesisState) GetSlashEventCount() uint64 {
	if m != nil {
		return m.SlashEventCount
	}
	return 0
}

func (m *GenesisState) GetValidationInfos() map[int64]ValidationInfo {
	if m != nil {
		return m.ValidationInfos
	}
	return nil
}

func (m *GenesisState) GetBtcBlockHeaders() map[int64]api.BTCBlockHeader {
	if m != nil {
		return m.BtcBlockHeaders
	}
	return nil
}

func (m *GenesisState) GetLastUsedSolanaNonce() map[uint64]SolanaNonce {
	if m != nil {
		return m.LastUsedSolanaNonce
	}
	return nil
}

func (m *GenesisState) GetBackfillRequest() BackfillRequests {
	if m != nil {
		return m.BackfillRequest
	}
	return BackfillRequests{}
}

func (m *GenesisState) GetLastUsedEthereumNonce() map[uint64]types.NonceData {
	if m != nil {
		return m.LastUsedEthereumNonce
	}
	return nil
}

func (m *GenesisState) GetRequestedHistoricalBitcoinHeaders() types.RequestedBitcoinHeaders {
	if m != nil {
		return m.RequestedHistoricalBitcoinHeaders
	}
	return types.RequestedBitcoinHeaders{}
}

func (m *GenesisState) GetEthereumNonceRequested() map[uint64]bool {
	if m != nil {
		return m.EthereumNonceRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaNonceRequested() map[uint64]bool {
	if m != nil {
		return m.SolanaNonceRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaZentpAccountsRequested() map[string]bool {
	if m != nil {
		return m.SolanaZentpAccountsRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaAccountsRequested() map[string]bool {
	if m != nil {
		return m.SolanaAccountsRequested
	}
	return nil
}

func (m *GenesisState) GetSolanaDctAccountsRequested() map[string]bool {
	if m != nil {
		return m.SolanaDctAccountsRequested
	}
	return nil
}

func (m *GenesisState) GetValidatorMismatchCounts() map[string]ValidatorMismatchCount {
	if m != nil {
		return m.ValidatorMismatchCounts
	}
	return nil
}

func (m *GenesisState) GetLastCompletedZentpMintId() uint64 {
	if m != nil {
		return m.LastCompletedZentpMintId
	}
	return 0
}

func (m *GenesisState) GetLatestBtcHeaderHeight() int64 {
	if m != nil {
		return m.LatestBtcHeaderHeight
	}
	return 0
}

// LastValidatorPower required for validator set update logic.
type LastValidatorPower struct {
	// address is the address of the validator.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// power defines the power of the validator.
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *LastValidatorPower) Reset()         { *m = LastValidatorPower{} }
func (m *LastValidatorPower) String() string { return proto.CompactTextString(m) }
func (*LastValidatorPower) ProtoMessage()    {}
func (*LastValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_c682c41018a13c0f, []int{1}
}
func (m *LastValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastValidatorPower.Merge(m, src)
}
func (m *LastValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *LastValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_LastValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_LastValidatorPower proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "zrchain.validation.GenesisState")
	proto.RegisterMapType((map[int32]cosmossdk_io_math.LegacyDec)(nil), "zrchain.validation.GenesisState.AssetPricesEntry")
	proto.RegisterMapType((map[string]cosmossdk_io_math.Int)(nil), "zrchain.validation.GenesisState.AvsDelegationsEntry")
	proto.RegisterMapType((map[string]cosmossdk_io_math.Int)(nil), "zrchain.validation.GenesisState.AvsRewardsPoolEntry")
	proto.RegisterMapType((map[int64]api.BTCBlockHeader)(nil), "zrchain.validation.GenesisState.BtcBlockHeadersEntry")
	proto.RegisterMapType((map[uint64]bool)(nil), "zrchain.validation.GenesisState.EthereumNonceRequestedEntry")
	proto.RegisterMapType((map[uint64]types.NonceData)(nil), "zrchain.validation.GenesisState.LastUsedEthereumNonceEntry")
	proto.RegisterMapType((map[uint64]SolanaNonce)(nil), "zrchain.validation.GenesisState.LastUsedSolanaNonceEntry")
	proto.RegisterMapType((map[uint64]SlashEvent)(nil), "zrchain.validation.GenesisState.SlashEventsEntry")
	proto.RegisterMapType((map[string]bool)(nil), "zrchain.validation.GenesisState.SolanaAccountsRequestedEntry")
	proto.RegisterMapType((map[string]bool)(nil), "zrchain.validation.GenesisState.SolanaDctAccountsRequestedEntry")
	proto.RegisterMapType((map[uint64]bool)(nil), "zrchain.validation.GenesisState.SolanaNonceRequestedEntry")
	proto.RegisterMapType((map[string]bool)(nil), "zrchain.validation.GenesisState.SolanaZentpAccountsRequestedEntry")
	proto.RegisterMapType((map[int64]ValidationInfo)(nil), "zrchain.validation.GenesisState.ValidationInfosEntry")
	proto.RegisterMapType((map[string]cosmossdk_io_math.Int)(nil), "zrchain.validation.GenesisState.ValidatorDelegationsEntry")
	proto.RegisterMapType((map[string]ValidatorMismatchCount)(nil), "zrchain.validation.GenesisState.ValidatorMismatchCountsEntry")
	proto.RegisterType((*LastValidatorPower)(nil), "zrchain.validation.LastValidatorPower")
}

func init() { proto.RegisterFile("zrchain/validation/genesis.proto", fileDescriptor_c682c41018a13c0f) }

var fileDescriptor_c682c41018a13c0f = []byte{
	// 1504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xc1, 0x6f, 0x13, 0xc7,
	0x17, 0xce, 0x12, 0x02, 0xc9, 0x24, 0x90, 0x64, 0x62, 0x87, 0xb5, 0x13, 0x6c, 0x13, 0xa1, 0xdf,
	0x2f, 0x45, 0xc2, 0x2e, 0x14, 0x10, 0x85, 0x82, 0x88, 0x93, 0x94, 0x84, 0x42, 0x9b, 0x3a, 0x90,
	0x4a, 0x39, 0x74, 0x35, 0xde, 0x1d, 0xec, 0x91, 0xd7, 0x3b, 0xee, 0xce, 0xd8, 0x10, 0xa4, 0xaa,
	0x95, 0xda, 0x43, 0x55, 0x55, 0x2a, 0x7f, 0x02, 0xbd, 0xf5, 0xd8, 0x03, 0x7f, 0x41, 0x4f, 0x1c,
	0x11, 0xa7, 0xaa, 0x07, 0x54, 0xc1, 0xa1, 0xfd, 0x33, 0xaa, 0x9d, 0x59, 0xef, 0xce, 0xc6, 0x13,
	0xdb, 0x69, 0x7b, 0x89, 0xb2, 0x9e, 0xef, 0x7d, 0xdf, 0xf7, 0x66, 0xdf, 0xbe, 0x79, 0xbb, 0xa0,
	0xf0, 0xc4, 0xb7, 0xeb, 0x88, 0x78, 0xa5, 0x0e, 0x72, 0x89, 0x83, 0x38, 0xa1, 0x5e, 0xa9, 0x86,
	0x3d, 0xcc, 0x08, 0x2b, 0xb6, 0x7c, 0xca, 0x29, 0x84, 0x21, 0xa2, 0x18, 0x23, 0xb2, 0xa9, 0x1a,
	0xad, 0x51, 0xb1, 0x5c, 0x0a, 0xfe, 0x93, 0xc8, 0xac, 0x8e, 0x8b, 0x71, 0xd4, 0x20, 0x5e, 0x2d,
	0x44, 0xe4, 0x75, 0x08, 0xea, 0x22, 0x0f, 0x85, 0x80, 0x05, 0x0d, 0x80, 0x3f, 0x0e, 0x17, 0xcf,
	0x69, 0x16, 0xeb, 0x7b, 0x55, 0x9f, 0x38, 0x56, 0xfc, 0x4b, 0x88, 0xcd, 0xd8, 0x94, 0x35, 0x29,
	0xb3, 0xa4, 0x49, 0x79, 0x11, 0x2e, 0xcd, 0xa2, 0x26, 0xf1, 0x68, 0x49, 0xfc, 0xed, 0xa2, 0x51,
	0x8b, 0x94, 0x18, 0x71, 0xb0, 0x8d, 0x7c, 0x8b, 0x61, 0xbf, 0x43, 0x6c, 0xdc, 0x5d, 0xea, 0x8a,
	0x3e, 0xc1, 0x5e, 0x95, 0xdb, 0xa5, 0x26, 0xf1, 0xb8, 0x5c, 0x5a, 0xfa, 0x75, 0x09, 0x4c, 0xdd,
	0x96, 0x7b, 0xb5, 0xcd, 0x11, 0xc7, 0xf0, 0x06, 0x38, 0xd6, 0x42, 0x3e, 0x6a, 0x32, 0xd3, 0x28,
	0x18, 0xcb, 0x93, 0x17, 0xb3, 0xc5, 0xde, 0xbd, 0x2b, 0x6e, 0x09, 0x44, 0x79, 0xe2, 0xc5, 0xeb,
	0xfc, 0xc8, 0xcf, 0x7f, 0xfe, 0x72, 0xce, 0xa8, 0x84, 0x41, 0x70, 0x17, 0xcc, 0xb8, 0x88, 0x71,
	0x8b, 0x53, 0x8e, 0x5c, 0xab, 0x45, 0x1f, 0x61, 0xdf, 0x3c, 0x52, 0x30, 0x96, 0xa7, 0xca, 0xef,
	0x06, 0xe0, 0xdf, 0x5f, 0xe7, 0xd3, 0x32, 0x11, 0xe6, 0x34, 0x8a, 0x84, 0x96, 0x9a, 0x88, 0xd7,
	0x8b, 0x9b, 0x1e, 0x7f, 0xf5, 0xfc, 0x3c, 0x08, 0x33, 0xdc, 0xf4, 0xb8, 0xe4, 0x3c, 0x19, 0x30,
	0xdd, 0x0f, 0x88, 0xb6, 0x02, 0x1e, 0x88, 0x41, 0x5a, 0x70, 0x87, 0x46, 0xa8, 0x2f, 0xf9, 0x99,
	0x39, 0x5a, 0x18, 0x5d, 0x9e, 0xbc, 0xf8, 0x3f, 0x9d, 0xd3, 0xbb, 0x88, 0xf1, 0x9d, 0x2e, 0x5e,
	0xd0, 0xa8, 0xae, 0xe7, 0xdc, 0x9e, 0x65, 0x06, 0xef, 0x00, 0x10, 0x29, 0x30, 0xf3, 0xa8, 0xe0,
	0xce, 0xeb, 0xb8, 0xa3, 0xc0, 0x8d, 0x1d, 0x95, 0x54, 0x89, 0x86, 0x1f, 0x81, 0x49, 0x07, 0xbb,
	0xb8, 0x26, 0x02, 0x98, 0x39, 0x26, 0xc8, 0x72, 0x3a, 0xb2, 0xb5, 0x08, 0xa6, 0x72, 0xa9, 0xd1,
	0xb0, 0x06, 0xd2, 0x6d, 0xaf, 0x4a, 0x3d, 0x87, 0x78, 0x35, 0x4b, 0xa5, 0x3d, 0x26, 0x68, 0xff,
	0xaf, 0xa3, 0x7d, 0xd0, 0x0d, 0xd0, 0xf3, 0xa7, 0xda, 0xbd, 0xeb, 0x0c, 0x7e, 0x0a, 0x4e, 0xf8,
	0x58, 0x15, 0x38, 0x2e, 0x04, 0x0a, 0x3a, 0x81, 0x8a, 0x02, 0x54, 0x99, 0x93, 0x0c, 0x30, 0x0b,
	0xc6, 0xf1, 0xe3, 0x16, 0xf5, 0x39, 0x76, 0xcc, 0xf1, 0x82, 0xb1, 0x3c, 0x5e, 0x89, 0xae, 0xe1,
	0x2a, 0x18, 0xdf, 0xd8, 0x91, 0x25, 0x65, 0x4e, 0x88, 0xa2, 0x5b, 0xd4, 0x29, 0x75, 0x31, 0xaa,
	0x4a, 0x14, 0x08, 0x7f, 0x30, 0xc0, 0x14, 0x62, 0x0c, 0x73, 0xab, 0xe5, 0x13, 0x1b, 0x33, 0x13,
	0x08, 0xcf, 0x17, 0x74, 0x4c, 0x6a, 0xc1, 0x17, 0x57, 0x82, 0xa0, 0x2d, 0x11, 0xb3, 0xee, 0x71,
	0x7f, 0xaf, 0x7c, 0x25, 0x2c, 0xd4, 0x85, 0xde, 0x42, 0xbd, 0x8b, 0x6b, 0xc8, 0xde, 0x5b, 0xc3,
	0xb6, 0x52, 0xae, 0x6b, 0xd8, 0x0e, 0xef, 0x15, 0x8a, 0x99, 0xe0, 0x15, 0x90, 0x8a, 0x6b, 0xd5,
	0xea, 0x60, 0xab, 0x8e, 0x49, 0xad, 0xce, 0xcd, 0xc9, 0x82, 0xb1, 0x3c, 0x5a, 0x1e, 0x93, 0x11,
	0xb3, 0x51, 0xf9, 0xed, 0xe0, 0x0d, 0xb1, 0x0e, 0x2d, 0x30, 0xc5, 0x5c, 0xc4, 0xea, 0x16, 0xee,
	0x60, 0x8f, 0x33, 0x73, 0x6a, 0xc8, 0x2c, 0xb6, 0x83, 0xa0, 0x75, 0x11, 0x23, 0xb3, 0x50, 0x8b,
	0x88, 0xc5, 0x8b, 0xf0, 0x02, 0x98, 0x55, 0x04, 0x2c, 0x9b, 0xb6, 0x3d, 0x6e, 0x9e, 0x28, 0x18,
	0xcb, 0x47, 0xbb, 0xae, 0xa6, 0x63, 0xf8, 0x6a, 0xb0, 0x0a, 0x1b, 0x60, 0x26, 0x96, 0xb5, 0x88,
	0xf7, 0x90, 0x32, 0xf3, 0xa4, 0xf0, 0x75, 0x79, 0xa0, 0xaf, 0x9d, 0xe8, 0xf7, 0xcd, 0x20, 0xae,
	0xc7, 0xdb, 0x74, 0x27, 0x09, 0x80, 0x2e, 0x98, 0xad, 0x72, 0xdb, 0xaa, 0xba, 0xd4, 0x6e, 0x58,
	0x75, 0x8c, 0x9c, 0xe0, 0x01, 0x9f, 0x1e, 0x52, 0xad, 0xcc, 0xed, 0x72, 0x10, 0xb8, 0x21, 0xe3,
	0x7a, 0xd5, 0xaa, 0x49, 0x00, 0xdc, 0x03, 0xf3, 0xe2, 0x36, 0xb5, 0x19, 0x76, 0x2c, 0xd9, 0xc5,
	0x2d, 0x8f, 0x7a, 0x36, 0x36, 0x67, 0x84, 0xe4, 0xfb, 0x03, 0x25, 0x83, 0x06, 0xf3, 0x80, 0x61,
	0x67, 0x5b, 0x04, 0x7f, 0x1c, 0xc4, 0xf6, 0xc8, 0x8a, 0x36, 0xb3, 0x0f, 0x14, 0x74, 0xca, 0x2a,
	0xb2, 0x1b, 0x0f, 0x89, 0xeb, 0x5a, 0x3e, 0xfe, 0xa2, 0x8d, 0x19, 0x37, 0x67, 0x45, 0xf5, 0x9f,
	0xd5, 0x89, 0x96, 0x43, 0x6c, 0x45, 0x42, 0x59, 0x32, 0xad, 0xe4, 0x22, 0xfc, 0x0a, 0x98, 0x71,
	0x5a, 0x98, 0xd7, 0xb1, 0x8f, 0xdb, 0xcd, 0x30, 0x31, 0x28, 0x12, 0xbb, 0x3e, 0x74, 0x62, 0xeb,
	0x61, 0xb8, 0x3e, 0xb5, 0xb4, 0xab, 0x83, 0xc1, 0x6f, 0x0c, 0x70, 0x36, 0x4c, 0x0a, 0x3b, 0x56,
	0x9d, 0x30, 0x4e, 0x7d, 0x62, 0x23, 0xd7, 0xaa, 0x12, 0x6e, 0x53, 0xe2, 0x45, 0x77, 0x76, 0x4e,
	0x64, 0x1c, 0xb7, 0x2e, 0x79, 0x42, 0x15, 0x2b, 0xdd, 0xd8, 0xb2, 0xc4, 0x87, 0xf7, 0x4b, 0x55,
	0x3e, 0x13, 0xf1, 0x6f, 0x44, 0xf4, 0x49, 0x34, 0x7c, 0x6a, 0x80, 0x19, 0xd4, 0x61, 0x96, 0x8f,
	0x1f, 0x21, 0xdf, 0x61, 0x56, 0x8b, 0x52, 0xd7, 0x4c, 0x89, 0xfc, 0x2f, 0x0d, 0xee, 0x0b, 0x1d,
	0x56, 0x91, 0x71, 0x5b, 0x94, 0xba, 0x32, 0xf1, 0x7f, 0x70, 0x86, 0xa1, 0x04, 0x0d, 0xfc, 0x12,
	0x98, 0xc9, 0xfb, 0x61, 0x45, 0x69, 0x98, 0x69, 0xe1, 0xec, 0x83, 0x81, 0xce, 0x12, 0x5b, 0x1d,
	0xed, 0x94, 0x74, 0x18, 0x3e, 0xc3, 0xf3, 0x58, 0x8b, 0x81, 0x8f, 0xc0, 0xbc, 0x5a, 0xe5, 0x8a,
	0xf8, 0xbc, 0x10, 0xbf, 0x36, 0xb8, 0xd1, 0xc4, 0x25, 0xac, 0x97, 0x4e, 0x31, 0x0d, 0x22, 0xb8,
	0x15, 0xf9, 0x50, 0xf9, 0x09, 0xf6, 0x78, 0xcb, 0x42, 0xb6, 0x68, 0x3d, 0x4c, 0xb1, 0x70, 0x4a,
	0x58, 0x28, 0x0f, 0x69, 0x61, 0x37, 0xa0, 0x59, 0x09, 0x59, 0xf4, 0x56, 0x16, 0x59, 0x1f, 0x24,
	0xfc, 0xda, 0x00, 0x99, 0xd0, 0x92, 0xc6, 0x8c, 0x29, 0xcc, 0xdc, 0x18, 0xd2, 0x4c, 0x7f, 0x1f,
	0xa7, 0x98, 0x1e, 0x04, 0xbf, 0x37, 0xc0, 0xe9, 0xd0, 0x82, 0x63, 0x73, 0x9d, 0x8d, 0x9c, 0xb0,
	0x71, 0x6b, 0x48, 0x1b, 0x6b, 0x36, 0xef, 0xef, 0x24, 0xcb, 0x0e, 0xc4, 0xc1, 0x6f, 0x0d, 0x90,
	0x89, 0x47, 0xab, 0x26, 0x61, 0x4d, 0xc4, 0xed, 0xba, 0x3c, 0x21, 0x98, 0x99, 0x19, 0x72, 0x3f,
	0xa2, 0xa1, 0xe8, 0x5e, 0x48, 0x20, 0xce, 0x90, 0xde, 0x56, 0x7c, 0xaa, 0xa3, 0x07, 0xc2, 0x75,
	0xb0, 0x28, 0x7a, 0x97, 0x4d, 0x9b, 0x2d, 0x17, 0x07, 0xed, 0x43, 0x16, 0x4c, 0x30, 0xb4, 0x5a,
	0xc4, 0x31, 0xb3, 0xea, 0x59, 0x25, 0xda, 0xdc, 0x6a, 0x17, 0x29, 0x6e, 0xf4, 0x3d, 0xe2, 0xf1,
	0x4d, 0x07, 0xfe, 0x68, 0x80, 0xe9, 0xe0, 0xd9, 0x57, 0xc7, 0x98, 0x85, 0xe1, 0x1f, 0x7d, 0x65,
	0x1c, 0xfa, 0x37, 0x8f, 0xbe, 0x3a, 0x55, 0xfd, 0x64, 0x80, 0x74, 0xbc, 0xbf, 0xaa, 0xaf, 0xc5,
	0x21, 0x9f, 0xbd, 0x68, 0x6f, 0xff, 0x03, 0x77, 0xa9, 0x8e, 0x86, 0x0c, 0xde, 0x0c, 0x0e, 0x0e,
	0x8e, 0x19, 0xb7, 0x82, 0x43, 0x58, 0x36, 0xe9, 0xee, 0xe8, 0x72, 0x5a, 0x1d, 0x5d, 0xd2, 0x12,
	0x56, 0xe6, 0xb6, 0x6c, 0xb6, 0x72, 0x7c, 0xc9, 0xde, 0x04, 0x33, 0xfb, 0xe7, 0x29, 0x38, 0x03,
	0x46, 0x1b, 0x78, 0x4f, 0xbc, 0x4e, 0x8c, 0x55, 0x82, 0x7f, 0x61, 0x0a, 0x8c, 0x75, 0x90, 0xdb,
	0xc6, 0xf2, 0xcd, 0xa0, 0x22, 0x2f, 0xae, 0x1d, 0xb9, 0x6a, 0x64, 0x3f, 0x07, 0x33, 0xfb, 0x27,
	0x19, 0x35, 0xfe, 0xa8, 0x8c, 0xbf, 0xa4, 0xc6, 0x1f, 0x30, 0x4f, 0xc7, 0x34, 0x2a, 0xff, 0x43,
	0x90, 0xd2, 0x4d, 0x24, 0xaa, 0xc6, 0xa8, 0xd4, 0xb8, 0x9a, 0xd4, 0x58, 0xea, 0xf3, 0x02, 0x10,
	0x52, 0xa9, 0x3a, 0x9f, 0x81, 0x94, 0x6e, 0x16, 0xd1, 0xe8, 0xbc, 0x93, 0xd4, 0x99, 0x2b, 0xa2,
	0x16, 0x29, 0x96, 0xef, 0xaf, 0x2a, 0xb1, 0x2a, 0x71, 0x0d, 0x98, 0x07, 0x4d, 0x1c, 0x9a, 0x8d,
	0xba, 0x9c, 0x24, 0xd7, 0xbe, 0xc5, 0xa8, 0x0d, 0x5d, 0x11, 0xb2, 0x41, 0xf6, 0xe0, 0x09, 0x40,
	0x23, 0x55, 0x4a, 0x4a, 0x65, 0xf6, 0x9f, 0xe8, 0x22, 0x78, 0x0d, 0x71, 0xa4, 0x8a, 0xac, 0x80,
	0x39, 0xcd, 0x31, 0xab, 0xb2, 0x4f, 0x0c, 0xaa, 0x98, 0x4d, 0xb0, 0xd0, 0xe7, 0x3c, 0xd4, 0x18,
	0x4d, 0x50, 0x8d, 0xab, 0x54, 0xb7, 0x41, 0xe6, 0xc0, 0xd3, 0xed, 0x50, 0x44, 0x9f, 0x80, 0x33,
	0x03, 0xcf, 0xa8, 0x41, 0x49, 0x26, 0x08, 0xef, 0x80, 0xc5, 0x7e, 0xe7, 0xcc, 0xa1, 0xb8, 0xee,
	0x81, 0xfc, 0x80, 0xc3, 0xe2, 0x50, 0x74, 0x1d, 0xb0, 0xd8, 0xaf, 0xe5, 0x6b, 0xb8, 0x6e, 0x25,
	0x2b, 0xe5, 0x5c, 0xdf, 0x57, 0xeb, 0x04, 0x65, 0x6f, 0xe9, 0xec, 0x6f, 0x84, 0x87, 0x2a, 0x9d,
	0xdb, 0x20, 0x73, 0x60, 0x47, 0x3d, 0x0c, 0xd1, 0x52, 0x1d, 0xc0, 0xde, 0xef, 0x0c, 0xf0, 0x22,
	0x38, 0x8e, 0x1c, 0xc7, 0xc7, 0x4c, 0x7e, 0x4a, 0x99, 0x28, 0x9b, 0xaf, 0x9e, 0x9f, 0x4f, 0x85,
	0x7d, 0x78, 0x45, 0xae, 0x6c, 0x73, 0x9f, 0x78, 0xb5, 0x4a, 0x17, 0x18, 0x68, 0xc4, 0xdf, 0x4c,
	0x46, 0x2b, 0xf2, 0xe2, 0xda, 0xf8, 0x77, 0xcf, 0xf2, 0x23, 0x7f, 0x3d, 0xcb, 0x8f, 0x94, 0x1f,
	0xbc, 0x78, 0x93, 0x33, 0x5e, 0xbe, 0xc9, 0x19, 0x7f, 0xbc, 0xc9, 0x19, 0x4f, 0xdf, 0xe6, 0x46,
	0x5e, 0xbe, 0xcd, 0x8d, 0xfc, 0xf6, 0x36, 0x37, 0xb2, 0x7b, 0xbd, 0x46, 0x78, 0xbd, 0x5d, 0x2d,
	0xda, 0xb4, 0x59, 0xda, 0xc5, 0x9e, 0x4f, 0xed, 0xc6, 0xf9, 0x0f, 0x69, 0xdb, 0x0b, 0xbf, 0x31,
	0x45, 0x9f, 0x9d, 0xae, 0x94, 0x1e, 0x27, 0x3e, 0x4c, 0xed, 0xb5, 0x30, 0xab, 0x1e, 0x13, 0x1f,
	0x83, 0xde, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xbe, 0xd1, 0xa8, 0x4a, 0x13, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SolanaDctAccountsRequested) > 0 {
		for k := range m.SolanaDctAccountsRequested {
			v := m.SolanaDctAccountsRequested[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.LatestBtcHeaderHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LatestBtcHeaderHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.ValidatorDelegations) > 0 {
		for k := range m.ValidatorDelegations {
			v := m.ValidatorDelegations[k]
			baseI := i
			{
				size := v.Size()
				i -= size
				if _, err := v.MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.AvsDelegations) > 0 {
		for k := range m.AvsDelegations {
			v := m.AvsDelegations[k]
			baseI := i
			{
				size := v.Size()
				i -= size
				if _, err := v.MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if m.LastCompletedZentpMintId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastCompletedZentpMintId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ValidatorMismatchCounts) > 0 {
		for k := range m.ValidatorMismatchCounts {
			v := m.ValidatorMismatchCounts[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.SolanaAccountsRequested) > 0 {
		for k := range m.SolanaAccountsRequested {
			v := m.SolanaAccountsRequested[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.SolanaZentpAccountsRequested) > 0 {
		for k := range m.SolanaZentpAccountsRequested {
			v := m.SolanaZentpAccountsRequested[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.SolanaNonceRequested) > 0 {
		for k := range m.SolanaNonceRequested {
			v := m.SolanaNonceRequested[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.EthereumNonceRequested) > 0 {
		for k := range m.EthereumNonceRequested {
			v := m.EthereumNonceRequested[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.AvsRewardsPool) > 0 {
		for k := range m.AvsRewardsPool {
			v := m.AvsRewardsPool[k]
			baseI := i
			{
				size := v.Size()
				i -= size
				if _, err := v.MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	{
		size, err := m.RequestedHistoricalBitcoinHeaders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if len(m.LastUsedEthereumNonce) > 0 {
		for k := range m.LastUsedEthereumNonce {
			v := m.LastUsedEthereumNonce[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.BackfillRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if len(m.LastUsedSolanaNonce) > 0 {
		for k := range m.LastUsedSolanaNonce {
			v := m.LastUsedSolanaNonce[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.BtcBlockHeaders) > 0 {
		for k := range m.BtcBlockHeaders {
			v := m.BtcBlockHeaders[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ValidationInfos) > 0 {
		for k := range m.ValidationInfos {
			v := m.ValidationInfos[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SlashEventCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SlashEventCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.SlashEvents) > 0 {
		for k := range m.SlashEvents {
			v := m.SlashEvents[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.LastValidVeHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastValidVeHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.AssetPrices) > 0 {
		for k := range m.AssetPrices {
			v := m.AssetPrices[k]
			baseI := i
			{
				size := v.Size()
				i -= size
				if _, err := v.MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.HVParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Exported {
		i--
		if m.Exported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Redelegations) > 0 {
		for iNdEx := len(m.Redelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Redelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LastValidatorPowers) > 0 {
		for iNdEx := len(m.LastValidatorPowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastValidatorPowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.LastTotalPower.Size()
		i -= size
		if _, err := m.LastTotalPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LastValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LastTotalPower.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.LastValidatorPowers) > 0 {
		for _, e := range m.LastValidatorPowers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Redelegations) > 0 {
		for _, e := range m.Redelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Exported {
		n += 2
	}
	l = m.HVParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AssetPrices) > 0 {
		for k, v := range m.AssetPrices {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovGenesis(uint64(l))
			mapEntrySize := 1 + sovGenesis(uint64(k)) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.LastValidVeHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LastValidVeHeight))
	}
	if len(m.SlashEvents) > 0 {
		for k, v := range m.SlashEvents {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.SlashEventCount != 0 {
		n += 1 + sovGenesis(uint64(m.SlashEventCount))
	}
	if len(m.ValidationInfos) > 0 {
		for k, v := range m.ValidationInfos {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.BtcBlockHeaders) > 0 {
		for k, v := range m.BtcBlockHeaders {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.LastUsedSolanaNonce) > 0 {
		for k, v := range m.LastUsedSolanaNonce {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	l = m.BackfillRequest.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.LastUsedEthereumNonce) > 0 {
		for k, v := range m.LastUsedEthereumNonce {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	l = m.RequestedHistoricalBitcoinHeaders.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.AvsRewardsPool) > 0 {
		for k, v := range m.AvsRewardsPool {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovGenesis(uint64(l))
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.EthereumNonceRequested) > 0 {
		for k, v := range m.EthereumNonceRequested {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + 1
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.SolanaNonceRequested) > 0 {
		for k, v := range m.SolanaNonceRequested {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + 1
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.SolanaZentpAccountsRequested) > 0 {
		for k, v := range m.SolanaZentpAccountsRequested {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.SolanaAccountsRequested) > 0 {
		for k, v := range m.SolanaAccountsRequested {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.ValidatorMismatchCounts) > 0 {
		for k, v := range m.ValidatorMismatchCounts {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.LastCompletedZentpMintId != 0 {
		n += 2 + sovGenesis(uint64(m.LastCompletedZentpMintId))
	}
	if len(m.AvsDelegations) > 0 {
		for k, v := range m.AvsDelegations {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovGenesis(uint64(l))
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.ValidatorDelegations) > 0 {
		for k, v := range m.ValidatorDelegations {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovGenesis(uint64(l))
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if m.LatestBtcHeaderHeight != 0 {
		n += 2 + sovGenesis(uint64(m.LatestBtcHeaderHeight))
	}
	if len(m.SolanaDctAccountsRequested) > 0 {
		for k, v := range m.SolanaDctAccountsRequested {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 2 + sovGenesis(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LastValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovGenesis(uint64(m.Power))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTotalPower", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTotalPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidatorPowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastValidatorPowers = append(m.LastValidatorPowers, LastValidatorPower{})
			if err := m.LastValidatorPowers[len(m.LastValidatorPowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorHV{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redelegations = append(m.Redelegations, Redelegation{})
			if err := m.Redelegations[len(m.Redelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exported = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HVParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HVParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetPrices == nil {
				m.AssetPrices = make(map[int32]cosmossdk_io_math.LegacyDec)
			}
			var mapkey int32
			var mapvalue1 cosmossdk_io_math.LegacyDec
			var mapvalue = &mapvalue1
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenesis
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postbytesIndex]); err != nil {
						return err
					}
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AssetPrices[mapkey] = ((cosmossdk_io_math.LegacyDec)(*mapvalue))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidVeHeight", wireType)
			}
			m.LastValidVeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastValidVeHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlashEvents == nil {
				m.SlashEvents = make(map[uint64]SlashEvent)
			}
			var mapkey uint64
			mapvalue := &SlashEvent{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SlashEvent{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SlashEvents[mapkey] = *mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashEventCount", wireType)
			}
			m.SlashEventCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashEventCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationInfos == nil {
				m.ValidationInfos = make(map[int64]ValidationInfo)
			}
			var mapkey int64
			mapvalue := &ValidationInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValidationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ValidationInfos[mapkey] = *mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcBlockHeaders == nil {
				m.BtcBlockHeaders = make(map[int64]api.BTCBlockHeader)
			}
			var mapkey int64
			mapvalue := &api.BTCBlockHeader{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &api.BTCBlockHeader{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BtcBlockHeaders[mapkey] = *mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsedSolanaNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUsedSolanaNonce == nil {
				m.LastUsedSolanaNonce = make(map[uint64]SolanaNonce)
			}
			var mapkey uint64
			mapvalue := &SolanaNonce{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SolanaNonce{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastUsedSolanaNonce[mapkey] = *mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackfillRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackfillRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsedEthereumNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUsedEthereumNonce == nil {
				m.LastUsedEthereumNonce = make(map[uint64]types.NonceData)
			}
			var mapkey uint64
			mapvalue := &types.NonceData{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.NonceData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastUsedEthereumNonce[mapkey] = *mapvalue
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedHistoricalBitcoinHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestedHistoricalBitcoinHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsRewardsPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvsRewardsPool == nil {
				m.AvsRewardsPool = make(map[string]cosmossdk_io_math.Int)
			}
			var mapkey string
			var mapvalue1 cosmossdk_io_math.Int
			var mapvalue = &mapvalue1
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenesis
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postbytesIndex]); err != nil {
						return err
					}
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AvsRewardsPool[mapkey] = ((cosmossdk_io_math.Int)(*mapvalue))
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumNonceRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EthereumNonceRequested == nil {
				m.EthereumNonceRequested = make(map[uint64]bool)
			}
			var mapkey uint64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EthereumNonceRequested[mapkey] = mapvalue
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaNonceRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SolanaNonceRequested == nil {
				m.SolanaNonceRequested = make(map[uint64]bool)
			}
			var mapkey uint64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SolanaNonceRequested[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaZentpAccountsRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SolanaZentpAccountsRequested == nil {
				m.SolanaZentpAccountsRequested = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SolanaZentpAccountsRequested[mapkey] = mapvalue
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaAccountsRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SolanaAccountsRequested == nil {
				m.SolanaAccountsRequested = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SolanaAccountsRequested[mapkey] = mapvalue
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorMismatchCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorMismatchCounts == nil {
				m.ValidatorMismatchCounts = make(map[string]ValidatorMismatchCount)
			}
			var mapkey string
			mapvalue := &ValidatorMismatchCount{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValidatorMismatchCount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ValidatorMismatchCounts[mapkey] = *mapvalue
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletedZentpMintId", wireType)
			}
			m.LastCompletedZentpMintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCompletedZentpMintId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvsDelegations == nil {
				m.AvsDelegations = make(map[string]cosmossdk_io_math.Int)
			}
			var mapkey string
			var mapvalue1 cosmossdk_io_math.Int
			var mapvalue = &mapvalue1
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenesis
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postbytesIndex]); err != nil {
						return err
					}
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AvsDelegations[mapkey] = ((cosmossdk_io_math.Int)(*mapvalue))
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorDelegations == nil {
				m.ValidatorDelegations = make(map[string]cosmossdk_io_math.Int)
			}
			var mapkey string
			var mapvalue1 cosmossdk_io_math.Int
			var mapvalue = &mapvalue1
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenesis
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postbytesIndex]); err != nil {
						return err
					}
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ValidatorDelegations[mapkey] = ((cosmossdk_io_math.Int)(*mapvalue))
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBtcHeaderHeight", wireType)
			}
			m.LatestBtcHeaderHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBtcHeaderHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaDctAccountsRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SolanaDctAccountsRequested == nil {
				m.SolanaDctAccountsRequested = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SolanaDctAccountsRequested[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
