// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/validation/asset_data.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Asset is an enum that represents the assets we store pricing for
type Asset int32

const (
	Asset_UNSPECIFIED Asset = 0
	Asset_ROCK        Asset = 1
	Asset_zenBTC      Asset = 2
	Asset_stETH       Asset = 3
)

var Asset_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ROCK",
	2: "zenBTC",
	3: "stETH",
}

var Asset_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ROCK":        1,
	"zenBTC":      2,
	"stETH":       3,
}

func (x Asset) String() string {
	return proto.EnumName(Asset_name, int32(x))
}

func (Asset) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10a8aa4adc807764, []int{0}
}

// AssetData is a struct that contains the price in USD + decimals of precision
// of an asset
type AssetData struct {
	Asset     Asset                       `protobuf:"varint,1,opt,name=asset,proto3,enum=zrchain.validation.Asset" json:"asset,omitempty"`
	PriceUSD  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=priceUSD,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"priceUSD"`
	Precision uint32                      `protobuf:"varint,3,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (m *AssetData) Reset()         { *m = AssetData{} }
func (m *AssetData) String() string { return proto.CompactTextString(m) }
func (*AssetData) ProtoMessage()    {}
func (*AssetData) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a8aa4adc807764, []int{0}
}
func (m *AssetData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetData.Merge(m, src)
}
func (m *AssetData) XXX_Size() int {
	return m.Size()
}
func (m *AssetData) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetData.DiscardUnknown(m)
}

var xxx_messageInfo_AssetData proto.InternalMessageInfo

func (m *AssetData) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset_UNSPECIFIED
}

func (m *AssetData) GetPrecision() uint32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func init() {
	proto.RegisterEnum("zrchain.validation.Asset", Asset_name, Asset_value)
	proto.RegisterType((*AssetData)(nil), "zrchain.validation.AssetData")
}

func init() {
	proto.RegisterFile("zrchain/validation/asset_data.proto", fileDescriptor_10a8aa4adc807764)
}

var fileDescriptor_10a8aa4adc807764 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4b, 0x02, 0x41,
	0x18, 0xc6, 0x77, 0x34, 0xc5, 0x9d, 0xa8, 0x96, 0xa1, 0x83, 0x5a, 0xac, 0x52, 0x17, 0x09, 0xdc,
	0xa1, 0xa2, 0x43, 0x74, 0x4a, 0x57, 0x49, 0xfa, 0xcb, 0xaa, 0x17, 0x2f, 0x32, 0x8e, 0xc3, 0x3a,
	0x98, 0x3b, 0xcb, 0xce, 0x18, 0xe9, 0xa7, 0xe8, 0x6b, 0x74, 0xef, 0x43, 0x78, 0x94, 0x4e, 0xd1,
	0x41, 0x42, 0xbf, 0x48, 0xb8, 0x2b, 0x1a, 0x74, 0x9b, 0x79, 0xf8, 0xf1, 0xfe, 0x5e, 0xde, 0x07,
	0x1e, 0x8f, 0x03, 0xda, 0x23, 0xdc, 0xc3, 0x2f, 0xe4, 0x99, 0x77, 0x89, 0xe2, 0xc2, 0xc3, 0x44,
	0x4a, 0xa6, 0xda, 0x5d, 0xa2, 0x88, 0xe5, 0x07, 0x42, 0x09, 0x84, 0x56, 0x90, 0xb5, 0x81, 0xb2,
	0x19, 0x2a, 0xe4, 0x40, 0xc8, 0x76, 0x48, 0xe0, 0xe8, 0x13, 0xe1, 0xd9, 0x7d, 0x57, 0xb8, 0x22,
	0xca, 0x97, 0xaf, 0x28, 0x3d, 0x7a, 0x07, 0x50, 0xbf, 0x5e, 0x4e, 0xb6, 0x89, 0x22, 0x08, 0xc3,
	0x44, 0xa8, 0x49, 0x83, 0x3c, 0x28, 0xec, 0x9e, 0x65, 0xac, 0xff, 0x0a, 0x2b, 0xa4, 0x9d, 0x88,
	0x43, 0xf7, 0x30, 0xe5, 0x07, 0x9c, 0xb2, 0x66, 0xdd, 0x4e, 0xc7, 0xf2, 0xa0, 0xa0, 0x97, 0x4e,
	0x27, 0xb3, 0x9c, 0xf6, 0x3d, 0xcb, 0x1d, 0x44, 0x72, 0xd9, 0xed, 0x5b, 0x5c, 0xe0, 0x01, 0x51,
	0x3d, 0xeb, 0x8e, 0xb9, 0x84, 0x8e, 0x6c, 0x46, 0x3f, 0x3f, 0x8a, 0x70, 0xb5, 0x9b, 0xcd, 0xa8,
	0xb3, 0x1e, 0x81, 0x0e, 0xa1, 0xee, 0x07, 0x8c, 0x72, 0xc9, 0x85, 0x97, 0x8e, 0xe7, 0x41, 0x61,
	0xc7, 0xd9, 0x04, 0x27, 0x97, 0x30, 0x11, 0xca, 0xd1, 0x1e, 0xdc, 0x6e, 0x3e, 0xd4, 0x9f, 0x2a,
	0xe5, 0x5a, 0xb5, 0x56, 0xb1, 0x0d, 0x0d, 0xa5, 0xe0, 0x96, 0xf3, 0x58, 0xbe, 0x35, 0x00, 0x82,
	0x30, 0x39, 0x66, 0x5e, 0xa9, 0x51, 0x36, 0x62, 0x48, 0x87, 0x09, 0xa9, 0x2a, 0x8d, 0x1b, 0x23,
	0x5e, 0x6a, 0x4e, 0xe6, 0x26, 0x98, 0xce, 0x4d, 0xf0, 0x33, 0x37, 0xc1, 0xdb, 0xc2, 0xd4, 0xa6,
	0x0b, 0x53, 0xfb, 0x5a, 0x98, 0x5a, 0xeb, 0xca, 0xe5, 0xaa, 0x37, 0xec, 0x58, 0x54, 0x0c, 0x70,
	0x8b, 0x79, 0x81, 0xa0, 0xfd, 0x62, 0x55, 0x0c, 0xbd, 0xd5, 0xd5, 0xd7, 0x45, 0x5c, 0xe0, 0xd7,
	0xbf, 0x6d, 0xa8, 0x91, 0xcf, 0x64, 0x27, 0x19, 0x1e, 0xf1, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0xb6, 0x5d, 0x0f, 0xb0, 0x01, 0x00, 0x00,
}

func (m *AssetData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Precision != 0 {
		i = encodeVarintAssetData(dAtA, i, uint64(m.Precision))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.PriceUSD.Size()
		i -= size
		if _, err := m.PriceUSD.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAssetData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Asset != 0 {
		i = encodeVarintAssetData(dAtA, i, uint64(m.Asset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAssetData(dAtA []byte, offset int, v uint64) int {
	offset -= sovAssetData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AssetData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != 0 {
		n += 1 + sovAssetData(uint64(m.Asset))
	}
	l = m.PriceUSD.Size()
	n += 1 + l + sovAssetData(uint64(l))
	if m.Precision != 0 {
		n += 1 + sovAssetData(uint64(m.Precision))
	}
	return n
}

func sovAssetData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAssetData(x uint64) (n int) {
	return sovAssetData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AssetData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssetData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			m.Asset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset |= Asset(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUSD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssetData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssetData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceUSD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precision", wireType)
			}
			m.Precision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Precision |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssetData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAssetData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAssetData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAssetData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAssetData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAssetData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAssetData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAssetData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAssetData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAssetData = fmt.Errorf("proto: unexpected end of group")
)
